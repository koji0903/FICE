#!/bin/sh
#\
exec tclsh "$0" "$@"
puts "###====================================================================###" 
puts "###   PROGRAM NAME : utility2 (for Topmaker)                           ###" 
puts "###   Version      : v1.6.2 RMS Custom (2011/02/04)                    ###" 
puts "###   Input file   : connection file                                   ###" 
puts "###   Output file  : connect.para                                      ###" 
puts "###====================================================================###" 


#############################################
# SUBFUNCTION to get NET and PORT invalueion 
#############################################

### expand NET value from binary to decimal
proc expand_value_bintodec {value_string} {
   set tmp_list1 [split $value_string ']
   set range [lindex $tmp_list1 0]
   set string1 [lindex $tmp_list1 1]
   set bit_range [string length $string1]
   set return_list {u}
   for {set i 1} {$i < $bit_range} {incr i} {
      set char_value [string index $string1 $i]
      if {($char_value == 1) || ($char_value == 0) } {
         lappend return_list $char_value
      } elseif {$char_value == "_"} {
         # ignore _ string
      } else {
         puts "\*\*\*\[ERROR\]: Wrong value $value_string"
         puts "Only binary radix is available"
         exit 8
         
      }
   }
   return  $return_list
}

### subfunction : change NET value from binary to decimal
proc bintodec {binary_string} { 
   set list_value [expand_value_bintodec $binary_string]
   if { [llength $list_value] == 1 }  {
      set decimal $binary_string
   } else {
      set decimal 0
      set list_num [llength $list_value]
      puts $list_num
      for {set i  1} {$i < $list_num} {incr i} {
         set element_value [lindex $list_value $i]
         set tmp1 $decimal
         set decimal  [expr ( $tmp1 + [expr  ($element_value * pow(2,($list_num - $i - 1)))]) ] 
      }
   }
   set list_tmp1 [split $decimal .]
   return [lindex $list_tmp1 0]
}

### expand signal [] ()
proc expand_signal {bus_signal} {
   if {([regexp {\[} $bus_signal]) && ([regexp {\:} $bus_signal])  } {
      set list_tmp1 [split $bus_signal \]]
      set list_tmp3 [split [lindex $list_tmp1 0] \[ ]
      set list_tmp2 [split [lindex $list_tmp3 1] : ]
      set string3  [lindex $list_tmp2 0]
      set first_num [bintodec $string3]
      set string4 [lindex $list_tmp2 1]
      set last_num [bintodec $string4]
      set list_expand {}
###############################################################
# change signal-expand function for BUSNET by koji-h 
###############################################################
      set list_expand [lindex $list_tmp3 0]-Attr:BUSNET    
###      if {$last_num > $first_num} {
###         for {set i $first_num} { $i <= $last_num} {incr i} {
###             lappend list_expand "[lindex $list_tmp3 0]\[$i\]"
###         }
###      } else {
###         for {set i $first_num} { $i >= $last_num} {incr i -1} {
###              
###             lappend list_expand "[lindex $list_tmp3 0]\[$i\]"
###         }
###      }
   } elseif {([regexp {\(} $bus_signal]) &&  ([regexp {\:}  $bus_signal]) == 1} { 
         set list_tmp1 [split $bus_signal \)]
         set list_tmp3 [split [lindex $list_tmp1 0] \( ]
         set list_tmp2 [split [lindex $list_tmp3 1] : ]
         set string3  [lindex $list_tmp2 0]
         set first_num [bintodec $string3]
         set string4 [lindex $list_tmp2 1]
         set last_num [bintodec $string4]
         set list_expand {}
###############################################################
# change signal-expand function for BUSNET by koji-h 
###############################################################
         set list_expand [lindex $list_tmp3 0]-Attr:BUSNET   
###         if {$last_num > $first_num} {
###            for {set i $first_num} { $i <= $last_num} {incr i} {
###                lappend list_expand "[lindex $list_tmp3 0]$i"
###            }
###         } else {
###            for {set i $first_num} { $i >= $last_num} {incr i -1} {
###                 
###                lappend list_expand "[lindex $list_tmp3 0]$i"
###            }
###         }
   } elseif  {([regexp {\(} $bus_signal]) &&  ([regexp {\,}  $bus_signal]) == 1} {
            set list_tmp1 [split $bus_signal \)]
            set list_tmp3 [split [lindex $list_tmp1 0] \( ]
            set list_tmp2 [split [lindex $list_tmp3 1] , ]
            set list_expand {}
###############################################################
# change signal-expand function for BUSNET by koji-h 
###############################################################
            set list_expand [lindex $list_tmp3 0]-Attr:BUSNET
###            foreach element $list_tmp2 {
###                   lappend list_expand "[lindex $list_tmp3 0]$element"
###            }
   } else {
      regsub {\(} $bus_signal "" bus_signal
      regsub {\)} $bus_signal "" bus_signal
      lappend list_expand $bus_signal
   }
   return $list_expand
}


### expand fixed net value  1/0/'b0/'b1/1'b1/1'b0
proc expand_value {value_string inst_name} {
   set return_list {}
   if { [regexp {\'} $value_string] != 1} {
      set bit_range [string length $value_string]
      for {set i 0} {$i < $bit_range} {incr i} {
         if {([string index $value_string $i] != 1 ) && ([string index $value_string $i] != 0) } {
            puts "\*\*\*\[ERROR\]: Wrong value ($value_string) at INSTANCE $inst_name"
            puts "Only binary radix is available"
            exit 8
         } 
      }
      if {$bit_range == 1} {
         set return_list {expand}
         lappend return_list $value_string
      } else {
         lappend return_list {unexpand}
         for {set i 0} {$i < $bit_range} {incr i} {
             lappend return_list [string index $value_string $i]
         }
      }
   } else {
      set tmp_list1 [split $value_string ']
      set range [lindex $tmp_list1 0]
      set string1 [lindex $tmp_list1 1]
      set bit_range [string length $string1]
      if {[string index $string1 0] != "b" } {
         puts "\*\*\*\[ERROR\]: Wrong value ($value_string) at INSTANCE $inst_name"
         puts "Only binary radix is available"
         exit 8
      } else {
         if {($range == "") || ($range == 1) } {
            if { [string length $string1] != 2 } {
               puts "\*\*\*\[ERROR\]: Wrong value ($value_string) at INSTANCE $inst_name"
               puts "Only binary radix is available"
               exit 8
            } elseif {([string index $string1 1] == 1) || ([string index $string1 1] == 0)} {
               lappend return_list {expand}  
               lappend return_list [string index $string1 1]
            } else {
               puts "\*\*\*\[ERROR\]: Wrong value ($value_string) at $inst_name"
               puts "Only binary radix is available"
               exit 8
            }
         } else {
            if { $bit_range - $range > 1  } {
               puts "\*\*\*\[ERROR\]: Size and bit width is unmatch ($value_string) at INSTANCE $inst_name"
               exit 8
            } elseif {$bit_range - $range == 1} {
               lappend return_list {unexpand}
               for {set i 1} {$i < $bit_range} {incr i} {
                   lappend return_list [string index $string1 $i]
               }
            } else {
               lappend return_list {unexpand}
               for {set i 0} {$i < ($range - $bit_range + 1 )} {incr i} {
                   lappend return_list {0} 
               }
               for {set i 1} {$i < $bit_range} {incr i} {
                   lappend return_list [string index $string1 $i]
               }
            }
         }
      }
   }
   return  $return_list
   puts "$return_list"
}

##############################################
# READ INPUT FILE : connection file
##############################################

proc std_file_proc {input_file} {
   if {[catch {open "$input_file" r} infile]} {
      puts "Error : $input_file is not opened for reading."
      exit 8
   }
   puts "Reading input file : $input_file"
   set number_con 0
   set find_comment 0
   while {[gets $infile line] >= 0} {
      regsub {\/\/.*} $line "" line 
      foreach element $line {
         switch $element {
            "CONNECT" {
               incr number_con
            }
            default {
                   # ignore others line
            }
         }
      }
   }
   close $infile
   set list_file {}
   set list_mod1 {}
   set number_con2 0
   if {[catch {open "$input_file" r} infile1]} {
      puts "Error : $input_file is not opened for reading."
      exit 8
   }
   while {[gets $infile1 line1] >= 0} {
      regsub {\/\/.*} $line1 "" line1 
      foreach name1  $line1 {
         switch $name1 {
            "MODULE" {
               lappend list_file $list_mod1
               set list_mod1 $line1
            }
            "INSTANCE" {
               lappend list_mod1 $line1   
            }
            "CONNECT" {
               lappend list_mod1 $line1   
               incr number_con2
               if {$number_con2 == $number_con} {
                   lappend list_file $list_mod1
               } else {
               }
            }
            default {
            }
         }
      } 
   }
   close $infile1
   return $list_file
}
### end read input file

### get net list
proc get_net_list {module} {
set net_list {}
   for {set j 0} {$j < [llength $module]} {incr j} {
      if {[regexp {CONNECT} [lindex $module $j]]} {
         set connect_list [lindex $module $j]
         set net_temp [lindex $connect_list 2]
         set list_net_expand [expand_signal $net_temp]
         foreach a $list_net_expand {
            lappend  net_list $a
         }
      }
   }
   return $net_list
}

proc help {} { 
   puts "---------------------------------------------------------------------------------"
   puts "NAME  : utility2"
   puts "USAGE : utility2 \[OPTION\] -con <input file> -out <connect.para> "
   puts "\[OPTION\]  : -PU_CELL <cell name> "
   puts "          : -PD_CELL <cell_name> "
   puts "(Example) : utility2 -PU_CELL aaa -PD_CELL bbb -con connection_file -out connect.para"
   puts "---------------------------------------------------------------------------------"
}

proc get_all_arg {arglist} {
   global argtbl
   global pu_cell_list
   global pd_cell_list
   global con_file
   global out_file  

   set option ""
####Print all Arguments to the screen
   if {[llength $arglist] == 0 } {
      puts "\*\*\*\[ERROR\] : argument is empty"
      help 
      exit 8
   } elseif {[expr [llength $arglist] % 2] != 0 } {
      puts "\*\*\*\[ERROR\] : argument must be even"
      help 
      exit 8
   } elseif {[lsearch  $arglist "-con"] == -1} {
      puts "\*\*\*\[ERROR\] : There is no option -con <input_file>"
      help
      exit 8
   } elseif {[lsearch  $arglist "-out"] == -1} {
      puts "\*\*\*\[ERROR\] : There is no option -out <connect.para>"
      help
      exit 8
   } else {
      foreach var $arglist {
         switch -- $var {
            -PU_CELL {
              set option $var
            }
            -PD_CELL {
              set option $var 
            }
            -con {
              set option $var 
            }
            -out {
              set option $var
            }
            default {
               if {$var != ""} {
                  if {$option == "-PU_CELL"} {
                     lappend pu_cell_list $var
                  } elseif {$option == "-PD_CELL"} {
                     lappend pd_cell_list $var
                  } elseif {$option == "-con"} {
                     lappend con_file $var
                  } elseif {$option == "-out"} {
                     lappend out_file $var
                  } else {
                     puts "\*\*\*\[ERROR\]: unrecognized argument is found $var " 
                     help 
                     exit 8
                  }
                  set option ""
               } 
            }
         }
      }
   }
}

proc port_net_compare {inst_name port_list net_list} {
   set port_size [llength $port_list]
   set net_size  [llength $net_list]
   if {$port_size != $net_size} {
      puts "\*\*\*\[ERROR\]: NET bus size is different from PORT at INSTANCE $inst_name"
      exit 8
   }
}
##############################################
# MAIN PROCESS (START)
##############################################

### variable definition
set pu_cell_list ""
set pd_cell_list ""
set con_file ""
set out_file ""
set connect_list {}
set pu_net_list {}
set pd_net_list {}
set PU_flag_fix 0
set PD_flag_fix 0
set flag_pu_cell 0
set flag_pd_cell 0
set pu_net_compare 1
set pd_net_compare 1
set pu_fix_value 1
set pd_fix_value 1


#array set argtbl $argv
################################
# READ ALL OPTIONS 
#################################

if {$argc > 0} {puts "The arguments are: $argv" }
get_all_arg $argv
array set argtbl $argv

################################
# OPEN INPUT FILE 
#################################

set std_file [std_file_proc $argtbl(-con)]

################################
# OPEN OUTPUT FILE 
#################################

if {[catch {open "$argtbl(-out)" w} outfile]} {
   puts "\*\*\*\[ERROR\] :  $argtbl(-out) is not opened for reading."
   exit 8
}

 puts $outfile "INCLUDE_FILE:"

################################
# CHECK PU/PD_CELL OPTIONS 
#################################

for {set i 0} {$i < [llength pu_cell_list]} {incr i} {
   if {[lindex $pu_cell_list $i] == ""} {
      puts "PU_CELL is no option"
      set flag_pu_cell 0
   } else {
      set flag_pu_cell 1
   }
}
for {set i 0} {$i < [llength pd_cell_list]} {incr i} {
   if {[lindex $pd_cell_list $i] == ""} {
      puts "PD_CELL is no option"
      set flag_pd_cell 0
   } else {
      set flag_pd_cell 1
   }
}
   #puts "pu_list1 : @@ $pu_cell_list"
   #puts "pd_list1 : @@ $pd_cell_list"
################################
# GET PU/PD_CELL LIST
#################################
for {set i 1} {$i < [llength $std_file]} {incr i} {
   set line [lindex $std_file $i]
   if {$flag_pu_cell == 1} {
      #puts "[lindex $line 1]"
      if {[lsearch $pu_cell_list [lindex $line 1]] != -1} {
         set PU_CELL 1
      } else {
         set PU_CELL 0
      } 
   } else {
      set PU_CELL 0
      set pu_cell_list ""
   }
   if {$flag_pd_cell == 1} {
      #puts "[lindex $line 1]"
      #puts "$pd_cell_list"
      if {[lsearch $pd_cell_list [lindex $line 1]] != -1} {
         set PD_CELL 1
      } else {
         set PD_CELL 0
      }

   } else {
      set PD_CELL 0
      set pd_cell_list ""
   }
### get NET value for PU/PD cell
   if {$PU_CELL == 1} {
      set pu_net_list_temp [get_net_list $line]
      foreach a $pu_net_list_temp {
         lappend pu_net_list $a
      }
    }
    if {$PD_CELL == 1} {
      set pd_net_list_temp [get_net_list $line]
      foreach a $pd_net_list_temp {
       lappend pd_net_list $a
      }
    }
}
for {set i 1} {$i < [llength $std_file]} {incr i} {
   set line [lindex $std_file $i]
   set pu_cell_match [regexp [lindex $line 1] $pu_cell_list]
   set pd_cell_match [regexp [lindex $line 1] $pd_cell_list]
   if {( $pu_cell_match == 1 ) || ( $pd_cell_match == 1 ) } {
   } else {
      #puts "$line"

##########################################
# GET (PORT,NET) value for the other cells
##########################################
      for {set k 0} {$k < [llength $line]} {incr k} {
         set  new_net_list {}
         set  port_list {}
         if {[regexp {INSTANCE} [lindex $line $k]]} {
            set inst_temp [lindex $line $k]
            set inst_name [lindex $inst_temp 1]
         }
         if {[regexp {CONNECT} [lindex $line $k]]} {
            set remain_connect [lindex $line $k]
            set NET [lindex $remain_connect 2]
            set PORT_NAME [lindex $remain_connect 1] 
			set list_port_expand [expand_signal $PORT_NAME]
            foreach a $list_port_expand {
               lappend  port_list $a
            }
            if  {([regexp {\'} $NET] == 1) || ($NET == 1) || ($NET == 0)} {
               set fix_net_value [expand_value $NET $inst_name]
               set list_port_expand [expand_signal $PORT_NAME]
               set size  [llength $list_port_expand]
               if {$size == 1} {
                  lappend new_net_list [lindex $fix_net_value 1]
               } else {
                  if {[lindex $fix_net_value 0] == "expand"} {
                     for {set s 0} {$s < $size}  {incr s}  {
                        lappend new_net_list [lindex $fix_net_value 1]
                     }
                  } else {
                     for {set b 1} {$b < [llength $fix_net_value]} {incr b} {
                        lappend new_net_list [lindex $fix_net_value $b]
                     }
                  }
               }
            } else {
               set new_list_net_expand [expand_signal $NET]
               foreach a $new_list_net_expand {
                  lappend  new_net_list $a
               }
            } 
            port_net_compare $inst_name $port_list $new_net_list
         }
####################################
# PRINT TO OUTPUT FILE (connect.para)
####################################
###-- get net name and por name for 1 module
         for {set b 0} {$b < [llength $new_net_list]} {incr b} {
            set pu_fix_value    [string compare [lindex $new_net_list $b] 1 ]
            if { $pu_fix_value == 0} {
              
            } else {
               for {set a 0} {$a < [llength $pu_net_list]} {incr a} {
                  set pu_net_compare  [string compare [lindex $new_net_list $b] [lindex $pu_net_list $a] ]
                  if {$pu_net_compare == 0}  {
                     break
                  }
               }
            }
            set pd_fix_value    [string compare [lindex $new_net_list $b] 0 ]
            if { $pd_fix_value == 0} {
             
            } else {
               for {set a 0} {$a < [llength $pd_net_list]} {incr a} {
                  set pd_net_compare  [string compare [lindex $new_net_list $b] [lindex $pd_net_list $a] ]
                  if {$pd_net_compare == 0}  {
                     break
                  }
               }
            }
            if {$pu_net_compare == 0 || $pd_net_compare == 0 || $pu_fix_value == 0 || $pd_fix_value == 0} {
               if {$pu_net_compare == 0 || $pu_fix_value == 0 } {
                  puts  "PULLUP: $inst_name [lindex $port_list $b]"
                  puts $outfile  "PULLUP: $inst_name [lindex $port_list $b]"
               } elseif {$pd_net_compare == 0 || $pd_fix_value == 0} {
                  puts  "PULLDOWN: $inst_name [lindex $port_list $b]"
                  puts $outfile "PULLDOWN: $inst_name [lindex $port_list $b]"
               } 
            } else {
					if {[lindex [split $port_list \-] 1] == "Attr:BUSNET"} {
							puts "BUSNET: $inst_name [lindex [split $port_list \-] $b] [lindex [split $new_net_list \-] $b]" 
							puts $outfile "BUSNET: $inst_name [lindex [split $port_list \-] $b] [lindex [split $new_net_list \-] $b]" 
						} else {
							puts "NET: $inst_name [lindex $port_list $b] [lindex $new_net_list $b]" 
							puts $outfile "NET: $inst_name [lindex $port_list $b] [lindex $new_net_list $b]" 
						}
            }  
         }
      }
   }
}
puts $outfile "END_INCLUDE_FILE:"
##############################################
# MAIN PROCESS (END)
##############################################
