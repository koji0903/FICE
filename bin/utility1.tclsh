#!/bin/sh
#\
exec tclsh "$0" "$@"
puts "======================================================"
puts "# PROGRAM : UTILITY 1                                #"
puts "# Function: Convert from Module file to Parts.para   #"
puts "# Author: Hoang Ngoc Hoang                           #"
puts "# Created Date: 21.Jan.2011 (version 1.0)            #"
puts "# Updated Date: 25.Jan.2011 (version 1.1)            #"
puts "# Updated Date: 27.Jan.2011 (version 1.2)            #"
puts "# Updated Date: 28.Jan.2011 (version 1.3)            #"
puts "# Updated Date: 28.Jan.2011 (version 1.4)            #"
puts "======================================================"

###Get information about input
global pu_cell_list    
global pd_cell_list
global rtl_path
global mod_file
global out_file
global hierlabel
global status

global flag_pu
global flag_pd

set pu_cell_list ""
set pd_cell_list ""
set rtl_path     ""
set mod_file     ""
set out_file     ""
set hierlabel    ""
set status       0

set flag_pu      0
set flag_pd      0
##################################################################
proc Utility_1 {arglist} {
  puts "................Start UTILITY 1:"
  if {[llength $arglist] == 0} {
    puts "\[ERROR\] : No Arguments for COMMAND"
    command_format
    set status 8
    puts "====> Status : $status"
    exit
  } elseif {[llength $arglist] < 8} {
    set status 8
    #puts "\[ERROR\] \[1000\]: Lack arguments for COMMAND"
    puts "\[ERROR\] : Lack arguments for COMMAND"
    command_format
    puts "====> Status : $status"
    exit
  }
  read_arglist $arglist
  check_argument 
  read_module_file 

  puts "...End UTILITY 1!"
}
##################################################################
#####Read all arguments in Run Command of Utility 1
proc read_arglist {arglist} {
 global pu_cell_list
 global pd_cell_list
 global rtl_path
 global mod_file
 global out_file
 global hierlabel  
 global status

 global flag_pu
 global flag_pd

 set nu  1
 set option ""
 ####Print all Arguments to the screen
 foreach  para $arglist {
  puts "... Argument $nu : $para "
  incr nu
 }
  
 foreach var $arglist {
  switch -- $var {
    -PU_CELL {
      #set option -PU_CELL
      set option $var
      set flag_pu 1
      if {$flag_pd == 1} {
        puts "\[ERROR\] : lack corresponding PD_CELL arguments!"
        command_format
        set status 8
        puts "====> Status : $status"
        exit
      }
    }
    -PD_CELL {
      #set option -PD_CELL
      set option $var
      set flag_pd 1 
      if {$flag_pu == 1} {
        puts "\[ERROR\] : lack corresponding PU_CELL arguments!"
        command_format
        set status 8
        puts "====> Status : $status"
        exit
      }
    }
    -RTL_path {
      #set option -RTL_path
      set option $var 
      if {$flag_pu == 1} {
        puts "\[ERROR\] : lack corresponding PU_CELL arguments!"
        command_format
        set status 8
        puts "====> Status : $status"
        exit
      } elseif {$flag_pd == 1} {
        puts "\[ERROR\] : lack corresponding PD_CELL arguments!"
        command_format
        set status 8
        puts "====> Status : $status"
        exit
      }
    }
    -mod {
      #set option -mod
      set option $var 
      if {$flag_pu == 1} {
        puts "\[ERROR\] : lack corresponding PU_CELL arguments!"
        command_format
        set status 8
        puts "====> Status : $status"
        exit
      } elseif {$flag_pd == 1} {
        puts "\[ERROR\] : lack corresponding PD_CELL arguments!"
        command_format
        set status 8
        puts "====> Status : $status"
        exit
      }
    }
    -out {
      #set option -out
      set option $var
      if {$flag_pu == 1} {
        puts "\[ERROR\] : lack corresponding PU_CELL arguments!"
        command_format
        set status 8
        puts "====> Status : $status"
        exit
      } elseif {$flag_pd == 1} {
        puts "\[ERROR\] : lack corresponding PD_CELL arguments!"
        command_format
        set status 8
        puts "====> Status : $status"
        exit
      }
    }
    -HierLabel {
      #set option -HIerLabel
      set option $var
      if {$flag_pu == 1} {
        puts "\[ERROR\] : lack corresponding PU_CELL arguments!"
        command_format
        set status 8
        puts "====> Status : $status"
        exit
      } elseif {$flag_pd == 1} {
        puts "\[ERROR\] : lack corresponding PD_CELL arguments!"
        command_format
        set status 8
        puts "====> Status : $status"
        exit
      }
    }
    default {
      if {$var != ""} {
          if {$option == "-PU_CELL"} {
             #set pu_cell_list [list $var]
             lappend pu_cell_list $var
             #set option ""
             set flag_pu 0
          } elseif {$option == "-PD_CELL"} {
             #set pd_cell_list [list $var]
             lappend pd_cell_list $var
             #set option ""
             set flag_pd 0
          } elseif {$option == "-RTL_path"} {
             #set rtl_path $var
             lappend rtl_path $var
             #set option ""
          } elseif {$option == "-mod"} {
             #set mod_file $var
             lappend mod_file $var
             #set option ""
          } elseif {$option == "-out"} {
             #set out_file $var
             lappend out_file $var
             #set option ""
          } elseif {$option == "-HierLabel"} {
             #set hierlabel $var
             lappend hierlabel $var
             #set option ""
          } else {
             #puts "\[WARNING\] \[001\]:The option \"$var\" is not necessary!"
             puts "\[ERROR\] :The option \"$var\" is not necessary!"
             command_format 
             #set status 4
             set status 8
             puts "====> Status : $status"
             exit
          }
          set option ""
      } else {
        set option ""
        #puts "\[WARNING\] \[002\]:The option is EMPTY!"
        puts "\[ERROR\] :The option is EMPTY!"
        command_format 
        #set status 4
        set status 8
        puts "====> Status : $status"
        exit
      }
    }
  }
 }

 #########Extract information  
 puts "PU_CELL list : $pu_cell_list"
 puts "PD_CELL list : $pd_cell_list"
 puts "RTL path     : $rtl_path"
 puts "Module file  : $mod_file"
 puts "Output file  : $out_file"
 puts "LabelName    : $hierlabel"
 puts "======================================================="
}
##################################################################
################Format of Run Command
proc command_format {} {
  #global status
  puts "\[ERROR\] \[1000\]"
  puts "\[USAGE\]:"
             puts "   --------------------------------------------------"
             puts "   | Utility_1.csh -PU_CELL   \<cell-name\>          |"
             puts "   |               -PD_CELL   \<cell-name\>          |"
             puts "   |               -RTL_path  \<RTL_path\>           |"
             puts "   |               -mod       \<Module-definition\>  |"
             puts "   |               -out       \<parts.para\>         |"
             puts "   |               -HierLabel \<label_name\>         |"
             puts "   --------------------------------------------------"
}
##################################################################
################Read module file and output file parts.para
proc read_module_file {} {
 global pu_cell_list
 global pd_cell_list
 global rtl_path
 global mod_file
 global out_file
 global hierlabel
 global status
 puts "...Read Module file : $mod_file"
 
 set module_file $mod_file

 set fileid ""
 set format_check "NG"
 #### Check Data input : Exist or not Exist?
 if { [catch { open $module_file r } fileid] } {
   ##### Data Input doesn't Exist
   puts "...Opening file Error : $fileid"
   set status 8
   puts "====> Status : $status"
   exit
 }
 
 ##### Data Input Exist --> Process it
 ####Create output file : parts.para
 if { [catch { open $out_file w } outfile] } {  
   ###Can't create output file parts.para
   puts "...Creating file Error : $outfile"
   set status 8
   puts "====> Status : $status"
   exit
 }
 
 puts $outfile "INCLUDE_FILE:"
 
 set std_file [std_file_proc $module_file] 

 ####Process each line in Data input   
 foreach read_line $std_file {
   if {([regexp {NAME} $read_line] == 1) && ([regexp {INST} $read_line] == 1) && ([regexp {LANG} $read_line] == 1) && ([regexp {IFCHK} $read_line])} {
      puts "----"
      puts "----Skip the first line : !NAME ...."
      set format_check  "OK"
   } elseif {$format_check == "OK"} {
      set IFCHK [lindex [lindex $read_line 3] 0]
      puts "****IFCHK: $IFCHK"
      if {$hierlabel != $IFCHK} {
       puts "---Ignore this line!" 
       continue
      }
      puts "----"
      puts "----Get information in this line: $read_line"
      puts "    Size of this line: [llength $read_line]"
      ####Get information from the line(first 3 colums):MODULE_NAME INSTANCE_NAME LANGUAGE
      puts "+++++++Get parameters from the line: MODULE_NAME INSTANCE_NAME LANGUAGE+++++++++++++++++"
      set module_name [lindex $read_line 0]
      puts "MODULE_NAME : $module_name"
      if {$module_name == ""} {
        set status 8
        puts "\[ERROR\] :Module Name is EMPTY"
        puts $outfile "\[ERROR\] :Module Name is EMPTY"
        puts "====> Status : $status"
        exit
      } elseif {$module_name == "-"} {
        set status 8
        puts "\[ERROR\] :Module Name \"$module_name\" is NOT SUITABLE for Processing"
        puts $outfile "\[ERROR\] :Module Name \"$module_name\" is NOT SUITABLE for Processing"
        puts "====> Status : $status"
        exit
      }

      set instance_name [lindex $read_line 1]
      puts "INSTANCE_NAME :$instance_name"
      if {$instance_name == ""} {
        set status 8
        puts "\[ERROR\] :Instance Name is EMPTY"
        puts $outfile "\[ERROR\] :Instance Name is EMPTY"
        puts "====> Status : $status"
        exit
      } elseif {$instance_name == "-"} {
        set status 8
        puts "\[ERROR\] :Instance Name \"$instance_name\" is NOT SUITABLE for Processing"
        puts $outfile "\[ERROR\] :Instance Name \"$instance_name\" is NOT SUITABLE for Processing"
        puts "====> Status : $status"
        exit
      }

      set language [lindex $read_line 2]
      puts "LANGUAGE : $language"
      ####Check format of Language in Module Definition File
      if {$language == "verilog"} {
        set level_key VERILOG_HDL
        set type_key  SOFT
      } elseif {$language == "gate"} {
        set level_key VERILOG_HDL
        set type_key  HARD
      } else {
        puts "ERROR FORMAT IN LANGUAGE!"
        set level_key ERROR_FORMAT
        set type_key  ERROR_FORMAT
        set status 8
        puts "*** Can not write this line to $out_file because WRONG FORMAT in LANGUAGE!"
        puts ">   Language should only be \"verilog\" or \"gate\""
        puts $outfile ">line: $read_line"
        puts $outfile ">---------------------------------------------------------------------"
        puts $outfile "> WRONG FORMAT IN LANGUAGE "
        puts $outfile "> Please check Module Definition file: $mod_file "
        puts $outfile ">   Language should only be \"verilog\" or \"gate\""
        puts $outfile ">---------------------------------------------------------------------"
        puts "====> Status : $status"
        puts "               There is an ERROR of LANGUAGE in UTILITY 1"
        exit
      }

      ####Check whether Module name is declared PU_CELL/PD_CELL
      set pu_number [llength $pu_cell_list]
      puts "***Number of PU_CELL : $pu_number"
      set pd_number [llength $pd_cell_list]
      puts "***Number of PD_CELL : $pd_number"
      set print_flag 0
      for {set j 0} {$j < $pu_number} {incr j} {
        if {$module_name == [lindex $pu_cell_list $j]} {
            set print_flag 1
        }
      }
      for {set j 0} {$j < $pd_number} {incr j} {
        if {$module_name == [lindex $pd_cell_list $j]} {
            set print_flag 2
        }
      }
      
      ####For each instance in each line  
      set inst_list [split $instance_name ","]
      puts "LIST OF INSTANCE_NAME : "
      set inst_number [llength $inst_list]
      puts "   Number of Instance: $inst_number"
      for {set i 0} {$i < $inst_number} {incr i} {
         puts "instance\[$i\]: [lindex $inst_list $i]" 

         #puts $outfile "read_line > $read_line"
         ####Write information to parts.para(for this line)
         puts "+++++++Write information to parts.para+++++++++++++++++++++++"
        
         if {$print_flag == 0} {
            puts $outfile "INS: [lindex $inst_list $i]  $module_name  TYPE  $type_key"
            puts $outfile "     MACRO: $level_key  $rtl_path\/$module_name\.v"
            puts $outfile "END_INS:"
         } elseif {$print_flag == 1} {
            puts "*** Because The module $module_name is declared PU_CELL"
            puts "    So, This line is ignored in writing to $out_file file"
         } elseif {$print_flag == 2} {
            puts "*** Because The module $module_name is declared PD_CELL"
            puts "    So, This line is ignored in writing to $out_file file"
         } else {
            puts "*** Can not write this line to $out_file because WRONG FORMAT!"
         }
      }

   } else {
      puts "-----------------------------------------------"
      puts "|  ERROR Format of Module Definition          |"
      puts "-----------------------------------------------"
      set status 8
      puts "====> Status : $status"
      exit
   } 
 }
 close $fileid
 puts $outfile "END_INCLUDE_FILE:"
 close $outfile
 puts "======================================================="
}
################Check Arguments: RTL_path -- Module Definition -- Output File
proc check_argument {} {
 global pu_cell_list
 global pd_cell_list
 global rtl_path
 global mod_file
 global out_file
 global hierlabel
 global status

 set path_number [llength $rtl_path]
 set mod_number  [llength $mod_file]
 set out_number  [llength $out_file]
 set hierlabel_number [llength $hierlabel]

 if {$path_number == 0} {
    puts "\[ERROR\] :Can\'t locate RTL path for this Program \"UTILITY 1\""
    puts "                     Exit Program \"Utility_1.tclsh\""
    set status  8
    puts "====> Status : $status"
    exit
 } elseif {$path_number > 1} {
    #puts "\[WARNINGS\] \[003\]:The number of RTL_path is larger than 1"
    puts "\[ERROR\] :The number of RTL_path is larger than 1"
    puts "                     Exit Program \"Utility_1.tclsh\""
    #set status  4
    set status  8
    puts "====> Status : $status"
    puts "          There is more than 1 RTL_path in Arguments of Utility_1"
    exit 
 } else {
    puts "***RTL path: $rtl_path"
 }

 if {$mod_number == 0} {
    puts "\[ERROR\] :Can\'t locate Module Defintion file for this Program \"UTILITY 1\""
    puts "                     Exit Program \"Utility_1.tclsh\""
    set status  8
    puts "====> Status : $status"
    exit
 } elseif {$mod_number > 1} {
    #puts "\[WARNINGS\] \[004\]:The number of Module Definition is larger than 1"
    puts "\[ERROR\] :The number of Module Definition is larger than 1"
    puts "                     Exit Program \"Utility_1.tclsh\""
    #set status  4
    set status  8
    puts "====> Status : $status"
    puts "          There is more than 1 Module Definition Arguments of Utility_1"
    exit 
 } else {
    puts "***Module Definition file: $mod_file"
 }

 if {$out_number == 0} {
    puts "\[ERROR\] :Can\'t locate Output file for this Program \"UTILITY 1\""
    puts "                     Exit Program \"Utility_1.tclsh\""
    set status  8
    puts "====> Status : $status"
    exit
 } elseif {$out_number > 1} {
    #puts "\[WARNINGS\] \[004\]:The number of Output File is larger than 1"
    puts "\[ERROR\] :The number of Output File is larger than 1"
    puts "                     Exit Program \"Utility_1.tclsh\""
    #set status  4
    set status  8
    puts "====> Status : $status"
    puts "          There is more than 1 Output Arguments of Utility_1"
    exit 
 } else {
    puts "***Output file: $out_file"
 }

 if {$hierlabel_number == 0} {
    puts "\[ERROR\] :Can\'t locate Label Name for this Program \"UTILITY 1\""
    puts "                     Exit Program \"Utility_1.tclsh\""
    set status  8
    puts "====> Status : $status"
    exit
 } elseif {$hierlabel_number > 1} {
    #puts "\[WARNINGS\] \[004\]:The number of Output File is larger than 1"
    puts "\[ERROR\] :The number of Label Name is larger than 1"
    puts "                     Exit Program \"Utility_1.tclsh\""
    #set status  4
    set status  8
    puts "====> Status : $status"
    puts "          There is more than 1 Label Name Arguments of Utility_1"
    exit 
 } else {
    puts "***Label Name: $hierlabel"
 }
}
############
proc std_file_proc {input_file} {
   set file_content {}
   set infile [open $input_file r]
   set number_con 0
   while {[gets $infile line] >= 0} {
       if {[regexp {\/\/} $line]} {
           regsub {\/\/.*} $line "" line
       } elseif {[regexp {#} $line]} {
           regsub {\#.*} $line "" line
       } elseif {([regexp {NAME} $line] == 1) && ([regexp {INST} $line] == 1) && ([regexp {LANG} $line] == 1) && ([regexp {IFCHK} $line])} {
           regsub {\!}  $line "" line
           for {set i 0} {$i < [llength $line] } {incr i} {
               if {[lindex $line $i] == "NAME"} {
                   set NAME_index $i
               }
               if {[lindex $line $i] == "INST"} {
                   set INST_index $i
               }
               if {[lindex $line $i] == "LANG"} {
                   set LANG_index $i
               }
               if {[lindex $line $i] == "IFCHK"} {
                   set IFCHK_index $i
               }
           }
       } else {
           #ignore other line
       }
       lappend file_content $line
   }
   close $infile
   set file_std {}
   set NAME ""
   set INST ""
   set LANG ""
   set IFCHK ""
   for {set i 0} {$i < [llength $file_content]} {incr i} {
       set line1 [lindex $file_content $i]
       puts "line1 of file_content : $line1"
       if {[llength $line1] == 0} {
           #ignore empty line
       } else {
           set line_std {}
           for {set j 0} {$j < [llength $line1]} {incr j} {
               if {$j == $NAME_index} {
                   set NAME [lindex $line1 $j]
               } elseif {$j == $INST_index} {
                   set INST [lindex $line1 $j]
               } elseif {$j == $LANG_index} {
                   set LANG [lindex $line1 $j]
               } elseif {$j == $IFCHK_index} {
                   set IFCHK [lindex $line1 $j]
               } else {
                   # ignore other column
               }
           }
           lappend line_std $NAME
           lappend line_std $INST
           lappend line_std $LANG
           lappend line_std $IFCHK
           lappend file_std $line_std
       }
   }
   return $file_std
}

################MAIN
#eval Utility_1 {$argv}
Utility_1 $argv
puts "====> Status : $status"
if {$status == 0} {
 puts "             There is NO WARNINGS/ERROR MESSAGES in UTILITY 1"
} elseif {$status == 4} {
 puts "             There are some WARNINGS in UTILITY 1"
} elseif {$status == 8} {
 puts "             There are some ERROR MESSAGES in UTILITY 1"
}
exit 0
