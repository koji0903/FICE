#!/usr/bin/ruby
#############################################################
#
#  mkucf
#
#= mkucf : Generate ucf file which is modified Clock Grouping
#  
#  Author     :: Koji HIJIKURO<koji.hijikuro@nms.necel.com>
#
#############################################################
#
#== OPERATION
#* analize ucf file generated by Synplify Pro
#* generate new ucf file for ISE
#
#== USAGE
#* %mkucf.rb -iucf [synplicity.ucf] -oucf [Project.ucf] -udef [Modification.udef] -freq [Freq] -duty [Clock Name] [High Rate]
#* If you want to get more infomation, please use "-h" option.
#
#== EXAMPLE
#* %mkucf.rb -iucf synplicity.ucf -oucf Kx4.ucf -udef kx4.udef -freq 35 -duty FCLK 42
#
#== OUTPUT
#* <Projcet>.ucf
#* report
#
#== History
#* 0.3.xxx
#  * [message]  New
#
#* 0.4.xxx
#  + Now, developing
#
#############################################################
#require "runit/assert"
#include RUNIT::Assert

$:.unshift(File.dirname(__FILE__) + "/../lib")
require "FICE_def"
require "system"
require "common"
require "ise_ucf"

$SUB_TOOL       = "mkucf"
$VERBOSE    = false

$ERROR_CNT   = 0
$WARNING_CNT = 0
$NOTE_CNT    = 0

$MESSAGE = false
$TEST_MODE = false


#
# Main Class
#
class MkUCF
  #
  # initialize
  #
  def initialize
    # for argument
    @IUCF = nil   # for input ucf
    @OUCF = nil   # for output ucf
    @UDEF = nil   # for ucf modify definition
    @FREQ = nil   # for defined frequency
    @DUTY_CLOCK = nil # for defined duty clock
    @DUTY_ALL = false # for all K0R-Clock
    @DUTY_RATE = nil  # for defined duty rate

    # File Buffer
    @IUCF_DATA = Array.new
    @UDEF_DATA = Array.new
    @OUCF_DATA = Array.new

    # Parsing Information
    @CLOCK     = Array.new
    @CLOCK_org = Array.new
    @TIMESPEC_OLD  = Array.new
    @TIMESPEC_NEW  = Array.new
    @TIMEGRP   = Array.new

    # For Report
    @NAME_CHANGING_LIST = Array.new


  end

  
  #
  #* print usage
  #
  def print_usage
    printf("\n")
    printf("Usage :  %s.rb [OPTION] -iucf <Input UCF file> -oucf <Output UCF file>\n",$SUB_TOOL)
    printf(" OPTION\n")
    printf("\t-h/-help         : print help message\n")
    printf("\t-v/-version      : print version\n")
    printf("\t-verbose         : execute on verbose mode\n")
    printf("\t-iucf [UCF]      : UCF File generated by Synplify Pro\n")
    printf("\t-oucf [UCF]      : UCF File for ISE\n")
    printf("\t-udef [DefFile]  : UCF Modify definition\n")
    printf("\t-freq [Freq]     : Changing Frequcenty\n")
    printf("\t-duty [Clock] [Duty] : Changing Clock Duty rate\n")
    printf("\t-duty-all [Duty] : Changing Clock Duty rate for All K0R clock(FCLK/FMAIN/FSUB/FIH/FMX4)\n")
    printf("    \n")
  end

  # 
  #* Get Argument
  #
  def get_argument
    size = ARGV.size
    size -= 1
    for i in 0..size
      case ARGV[i]
      when '-h','-help' then
        Common.print_base
        print_usage
        exit
      when '-v','-version' then
        Common.print_base
        printf("")
        exit
      when '-verbose' then
        $VERBOSE = true
      when '-iucf' then
        @IUCF = ARGV[i+1]
        i +=1
      when '-oucf' then
        @OUCF = ARGV[i+1]
        i +=1
      when '-udef' then
        @UDEF = ARGV[i+1]
        i +=1
      when '-freq' then
        @FREQ = ARGV[i+1]
        i +=1
      when '-duty' then
        @DUTY_CLOCK = ARGV[i+1]
        @DUTY_RATE = ARGV[i+2]
        i +=2
      when '-duty-all' then
        @DUTY_ALL = true
        @DUTY_RATE = ARGV[i+1]
        i +=1
      else
        if /^-/ =~ ARGV[i]
          printf("[E] %s option is not supported.\n",ARGV[i])
          print_usage
          exit
        end
      end
    end 

    #* Argument Check
    if @IUCF == nil
      $ERROR_CNT += 1
      printf("@E:\"Input UCF\" is not specified.\n")
      print_usage
      error
    else
      if Common.chk_file("-iucf",@IUCF) == true
        $ERROR_CNT += 1
        printf("@E:\"%s\" file doesnt find.\n",@IUCF)
        print_usage
        error
      end
    end

    if @OUCF == nil
      $WARNING_CNT += 1
      @OUCF = "synplicity_mod.ucf"
      printf("@W:\"Output UCF file\" is not specified.So set \"synplicity_mod.ucf\" automatically.\n")
    end

    if @UDEF == nil
      $ERROR_CNT += 1
      printf("@E:\"UCF Modify Definition file\" is not specified.\n")
      print_usage
      error
    else
      if Common.chk_file("-ucf",@UDEF) == true
        $ERROR_CNT += 1
        printf("@E:\"\" file doesnt find.\n",@UDEF)
        print_usage
        error
      end
    end

    if @DUTY_ALL == true
      if @DUTY_RATE == nil
        $ERROR_CNT += 1
        printf("@E:Found illegal option. you need to specify \"Duty Rate\"\n")
        print_usage
        error
      end
    end

  end

  #
  #* read_files( Input UCF file, UCF Modify Definition file)
  #
  def read_files
    @IUCF_DATA = Common.file_read(@IUCF)
    @UDEF_DATA = Common.file_read(@UDEF)
  end

  #
  #* UCF Parse
  #
  def ucf_parse(ucf_file,udef)
    printf("@I:Parsing UCF File\n")
    ise_ucf = ISEUcf.new(udef)

    #* UCF Parsing and Make each data
    ise_ucf.parse(ucf_file,udef) 

    #* Make TIMESPEC using UDEF File
    if ise_ucf.make_AddConst(@UDEF_DATA) == 1
      printf("@E:Found Unexpected Definition in %s\n",@UDEF)
      error
    end
    @OUCF_DATA = ise_ucf.OUCF
    @CLOCK     = ise_ucf.CLOCK
    @CLOCK_org = ise_ucf.CLOCK_org
    @TIMESPEC  = ise_ucf.TIMESPEC
    @NAME_CHANGING_LIST = ise_ucf.NAME_CHANGING_LIST
    @TIMEGRP   = ise_ucf.TIMEGRP
    printf("@I:parsing UCF file Done\n")
  end

  #
  #* Generate Output UCF file
  #
  def generate(file)
#    if @FREQ == nil
      file_name = @OUCF
#    else
#      file_name = @OUCF + "_" + @FREQ.to_s + "MHz" + @OUCF.split(".")[1]
#      p file_name
#    end
    printf("@I:generate %s\n",file_name)
    f = open("#{file_name}","w")
    comment = "Modified UCF File using " + @UDEF
    Common.print_file_header(f,"#{comment}",$SUB_TOOL,$VERSION,"##")
    f.printf("\n\n")
    f.printf("### Modified Constraint made by %s ###\n", $SUB_TOOL)
    f.printf("\n")
    # Print CLOCK Info
    f.printf("# CLOCK TNM\n")
    @CLOCK.each{|clock|
      f.printf("%s\n",clock)
    }
#    f.printf("# CLOCK TNM original\n")
#    @CLOCK_org.each{|clock|
#      f.printf("%s\n",clock)
#    }
    # Print TIMEGRP
    f.printf("\n")
    f.printf("# CLOCK GROUPING\n")
    clk_list = Array.new
    @TIMEGRP.each_key{|clk_name|
      clk_list << clk_name
      clk_list << clk_name + "_grp"
    }
    time_grp_High = Array.new
    time_grp_Low = Array.new
    @TIMEGRP.each{|clk_name,except|
      grp_flag = false
      #      f.printf("TIMEGRP \"%s_grp\" = \"%s\" %s;\n",clk_name,clk_name,except)
      str = "TIMEGRP \"" + clk_name + "_grp\" = \"" + clk_name + "\"" 
      # remove undefinec clock      
      except = except & clk_list
      if except.size != 0
        str = str + " EXCEPT"
        except.each{|cname|
          str = str + " \"" + cname + "\""
          grp_flag = true if /_grp/ =~ cname
        }
      end
      str = str + ";\n"
      if grp_flag
        time_grp_Low << str
      else
        time_grp_High << str
      end
    }
    time_grp_High.each do |line|
      f.printf line
    end
    time_grp_Low.each do |line|
      f.printf line
    end
    # Print TIMESPEC
    f.printf("\n")
    f.printf("# CLOCK TIMESPEC\n")
    freq_change = false
    changed_clock = Array.new
    already = Array.new
    @TIMESPEC.each{|spec|
      next if already.index(spec.TS_NAME) != nil
      # for Each Clock
      if @DUTY_CLOCK == spec.TS_NAME.sub("TS_","")
        spec.DUTY = @DUTY_RATE + ".00%"
      end
      # for All Clock
      if @DUTY_ALL == true
        if spec.DutyFlag
          spec.DUTY = @DUTY_RATE.to_f
          spec.DUTY = spec.DUTY.to_s + "%"
        end
        #        printf("@I:Chagned Duty rate to %s.00%% for %s\n",@DUTY_RATE,spec.TS_NAME.sub("TS_",""))
      end
      if @FREQ == nil
        already << spec.TS_NAME
        f.printf("TIMESPEC \"%s\" = PERIOD \"%s_grp\" %s %s %s %s;\n",
                 spec.TS_NAME,spec.TNM_NAME,spec.PERIOD,spec.MEASURE,spec.LEVEL,spec.DUTY)
        printf("%s - Duty:%s.00%%",spec.TS_NAME.sub("TS_",""),spec.DUTY)
      else
        if spec.FreqFlag == 1
          freq = 0.00
          case spec.TNM_NAME
          when "BBFCLKDS" then   # divide 1/2. with mergin
            freq = 1000.to_f/@FREQ.to_f / 2
          when "FMX4" then   # divide 3 with mergin
            freq = 1000.to_f/@FREQ.to_f * 3
          when "FSUB", "FIH_LVI", "FIH_RG" then   # 2MHz
            freq = 500
          when "R32MCLK" then   # 2MHz
            if @FREQ.to_i == 24
              freq = 1000.to_f/48.to_f
            else
              freq = 1000.to_f/@FREQ.to_f
            end
          else
            freq = 1000.to_f/@FREQ.to_f
          end
          already << spec.TS_NAME
          f.printf("TIMESPEC \"%s\" = PERIOD \"%s_grp\" %3.3f %s %s %s;\n",
                   spec.TS_NAME,spec.TNM_NAME,freq.to_f,spec.MEASURE,spec.LEVEL,spec.DUTY)
          freq_change = true
          changed_clock << spec.TS_NAME
          printf(" %-15s - Freq: %3.2fMHz(%3.3fns), Duty:%s\n",spec.TS_NAME.sub("TS_",""),1000/freq,freq.to_f,spec.DUTY)
        elsif spec.FreqFlag == 2
          freq = 0.00
          freq = 1000.to_f/@FREQ.to_f / 2
          already << spec.TS_NAME
          f.printf("TIMESPEC \"%s\" = PERIOD \"%s_grp\" %3.3f %s %s %s;\n",
                   spec.TS_NAME,spec.TNM_NAME,freq.to_f,spec.MEASURE,spec.LEVEL,spec.DUTY)
          freq_change = true
          changed_clock << spec.TS_NAME
          printf(" %-15s - Freq: %3.2fMHz(%3.3fns), Duty:%s ( Freq x 2 )\n",spec.TS_NAME.sub("TS_",""),1000/freq,freq.to_f,spec.DUTY)
        else
          if spec.PERIOD.nil?
            $ERROR_CNT += 1
            printf "@E:Found unsupported constraint specification about #{spec.TS_NAME} in #{@IUCF}\n"
            Common.print_summary
            exit 1
          end
          already << spec.TS_NAME
          f.printf("TIMESPEC \"%s\" = PERIOD \"%s_grp\" %s %s %s %s;\n",
                   spec.TS_NAME,spec.TNM_NAME,spec.PERIOD,spec.MEASURE,spec.LEVEL,spec.DUTY)
          printf(" %-15s - Freq:%3s.00MHz(%sns), Duty:%s\n",spec.TS_NAME.sub("TS_",""),1000/spec.PERIOD.to_i,spec.PERIOD,spec.DUTY)
        end
      end  
    }
#    if freq_change
#      printf("@I:Changegd Frequencty to %sMHz(%3.3fns)\n",@FREQ,1000/@FREQ.to_f)
#      printf("     ")
#      changed_clock.each{|name|
#        printf("%s ",name)
#      } if changed_clock != nil
#      printf("\n")
#    end
    # Original Data except Target Clock
    f.printf("\n")
    f.printf("### Original Constraint except grouping clock ###\n", $SUB_TOOL)
    f.printf("\n")
    @OUCF_DATA.each{|line|
      f.printf("%s\n",line)
    }

    # Special Constraint
    f.printf("\n")
    ucf = ISEUcf.new
    ucf.ucf_templete.each{|line|
      f.printf("%s\n",line)
    }
    ucf.ucf_templete_with_judge.each{|line|
      # judgement
      from_flag = false
      to_flag = false
      from = line.gsub("\"","").gsub("_grp","").split[4]
      to   = line.gsub("\"","").gsub("_grp","").split[6]
      @CLOCK.each{|each_clock|
        if line.gsub("\"","").split[1] == each_clock.gsub("\"","").split[1]
          f.printf("%s\n",line)
        end
        from_flag = true if each_clock.gsub("\"","").gsub(";","").split[4] == from
        to_flag = true if each_clock.gsub("\"","").gsub(";","").split[4] == to
      }
      f.printf("%s\n",line) if from_flag && to_flag
    }

    f.printf("\n")

    f.close
  end

  #
  #* main
  #  1 get_argument
  #  2 read_files
  #  3 ucr_parse
  #  4 generate
  #
  def main
    # Ruby Version Judgment
    if RUBY_VERSION >= "1.9"
      printf("@E:%s only support Ruby ver : 1.8.X ( Now, executed %s )\n",$SUB_TOOL,RUBY_VERSION)
      printf("   please check your ruby execute setting.")
      $ERROR_CNT += 1
      Common.print_summary
      exit
    end

    Common.print_base
    get_argument
    read_files
    ucf_parse(@IUCF_DATA,@UDEF)
    generate(@OUCF_DATA)
    Common.print_summary
  end

  #
  #* error operation
  #  1. print_summary
  #  2. exit 
  #
  def error
    Common.print_summary
    exit 1
  end

end

if __FILE__ == $0
  mkucf = MkUCF.new
  mkucf.main
end
