#############################################################
#
# UCF file generated by Synplify Pro analize
#  
#  Author     : Koji HIJIKURO<koji.hijikuro@nms.necel.com>
#  Date       : Jan 04, 2010
#
#############################################################
require "common"
require "constraint"

class NET
  attr_accessor :NET_Name
  attr_accessor :TNM_NET
  def initialize
    @NET_Name = nil
    @TNM_NET = nil
  end
end

class TIMESPEC
  attr_accessor :TIMESPEC_Name
  attr_accessor :Period
  attr_accessor :TNM_NET
  attr_accessor :Duty
  def initialize
    @TIMESPEC_Name = nil
    @Period = 0
    @TNM_NET = nil
    @Duty = 0
  end
end

class SynplifyUCF < Message
  
  attr_accessor :UnusedConstraint
  attr_accessor :Constraint
  # 
  # initialize
  # 
  def initialize(file_name)
    @UCF_FILE = file_name
    @UCF_DATA = Array.new

    @UnusedConstraint = Hash.new
    @Constraint = Hash.new

  end
  
  #
  # read
  #
  def read
    @UCF_DATA = Common.file_read(@UCF_FILE)
  end

  #
  # analize
  #
  def analize
    printf("\tanalize ucf file     ...")
    scope = false
    @UCF_DATA.each{|line|
      if /^NET / =~ line
        line = line.gsub("\"","").gsub(";","")
        net = NET.new
        tmp = line.split(" ")
        # error operation
        if tmp.size != 5
          p line
          printf("@Internal error. (file:%s,line:%s)",__FILE__,__LINE__)
          exit
        end
        net.NET_Name = tmp[1]
        net.TNM_NET = tmp[4]
        @Constraint["#{line}"] = net
      elsif /^TIMESPEC / =~ line
        line = line.gsub("\"","").gsub(";","")
        tmp = line.split(" ")
        timespec = TIMESPEC.new
        # error operation
        if tmp.size != 9 && tmp.size != 11
          p line
          printf("@Internal error. (file:%s,line:%s)",__FILE__,__LINE__)
          exit
        end
        case tmp.size
        when 9 then
          timespec.TIMESPEC_Name = tmp[1]
          timespec.Period = tmp[5]
          timespec.TNM_NET = tmp[4]
          timespec.Duty = tmp[8]
          p timespec
        end
      else
      end
=begin
      if /Begin path delay/ =~ line
        scope = true
        next
      elsif /Unused constraints/ =~ line
        scope = false
      end
      if scope == true
        if /^TIMESPEC/ =~ line
          const = ConstEach.new
          tmp =  line.split
          const.To = tmp[4].gsub("\"","") if tmp[3] == "TO"
          const.From = tmp[4].gsub("\"","") if tmp[3] == "FROM"          
          const.To = tmp[6].gsub("\"","") if tmp[5] == "TO"          
          @Constraint["#{line}"] = const
        end
      end
=end
    }
    printf("Done\n")    
  end

  #
  # main
  #
  def main
    read
    analize
  end

end
