########################################################################
#
# Operation for anlizing synplicity.ucf
#
#    Author   : Koji HIJIKURO<koji.hijikuro@nms.necel.com>
#
########################################################################
#
#  Class Name : XMLParse
#  
#  [Input]
#    - xml_file : xml_file generated by VerilogToXML
#
#  [Output]
#    - Circuit DB
#
#  [Limit Function]
#   1. cannnot analyze bus in port/wire parsing
# 
########################################################################
$:.unshift(File.dirname(__FILE__) + "/../lib")
require 'circuit'
require 'circuit'
require 'FICE_def'
require 'rexml/document'


#
# Parsing XML File generated VerilogToXml
#  Get Circuit Information(ModuleName,Signal,Port,Instance)
#  and make Circuite DB( defined circuit.rb)
#
class XMLParse
  include Circuit

  # Module name Path
  MODULE_BASE = "source_text/description/module"
  # Singal name Path
  SIGNAL_PATH = "port/port_expression/port_reference/name_of_variable"
  # Port(name,msb,lsb) Path
  PORT_PATH   = "list_of_variables/name_of_variable"

  def initialize(xml_file,circuit_inf,search_module_list=nil)
    # ModuleFlag
    @ModuleFlag = false

    @file = xml_file
    @CircuiteInf = nil

    # Execution flas
    @skip_flag = false
    @ope_port = true
    @ope_item = true

    # Circuit Inf
    @circuit_inf = circuit_inf

    # Search Module List
    @search_module_list = search_module_list


  end

  #
  # Main operation parsing XML and generating DB
  #  return : true - successfule
  #           false - with warning
  #
  def main
    doc = REXML::Document.new File.new("#{@file}")
    module_inf = ModuleInf.new
    # Get ModuleName
    module_name = nil
    inst_module_name = nil
    inst_name = nil
    gate_name = nil
    signal_name = nil
    port_name = nil
    doc.elements.each("#{MODULE_BASE}"){|module_element|
      module_element.each{|elem|
        if elem.class == REXML::Element
          break if @skip_flag
          case elem.name
          when "name_of_module"
            module_name = faring(elem[1].text)
            # Skip when described one module searching
            if @search_module_list.index("#{module_name}") != nil
              @skip_flag = true
            end if @search_module_list != nil
            @circuit_inf.make_module(module_name)
            printf("  - Start analyzing Module(%s) ... ",module_name)
            @ModuleFlag = true
          when "list_of_ports"
            next if @ope_port == false
            elem.elements.each("#{SIGNAL_PATH}"){|port|
              signal_name = faring(port[1].text)
              @circuit_inf.add_signal(module_name,signal_name)
            }
          when "module_item" # Port/Instantiation
            next if @ope_item == false
            elem.elements.each{|item|
              case item.name
              when "parameter_declaration"
                # Now Not Suppot
              when "input_declaration"  # Input Port
                direction = "IN"
                get_save_signal(module_name,direction,item)
              when "output_declaration" # OutputPort
                direction = "OUT"
                get_save_signal(module_name,direction,item)
              when "inout_declaration"  # Inout Port
                direction = "INOUT"
                get_save_signal(module_name,direction,item)
              when "net_declaration"
                get_save_net(module_name,item)
              when "reg_declaration"
                # Not support, Now
              when "time_declaration"
                # Not support, Now
              when "integer_declaration"
                # Not support, Now
              when "real_declaration"
                # Not support, Now
              when "event_declaration"
                # Not support, Now
              when "gate_declaration"
                item.elements.each{|mod|
                  case mod.name
                  when "GATETYPE"
                    gate_name = faring(mod[0].to_s)
                    @circuit_inf.add_gate(module_name,gate_name)
                  when "gate_instance"
                    mod.elements.each{|inst|
                      case inst.name
                      when "terminal"
                        inst.elements.each("expression/primary"){|wir|
                          signal_name = faring(wir[1].text)
                           @circuit_inf.add_gate_port(module_name,gate_name,signal_name)
                        }
                      else
                        printf("Found Un-recoginezed item : %s\n",inst.name)
                        Common.internal_error(__FILE__,__LINE__)
                      end
                    }
                  else
                    printf("Found Un-recoginezed item : %s\n",mod.name)
                    Common.internal_error(__FILE__,__LINE__)
                  end
                }
              when "UDP_instantiation"
                item.elements.each{|mod|
                  case mod.name
                  when "name_of_UDP"
                    inst_module_name = get_instantiated_module_name(mod)
                  when "UDP_instance"
                    mod.elements.each{|inst|
                      case inst.name
                      when "name_of_UDP_instance"
                        inst_name = get_save_instance(module_name,inst_module_name,inst)
                      when "terminal"
                        if inst_name != nil
                          get_save_inst_port_terminal(module_name,inst_name,inst)
                        else
                          gate_name = inst_module_name
                          @circuit_inf.add_gate(module_name,gate_name)
                          inst.elements.each("expression/primary"){|wir|
                            signal_name = faring(wir[1].text)
                            @circuit_inf.add_gate_port(module_name,gate_name,signal_name)
                          }     
                        end
                      else
                        printf("Found Un-recoginezed item : %s\n",inst.name)
                        Common.internal_error(__FILE__,__LINE__)
                      end
                    }
                  else
                    printf("Found Un-recoginezed item : %s\n",mod.name)
                    Common.internal_error(__FILE__,__LINE__)
                  end
                }
              when "module_instantiation"
                signal_name = nil
                wire_name = Array.new
                item.elements.each{|mod|
                  case mod.name
                  when "name_of_module"
                    inst_module_name = get_instantiated_module_name(mod)
                  when "module_instance"
                    mod.elements.each{|inst|
                      case inst.name
                      when "name_of_instance"
                        inst_name = get_save_instance(module_name,inst_module_name,inst)
                      when "list_of_module_connections"
                        get_save_inst_port(module_name,inst_name,inst)
                      else
                        printf("Found Un-recoginezed item : %s\n",inst.name)
                        Common.internal_error(__FILE__,__LINE__)
                      end
                    }
                  when "Parameter_value_assignment"
                    # Not support, Now
                  else
                    printf("Found Un-recoginezed item : %s\n",mod.name)
                    Common.internal_error(__FILE__,__LINE__)
                  end
                }
              when "parameter_override"
                # Not support, Now
              when "continuous_assign"
                # Not support, Now
              when "specify_block"
                # Not support, Now
              when "initial_statement"
                # Not support, Now
              when "always_statement"
                # Not support, Now
              when "task"
                # Not support, Now
              when "function"
                # Not support, Now
              else
                printf("Found Un-recoginezed item : %s\n",item.name)
                Common.internal_error(__FILE__,__LINE__)
              end
            }
          else
            printf("Found Un-recoginezed item : %s\n",elem.name)
            Common.internal_error(__FILE__,__LINE__)
          end
        end
      }
      printf("done\n") if !@skip_flag
    }
    if @ModuleFlag == false
      $WARNING_CNT += 1
      printf("@W:MD100:Not found any module in %s file\n",@file)
    end
  end
  
  private
  #
  # get pure signal string
  #
  def faring(str)
    return str.gsub(" ","").gsub("\n","")
  end
  #
  # get port information(signal_name,msb,lsb)
  #   *** Now, not support getting msb,lsb ***
  #
  def get_save_signal(module_name,direction,item)
    msb, lsb = 0
    item.elements.each("#{PORT_PATH}"){|var|
      port_name = faring(var[1].text)
      @circuit_inf.add_port(module_name,direction,port_name,msb,lsb)
    }
  end
  #
  # get & save net information
  #
  def get_save_net(module_name,item)
    net_type = nil
    msb = 0
    lsb = 0
    item.elements.each{|net|
      case net.name
      when "NETTYPE"
        net_type = faring(net.text)
      when "expandrange"
        # Not support, now
      when "delay"
        # Not support, now
      when "list_of_variables"
        net.elements.each{|var|
          case net_type
          when "wire"
            @circuit_inf.add_wire(module_name,faring(var[1].text),msb,lsb)
          when "supply0", "supply1"
            # Now Not Support this item            
          else
            printf("Found net_type : %s\n",net_type)
            Common.internal_error(__FILE__,__LINE__)
          end
        }
      when "list_of_assignments"
        # Now Not Support this item
      else
        printf("Found Un-recoginezed item : %s\n",net.name)
        Common.internal_error(__FILE__,__LINE__)
      end
    }
  end
  #
  # get instantiated module name
  #   return : inst_module_name (using other)
  #
  def get_instantiated_module_name(item)
    return faring(item.elements[1].text)
  end
  #
  # get & save instantiation name
  #
  def get_save_instance(module_name,inst_module_name,inst)
    inst_name = faring(inst.elements[1].text)
    @circuit_inf.add_instance(module_name,inst_module_name,inst_name)
    return inst_name # using get_save_inst_port
  end
  #
  # get & save inst port information
  #
  def get_save_inst_port(module_name,inst_name,inst)
    inst.elements.each{|con|
      case con.name
      when "module_port_connection"
        get_save_inst_port_terminal(module_name,inst_name,con)
      when "named_port_connection"
        wire_name = []
        signal_name = faring(con[1].text)
        con.elements.each("expression/primary"){|wir|
          wire_name << faring(wir[1].text)
          # for bus-net
          if wire_name[0] == ""
            wir.elements.each("concatenation/expression"){|exp|
              exp.elements.each("primary"){|prm|
                wire_name.unshift(faring(prm[1].text))
              }
            }
          end
          wire_name.delete("")
        }
        if inst_name == nil || signal_name == nil || wire_name == nil
          Common.internal_error(__FILE__,__LINE__)
        end
        @circuit_inf.add_inst_port(module_name,inst_name,signal_name,wire_name.compact)
      else
        printf("Found Un-recoginezed item : %s\n",con.name)
        Common.internal_error(__FILE__,__LINE__)
      end
    }
  end
  #
  # get & save inst port information
  #
  def get_save_inst_port_terminal(module_name,inst_name,inst)
    signal_name = nil
    wire_name = []
    inst.elements.each("expression/primary"){|wir|
      wire_name << faring(wir[1].text)
      # for bus-net
      if wire_name[0] == ""
        wir.elements.each("concatenation/expression"){|exp|
          exp.elements.each("primary"){|prm|
            wire_name.unshift(faring(prm[1].text))
          }
        }
      end
      wire_name.delete("")
    }
    wire_name.each{|sig|
      signal_name = sig
    }
    @circuit_inf.add_inst_port(module_name,inst_name,signal_name,wire_name.compact)
  end

end

#if __FILE__ == $0
#  xml = XMLParse.new("../test/d78f1070.xml")
#  xml.main
#end
