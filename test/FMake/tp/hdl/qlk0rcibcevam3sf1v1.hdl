// [RENESAS Group CONFIDENTIAL]
// Copyright (C) 2010 Renesas Electronics Corporation
// All Rights Reserved. Do not duplicate without prior written
// consent of Renesas Electronics Corporation

// =======================================================================================================================
//
//  CIB for SS3rd
//  Macro Name  : QLK0RCIBCM3SF1V1
//  Version     : v1.10
//  Date        : 2010.08.18 Y.Omura
//  Note        : v1.0 Bug Fix
//                add test control for BB chip
//                add trriming bit BGRT,HOSC
//                change NVM capture address, bit
// -----------------------------------------------------------------------------------------------------------------------
// <HISTORY>
// 10.09.03	: M.ouchiyama
//		: CHANGE) h_rosc TRIM register init/TESDBT value
//				   |Ver100818            | -> | Ver100903           |
//				   | reset    | TESDBT   | -> | reset    | TESDBT   |
//			CTRIM[6:0] | 000_0000 | 100_0000 | -> | 000_0000 | 000_0000 |
//			WTRIM[3:0] |      100 |      100 | -> |      000 |      000 |
//			FTRIM[5:0] |  10_0000 |  10_0000 | -> |  00_0000 |  00_0000 |
//			RTRIM[5:0] |  10_0000 |  10_0000 | -> |  10_0000 |  10_0000 |
//
// 10.09.10	: M.ouchiyama
//		: CHANGE) CE0 mask signal ce0msk_en -> EXAmsk_en
//		: CHANGE) scan_moni posedge -> negedge
//
// =======================================================================================================================


//
// =======================================================================================================================
//
//  CIB for SS3rd
//  Macro Name	: QLK0RCIBCM3SF1V1
//  Version	: v1.00
//  Date	: 2009.11.25 Wed
//  Designe	: I.Uike
//
// -----------------------------------------------------------------------------------------------------------------------

module QLK0RCIBCM3SF1V1 (
    PENABLE  ,PWRITE   ,PSEL1    ,							// APB
    PADDR3   ,PADDR2   ,PADDR1   ,PADDR0   ,						// APB
    PWDATA15 ,PWDATA14 ,PWDATA13 ,PWDATA12 ,PWDATA11 ,PWDATA10 ,PWDATA9  ,PWDATA8  ,    // APB
    PWDATA7  ,PWDATA6  ,PWDATA5  ,PWDATA4  ,PWDATA3  ,PWDATA2  ,PWDATA1  ,PWDATA0  ,    // APB
    PRDATA15 ,PRDATA14 ,PRDATA13 ,PRDATA12 ,PRDATA11 ,PRDATA10 ,PRDATA9  ,PRDATA8  ,    // APB
    PRDATA7  ,PRDATA6  ,PRDATA5  ,PRDATA4  ,PRDATA3  ,PRDATA2  ,PRDATA1  ,PRDATA0  ,    // APB
    BASECKHS ,SYSRESB  ,RESETB   ,                                                      // Clock & Reset
    NSRESB   ,                                                                          // 非同期リセットではない
    PA19     ,PA18     ,PA17     ,PA16     ,                                            // CPU Address
    PA15     ,PA14     ,PA13     ,PA12     ,PA11     ,PA10     ,PA9      ,PA8      ,    // CPU Address
    PA7      ,PA6      ,PA5      ,PA4      ,PA3      ,PA2      ,                        // CPU Address
    SLFLASH  ,                                                                          // CPU フラッシュ選択
    PID31    ,PID30    ,PID29    ,PID28    ,PID27    ,PID26    ,PID25    ,PID24    ,    // CPU データ
    PID23    ,PID22    ,PID21    ,PID20    ,PID19    ,PID18    ,PID17    ,PID16    ,    // CPU データ
    PID15    ,PID14    ,PID13    ,PID12    ,PID11    ,PID10    ,PID9     ,PID8     ,    // CPU データ
    PID7     ,PID6     ,PID5     ,PID4     ,PID3     ,PID2     ,PID1     ,PID0     ,    // CPU データ
    FHLTST   ,FSTPST   ,  
//    PHSPEED  ,PSUBMODE ,PLPOWER  ,PRLSPY   ,
    PSUBMODE ,										// SS3rd: 2010.01.12 Del
    FRSEL4   ,FRSEL3   ,FRSEL2   ,FRSEL1   ,FRSEL0   ,					// 低速リングトリミング
    OPLVIMDS1,OPLVIMDS0,OPLVIS1  ,OPLVIS0  ,                                            // LVIトリミング	// v1.1 add
    OPVPOC2  ,OPVPOC1  ,OPVPOC0  ,                                                      // LVIトリミング
    PORTSELB ,										// 			// v1.1 add
    OPWDCS2  ,OPWDCS1  ,OPWDCS0  ,                                                      // WDT Overflow時間設定
    OPWDEN   ,OPWDSTBY ,OPWDWS1  ,OPWDWS0  ,OPWDINT  ,					// その他オプションバイト
    OPOCDEN  ,C3HFF    ,SELIN1   ,                                                      // その他オプションバイト	// v1.1 mod
    AF19     ,AF18     ,AF17     ,AF16     ,                                            // FCB Address
    AF15     ,AF14     ,AF13     ,AF12     ,AF11     ,AF10     ,AF9      ,AF8      ,    // FCB Address
    AF7      ,AF6      ,AF5      ,AF4      ,AF3      ,AF2      ,                        // FCB Address
    FLRO37   ,FLRO36   ,FLRO35   ,FLRO34   ,FLRO33   ,FLRO32   ,                        // CIB->FCB データ
    FLRO31   ,FLRO30   ,FLRO29   ,FLRO28   ,FLRO27   ,FLRO26   ,FLRO25   ,FLRO24   ,    // CIB->FCB データ
    FLRO23   ,FLRO22   ,FLRO21   ,FLRO20   ,FLRO19   ,FLRO18   ,FLRO17   ,FLRO16   ,    // CIB->FCB データ
    FLRO15   ,FLRO14   ,FLRO13   ,FLRO12   ,FLRO11   ,FLRO10   ,FLRO9    ,FLRO8    ,    // CIB->FCB データ
    FLRO7    ,FLRO6    ,FLRO5    ,FLRO4    ,FLRO3    ,FLRO2    ,FLRO1    ,FLRO0    ,    // CIB->FCB データ
//    FLMOD    ,FLSPM    ,								// SS3rd: 2009.09.25 Chg for FCB
    FLSPM    ,
//    EXCH     ,EXAR1    ,TBTSEL   ,BEU2     ,BEU1     ,BEU0     ,
    EXCH     ,										// SS3rd: 2009.10.26 Del
//    PEXA     ,PBFA     , 
    PEXA     ,
    SACEEN   , 
    RESSQSTA ,
    PRDSELEN ,EXCHEN   ,SECEN    ,FSWEN    ,NVMRCEND ,
    TRMCP017 ,TRMCP016 ,                                                                // 各種FLASHトリミング
    TRMCP015 ,TRMCP014 ,TRMCP013 ,TRMCP012 ,TRMCP011 ,TRMCP010 ,TRMCP09  ,TRMCP08  ,    // 各種FLASHトリミング
    TRMCP07  ,TRMCP06  ,TRMCP05  ,TRMCP04  ,TRMCP03  ,TRMCP02  ,TRMCP01  ,TRMCP00  ,    // 各種FLASHトリミング
    TRMCP114 ,TRMCP113 ,TRMCP112 ,TRMCP111 ,TRMCP110 ,                                  // 各種FLASHトリミング
    DTRMCP014,DTRMCP013,DTRMCP012,DTRMCP011,DTRMCP010,                                  // DataFlashトリミング
    RTRMCP020,RTRMCP019,RTRMCP018,RTRMCP017,RTRMCP016,RTRMCP015,                        // READ用CPトリミング
    CE0      ,CE1      ,                                                                // FLASH CHIP Enable
    A19      ,A18      ,A17      ,A16      ,                                            // FLASH Address
    A15      ,A14      ,A13      ,A12      ,A11      ,A10      ,A9       ,A8       ,    // FLASH Address
    A7       ,A6       ,A5       ,A4       ,A3       ,A2       ,                        // FLASH Address
    RO037    ,RO036    ,RO035    ,RO034    ,RO033    ,RO032    ,                        // FLASH->CIB データ MACRO1
    RO031    ,RO030    ,RO029    ,RO028    ,RO027    ,RO026    ,RO025    ,RO024   ,     // FLASH->CIB データ MACRO1
    RO023    ,RO022    ,RO021    ,RO020    ,RO019    ,RO018    ,RO017    ,RO016   ,     // FLASH->CIB データ MACRO1
    RO015    ,RO014    ,RO013    ,RO012    ,RO011    ,RO010    ,RO09     ,RO08    ,     // FLASH->CIB データ MACRO1
    RO07     ,RO06     ,RO05     ,RO04     ,RO03     ,RO02     ,RO01     ,RO00    ,     // FLASH->CIB データ MACRO1
    RO137    ,RO136    ,RO135    ,RO134    ,RO133    ,RO132    ,                        // FLASH->CIB データ MACRO2
    RO131    ,RO130    ,RO129    ,RO128    ,RO127    ,RO126    ,RO125    ,RO124   ,     // FLASH->CIB データ MACRO2
    RO123    ,RO122    ,RO121    ,RO120    ,RO119    ,RO118    ,RO117    ,RO116   ,     // FLASH->CIB データ MACRO2
    RO115    ,RO114    ,RO113    ,RO112    ,RO111    ,RO110    ,RO19     ,RO18    ,     // FLASH->CIB データ MACRO2
    RO17     ,RO16     ,RO15     ,RO14     ,RO13     ,RO12     ,RO11     ,RO10    ,     // FLASH->CIB データ MACRO2
    EXA      ,BFA      ,CLKSEL1  ,
    SRCUT    ,FLSTOP   ,SUB      ,HISPEED  ,
    TID31    ,TID30    ,TID29    ,TID28    ,TID27    ,TID26    ,TID25    ,TID24    ,
    TID23    ,TID22    ,TID21    ,TID20    ,TID19    ,TID18    ,TID17    ,TID16    ,
    TID15    ,TID14    ,TID13    ,TID12    ,TID11    ,TID10    ,TID9     ,TID8     ,
    TID7     ,TID6     ,TID5     ,TID4     ,TID3     ,TID2     ,TID1     ,TID0     ,
    TESINST  ,BBTESINST,		// v1.1 add
    PTESINST ,OPTFLMEM ,OPTMDUMP , 
    SPRGMOD  ,TESTMOD  ,TMODDFT  ,
    READ     ,
    TESDBT   ,SCANMODE ,SELRO1,
    TA17     ,TA16     ,								// SS3rd: 2009.10.26 Add
    TA15     ,TA14     ,TA13     ,TA12     ,TA11     ,TA10     ,TA9      ,TA8      ,
    TA7      ,TA6      ,TA5      ,TA4      ,TA3      ,TA2      ,TA1      ,TA0      ,
    // The following ports are added for SS2nd_CIB.
    // Option BYTE outputs
    FRQSEL4  ,FRQSEL3  ,FRQSEL2  ,FRQSEL1  ,FRQSEL0  ,
    // Flash Control signals. For current saving.
    RLOWSPY  ,LOWPOWER ,			// SS2nd: 2007.06.28 Add		// SS3rd: 2009.09.29 Chg
    // For Import FLTOP's circuit
    EXER     ,
    // For MISR in _MEMIF
    MODEFNOP , 	// MISR compression TEST support.
    TPIDSEL  ,	// SS2nd: 2007.07.31 Add
// SS2nd: 2007.07.17 Add
    CTRIM6   ,CTRIM5   ,CTRIM4   ,CTRIM3   ,CTRIM2   ,CTRIM1   ,CTRIM0   ,		// 32MHz Ring OSC C-Triming
    WTRIM2   ,WTRIM1   ,WTRIM0   ,							// 32MHz Ring OSC W-Triming 	// v1.1 add
    FTRIM5   ,FTRIM4   ,FTRIM3   ,FTRIM2   ,FTRIM1   ,FTRIM0   ,			// 32MHz Ring OSC F-Triming 	// v1.1 add
// v1.1 EXRTRIM delete
    RTRIM5   ,RTRIM4   ,RTRIM3   ,RTRIM2   ,RTRIM1   ,RTRIM0   ,			// 32MHz Ring OSC R-Triming 	// v1.1 mod
    BGRT10   ,BGRT9    ,BGRT8    ,BGRT7    ,						// Regulator BGR Triming	// v1.1 add
    BGRT6    ,BGRT5    ,BGRT4    ,BGRT3    ,BGRT2    ,BGRT1    ,BGRT0    ,		// Regulator BGR Triming
    OPBOEN   ,										// To CSC Option Byte Output Enable timing.(1pulse@BASECK)
    BBNVM1   ,BBNVM2   ,								// For BB-Support
    // Add for _NVMCHK
    PSEL4
   ,CSPDTFLG ,CKSMER
   ,CFNSD9   ,CFNSD8
   ,CFNSD7   ,CFNSD6  ,CFNSD5 ,CFNSD4  ,CFNSD3  ,CFNSD2  ,CFNSD1  ,CFNSD0
   ,WWR
   ,FSWE9    ,FSWE8
   ,FSWE7    ,FSWE6   ,FSWE5  ,FSWE4   ,FSWE3   ,FSWE2   ,FSWE1  ,FSWE0
   ,FSWS9    ,FSWS8
   ,FSWS7    ,FSWS6   ,FSWS5  ,FSWS4   ,FSWS3   ,FSWS2   ,FSWS1  ,FSWS0
   // SS2nd:v1.10 Add
// ,FT3RESRQ
   ,CIBRESRQ ,
    // The following ports are added for SS3rd_CIB.
    SELTAF  ,										// SS3rd: 2009.09.19 Add
    CECCE   ,										// SS3rd: 2009.09.25 Chg for FCB
    TMBTSEL ,TMSPMD  ,BTFLG   ,								// SS3rd: 2009.09.25 Add
    TRMRD1CK,TRMRD2CK,									// SS3rd: 2010.02.01 Add
    BRSAM   ,
    FSPR    ,RDPR    ,WRPR    ,CEPR    ,SEPR    ,BTPR    ,
    BTBLS1  ,BTBLS0  ,
    FPSER2  ,FPSER1  ,FPSER0  ,FPWWR2  ,FPWWR1  ,FPWWR0  ,
    FPERTY7 ,FPERTY6 ,FPERTY5 ,FPERTY4 ,FPERTY3 ,FPERTY2 ,FPERTY1 ,FPERTY0 ,
    FPWRTY7 ,FPWRTY6 ,FPWRTY5 ,FPWRTY4 ,FPWRTY3 ,FPWRTY2 ,FPWRTY1 ,FPWRTY0 ,
    FPECC3  ,FPECC2  ,FPECC1  ,FPECC0  ,
    R0FLAGZ ,R1FLAGZ ,									// R1FLAGZ: v1.1 Add
    R0A7    ,R0A6    ,R0A5    ,R0A4    ,R0A3    ,R0A2    ,R0A1    ,R0A0    ,
    R1A7    ,R1A6    ,R1A5    ,R1A4    ,R1A3    ,R1A2    ,R1A1    ,R1A0    ,		// v1.1 add
    ICENOECC,SLECCOFF,ECCER   ,FMULTIEN,
    OSCNOSTP,OSCOUTEN,POSCNOST,POSCOUTE,CPT     ,
    TESTRMRD,
    HIOMSK  ,
    SCANCLK ,
    TFLSTOPC,
    AisRSEQ ,RDSETUP ,FLROACT ,
    FRQ4EN  ,
    PSYSRESB ,
    CHMOD ,
    GOFIRMR
);





input           PENABLE;             // APBアクセスイネーブル
input           PWRITE;              // APBライト信号
input           PSEL1;               // 通常レジスタ
input           PADDR3;              // APBアドレス
input           PADDR2;              // APBアドレス
input           PADDR1;              // APBアドレス
input           PADDR0;              // APBアドレス
input           PWDATA15;            // APBライトデータ
input           PWDATA14;            // APBライトデータ
input           PWDATA13;            // APBライトデータ
input           PWDATA12;            // APBライトデータ
input           PWDATA11;            // APBライトデータ
input           PWDATA10;            // APBライトデータ
input           PWDATA9;             // APBライトデータ
input           PWDATA8;             // APBライトデータ
input           PWDATA7;             // APBライトデータ
input           PWDATA6;             // APBライトデータ
input           PWDATA5;             // APBライトデータ
input           PWDATA4;             // APBライトデータ
input           PWDATA3;             // APBライトデータ
input           PWDATA2;             // APBライトデータ
input           PWDATA1;             // APBライトデータ
input           PWDATA0;             // APBライトデータ
output          PRDATA15;            // APBリードデータ
output          PRDATA14;            // APBリードデータ
output          PRDATA13;            // APBリードデータ
output          PRDATA12;            // APBリードデータ
output          PRDATA11;            // APBリードデータ
output          PRDATA10;            // APBリードデータ
output          PRDATA9;             // APBリードデータ
output          PRDATA8;             // APBリードデータ
output          PRDATA7;             // APBリードデータ
output          PRDATA6;             // APBリードデータ
output          PRDATA5;             // APBリードデータ
output          PRDATA4;             // APBリードデータ
output          PRDATA3;             // APBリードデータ
output          PRDATA2;             // APBリードデータ
output          PRDATA1;             // APBリードデータ
output          PRDATA0;             // APBリードデータ

input           BASECKHS;   // 動作クロック
input           SYSRESB;    // POC+端子リセットによるリセット信号（ロウアクティブ）
input           RESETB;     // POC+端子+WDT+LVI+ソフトリセット信号（ロウアクティブ）
input           NSRESB  ;   // 追加してほしい信号


input  PA19;       // CPUアドレス
input  PA18;       // CPUアドレス
input  PA17;       // CPUアドレス
input  PA16;       // CPUアドレス
input  PA15;       // CPUアドレス
input  PA14;       // CPUアドレス
input  PA13;       // CPUアドレス
input  PA12;       // CPUアドレス
input  PA11;       // CPUアドレス
input  PA10;       // CPUアドレス
input  PA9;        //  CPUアドレス
input  PA8;        // CPUアドレス
input  PA7;        // CPUアドレス
input  PA6;        // CPUアドレス
input  PA5;        // CPUアドレス
input  PA4;        // CPUアドレス
input  PA3;        // CPUアドレス
input  PA2;        // CPUアドレス
input  SLFLASH;    // CPUフラッシュ選択信号
output PID31;      // CPU命令（データ）バス
output PID30;      // CPU命令（データ）バス
output PID29;      // CPU命令（データ）バス
output PID28;      // CPU命令（データ）バス
output PID27;      // CPU命令（データ）バス
output PID26;      // CPU命令（データ）バス
output PID25;      // CPU命令（データ）バス
output PID24;      // CPU命令（データ）バス
output PID23;      // CPU命令（データ）バス
output PID22;      // CPU命令（データ）バス
output PID21;      // CPU命令（データ）バス
output PID20;      // CPU命令（データ）バス
output PID19;      // CPU命令（データ）バス
output PID18;      // CPU命令（データ）バス
output PID17;      // CPU命令（データ）バス
output PID16;      // CPU命令（データ）バス
output PID15;      // CPU命令（データ）バス
output PID14;      // CPU命令（データ）バス
output PID13;      // CPU命令（データ）バス
output PID12;      // CPU命令（データ）バス
output PID11;      // CPU命令（データ）バス
output PID10;      // CPU命令（データ）バス
output PID9;       // CPU命令（データ）バス
output PID8;       // CPU命令（データ）バス
output PID7;       // CPU命令（データ）バス
output PID6;       // CPU命令（データ）バス
output PID5;       // CPU命令（データ）バス
output PID4;       // CPU命令（データ）バス
output PID3;       // CPU命令（データ）バス
output PID2;       // CPU命令（データ）バス
output PID1;       // CPU命令（データ）バス
output PID0;       // CPU命令（データ）バス

input  FHLTST;     //
input  FSTPST;     //

//input  PHSPEED;		// From CSC		// SS3rd: 2010.01.12 Del
input  PSUBMODE;	// From CSC
//input  PLPOWER;		// From CSC		// SS3rd: 2010.01.12 Del
//input  PRLSPY;		// From CSC		// SS3rd: 2010.01.12 Del

output FRSEL4;     // 低速リングトリミング
output FRSEL3;     // 低速リングトリミング
output FRSEL2;     // 低速リングトリミング
output FRSEL1;     // 低速リングトリミング
output FRSEL0;     // 低速リングトリミング
output OPLVIMDS1;  // ＬＶＩ検出電圧トリミング		// SS3rd: 2010.01.30 Add	// v1.1 add
output OPLVIMDS0;  // ＬＶＩ検出電圧トリミング		// SS3rd: 2010.01.30 Add	// v1.1 mod
output OPLVIS1;    // ＬＶＩ検出電圧トリミング		// SS3rd: 2010.01.19 Add
output OPLVIS0;    // ＬＶＩ検出電圧トリミング		// SS3rd: 2010.01.19 Add
output OPVPOC2;    // ＬＶＩ検出電圧トリミング		// SS3rd: 2010.01.19 Add
output OPVPOC1;    // ＬＶＩ検出電圧トリミング		// SS3rd: 2010.01.19 Add
output OPVPOC0;    // ＬＶＩ検出電圧トリミング		// SS3rd: 2010.01.19 Add
output PORTSELB;									// v1.1 add

output OPWDCS2;    // ＷＤＴオーバーフロー時間設定信号
output OPWDCS1;    // ＷＤＴオーバーフロー時間設定信号
output OPWDCS0;    // ＷＤＴオーバーフロー時間設定信号
output OPWDEN;     // ＷＤＴ動作許可信号
output OPWDSTBY;   // スタンバイによるＷＤＴクロック停止許可信号(0=停止）
output OPWDWS1;    // ＷＤＴウインドウサイズ設定信号
output OPWDWS0;    // ＷＤＴウインドウサイズ設定信号
output OPWDINT;    // ＷＤＴインターバル
output OPOCDEN;    // ＯＣＤ動作許可信号
output C3HFF;      // ＯＣＤ動作許可信号
output SELIN1;     // 									// v1.1 mod ITHL --> SELIN1

input  AF19;       // FCBのフラッシュアドレス
input  AF18;       // FCBのフラッシュアドレス
input  AF17;       // FCBのフラッシュアドレス
input  AF16;       // FCBのフラッシュアドレス
input  AF15;       // FCBのフラッシュアドレス
input  AF14;       // FCBのフラッシュアドレス
input  AF13;       // FCBのフラッシュアドレス
input  AF12;       // FCBのフラッシュアドレス
input  AF11;       // FCBのフラッシュアドレス
input  AF10;       // FCBのフラッシュアドレス
input  AF9;        // FCBのフラッシュアドレス
input  AF8;        // FCBのフラッシュアドレス
input  AF7;        // FCBのフラッシュアドレス
input  AF6;        // FCBのフラッシュアドレス
input  AF5;        // FCBのフラッシュアドレス
input  AF4;        // FCBのフラッシュアドレス
input  AF3;        // FCBのフラッシュアドレス
input  AF2;        // FCBのフラッシュアドレス

output FLRO37;     // FCBへのFLASHデータ出力
output FLRO36;     // FCBへのFLASHデータ出力
output FLRO35;     // FCBへのFLASHデータ出力
output FLRO34;     // FCBへのFLASHデータ出力
output FLRO33;     // FCBへのFLASHデータ出力
output FLRO32;     // FCBへのFLASHデータ出力
output FLRO31;     // FCBへのFLASHデータ出力
output FLRO30;     // FCBへのFLASHデータ出力
output FLRO29;     // FCBへのFLASHデータ出力
output FLRO28;     // FCBへのFLASHデータ出力
output FLRO27;     // FCBへのFLASHデータ出力
output FLRO26;     // FCBへのFLASHデータ出力
output FLRO25;     // FCBへのFLASHデータ出力
output FLRO24;     // FCBへのFLASHデータ出力
output FLRO23;     // FCBへのFLASHデータ出力
output FLRO22;     // FCBへのFLASHデータ出力
output FLRO21;     // FCBへのFLASHデータ出力
output FLRO20;     // FCBへのFLASHデータ出力
output FLRO19;     // FCBへのFLASHデータ出力
output FLRO18;     // FCBへのFLASHデータ出力
output FLRO17;     // FCBへのFLASHデータ出力
output FLRO16;     // FCBへのFLASHデータ出力
output FLRO15;     // FCBへのFLASHデータ出力
output FLRO14;     // FCBへのFLASHデータ出力
output FLRO13;     // FCBへのFLASHデータ出力
output FLRO12;     // FCBへのFLASHデータ出力
output FLRO11;     // FCBへのFLASHデータ出力
output FLRO10;     // FCBへのFLASHデータ出力
output FLRO9;      // FCBへのFLASHデータ出力
output FLRO8;      // FCBへのFLASHデータ出力
output FLRO7;      // FCBへのFLASHデータ出力
output FLRO6;      // FCBへのFLASHデータ出力
output FLRO5;      // FCBへのFLASHデータ出力
output FLRO4;      // FCBへのFLASHデータ出力
output FLRO3;      // FCBへのFLASHデータ出力
output FLRO2;      // FCBへのFLASHデータ出力
output FLRO1;      // FCBへのFLASHデータ出力
output FLRO0;      // FCBへのFLASHデータ出力

//input  FLMOD;      // 既にFCBで OPTFLMEM | FLSPMD の論理がとられているのでは？
input  FLSPM;      // FLSPMDは最初の２回の					// SS3rd: 2009.09.25 Chg for FCB

input  EXCH;       // Extra Swap

input  PEXA;       //


input  SACEEN;     // ワード線非選択状態確認テスト信号


input  RESSQSTA;   // リセットシーケンス開始信号
output PRDSELEN;   // PRDSELラッチ許可信号
output EXCHEN;     // VAID FLAGラッチ許可信号
output SECEN;      // SECURITY FLAGラッチ許可信号
output FSWEN;      // FSWラッチ許可信号
output NVMRCEND;   // ユーザオプション読み込み完了信号

output TRMCP017;   // Vread2 リード電圧
output TRMCP016;   // Vread1 リード電圧
output TRMCP015;   // Vread0 リード電圧
output TRMCP014;   // iref4  リードリファレンス電流
output TRMCP013;   // iref3  リードリファレンス電流
output TRMCP012;   // iref2  リードリファレンス電流
output TRMCP011;   // iref1  リードリファレンス電流
output TRMCP010;   // iref0  リードリファレンス電流
output TRMCP09;    // idp2   書き込み基準電流
output TRMCP08;    // idp1   書き込み基準電流
output TRMCP07;    // idp0   書き込み基準電流
output TRMCP06;    // osc2   FLASH内蔵OSC周波数
output TRMCP05;    // osc1   FLASH内蔵OSC周波数
output TRMCP04;    // osc0   FLASH内蔵OSC周波数
output TRMCP03;    //  cp3   チャージポンプ出力電圧
output TRMCP02;    //  cp2   チャージポンプ出力電圧
output TRMCP01;    //  cp1   チャージポンプ出力電圧
output TRMCP00;    //  cp0   チャージポンプ出力電圧
output TRMCP114;   // iref4  リードリファレンス電流マクロ２用（マクロ２個積み時に使用）
output TRMCP113;   // iref3  リードリファレンス電流マクロ２用（マクロ２個積み時に使用）
output TRMCP112;   // iref2  リードリファレンス電流マクロ２用（マクロ２個積み時に使用）
output TRMCP111;   // iref1  リードリファレンス電流マクロ２用（マクロ２個積み時に使用）
output TRMCP110;   // iref0  リードリファレンス電流マクロ２用（マクロ２個積み時に使用）
output DTRMCP014;  // irefD4 リードリファレンス電流DataFlash用
output DTRMCP013;  // irefD3 リードリファレンス電流DataFlash用
output DTRMCP012;  // irefD2 リードリファレンス電流DataFlash用
output DTRMCP011;  // irefD1 リードリファレンス電流DataFlash用
output DTRMCP010;  // irefD0 リードリファレンス電流DataFlash用
output RTRMCP020;  // VreadC2 リード電圧READ-CP用CP出力
output RTRMCP019;  // VreadC1 リード電圧READ-CP用CP出力
output RTRMCP018;  // VreadC0 リード電圧READ-CP用CP出力
output RTRMCP017;  // VreadR2 リード電圧READ-CP用REG出力
output RTRMCP016;  // VreadR1 リード電圧READ-CP用REG出力
output RTRMCP015;  // VreadR0 リード電圧READ-CP用REG出力
output CE0;        // FLASH チップイネーブルマクロ１用（256x1、または512x1のみ対応）
output CE1;        // FLASH チップイネーブルマクロ２用（256x2個のみ対応）
output A19;        // FLASH アドレス
output A18;        // FLASH アドレス
output A17;        // FLASH アドレス
output A16;        // FLASH アドレス
output A15;        // FLASH アドレス
output A14;        // FLASH アドレス
output A13;        // FLASH アドレス
output A12;        // FLASH アドレス
output A11;        // FLASH アドレス
output A10;        // FLASH アドレス
output A9;         // FLASH アドレス
output A8;         // FLASH アドレス
output A7;         // FLASH アドレス
output A6;         // FLASH アドレス
output A5;         // FLASH アドレス
output A4;         // FLASH アドレス
output A3;         // FLASH アドレス
output A2;         // FLASH アドレス
input  RO037;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO036;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO035;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO034;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO033;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO032;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO031;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO030;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO029;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO028;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO027;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO026;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO025;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO024;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO023;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO022;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO021;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO020;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO019;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO018;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO017;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO016;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO015;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO014;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO013;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO012;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO011;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO010;      // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO09;       // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO08;       // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO07;       // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO06;       // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO05;       // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO04;       // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO03;       // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO02;       // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO01;       // マクロ１用FLASHデータ入力（FLASHからの出力データ）
input  RO00;       // マクロ１用FLASHデータ入力（FLASHからの出力データ）

input  RO137;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO136;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO135;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO134;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO133;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO132;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO131;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO130;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO129;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO128;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO127;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO126;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO125;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO124;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO123;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO122;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO121;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO120;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO119;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO118;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO117;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO116;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO115;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO114;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO113;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO112;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO111;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO110;      // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO19;       // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO18;       // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO17;       // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO16;       // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO15;       // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO14;       // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO13;       // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO12;       // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO11;       // マクロ２用FLASHデータ入力（FLASHからの出力データ）
input  RO10;       // マクロ２用FLASHデータ入力（FLASHからの出力データ）

output EXA;        // Extra領域選択信号
output BFA;        // BFLASH領域選択信号
output CLKSEL1;    // クロック選択信号（1:C1=BASECK、0:P1=FCB出力）
output SRCUT;      // 
output FLSTOP;     //
output SUB;        //								// SS3rd: 2009.09.29 Chg
output HISPEED;    //								// SS3rd: 2009.09.29 Chg



input  TID31;      // テストモード時の命令（データ）バス
input  TID30;      // テストモード時の命令（データ）バス
input  TID29;      // テストモード時の命令（データ）バス
input  TID28;      // テストモード時の命令（データ）バス
input  TID27;      // テストモード時の命令（データ）バス
input  TID26;      // テストモード時の命令（データ）バス
input  TID25;      // テストモード時の命令（データ）バス
input  TID24;      // テストモード時の命令（データ）バス
input  TID23;      // テストモード時の命令（データ）バス
input  TID22;      // テストモード時の命令（データ）バス
input  TID21;      // テストモード時の命令（データ）バス
input  TID20;      // テストモード時の命令（データ）バス
input  TID19;      // テストモード時の命令（データ）バス
input  TID18;      // テストモード時の命令（データ）バス
input  TID17;      // テストモード時の命令（データ）バス
input  TID16;      // テストモード時の命令（データ）バス
input  TID15;      // テストモード時の命令（データ）バス
input  TID14;      // テストモード時の命令（データ）バス
input  TID13;      // テストモード時の命令（データ）バス
input  TID12;      // テストモード時の命令（データ）バス
input  TID11;      // テストモード時の命令（データ）バス
input  TID10;      // テストモード時の命令（データ）バス
input  TID9;       // テストモード時の命令（データ）バス
input  TID8;       // テストモード時の命令（データ）バス
input  TID7;       // テストモード時の命令（データ）バス
input  TID6;       // テストモード時の命令（データ）バス
input  TID5;       // テストモード時の命令（データ）バス
input  TID4;       // テストモード時の命令（データ）バス
input  TID3;       // テストモード時の命令（データ）バス
input  TID2;       // テストモード時の命令（データ）バス
input  TID1;       // テストモード時の命令（データ）バス
input  TID0;       // テストモード時の命令（データ）バス

input  PTESINST;   // 
input  OPTFLMEM;   //
input  OPTMDUMP;   //


input  SPRGMOD;    //
input  TESTMOD;    //
input  TMODDFT;    //テストモード信号（SCAN時SCANRESZになる）

input  READ   ;

input  TESDBT ;    // BTモード中、高精度8Mトリミングを28Hに固定する為
input  SCANMODE;   // SCANMODE端子復活。FLSTOPをRESETB期間中(1)にする。SCANMODEではRESETBを伝播させない。

output	SELRO1 ;  // 2006.05.10

input	TA17 ;
input	TA16 ;
input	TA15 ;
input	TA14 ;
input	TA13 ;
input	TA12 ;
input	TA11 ;
input	TA10 ;
input	TA9 ;
input	TA8 ;
input	TA7 ;
input	TA6 ;
input	TA5 ;
input	TA4 ;
input	TA3 ;
input	TA2 ;
input	TA1 ;
input	TA0 ;

// SS2nd: ===== Add Input & Output Port ===================================================================
// SS2nd: 2007.06.25 Add
input   EXER            ; // Extra Erace signal. from FCB       // SS2nd:2007.06.25 Add CE1 generator from FLTOP(K0R 2nd)
output	FRQSEL4		; // TOPT1 FRQSEL4出力 端子へ
output	FRQSEL3		; // TOPT1 FRQSEL3出力 端子へ
output	FRQSEL2		; // TOPT1 FRQSEL2出力 端子へ
output	FRQSEL1		; // TOPT1 FRQSEL1出力 端子へ
output	FRQSEL0		; // TOPT1 FRQSEL0出力 端子へ

output	RLOWSPY		; // To FLASH					// SS3rd: 2009.09.29 Chg
output	LOWPOWER	; // To FLASH					// SS3rd: 2009.09.29 Chg
// SS2nd: 2007.07.12 Add
input	MODEFNOP	;	// for "STAY NOP" function of MISR
// SS2nd: 2007.07.17 Add
  output	CTRIM6, CTRIM5, CTRIM4, CTRIM3, CTRIM2, CTRIM1, CTRIM0 ;
  output	RTRIM5, RTRIM4, RTRIM3, RTRIM2, RTRIM1, RTRIM0 ;		// v1.1 mod
  output	WTRIM2, WTRIM1, WTRIM0 ;					// v1.1 add
  output	FTRIM5, FTRIM4, FTRIM3, FTRIM2, FTRIM1, FTRIM0 ;		// v1.1 add
  output	BGRT10, BGRT9,  BGRT8,  BGRT7 ;					// v1.1 add
  output	BGRT6,  BGRT5,  BGRT4,  BGRT3,  BGRT2,  BGRT1,  BGRT0 ;   

//
// SS2nd: 2007.07.18 Add NVMCHK
input	PSEL4;
// output	SECPDFLG ,CHKSMERR ;
output	 CSPDTFLG ,CKSMER ;	// SS2nd:2007.07.20 Chg
output   CFNSD9   ,CFNSD8
        ,CFNSD7   ,CFNSD6   ,CFNSD5   ,CFNSD4   ,CFNSD3   ,CFNSD2   ,CFNSD1   ,CFNSD0;  // SS2nd: 2007.08.08 Add CFNSD9
// SS2nd: 2007.07.19
input   WWR;
///////////// FSW ///////////////////////////////
input	 FSWE9    ,FSWE8
	,FSWE7    ,FSWE6    ,FSWE5    ,FSWE4    ,FSWE3    ,FSWE2    ,FSWE1    ,FSWE0 ;
input	 FSWS9    ,FSWS8
	,FSWS7    ,FSWS6    ,FSWS5    ,FSWS4    ,FSWS3    ,FSWS2    ,FSWS1    ,FSWS0 ;
//
// input	ICEMOD;	// 1:For ICE MODE. DW MASK Func DISABLE. But, FCLK MASK Func always ACT.
// SS2nd:2007.08.08 Del
// input	ICENODMK;	// 1:For ICE MODE. DW MASK Func DISABLE. But, FCLK MASK Func always ACT.
			// 0:For Device MODE. ( for FLASH HWR All Func ACT )
//
// SS2nd: 2007.07.31 Add
input	TPIDSEL; // 1: IROMO bus connect to PID under TESINST mode.
		 // 0: TID   bus connect to PID under TESINST mode.
// 2007.07.31 Add for CSC Request.
output	OPBOEN;	// To CSC Option Byte Output Enable timing.(1pulse@BASECK)
// 2007.09.19 Add for BB-Support
output		BBNVM1;
output		BBNVM2;
// SS2nd: ===== Add END ===================================================================================

// SS2nd:v1.10 ===== Add Input & Output Port ==============================================================
// output		FT3RESRQ ;	// 080502 Reset Request for FT3
output		CIBRESRQ ;	// (NSRESB masked FT3 RESET or Non-masked FT3 RESET)Request
// SS2nd:v1.10 ===== Add END ==============================================================================

// SS3rd:v1.00 ===== Add Input & Output Port ==============================================================
input		SELTAF ;	// from modectl
input		CECCE ;		// from FCB
input		TMBTSEL ;	// from FCB
input		TMSPMD ;	// from FCB
input		BTFLG ;		// from FCB
input		TRMRD1CK ;	// from FLASH
input		TRMRD2CK ;	// from FLASH

output		BRSAM ;		// for RAMTOP

input		FSPR ;		// from FCB
input		RDPR ;		// from FCB
input		WRPR ;		// from FCB
input		CEPR ;		// from FCB
input		SEPR ;		// from FCB
input		BTPR ;		// from FCB

output		BTBLS1 ;	// for FCB
output		BTBLS0 ;	// for FCB
output		FPSER2  ,FPSER1  ,FPSER0 ;
output		FPWWR2  ,FPWWR1  ,FPWWR0 ;
output		FPERTY7 ,FPERTY6 ,FPERTY5 ,FPERTY4 ,FPERTY3 ,FPERTY2 ,FPERTY1 ,FPERTY0 ;
output		FPWRTY7 ,FPWRTY6 ,FPWRTY5 ,FPWRTY4 ,FPWRTY3 ,FPWRTY2 ,FPWRTY1 ,FPWRTY0 ;
output		FPECC3  ,FPECC2  ,FPECC1  ,FPECC0 ;
output		R0FLAGZ ;
output		R1FLAGZ ;	// v1.1 Add
output		R0A7    ,R0A6    ,R0A5    ,R0A4    ,R0A3    ,R0A2    ,R0A1    ,R0A0 ;
output		R1A7    ,R1A6    ,R1A5    ,R1A4    ,R1A3    ,R1A2    ,R1A1    ,R1A0 ;		// V1.1 add

input		ICENOECC ;	// from ICE
input		SLECCOFF ;	// from modectl
input		TESTRMRD ;	// from modectl
output		ECCER ;		// for modectl
input		FMULTIEN ;	// from modectl
output		OSCNOSTP ;	// for flash_cp
output		OSCOUTEN ;	// for flash_cp
input		POSCNOST ;	// from modectl
input		POSCOUTE ;	// from modectl
input		CPT ;		// from fcb
output		HIOMSK ;	// for csc
input		TFLSTOPC ;	// 
output		AisRSEQ ;	// 
input		RDSETUP ;	// 
input		FLROACT ;	// 
// SS3rd:v1.00 ===== Add END ==============================================================================
// SS3rd:v2.00 ===== Add Input & Output Port ==============================================================
  input		FRQ4EN ;	// from csc
  input		TESINST;	// v1.1 add
  input		BBTESINST;      // v1.1 add
  input		PSYSRESB;	// v1.1 add
  input		CHMOD;		// v1.1 add
  input		GOFIRMR;	// v1.1 add
  input		SCANCLK;	// v1.1 add
// SS3rd:v2.00 ===== Add END ==============================================================================

wire        r_trmlv_en  ,
            r_trm0_en	, r_trm1_en   , r_trm2_en   , r_trm3_en   ,
            r_trm4_en	, r_fpara_en  ,						// v1.1 mod
            r_e2w_en	, r_fmopb_en  , r_tcal_en   ;

wire        tcpscen;
wire        THSPEED     , TSUB        , TLPOWER     , TRLSPY ;
wire        TCSRCUT     , TCFLSTOP ;

wire  [9:0] e2w_e2ws;	// SS3rd: 2009.09.25 Chg Bit-width: [8:0] -> [9:0]
wire  [9:0] e2w_e2we;


/////////////////////////////////output-bus///////////////////////////////////////////////PID-BUS
wire [31:0] pid;
wire        PID31,  PID30,  PID29,  PID28,  PID27,  PID26,  PID25,  PID24,
            PID23,  PID22,  PID21,  PID20,  PID19,  PID18,  PID17,  PID16,
            PID15,  PID14,  PID13,  PID12,  PID11,  PID10,  PID9,   PID8,
            PID7,   PID6,   PID5,   PID4,   PID3,   PID2,   PID1,   PID0;
assign     {PID31,  PID30,  PID29,  PID28,  PID27,  PID26,  PID25,  PID24,
            PID23,  PID22,  PID21,  PID20,  PID19,  PID18,  PID17,  PID16,
            PID15,  PID14,  PID13,  PID12,  PID11,  PID10,  PID9,   PID8,
            PID7,   PID6,   PID5,   PID4,   PID3,   PID2,   PID1,   PID0} = pid[31:0] ;
/////////////////////////////////output-bus///////////////////////////////////////////////FLRO-BUS
wire [37:0] flro ;
wire        FLRO37 ,FLRO36 ,FLRO35 ,FLRO34 ,FLRO33 ,FLRO32 ,
            FLRO31 ,FLRO30 ,FLRO29 ,FLRO28 ,FLRO27 ,FLRO26 ,FLRO25 ,FLRO24 ,
            FLRO23 ,FLRO22 ,FLRO21 ,FLRO20 ,FLRO19 ,FLRO18 ,FLRO17 ,FLRO16 ,
            FLRO15 ,FLRO14 ,FLRO13 ,FLRO12 ,FLRO11 ,FLRO10 ,FLRO9  ,FLRO8  ,
            FLRO7  ,FLRO6  ,FLRO5  ,FLRO4  ,FLRO3  ,FLRO2  ,FLRO1  ,FLRO0  ;
assign     {FLRO37 ,FLRO36 ,FLRO35 ,FLRO34 ,FLRO33 ,FLRO32 ,
            FLRO31 ,FLRO30 ,FLRO29 ,FLRO28 ,FLRO27 ,FLRO26 ,FLRO25 ,FLRO24 ,
            FLRO23 ,FLRO22 ,FLRO21 ,FLRO20 ,FLRO19 ,FLRO18 ,FLRO17 ,FLRO16 ,
            FLRO15 ,FLRO14 ,FLRO13 ,FLRO12 ,FLRO11 ,FLRO10 ,FLRO9  ,FLRO8  ,
            FLRO7  ,FLRO6  ,FLRO5  ,FLRO4  ,FLRO3  ,FLRO2  ,FLRO1  ,FLRO0} = flro[37:0] ;
/////////////////////////////////output-bus///////////////////////////////////////////////PRDATA-BUS
wire [15:0] prdata;
wire        PRDATA15 ,PRDATA14 ,PRDATA13 ,PRDATA12 ,
            PRDATA11 ,PRDATA10 ,PRDATA9  ,PRDATA8  ,
            PRDATA7  ,PRDATA6  ,PRDATA5  ,PRDATA4  ,
            PRDATA3  ,PRDATA2  ,PRDATA1  ,PRDATA0  ;
assign     {PRDATA15 ,PRDATA14 ,PRDATA13 ,PRDATA12 ,
            PRDATA11 ,PRDATA10 ,PRDATA9  ,PRDATA8  ,
            PRDATA7  ,PRDATA6  ,PRDATA5  ,PRDATA4  ,
            PRDATA3  ,PRDATA2  ,PRDATA1  ,PRDATA0} = prdata[15:0] ;
/////////////////////////////////output-bus///////////////////////////////////////////////R0A-BUS
  wire  [1:0]	trm2_rxflagz;		// v1.1 mod
  wire	[7:0]	trm3_r0a;		// v1.1 mod
  wire	[7:0]	trm2_r1a;		// v1.1 add
  wire		R0A7    ,R0A6    ,R0A5    ,R0A4    ,R0A3    ,R0A2    ,R0A1    ,R0A0 ;
  wire		R1A7    ,R1A6    ,R1A5    ,R1A4    ,R1A3    ,R1A2    ,R1A1    ,R1A0 ;	// v1.1 add

  assign {R1FLAGZ, R0FLAGZ }  = ( TESDBT ) ? 2'b11 : trm2_rxflagz[1:0];
  assign {R0A7    ,R0A6    ,R0A5    ,R0A4    ,R0A3    ,R0A2    ,R0A1    ,R0A0} = ( TESDBT ) ? 8'b0 : trm3_r0a[7:0];
  assign {R1A7    ,R1A6    ,R1A5    ,R1A4    ,R1A3    ,R1A2    ,R1A1    ,R1A0} = ( TESDBT ) ? 8'b0 : trm2_r1a[7:0];	// v1.1 add

/////////////////////////////////output-bus///////////////////////////////////////////////FPECC-BUS
wire  [3:0] fpara_fpecc;
wire        FPECC3  ,FPECC2  ,FPECC1  ,FPECC0  ;
assign     {FPECC3  ,FPECC2  ,FPECC1  ,FPECC0} = fpara_fpecc[3:0];
/////////////////////////////////output-bus///////////////////////////////////////////////FPERTY-BUS
wire  [7:0] fperty;
wire        FPERTY7 ,FPERTY6 ,FPERTY5 ,FPERTY4 ,FPERTY3 ,FPERTY2 ,FPERTY1 ,FPERTY0 ;
assign     {FPERTY7 ,FPERTY6 ,FPERTY5 ,FPERTY4 ,FPERTY3 ,FPERTY2 ,FPERTY1 ,FPERTY0} = fperty[7:0];
/////////////////////////////////output-bus///////////////////////////////////////////////FPWRTY-BUS
wire  [7:0] fpwrty;
wire        FPWRTY7 ,FPWRTY6 ,FPWRTY5 ,FPWRTY4 ,FPWRTY3 ,FPWRTY2 ,FPWRTY1 ,FPWRTY0 ;
assign     {FPWRTY7 ,FPWRTY6 ,FPWRTY5 ,FPWRTY4 ,FPWRTY3 ,FPWRTY2 ,FPWRTY1 ,FPWRTY0} = fpwrty[7:0];
/////////////////////////////////output-bus///////////////////////////////////////////////FPSER-BUS
wire  [2:0] fpara_fpser;
wire        FPSER2  ,FPSER1  ,FPSER0  ;
assign     {FPSER2  ,FPSER1  ,FPSER0} = fpara_fpser[2:0];
/////////////////////////////////output-bus///////////////////////////////////////////////FPWWR-BUS
wire  [2:0] fpara_fpwwr;
wire        FPWWR2  ,FPWWR1  ,FPWWR0  ;
assign     {FPWWR2  ,FPWWR1  ,FPWWR0} = fpara_fpwwr[2:0];
/////////////////////////////////output-bus///////////////////////////////////////////////BTBLS-BUS
wire  [1:0] fpara_btbls;
wire        BTBLS1  ,BTBLS0  ;
assign     {BTBLS1  ,BTBLS0} = fpara_btbls[1:0];
/////////////////////////////////output-bus///////////////////////////////////////////////A-BUS
wire [19:2] a;
wire        A19   ,A18   ,A17   ,A16   ,
            A15   ,A14   ,A13   ,A12   ,A11   ,A10   ,A9    ,A8    ,
            A7    ,A6    ,A5    ,A4    ,A3    ,A2    ;
assign      {A19   ,A18   ,A17   ,A16   ,
             A15   ,A14   ,A13   ,A12   ,A11   ,A10   ,A9    ,A8    ,
             A7    ,A6    ,A5    ,A4    ,A3    ,A2} = a;





/////////////////////////////////input_bus////////////////////////////////////////////////PA-BUS 
wire [ 3:0] paddr;
wire        PADDR3   ,PADDR2   ,PADDR1   ,PADDR0 ;
assign      paddr = {PADDR3   ,PADDR2   ,PADDR1   ,PADDR0};

/////////////////////////////////input_bus////////////////////////////////////////////////PWDATA-BUS
wire [15:0] pwdata;
wire        PWDATA15 ,PWDATA14 ,PWDATA13 ,PWDATA12 ,
            PWDATA11 ,PWDATA10 ,PWDATA9  ,PWDATA8  ,
            PWDATA7  ,PWDATA6  ,PWDATA5  ,PWDATA4  ,
            PWDATA3  ,PWDATA2  ,PWDATA1  ,PWDATA0  ;
assign      pwdata = {PWDATA15 ,PWDATA14 ,PWDATA13 ,PWDATA12 ,
                      PWDATA11 ,PWDATA10 ,PWDATA9  ,PWDATA8  ,
                      PWDATA7  ,PWDATA6  ,PWDATA5  ,PWDATA4  ,
                      PWDATA3  ,PWDATA2  ,PWDATA1  ,PWDATA0} ;
/////////////////////////////////input_bus////////////////////////////////////////////////RO0-BUS
wire [37:0] ro0;
wire        RO037, RO036, RO035, RO034, RO033, RO032,
            RO031, RO030, RO029, RO028, RO027, RO026, RO025, RO024,
            RO023, RO022, RO021, RO020, RO019, RO018, RO017, RO016,
            RO015, RO014, RO013, RO012, RO011, RO010, RO09,  RO08,
            RO07,  RO06,  RO05,  RO04,  RO03,  RO02,  RO01,  RO00;
assign      ro0 = {RO037, RO036, RO035, RO034, RO033, RO032,
                   RO031, RO030, RO029, RO028, RO027, RO026, RO025, RO024,
                   RO023, RO022, RO021, RO020, RO019, RO018, RO017, RO016,
                   RO015, RO014, RO013, RO012, RO011, RO010, RO09,  RO08,
                   RO07,  RO06,  RO05,  RO04,  RO03,  RO02,  RO01,  RO00};
/////////////////////////////////input_bus////////////////////////////////////////////////RO1-BUS
wire [37:0] ro1;
wire        RO137, RO136, RO135, RO134, RO133, RO132,
            RO131, RO130, RO129, RO128, RO127, RO126, RO125, RO124,
            RO123, RO122, RO121, RO120, RO119, RO118, RO117, RO116,
            RO115, RO114, RO113, RO112, RO111, RO110, RO19,  RO18,
            RO17,  RO16,  RO15,  RO14,  RO13,  RO12,  RO11,  RO10;
assign      ro1 = {RO137, RO136, RO135, RO134, RO133, RO132,
                   RO131, RO130, RO129, RO128, RO127, RO126, RO125, RO124,
                   RO123, RO122, RO121, RO120, RO119, RO118, RO117, RO116,
                   RO115, RO114, RO113, RO112, RO111, RO110, RO19,  RO18,
                   RO17,  RO16,  RO15,  RO14,  RO13,  RO12,  RO11,  RO10};
/////////////////////////////////input_bus////////////////////////////////////////////////TID-BUS
wire [31:0] tid;
wire        TID31, TID30, TID29, TID28, TID27, TID26, TID25, TID24,
            TID23, TID22, TID21, TID20, TID19, TID18, TID17, TID16,
            TID15, TID14, TID13, TID12, TID11, TID10, TID9 , TID8 ,
            TID7 , TID6 , TID5 , TID4 , TID3 , TID2 , TID1 , TID0 ;
assign      tid = {TID31, TID30, TID29, TID28, TID27, TID26, TID25, TID24,
                   TID23, TID22, TID21, TID20, TID19, TID18, TID17, TID16,
                   TID15, TID14, TID13, TID12, TID11, TID10, TID9 , TID8 ,
                   TID7 , TID6 , TID5 , TID4 , TID3 , TID2 , TID1 , TID0};
/////////////////////////////////input_bus////////////////////////////////////////////////PA-BUS
wire [19:2] pa;
wire        PA19  ,PA18  ,PA17  ,PA16  ,
            PA15  ,PA14  ,PA13  ,PA12  ,PA11  ,PA10  ,PA9   ,PA8   , 
            PA7   ,PA6   ,PA5   ,PA4   ,PA3   ,PA2   ;
assign      pa = {PA19  ,PA18  ,PA17  ,PA16  ,
                  PA15  ,PA14  ,PA13  ,PA12  ,PA11  ,PA10  ,PA9   ,PA8   ,
                  PA7   ,PA6   ,PA5   ,PA4   ,PA3   ,PA2};
/////////////////////////////////input_bus////////////////////////////////////////////////FLA-BUS
wire [19:2] fla;
wire        AF19  ,AF18  ,AF17  ,AF16  ,
            AF15  ,AF14  ,AF13  ,AF12  ,AF11  ,AF10  ,AF9   ,AF8   ,
            AF7   ,AF6   ,AF5   ,AF4   ,AF3   ,AF2   ;

wire        fla19_in = AF19 | ( TA17 & OPTFLMEM & OPTMDUMP ) ;                   // 2006.05.19 add	???

//assign      fla = {FLA18 ,FLA17 ,FLA16 ,                                       // 2006.05.19 modify
assign      fla = {fla19_in ,AF18  ,AF17  ,AF16  ,
                   AF15  ,AF14  ,AF13  ,AF12  ,AF11  ,AF10  ,AF9   ,AF8   ,
                   AF7   ,AF6   ,AF5   ,AF4   ,AF3   ,AF2};
/////////////////////////////////input_bus////////////////////////////////////////////////FSWE-BUS
//wire [9:0]  e2w_e2we;
wire        FSWE9 ,FSWE8 ,
            FSWE7 ,FSWE6 ,FSWE5 ,FSWE4 ,FSWE3 ,FSWE2 ,FSWE1 ,FSWE0 ;

assign      e2w_e2we = {FSWE9 ,FSWE8 ,
                        FSWE7 ,FSWE6 ,FSWE5 ,FSWE4 ,FSWE3 ,FSWE2 ,FSWE1 ,FSWE0};

/////////////////////////////////input_bus////////////////////////////////////////////////FSWS-BUS
//wire [9:0]  e2w_e2ws;
wire        FSWS9 ,FSWS8 ,
            FSWS7 ,FSWS6 ,FSWS5 ,FSWS4 ,FSWS3 ,FSWS2 ,FSWS1 ,FSWS0 ;

assign      e2w_e2ws = {FSWS9 ,FSWS8 ,
                        FSWS7 ,FSWS6 ,FSWS5 ,FSWS4 ,FSWS3 ,FSWS2 ,FSWS1 ,FSWS0};

wire  tmod_dft = TMODDFT ;
wire  FLMOD    = FLSPM | OPTFLMEM ;


/////////////////////////////////input_bus////////////////////////////////////////////////TA-BUS
wire [17:0] ta;
wire        TA17  ,TA16  ,TA15  ,TA14  ,TA13  ,TA12  ,TA11  ,TA10  ,
            TA9   ,TA8   ,TA7   ,TA6   ,TA5   ,TA4   ,TA3   ,TA2   ,TA1   ,TA0 ;
assign      ta = {TA17 ,TA16 ,TA15 ,TA14  ,TA13  ,TA12  ,TA11  ,TA10  ,
                  TA9  ,TA8  ,TA7   ,TA6   ,TA5   ,TA4   ,TA3   ,TA2   ,TA1   ,TA0};


/////////////////////////////////output bus///////////////////////////////////////////////TRMLV
////////////// TRMLV ////////////////////////////
  wire		BGRT10, BGRT9, BGRT8, BGRT7 ;							// v1.1 add
  wire		BGRT6, BGRT5, BGRT4, BGRT3, BGRT2, BGRT1, BGRT0  ;
  wire	[ 6:0]	trmlv1_bgrt;
  wire	[ 3:0]	trmlv1_bgrtc;									// v1.1 add

  assign  { BGRT10, BGRT9, BGRT8, BGRT7 } = trmlv1_bgrtc[3:0];					// v1.1 add
  assign  { BGRT6, BGRT5, BGRT4, BGRT3, BGRT2, BGRT1, BGRT0 } = trmlv1_bgrt[6:0];

// SS2nd: ===== Add Wire & Assign =========================================================================
// SS2nd: 2007.07.17 Add
/////////////////////////////////output bus///////////////////////////////////////////////TRM4
////////////// TRM4 ////////////////////////////
  wire		CTRIM6, CTRIM5, CTRIM4, CTRIM3, CTRIM2, CTRIM1, CTRIM0 ;
  wire		WTRIM2, WTRIM1, WTRIM0 ;					// v1.1 add
  wire		FTRIM5, FTRIM4, FTRIM3, FTRIM2, FTRIM1, FTRIM0 ;		// v1.1 add
  wire		RTRIM5, RTRIM4, RTRIM3, RTRIM2, RTRIM1, RTRIM0 ;		// v1.1 mod

// TESDBTモードにて、クロックが不安定になることを避ける為に、初期値を出力している。(基準クロックは32MHzリング)
// セレクタ回路は、_FMOPモジュール内部
  wire	[ 6:0]	dbt_r32ctrm;
  wire	[ 2:0]	dbt_r32wtrm;
  wire	[ 5:0]	dbt_r32ftrm;
  wire	[ 5:0]	dbt_r32rtrm;

  assign  { CTRIM6, CTRIM5, CTRIM4, CTRIM3, CTRIM2, CTRIM1, CTRIM0 } = dbt_r32ctrm[6:0] ;
  assign  { WTRIM2, WTRIM1, WTRIM0 }                                 = dbt_r32wtrm[2:0] ;	// v1.1 add
  assign  { FTRIM5, FTRIM4, FTRIM3, FTRIM2, FTRIM1, FTRIM0 }         = dbt_r32ftrm[5:0] ;	// v1.1 add
  assign  { RTRIM5, RTRIM4, RTRIM3, RTRIM2, RTRIM1, RTRIM0 }         = dbt_r32rtrm[5:0] ;	// v1.1 mod


  wire	[4:0]	rstate;
  wire		ren_ext;
  wire	[15:0]	prdata_ext;
  wire	[15:0]	rseq_dec_addr_ext_in;

  wire		AisS0	;
  wire		AisS1	;
  wire		AisS2	;
  wire		AisS3	;
  wire		ce0msk_en;
  wire		EXAmsk_en;
// 2007.08.08 Add
  wire		OPOCDEN_pre;
  assign	OPOCDEN = ( CSPDTFLG ) ? 1'b0 : OPOCDEN_pre ;

// SS2nd: ===== Add END ===================================================================================

// SS2nd:v1.10 ===== Add Wire & Assign ====================================================================
  wire		wdton_ft_res;		// FT3_H for wdton RESET output;
  wire		wdstbyon_ft_res;	// FT3_H for wdstbyon RESET output;
  wire	[1:0]	lvis_ft_res;		// FT3_L for lvis RESET output;
  wire	[2:0]	vpoc_ft_res;		// FT3_H for vpoc RESET output;
  wire		portselb_ft_res;	// FT3_H for portselb RESET output;	// v1.1 add
  wire		bgr_ft_res_all;		// FT3_H for bgrt RESET output;		// v1.1 add

// SS2nd:v1.10 ===== Add END ==============================================================================

// SS3rd:v1.00 ===== Add Wire & Assign ====================================================================
  wire [31:0]	iromo;			// 
  wire		phspeed ;		// 
  wire		plpower ;		// 
  wire		prlspy ;		// 
  wire		r_frqsel_en ;		// 
  wire		opbmden ;		// 

/////////////////////////////////output bus///////////////////////////////////////////////FRQSEL
////////////// FRQSEL ////////////////////////////
  wire		FRQSEL4, FRQSEL3, FRQSEL2, FRQSEL1, FRQSEL0 ;
  wire	[ 4:0]	frqsel;
//assign  { FRQSEL4, FRQSEL3, FRQSEL2, FRQSEL1, FRQSEL0 } = ( TESDBT ) ? 5'b01010 : frqsel[4:0];
  assign  { FRQSEL4, FRQSEL3, FRQSEL2, FRQSEL1, FRQSEL0 } = ( TESDBT ) ? 5'b01010 : {(FRQ4EN|PTESINST) & frqsel[4],frqsel[3:0]};	// Ver2.0 modify

// SS3rd:v1.00 ===== Add END ==============================================================================



QLK0RCIBCM3SF1V1_FMOP fmop(
    .TESTMOD(TESTMOD)                       ,.tmod_dft(tmod_dft)                     ,
    .TESDBT(TESDBT)                         ,.PSEL1(PSEL1)                           ,
    .BASECK(BASECKHS)                       ,.SYSRESB(SYSRESB)                       ,.RESETB(RESETB)                         ,
    .PWRITE(PWRITE)                         ,.PENABLE(PENABLE)                       ,
    .paddr(paddr[3:0])                      ,.pwdata(pwdata)                         ,.prdata(prdata)                         ,
    .iromo(iromo)                           ,
    .r_trmlv_en(r_trmlv_en)                 ,											// SS3rd: 2010.02.01 Chg
    .r_trm0_en(r_trm0_en)                   ,.r_trm1_en(r_trm1_en)                   ,.r_trm2_en(r_trm2_en)                   ,
    .r_trm3_en(r_trm3_en)                   ,.r_trm4_en(r_trm4_en)                   ,.r_fpara_en(r_fpara_en)                 ,	// v1.1 mod
    .r_fmopb_en(r_fmopb_en)                 ,.r_tcal_en(r_tcal_en)                   ,
    .FRSEL4(FRSEL4)                         ,.FRSEL3(FRSEL3)                         ,
    .FRSEL2(FRSEL2)                         ,.FRSEL1(FRSEL1)                         ,.FRSEL0(FRSEL0)                         ,
    .OPLVIMDS1(OPLVIMDS1)                   ,.OPLVIMDS0(OPLVIMDS0)                   ,						// v1.1 mod
    .OPLVIS1(OPLVIS1)                       ,.OPLVIS0(OPLVIS0)                       ,
    .OPVPOC2(OPVPOC2)                       ,.OPVPOC1(OPVPOC1)                       ,.OPVPOC0(OPVPOC0)                       ,
    .PORTSELB(PORTSELB)                     ,											// v1.1 add
    .OPWDCS2(OPWDCS2)                       ,.OPWDCS1(OPWDCS1)                       ,
    .OPWDCS0(OPWDCS0)                       ,.OPWDEN(OPWDEN)                         ,.OPWDSTBY(OPWDSTBY)                     ,
    .OPWDWS1(OPWDWS1)                       ,.OPWDWS0(OPWDWS0)                       ,.OPWDINT(OPWDINT)                       ,
    .OPOCDEN(OPOCDEN_pre)                   ,.C3HFF(C3HFF)                           ,.SELIN1(SELIN1)                         ,	// v1.1 mod
    .tcpscen(tcpscen)                       ,
    .THSPEED(THSPEED)                       ,.TSUB(TSUB)                             ,.TLPOWER(TLPOWER)                       ,
    .TRLSPY(TRLSPY)                         ,
    .TCSRCUT(TCSRCUT)                       ,.TCFLSTOP(TCFLSTOP)                     ,
    .trm2_rxflagz(trm2_rxflagz)             ,.trm3_r0a(trm3_r0a)                     ,.trm2_r1a(trm2_r1a)                     ,	// v1.1 mod
    .fpara_fpecc(fpara_fpecc)               ,.fperty(fperty)                         ,.fpwrty(fpwrty)                         ,
    .fpara_fpser(fpara_fpser)               ,.fpara_fpwwr(fpara_fpwwr)               ,.fpara_btbls(fpara_btbls)               ,
    .TRMCP017(TRMCP017)                     ,.TRMCP016(TRMCP016)                     ,.TRMCP015(TRMCP015)                     ,
    .TRMCP014(TRMCP014)                     ,.TRMCP013(TRMCP013)                     ,.TRMCP012(TRMCP012)                     ,
    .TRMCP011(TRMCP011)                     ,.TRMCP010(TRMCP010)                     ,.TRMCP09(TRMCP09)                       ,
    .TRMCP08(TRMCP08)                       ,.TRMCP07(TRMCP07)                       ,.TRMCP06(TRMCP06)                       ,
    .TRMCP05(TRMCP05)                       ,.TRMCP04(TRMCP04)                       ,.TRMCP03(TRMCP03)                       ,
    .TRMCP02(TRMCP02)                       ,.TRMCP01(TRMCP01)                       ,.TRMCP00(TRMCP00)                       ,
    .TRMCP114(TRMCP114)                     ,.TRMCP113(TRMCP113)                     ,.TRMCP112(TRMCP112)                     ,
    .TRMCP111(TRMCP111)                     ,.TRMCP110(TRMCP110)                     ,
    .DTRMCP014(DTRMCP014)                   ,.DTRMCP013(DTRMCP013)                   ,.DTRMCP012(DTRMCP012)                   ,
    .DTRMCP011(DTRMCP011)                   ,.DTRMCP010(DTRMCP010)                   ,
    .RTRMCP020(RTRMCP020)                   ,.RTRMCP019(RTRMCP019)                   ,.RTRMCP018(RTRMCP018)                   ,
    .RTRMCP017(RTRMCP017)                   ,.RTRMCP016(RTRMCP016)                   ,.RTRMCP015(RTRMCP015)                   ,
    .trmlv1_bgrt(trmlv1_bgrt)               ,
    .trmlv1_bgrtc(trmlv1_bgrtc)             ,						// v1.1 add
//  .trm3_ctrim(trm3_ctrim)                 ,.trm3_rtrim(trm3_rtrim)                 ,
    .dbt_r32ctrm(dbt_r32ctrm)               ,.dbt_r32rtrm(dbt_r32rtrm)               ,
    .dbt_r32wtrm(dbt_r32wtrm)               ,.dbt_r32ftrm(dbt_r32ftrm)               ,	// v1.1 add
    .ren_ext(ren_ext)                       ,.prdata_ext(prdata_ext)                 ,
    .wdton_ft_res(wdton_ft_res)             ,.wdstbyon_ft_res(wdstbyon_ft_res)       ,
    .lvis_ft_res(lvis_ft_res)               ,.vpoc_ft_res(vpoc_ft_res)               ,
    .portselb_ft_res(portselb_ft_res)       ,.bgr_ft_res_all(bgr_ft_res_all)         ,						// v1.1 add
    .BRSAM(BRSAM)                           ,
    .SCANMODE(SCANMODE)                     ,
    .phspeed(phspeed)                       ,.plpower(plpower)                       ,.prlspy(prlspy)                         ,
    .frqsel(frqsel)                         ,
    .TESTRMRD(TESTRMRD)                     ,
    .HIOMSK(HIOMSK)                         ,
    .r_frqsel_en(r_frqsel_en)               ,.opbmden(opbmden)                       ,
    .RESSQSTA(RESSQSTA)                     ,.TRMRD1CK(TRMRD1CK)                     ,.TRMRD2CK(TRMRD2CK),
    .BBTESINST(BBTESINST)                   ,.PSYSRESB(PSYSRESB)		     ,.CHMOD(CHMOD),
    .GOFIRMR(GOFIRMR)                       ,.NSRESB(NSRESB)
);


//////   v1.1 add scan monitor kokokara //////

QLK0RCIBCM3SF1V1_MONI moni (
    .a(a)                                   ,.BFA(BFA)                               ,.EXA(EXA)                               ,
    .CE0(CE0)                               ,.CE1(CE1)                               ,
    .CLKSEL1(CLKSEL1)                       ,.SRCUT(SRCUT)                           ,
    .SCANCLK(SCANCLK)                       ,.RESETB(RESETB)                         ,.SCANMODE(SCANMODE)                     ,
    .scan_moni()
);

//////   v1.1 add scan monitor kokomade //////

QLK0RCIBCM3SF1V1_CIB cib(
    .BASECK(BASECKHS)                       ,.RESETB(RESETB)                         ,
    .NSRESB(NSRESB)                         ,.SCANMODE(SCANMODE)                     ,.FLMOD(FLMOD)                           ,
    .PSUBMODE(PSUBMODE)                     ,
    .FHLTST(FHLTST)                         ,.FSTPST(FSTPST)                         ,.SACEEN(SACEEN)                         ,
    .PTESINST(PTESINST)                     ,.OPTMDUMP(OPTMDUMP)                     ,
    .OPTFLMEM(OPTFLMEM)                     ,
    .RESSQSTA(RESSQSTA)                     ,
    .NVMRCEND(NVMRCEND)                     ,
    .PRDSELEN(PRDSELEN)                     ,.EXCHEN(EXCHEN)                         ,.SECEN(SECEN)                           ,
    .FSWEN(FSWEN)                           ,.CLKSEL1(CLKSEL1)                       ,
    .SRCUT(SRCUT)                           ,.HISPEED(HISPEED)                       ,
    .RLOWSPY(RLOWSPY)                       ,.LOWPOWER(LOWPOWER)                     ,						// SS2nd: 2007.06.28 Add	// SS3rd: 2009.09.29 Chg
    .SUB(SUB)                               ,.FLSTOP(FLSTOP)                         ,.iromo(iromo)                           ,		// SS3rd: 2009.09.29 Chg
    .tid(tid)                               ,.pid(pid)                               ,
    .r_trmlv_en(r_trmlv_en)                 ,
    .r_trm0_en(r_trm0_en)                   ,.r_trm1_en(r_trm1_en)                   ,.r_trm2_en(r_trm2_en)                   ,
    .r_trm3_en(r_trm3_en)                   ,.r_trm4_en(r_trm4_en)                   ,.r_fpara_en(r_fpara_en)                 ,	// v1.1 mod
    .r_e2w_en(r_e2w_en)                     ,.r_fmopb_en(r_fmopb_en)                 ,.r_tcal_en(r_tcal_en)                   ,
    .CE0(CE0)                               ,
    .CE1(CE1)                               ,.EXA(EXA)                               ,.BFA(BFA)                               ,
    .ro0(ro0)                               ,.ro1(ro1)                               ,.flro(flro)                             ,
    .a(a)                                   ,.pa(pa)                                 ,.fla(fla)                               ,
    .ta(ta)                                 ,.TESDBT(TESDBT)                         ,
    .PEXA(PEXA)                             ,.EXCH(EXCH)                             ,
    .SLFLASH(SLFLASH)                       ,
    .tcpscen(tcpscen)                       ,
    .THSPEED(THSPEED)                       ,.TSUB(TSUB)                             ,.TLPOWER(TLPOWER)                       ,
    .TRLSPY(TRLSPY)                         ,
    .TCSRCUT(TCSRCUT)                       ,.TCFLSTOP(TCFLSTOP)                     ,
    .SELRO1(SELRO1)                         ,
    .MODEFNOP(MODEFNOP)                     ,
    .rstate(rstate)                         ,.rseq_dec_addr_ext_in(rseq_dec_addr_ext_in)                                      ,
    .AisS0(AisS0)       ,.AisS1(AisS1)          ,.AisS2(AisS2)          ,.AisS3(AisS3)          ,
    .ce0msk_en(ce0msk_en)                   ,
    .EXAmsk_en(EXAmsk_en)                   ,
    .TPIDSEL(TPIDSEL)                       ,
    .OPBOEN(OPBOEN)                         ,
    .BBNVM1(BBNVM1)                         ,.BBNVM2(BBNVM2)                         ,
    .SELTAF(SELTAF)                         ,											// SS3rd: 2009.09.19 Add
    .CECCE(CECCE)                           ,											// SS3rd: 2009.09.25 Add
    .TMBTSEL(TMBTSEL)                       ,.TMSPMD(TMSPMD)                         ,
    .BTFLG(BTFLG)                           ,.BTBLS1(BTBLS1)                         ,.BTBLS0(BTBLS0)                         ,	// SS3rd: 2009.10.27 Add
    .ICENOECC(ICENOECC)                     ,.SLECCOFF(SLECCOFF)                     ,.ECCER(ECCER)                           ,	// SS3rd: 2009.12.21 Add
    .FMULTIEN(FMULTIEN)                     ,
    .OSCNOSTP(OSCNOSTP)                     ,.OSCOUTEN(OSCOUTEN)                     ,.POSCNOST(POSCNOST)                     ,
    .POSCOUTE(POSCOUTE)                     ,.CPT(CPT)                               ,
    .phspeed(phspeed)                       ,.plpower(plpower)                       ,.prlspy(prlspy)                         ,
    .r_frqsel_en(r_frqsel_en)               ,.opbmden(opbmden)                       ,
    .TFLSTOPC(TFLSTOPC)                     ,
    .AisRSEQ(AisRSEQ)                       ,.RDSETUP(RDSETUP)                       ,.FLROACT(FLROACT)
);


// SS2nd: 2007.07.18 Add
///////////////////////////// NVMCHECKER /////////////////////////////////////////////
wire    [ 9:0]  CFNSD;  // SS2nd: 2007.08.08 Chg:wire   [ 8:0]  CFNSD;
assign  { CFNSD9   ,CFNSD8
         ,CFNSD7   ,CFNSD6   ,CFNSD5   ,CFNSD4   ,CFNSD3   ,CFNSD2   ,CFNSD1   ,CFNSD0   } = CFNSD[ 9:0];

wire    [ 6:0]  secuflg;
assign  secuflg[ 6:0] = { FSPR, RDPR, WRPR, CEPR, SEPR, BTPR, BTFLG };

wire	[15:0]	prdata_o;
// wire	[15:0]	prdata_ext;
assign	prdata_ext = prdata_o;
// wire		ren_ext;
wire		ren_o;
assign	ren_ext = ren_o;

wire	[15:0]	rseq_dec_addr2_o;
// wire	[15:0]	rseq_dec_addr_ext_in;
assign	rseq_dec_addr_ext_in = rseq_dec_addr2_o;

wire		ce0msk_en_o;
assign		ce0msk_en = ce0msk_en_o;
wire		EXAmsk_en_o;
assign		EXAmsk_en = EXAmsk_en_o;

QLK0RCIBCM3SF1V1_NVMCHK nvmchk (
	.BASECK(BASECKHS),	.SYSRESB(SYSRESB),	.RESETB(RESETB),	.NSRESB(NSRESB),
	.prdata_o(prdata_o),	.ren_o(ren_o),											// APB I/F output
	.PSEL4(PSEL4),		.PWRITE(PWRITE),	.PENABLE(PENABLE),	.paddr(paddr[2:0]),	.pwdata(pwdata[9:0]),	// APB I/F input
	.CSPDTFLG(CSPDTFLG),	.CKSMER(CKSMER),	.CFNSD(CFNSD),								// TOP Output
	.iromo(iromo[15:0]),
	.rseq_dec_addr2_o(rseq_dec_addr2_o),
	.rstate(rstate),	.NVMRCEND(NVMRCEND),	.r_e2w_en(r_e2w_en),	.r_fmopb_en(r_fmopb_en),
	.secuflg(secuflg),	.e2w_e2we(e2w_e2we),	.e2w_e2ws(e2w_e2ws),
// v1.1 mod PTESINST -> TESINST
	.PTESINST(TESINST),	.TESTMOD(TESTMOD),
	.ce0msk_en_o(ce0msk_en_o),
	.EXAmsk_en_o(EXAmsk_en_o),
	.READ(READ),		.WWR(WWR),		.EXER(EXER),		.PEXA(PEXA),
	.AisS0(AisS0),		.AisS1(AisS1),		.AisS2(AisS2),		.AisS3(AisS3),
	.SPRGMOD(SPRGMOD),	.FLSPM(FLSPM)
);
// END ////////////////////// NVMCHECKER /////////////////////////////////////////////

// for FT3 RESET
QLK0RCIBCM3SF1V1_FT3_RST_OR ft3_rst_or (
	 .CIBRESRQ(CIBRESRQ),
	 .NSRESB(NSRESB),
	 .wdton_ft_res(wdton_ft_res),	.wdstbyon_ft_res(wdstbyon_ft_res),
	 .lvis_ft_res(lvis_ft_res),	.vpoc_ft_res(vpoc_ft_res),
	 .portselb_ft_res(portselb_ft_res),							// v1.1 add
	 .bgr_ft_res_all(bgr_ft_res_all)							// v1.1 add
);

endmodule // QLK0RCIBCM3SF1V1







// === Each Sub Modules ============================================================

module QLK0RCIBCM3SF1V1_FMOP(TESTMOD       , tmod_dft      , TESDBT        ,
                             PSEL1         , 
                             BASECK        , SYSRESB       , RESETB        ,
                             PWRITE        , PENABLE       ,
                             paddr         , pwdata        , prdata        ,
                             iromo         ,
                             r_trmlv_en    ,							// SS3rd: 2010.02.01 Chg
                             r_trm0_en     , r_trm1_en     , r_trm2_en     , r_trm3_en     ,
                             r_trm4_en     , r_fpara_en    , r_fmopb_en    , r_tcal_en     ,	// v1.1 mod
                             FRSEL4        ,
                             FRSEL3        , FRSEL2        , FRSEL1        , FRSEL0        ,
                             OPLVIMDS1     , OPLVIMDS0     , OPLVIS1       , OPLVIS0       ,
                             OPVPOC2       , OPVPOC1       , OPVPOC0       ,
			     PORTSELB      ,							// v1.1 add
                             OPWDCS2       , OPWDCS1       , OPWDCS0       , 
                             OPWDEN        , OPWDSTBY      ,
                             OPWDWS1       , OPWDWS0       , 
                             OPWDINT       ,
                             OPOCDEN       , C3HFF         , SELIN1        ,			// v1.1 mod
                             tcpscen       , THSPEED       , TSUB          , TLPOWER       ,
                             TRLSPY        ,
                             TCSRCUT       , TCFLSTOP      ,
                             trm2_rxflagz  , trm3_r0a      , trm2_r1a      ,			// v1.1 add
                             fpara_fpecc   , fperty        , fpwrty        , fpara_fpser   ,
                             fpara_fpwwr   , fpara_btbls   ,
                                                             TRMCP017      , TRMCP016      ,
                             TRMCP015      , TRMCP014      , TRMCP013      , TRMCP012      ,
                             TRMCP011      , TRMCP010      , TRMCP09       , TRMCP08       ,
                             TRMCP07       , TRMCP06       , TRMCP05       , TRMCP04       ,
                             TRMCP03       , TRMCP02       , TRMCP01       , TRMCP00       ,
                             TRMCP114      , TRMCP113      , TRMCP112      , TRMCP111      ,
                             TRMCP110      ,
                             DTRMCP014     , DTRMCP013     , DTRMCP012     , DTRMCP011     ,
                             DTRMCP010     ,
                             RTRMCP020     , RTRMCP019     , RTRMCP018     , RTRMCP017     ,
                             RTRMCP016     , RTRMCP015     ,
			     trmlv1_bgrt   ,
			     trmlv1_bgrtc  ,							// v1.1 add
//			     trm3_ctrim    , trm3_rtrim    ,
			     dbt_r32ctrm   , dbt_r32rtrm   ,
			     dbt_r32wtrm   , dbt_r32ftrm   ,					// v1.1 add
			     ren_ext       , prdata_ext    ,
			     wdton_ft_res  , wdstbyon_ft_res ,
			     lvis_ft_res   , vpoc_ft_res   ,
			     portselb_ft_res ,							// v1.1 add
			     bgr_ft_res_all,							// v1.1 add
			     BRSAM         ,
			     SCANMODE      ,
			     phspeed       , plpower       , prlspy        ,
			     frqsel        ,
                             TESTRMRD      ,
                             HIOMSK        ,
                             r_frqsel_en   , opbmden       ,
                             RESSQSTA      , TRMRD1CK      , TRMRD2CK      ,
			     BBTESINST     , PSYSRESB	   , CHMOD	   ,			// v1.1 add
			     GOFIRMR       , NSRESB	  					// v1.1 add
);

input           TESTMOD;             //テストモード信号（PSEL2群のアクセス許可に使用）
input           tmod_dft;            //テストモード信号（SCAN時SCANRESZになる）
input           TESDBT;              //BTモード中、高精度8Mトリミングを28Hに固定する為
input           PSEL1;               //APB Peripheral SELect信号１
input           BASECK;              // マクロ動作クロック
input           SYSRESB;             // リセット（ロウアクティブ）
input           RESETB;              // リセット
input           PWRITE;              // APBライト信号
input           PENABLE;             // APBアクセスイネーブル
input  [ 3:0]   paddr;               // APBアドレス
input  [15:0]	pwdata;		     // APBライトデータ
output [15:0]   prdata;              // APBリードデータ
input  [31:0]   iromo;               // eccデコード後データバス
input           r_trmlv_en ;         // RESSEQからの書き込み許可(trmlv1,trmlv2)	// SS3rd: 2010.02.01 Chg
input           r_trm0_en ;          // RESSEQからの書き込み許可(trm0)
input           r_trm1_en ;          // RESSEQからの書き込み許可(trm1)
input           r_trm2_en ;          // RESSEQからの書き込み許可(trm2)
input           r_trm3_en ;          // RESSEQからの書き込み許可(trm3)
input           r_trm4_en ;          // RESSEQからの書き込み許可(trm4)		// v1.1
input           r_fpara_en ;         // RESSEQからの書き込み許可(fpara)
input           r_fmopb_en ;         // RESSEQからの書き込み許可(fmopb)
input           r_tcal_en ;          // RESSEQからの書き込み許可(tcal)

output          FRSEL4             ; // 端子へ
output          FRSEL3             ; // 端子へ
output          FRSEL2             ; // 端子へ
output          FRSEL1             ; // 端子へ
output          FRSEL0             ; // 端子へ
output          OPLVIMDS1          ; // 端子へ
output          OPLVIMDS0          ; // 端子へ
output          OPLVIS1            ; // 端子へ
output          OPLVIS0            ; // 端子へ
output          OPVPOC2            ; // 端子へ
output          OPVPOC1            ; // 端子へ
output          OPVPOC0            ; // 端子へ
output          PORTSELB           ; // 端子へ

output          OPWDCS2            ; // 端子へ
output          OPWDCS1            ; // 端子へ
output          OPWDCS0            ; // 端子へ
output          OPWDEN             ; // 端子へ
output          OPWDSTBY           ; // 端子へ
output          OPWDWS1            ; // 端子へ
output          OPWDWS0            ; // 端子へ
output          OPWDINT            ; // 端子へ
output          OPOCDEN            ; // 端子へ
output          C3HFF              ; // 端子へ
output          SELIN1             ; // 端子へ				// v1.1 mod
output          tcpscen            ; // テストモード用THSPEED,TSUB有効信号
//
output          THSPEED            ; // テストモード用THSPEED
output          TSUB               ; // テストモード用TSUB
output		TLPOWER		   ; // TCPSCTLのTLPOWERビット本体
output		TRLSPY 		   ; // TCPSCTLのTRLSPYビット本体
output		TCSRCUT		   ; // TCPSCTLのTCSRCUTビット本体
output		TCFLSTOP	   ; // TCPSCTLのTCFLSTOPビット本体

output [ 1:0]	trm2_rxflagz	   ; // 端子R0FLAGZ, R1FLAGZと等価	// v1.1 mod
output [ 7:0]   trm3_r0a  	   ; // 端子R0A7-0と等価
output [ 7:0]   trm2_r1a  	   ; // 端子R1A7-0と等価

output [ 3:0]   fpara_fpecc	   ; // 端子FPECC3-0と等価
output [ 7:0]   fperty		   ; // 端子FPERTY7-0と等価
output [ 7:0]   fpwrty		   ; // 端子FPWRTY3-0と等価
output [ 2:0]   fpara_fpser	   ; // 端子FPSER2-0と等価
output [ 2:0]   fpara_fpwwr	   ; // 端子FPWWR2-0と等価
output [ 1:0]   fpara_btbls	   ; // 端子BTBLS1-0と等価

output          TRMCP017;            // 端子へ
output          TRMCP016;            // 端子へ
output          TRMCP015;            // 端子へ
output          TRMCP014;            // 端子へ
output          TRMCP013;            // 端子へ
output          TRMCP012;            // 端子へ
output          TRMCP011;            // 端子へ
output          TRMCP010;            // 端子へ
output          TRMCP09 ;            // 端子へ
output          TRMCP08 ;            // 端子へ
output          TRMCP07 ;            // 端子へ
output          TRMCP06 ;            // 端子へ
output          TRMCP05 ;            // 端子へ
output          TRMCP04 ;            // 端子へ
output          TRMCP03 ;            // 端子へ
output          TRMCP02 ;            // 端子へ
output          TRMCP01 ;            // 端子へ
output          TRMCP00 ;            // 端子へ
output          TRMCP114;            // 端子へ
output          TRMCP113;            // 端子へ
output          TRMCP112;            // 端子へ
output          TRMCP111;            // 端子へ
output          TRMCP110;            // 端子へ
output          DTRMCP014;           // 端子へ
output          DTRMCP013;           // 端子へ
output          DTRMCP012;           // 端子へ
output          DTRMCP011;           // 端子へ
output          DTRMCP010;           // 端子へ
output          RTRMCP020;           // 端子へ
output          RTRMCP019;           // 端子へ
output          RTRMCP018;           // 端子へ
output          RTRMCP017;           // 端子へ
output          RTRMCP016;           // 端子へ
output          RTRMCP015;           // 端子へ

//////////////////////////////////TRMLV1///////////////////////////
  output[ 6:0]	trmlv1_bgrt;
  output[ 3:0]	trmlv1_bgrtc;		// v1.1 add

// SS2nd: 2007.07.17 Add PORT
//////////////////////////////////TRM4/////////////////////////////
  output[ 6:0]	dbt_r32ctrm;
  output[ 2:0]	dbt_r32wtrm;		// v1.1 add
  output[ 5:0]	dbt_r32ftrm;		// v1.1 add
  output[ 5:0]	dbt_r32rtrm;		// v1.1 mod

  wire	[ 6:0]	trm4_ctrim;
  wire	[ 2:0]	trm4_wtrim;		// v1.1 add
  wire	[ 5:0]	trm4_ftrim;		// v1.1 add
  wire	[ 5:0]	trm4_rtrim;		// v1.1 mod

// SS2nd: ===== Add Input & Output Port ===================================================================
// SS2nd: 2007.07.18 Add
  input		ren_ext;
  input	[15:0]	prdata_ext;

// SS2nd: ===== Add END ===================================================================================

// SS2nd:v1.10 ===== Add Input & Output Port ==============================================================
  output	wdton_ft_res;		// FT3_H for wdton RESET output;
  output	wdstbyon_ft_res;	// FT3_H for wdstbyon RESET output;
  output[1:0]	lvis_ft_res;		// FT3_L for lvis RESET output;
  output[2:0]	vpoc_ft_res;		// FT3_H for vpoc RESET output;
  output	portselb_ft_res;	// FT3_H for portselb RESET output;	// v1.1 add
  output	bgr_ft_res_all;		// FT3 for bgrt,bgrtc RESET output;	// v1.1 add

// SS2nd:v1.10 ===== Add END ==============================================================================

// SS3rd: ===== Add Input & Output Port ===================================================================
  output	BRSAM ;
  input		SCANMODE;
  output	phspeed ;
  output	plpower ;
  output	prlspy ;
  output[4:0]	frqsel ;
  input		TESTRMRD;
  output	HIOMSK;
  input		r_frqsel_en;
  input		opbmden;
  input		RESSQSTA;
  input		TRMRD1CK;
  input		TRMRD2CK;
  input		BBTESINST;	// v1.1 add
  input		PSYSRESB;	// v1.1 add
  input		CHMOD;		// v1.1 add
  input		GOFIRMR;	// v1.1 add
  input		NSRESB;		// v1.1 add
// SS3rd: ===== Add END ===================================================================================

  wire  [6:0]	trmlv1_bgrt   ;
  wire  [6:0]   trmlv1_bgrt_dft   ;
  wire  [3:0]   trmlv1_bgrtc   ;	// v1.1 add
  wire  [3:0]   trmlv1_bgrtc_dft  ;	// v1.1 add
  wire  [4:0]   trmlv2_iref   ;
  wire  [2:0]   trmlv2_vreadC ;
  wire  [2:0]   trm0_vread    ;
  wire  [2:0]   trm0_idp      ;
  wire  [2:0]   trm0_osc      ;
  wire  [3:0]   trm0_cp       ;
  wire  [4:0]   trm0_irefD    ;
  wire  [2:0]   trm0_vreadR   ;
  wire  [4:0]   trm1_iref     ;
  wire  [4:0]   trm3_frsel    ;
  wire  [2:0]   fpara_fperty  ;
  wire  [1:0]   fpara_fpwrty  ;
  wire          fmopb_ocden   ;
  wire          fmopb_c3hff   ;
  wire  [1:0]   fmopb_cmode   ;
  wire          fmopb_ithl    ;
  wire  [1:0]   fmopb_frqselh ;
  wire  [2:0]   fmopb_frqsell ;
  wire	[1:0]	fmopb_lvimds  ;		// v1.1 add
  wire  [1:0]   fmopb_lvis    ;
  wire  [2:0]   fmopb_vpoc    ;
  wire		fmopb_portselb;		// v1.1 add
  wire          fmopb_wdtint  ;
  wire  [1:0]   fmopb_window  ;
  wire          fmopb_wdton   ;
//wire          wdton         ;
  wire  [2:0]   fmopb_wdcs    ;
  wire          fmopb_wdstbyon;
  wire  [7:0]   tempcal0      ;
  wire  [7:0]   tempcal1      ;
  wire  [7:0]   tempcal2      ;
  wire  [7:0]   tempcal3      ;
  wire	[4:0]   frqsel        ;
  wire		b_trmlv1_bgrt_en   , b_trmlv2_iref_en   , b_trmlv2_vreadC_en ,
                b_trm0_osc_en      , b_trm0_vread_en    ,
                b_trm1_iref_en     ,
                b_trm0_irefD_en    , b_trm0_vreadR_en   ,
                b_trm0_idp_en      , b_trm0_cp_en       ,
                b_trm3_frsel_en    ,
                b_fmopb_hh_en      , b_fmopb_hl_en      ,
                b_fmopb_frqselh_en , b_fmopb_frqsell_en ,
                b_fmopb_lh_en      , b_fmopb_ll_en      ,
                b_tcal_hh_en       , b_tcal_hl_en       ,
                b_tcal_lh_en       , b_tcal_ll_en       ;

  wire	[ 3:0]	paddr;
  wire  [15:0]  pwdata;
  wire  [15:0]  prdata;

  assign         {TRMCP014,TRMCP013,TRMCP012,
                  TRMCP011,TRMCP010}                 = ( TESDBT ) ? 5'b0 : trmlv2_iref[4:0];
  assign         {RTRMCP020,RTRMCP019,RTRMCP018}     = ( TESDBT ) ? 3'b0 : trmlv2_vreadC ;
  assign         {TRMCP017,TRMCP016,TRMCP015}        = ( TESDBT ) ? 3'b0 : trm0_vread[2:0];
  assign         {TRMCP09 ,TRMCP08 ,TRMCP07 }        = ( TESDBT ) ? 3'b0 : trm0_idp[2:0];
  assign         {TRMCP06 ,TRMCP05 ,TRMCP04 }        = ( TESDBT ) ? 3'b0 : trm0_osc[2:0];
  assign         {TRMCP03 ,TRMCP02 ,TRMCP01 ,
                  TRMCP00}                           = ( TESDBT ) ? 4'b0 : trm0_cp[3:0];
  assign         {DTRMCP014,DTRMCP013,DTRMCP012,
                  DTRMCP011,DTRMCP010}               = ( TESDBT ) ? 5'b0 : trm0_irefD[4:0];
  assign         {RTRMCP017,RTRMCP016,RTRMCP015}     = ( TESDBT ) ? 3'b0 : trm0_vreadR[2:0];
  assign         {TRMCP114,TRMCP113,TRMCP112,
                  TRMCP111,TRMCP110}                 = ( TESDBT ) ? 5'b0 : trm1_iref[4:0];
  assign         {FRSEL4,
                  FRSEL3,FRSEL2,FRSEL1,FRSEL0}       = trm3_frsel[4:0];
//assign         {OPWDCS2,OPWDCS1,OPWDCS0}           = fmopb_wdcs[2:0];
  assign         {OPWDCS2,OPWDCS1,OPWDCS0}           = ( !opbmden ) ? 3'b111 : fmopb_wdcs[2:0];
//assign          OPWDEN                             = fmopb_wdton;
  assign          OPWDEN                             = ( TESDBT ) ? 1'b1 :
                                                       ( !opbmden ) ? 1'b1 : fmopb_wdton;
//                                                     ( TWWDTSTP ) ? 1'b0 : fmopb_wdton;		// Ver2.0 modify
//assign          OPWDSTBY                           = fmopb_wdstbyon;
  assign          OPWDSTBY                           = ( !opbmden ) ? 1'b1 : fmopb_wdstbyon;
//assign         {OPWDWS1,OPWDWS0}                   = fmopb_window[1:0];
  assign         {OPWDWS1,OPWDWS0}                   = ( !opbmden ) ? 2'b11 : fmopb_window[1:0];
//assign          OPWDINT                            = fmopb_wdtint;
  assign          OPWDINT                            = ( !opbmden ) ? 1'b1 : fmopb_wdtint;
  assign         {OPLVIMDS1,OPLVIMDS0}               = fmopb_lvimds[1:0];				// v1.1 bit add
  assign         {OPLVIS1,OPLVIS0}                   = fmopb_lvis[1:0];
  assign         {OPVPOC2,OPVPOC1,OPVPOC0}           = fmopb_vpoc[2:0];
  assign          OPOCDEN                            = fmopb_ocden;
  assign          C3HFF                              = fmopb_c3hff;			// SS3rd: 2009.11.03 Add temporary
//assign          SELIN1                             = ~fmopb_ithl;			// v1.1 mod output invert & rename ITHL => SELIN1
  assign          SELIN1                             = ~(fmopb_ithl | SCANMODE) ;	// v1.1 mod output invert & rename ITHL => SELIN1
  assign          PORTSELB                           = fmopb_portselb;			// v1.1 add

  wire          PWDATA15= pwdata[15]; // BIに必要な分だけ渡す（冗長回避）
  wire          PWDATA13= pwdata[13]; // BIに必要な分だけ渡す（冗長回避）
  wire          PWDATA12= pwdata[12]; // BIに必要な分だけ渡す（冗長回避）
  wire          PWDATA11= pwdata[11]; // BIに必要な分だけ渡す（冗長回避）
  wire          PWDATA10= pwdata[10]; // BIに必要な分だけ渡す（冗長回避）
  wire          PWDATA9 = pwdata[ 9]; // BIに必要な分だけ渡す（冗長回避）
  wire          PWDATA8 = pwdata[ 8]; // BIに必要な分だけ渡す（冗長回避）
  wire          PWDATA4 = pwdata[ 4]; // BIに必要な分だけ渡す（冗長回避）
  wire          PWDATA3 = pwdata[ 3]; // BIに必要な分だけ渡す（冗長回避）
  wire          PWDATA2 = pwdata[ 2]; // BIに必要な分だけ渡す（冗長回避）
  wire          PWDATA1 = pwdata[ 1]; // BIに必要な分だけ渡す（冗長回避）
  wire          PWDATA0 = pwdata[ 0]; // BIに必要な分だけ渡す（冗長回避）

// SS2nd: ===== Add Wire & Assign =========================================================================
// SS2nd: 2007.07.17 Add: WRITE_EN BUS  for ATRM2 and ATRM 
  wire	        b_trm4_ctrim_en ;	// BIからの書き込み許可(trm4_ctrim)		// v1.1 mod
  wire	        wen_HIOTRM ;		// BIからの書き込み許可(trm4_ctrim)
  wire	        b_trm4_rtrim_en ;	// BIからの書き込み許可(trm4_rtrim)		// v1.1 mod
  wire	        b_trm2_rxflagz_en;							// v1.1 mod
  wire	        b_trm3_r0a_en;								// v1.1 mod
  wire	        b_trm2_r1a_en;								// v1.1 mod
  wire	        b_trm4_wtrim_en ;	// BIからの書き込み許可(trm4_wtrim)		// v1.1 add
  wire	        b_trm4_ftrim_en ;	// BIからの書き込み許可(trm4_ftrim)		// v1.1 add
  wire		b_trmlv1_bgrtc_en ;							// v1.1 add

  wire	        b_fpara_fpecc_en;
  wire	        b_fpara_fperty_en;
  wire	        b_fpara_fpwrty_en;
  wire	        b_fpara_fpser_en;
  wire	        b_fpara_fpwwr_en;
  wire	        b_fpara_btbls_en;

// SS2nd: ===== Add END ===================================================================================

// TESDBTモードにて、クロックが不安定になることを避ける為に、初期値を出力している。(基準クロックは32MHzリング)
//assign  dbt_r32ctrm = ( TESDBT ) ? 7'b100_0000 : trm3_ctrim[6:0] ;				// SS3rd: 2009.01.30 Add
//assign  dbt_r32rtrm = ( TESDBT ) ? 3'b001      : trm3_rtrim[2:0] ;				// SS3rd: 2009.01.30 Add
//
// v1.1 mod & add
  assign  dbt_r32ctrm = ( TESDBT ) ? 7'b000_0000 : trm4_ctrim[6:0] ; //assign  dbt_r32ctrm = ( TESDBT ) ? 7'b100_0000 : trm4_ctrim[6:0] ;
  assign  dbt_r32rtrm = ( TESDBT ) ? 6'b10_0000  : trm4_rtrim[5:0] ;

  assign  dbt_r32wtrm = ( TESDBT ) ? 3'b000      : trm4_wtrim[2:0] ; //assign  dbt_r32wtrm = ( TESDBT ) ? 3'b100      : trm4_wtrim[2:0] ;
  assign  dbt_r32ftrm = ( TESDBT ) ? 6'b00_0000  : trm4_ftrim[5:0] ; //assign  dbt_r32ftrm = ( TESDBT ) ? 6'b10_0000  : trm4_ftrim[5:0] ;

// 低速内蔵発振器の消費電流テスト用
//assign	wdton = ( TWWDTSTP ) ? 1'b0 : fmopb_wdton ;					// SS3rd: 2009.01.30 Add


QLK0RCIBCM3SF1V1_BI bi(
    .TESTMOD(TESTMOD)                       ,.tmod_dft(tmod_dft)                     ,
    .RESETB(RESETB)                         ,.PSEL1(PSEL1)                           ,
    .BASECK(BASECK)                         ,.PWRITE(PWRITE)                         ,.PENABLE(PENABLE)                       ,
                                                                                      .PWDATA15(PWDATA15)	              ,
                                             .PWDATA13(PWDATA13)                     ,.PWDATA12(PWDATA12)	              ,
    .PWDATA11(PWDATA11)                     ,.PWDATA10(PWDATA10)                     ,.PWDATA9(PWDATA9)                       ,
    .PWDATA8(PWDATA8)                       ,
                                             .PWDATA4(PWDATA4)			     ,.PWDATA3(PWDATA3)		              ,
    .PWDATA2(PWDATA2)                       ,.PWDATA1(PWDATA1)                       ,.PWDATA0(PWDATA0)                       ,
//  .trmlv1_bgrt(trmlv1_bgrt)               ,.trmlv2_iref(trmlv2_iref)               ,.trmlv2_vreadC(trmlv2_vreadC)           ,
    .trmlv1_bgrt(trmlv1_bgrt_dft)           ,											// Ver2.0 modify
    .trmlv1_bgrtc(trmlv1_bgrtc_dft)         ,											// v1.1 add
    .trmlv2_iref(trmlv2_iref)               ,.trmlv2_vreadC(trmlv2_vreadC)           ,
    .trm0_vread(trm0_vread)                 ,.trm0_idp(trm0_idp)                     ,.trm0_osc(trm0_osc)                     ,
    .trm0_cp(trm0_cp)                       ,
    .trm0_vreadR(trm0_vreadR)               ,
    .trm1_iref(trm1_iref)                   ,.trm0_irefD(trm0_irefD)                 ,
    .trm3_frsel(trm3_frsel)                 ,
    .trm2_rxflagz(trm2_rxflagz)             ,.trm3_r0a(trm3_r0a)                     ,.trm2_r1a(trm2_r1a)                     ,	// v1.1 mod
    .trm4_ctrim(trm4_ctrim)                 ,.trm4_rtrim(trm4_rtrim)                 ,						// v1.1 mod
    .trm4_wtrim(trm4_wtrim)                 ,.trm4_ftrim(trm4_ftrim)                 ,						// v1.1 add
    .fpara_fpecc(fpara_fpecc)               ,.fpara_fperty(fpara_fperty)             ,.fpara_fpwrty(fpara_fpwrty)             ,
    .fpara_fpser(fpara_fpser)               ,.fpara_fpwwr(fpara_fpwwr)               ,.fpara_btbls(fpara_btbls)               ,
    .fmopb_ocden(fmopb_ocden)               ,.fmopb_c3hff(fmopb_c3hff)               ,
    .fmopb_cmode(fmopb_cmode)               ,.fmopb_ithl(fmopb_ithl)                 ,
    .fmopb_frqselh(fmopb_frqselh)           ,.fmopb_frqsell(fmopb_frqsell)           ,
    .fmopb_lvimds(fmopb_lvimds)             ,.fmopb_lvis(fmopb_lvis)                 ,.fmopb_vpoc(fmopb_vpoc)                 ,
    .fmopb_portselb(fmopb_portselb)         ,											// v1.1 add
    .fmopb_wdtint(fmopb_wdtint)             ,.fmopb_window(fmopb_window)             ,
    .fmopb_wdton(fmopb_wdton)               ,.fmopb_wdcs(fmopb_wdcs)                 ,.fmopb_wdstbyon(fmopb_wdstbyon)         ,
    .tempcal0(tempcal0)                     ,.tempcal1(tempcal1)                     ,.tempcal2(tempcal2)                     ,
    .tempcal3(tempcal3)                     ,
    .b_trmlv1_bgrt_en(b_trmlv1_bgrt_en)     ,
    .b_trmlv1_bgrtc_en(b_trmlv1_bgrtc_en)   ,											// v1.1 add
    .b_trmlv2_iref_en(b_trmlv2_iref_en)     ,.b_trmlv2_vreadC_en(b_trmlv2_vreadC_en) ,
    .b_trm0_osc_en(b_trm0_osc_en)           ,.b_trm0_vread_en(b_trm0_vread_en)       ,
    .b_trm1_iref_en(b_trm1_iref_en)         ,
    .b_trm0_irefD_en(b_trm0_irefD_en)       ,.b_trm0_vreadR_en(b_trm0_vreadR_en)     ,
    .b_trm0_idp_en(b_trm0_idp_en)           ,.b_trm0_cp_en(b_trm0_cp_en)             ,
    .b_trm3_frsel_en(b_trm3_frsel_en)       ,
    .b_trm2_rxflagz_en(b_trm2_rxflagz_en)   ,.b_trm3_r0a_en(b_trm3_r0a_en)           ,.b_trm2_r1a_en(b_trm2_r1a_en)           ,	// v1.1 mod
    .b_trm4_ctrim_en(b_trm4_ctrim_en)       ,.wen_HIOTRM(wen_HIOTRM)                 ,.b_trm4_rtrim_en(b_trm4_rtrim_en)       ,	// v1.1 mod
    .b_trm4_wtrim_en(b_trm4_wtrim_en)       ,.b_trm4_ftrim_en(b_trm4_ftrim_en)       ,						// v1.1 add
    .b_fpara_fpecc_en(b_fpara_fpecc_en)     ,.b_fpara_fperty_en(b_fpara_fperty_en)   ,.b_fpara_fpwrty_en(b_fpara_fpwrty_en)   ,
    .b_fpara_fpser_en(b_fpara_fpser_en)     ,.b_fpara_fpwwr_en(b_fpara_fpwwr_en)     ,.b_fpara_btbls_en(b_fpara_btbls_en)     ,
    .b_fmopb_hh_en(b_fmopb_hh_en)           ,.b_fmopb_hl_en(b_fmopb_hl_en)           ,
    .b_fmopb_frqselh_en(b_fmopb_frqselh_en) ,.b_fmopb_frqsell_en(b_fmopb_frqsell_en) ,
    .b_fmopb_lh_en(b_fmopb_lh_en)           ,.b_fmopb_ll_en(b_fmopb_ll_en)           ,
    .b_tcal_hh_en(b_tcal_hh_en)             ,.b_tcal_hl_en(b_tcal_hl_en)             ,.b_tcal_lh_en(b_tcal_lh_en)             ,
    .b_tcal_ll_en(b_tcal_ll_en)             ,
                                             .paddr(paddr)                           ,.prdata(prdata)                         ,
    .tcpscen(tcpscen)                       ,
    .THSPEED(THSPEED)                       ,.TSUB(TSUB)                             ,.TLPOWER(TLPOWER)                       ,
    .TRLSPY(TRLSPY)                         ,
    .TCSRCUT(TCSRCUT)                       ,.TCFLSTOP(TCFLSTOP)                     ,
    .BRSAM(BRSAM)                           ,
    .ren_ext(ren_ext)                       ,.prdata_ext(prdata_ext)                 ,
    .BBTESINST(BBTESINST)                   ,.CHMOD(CHMOD)
);


QLK0RCIBCM3SF1V1_MAIN main(
    .BASECK(BASECK)                         ,.SYSRESB(SYSRESB)                       ,
    .iromo(iromo)                           ,
    .pwdata(pwdata)                         ,
    .b_trmlv1_bgrt_en(b_trmlv1_bgrt_en)     ,
    .b_trmlv1_bgrtc_en(b_trmlv1_bgrtc_en)   ,											// v1.1 add
    .b_trmlv2_iref_en(b_trmlv2_iref_en)     ,.b_trmlv2_vreadC_en(b_trmlv2_vreadC_en) ,
    .b_trm0_osc_en(b_trm0_osc_en)           ,.b_trm0_vread_en(b_trm0_vread_en)       ,
    .b_trm1_iref_en(b_trm1_iref_en)         ,
    .b_trm0_irefD_en(b_trm0_irefD_en)       ,.b_trm0_vreadR_en(b_trm0_vreadR_en)     ,
    .b_trm0_idp_en(b_trm0_idp_en)           ,.b_trm0_cp_en(b_trm0_cp_en)             ,
    .b_trm3_frsel_en(b_trm3_frsel_en)       ,
    .b_trm2_rxflagz_en(b_trm2_rxflagz_en)   ,.b_trm3_r0a_en(b_trm3_r0a_en)           ,.b_trm2_r1a_en(b_trm2_r1a_en)           ,	// v1.1 mod
    .b_trm4_ctrim_en(b_trm4_ctrim_en)       ,.wen_HIOTRM(wen_HIOTRM)                 ,.b_trm4_rtrim_en(b_trm4_rtrim_en)       , // v1.1 mod
    .b_trm4_wtrim_en(b_trm4_wtrim_en)       ,.b_trm4_ftrim_en(b_trm4_ftrim_en)       ,  					// v1.1 mod
    .b_fpara_fpecc_en(b_fpara_fpecc_en)     ,.b_fpara_fperty_en(b_fpara_fperty_en)   ,
    .b_fpara_fpwrty_en(b_fpara_fpwrty_en)   ,.b_fpara_fpser_en(b_fpara_fpser_en)     ,
    .b_fpara_fpwwr_en(b_fpara_fpwwr_en)     ,.b_fpara_btbls_en(b_fpara_btbls_en)     ,
    .b_fmopb_hh_en(b_fmopb_hh_en)           ,.b_fmopb_hl_en(b_fmopb_hl_en)           ,
    .b_fmopb_frqselh_en(b_fmopb_frqselh_en) ,.b_fmopb_frqsell_en(b_fmopb_frqsell_en) ,
    .b_fmopb_lh_en(b_fmopb_lh_en)           ,.b_fmopb_ll_en(b_fmopb_ll_en)           ,
    .b_tcal_hh_en(b_tcal_hh_en)             ,.b_tcal_hl_en(b_tcal_hl_en)             ,
    .b_tcal_lh_en(b_tcal_lh_en)             ,.b_tcal_ll_en(b_tcal_ll_en)             ,
    .r_trmlv_en(r_trmlv_en)                 ,
    .r_trm0_en(r_trm0_en)                   ,.r_trm1_en(r_trm1_en)                   ,.r_trm2_en(r_trm2_en)                   ,
    .r_trm3_en(r_trm3_en)                   ,
    .r_trm4_en(r_trm4_en)                   ,.r_fpara_en(r_fpara_en)                 ,.r_fmopb_en(r_fmopb_en)                 ,	// v1.1 mod
    .r_tcal_en(r_tcal_en)                   ,
    .trmlv1_bgrt(trmlv1_bgrt)               ,.trmlv1_bgrt_dft(trmlv1_bgrt_dft)       ,						// Ver2.0 modify
    .trmlv1_bgrtc(trmlv1_bgrtc)             ,.trmlv1_bgrtc_dft(trmlv1_bgrtc_dft)     ,						// v1.1 add
    .trmlv2_iref(trmlv2_iref)               ,.trmlv2_vreadC(trmlv2_vreadC)           ,
    .trm0_vread(trm0_vread)                 ,.trm0_idp(trm0_idp)                     ,
    .trm0_osc(trm0_osc)                     ,.trm0_cp(trm0_cp)                       ,
    .trm1_iref(trm1_iref)                   ,
    .trm0_irefD(trm0_irefD)                 ,.trm0_vreadR(trm0_vreadR)               ,
    .trm3_frsel(trm3_frsel)                 ,
    .trm2_rxflagz(trm2_rxflagz)             ,.trm3_r0a(trm3_r0a)                     ,.trm2_r1a(trm2_r1a)                     ,	// v1.1 mod
    .trm4_ctrim(trm4_ctrim)                 ,.trm4_rtrim(trm4_rtrim)                 ,  					// v1.1 mod
    .trm4_wtrim(trm4_wtrim)                 ,.trm4_ftrim(trm4_ftrim)                 ,  					// v1.1 mod
    .fpara_fpecc(fpara_fpecc)               ,.fpara_fperty(fpara_fperty)             ,.fpara_fpwrty(fpara_fpwrty)             ,
    .fpara_fpser(fpara_fpser)               ,.fpara_fpwwr(fpara_fpwwr)               ,.fpara_btbls(fpara_btbls)               ,
    .fmopb_ocden(fmopb_ocden)               ,.fmopb_c3hff(fmopb_c3hff)               ,
    .fmopb_cmode(fmopb_cmode)               ,.fmopb_ithl(fmopb_ithl)                 ,
    .fmopb_frqselh(fmopb_frqselh)           ,.fmopb_frqsell(fmopb_frqsell)           ,
    .fmopb_lvimds(fmopb_lvimds)             ,.fmopb_lvis(fmopb_lvis)                 ,.fmopb_vpoc(fmopb_vpoc)                 ,
    .fmopb_portselb(fmopb_portselb)         ,											// v1.1 add
    .fmopb_wdtint(fmopb_wdtint)             ,.fmopb_window(fmopb_window)             ,
    .fmopb_wdton(fmopb_wdton)               ,.fmopb_wdcs(fmopb_wdcs)                 ,.fmopb_wdstbyon(fmopb_wdstbyon)         ,
    .tempcal0(tempcal0)                     ,.tempcal1(tempcal1)                     ,.tempcal2(tempcal2)                     ,
    .tempcal3(tempcal3)                     ,
    .TESTMOD(TESTMOD)                       ,
    .wdton_ft_res(wdton_ft_res)             ,.wdstbyon_ft_res(wdstbyon_ft_res)       ,
    .lvis_ft_res(lvis_ft_res)               ,.vpoc_ft_res(vpoc_ft_res)               ,
    .portselb_ft_res(portselb_ft_res)       ,.bgr_ft_res_all(bgr_ft_res_all)	     ,						// v1.1 add
    .RESETB(RESETB)                         ,
    .SCANMODE(SCANMODE)                     ,
    .TESTRMRD(TESTRMRD)                     ,.RESSQSTA(RESSQSTA)                     ,
    .TRMRD1CK(TRMRD1CK)                     ,.TRMRD2CK(TRMRD2CK)                     ,
    .PSYSRESB(PSYSRESB)														// v1.1 add
);


QLK0RCIBCM3SF1V1_FMDDEC fmddec(
    .phspeed(phspeed)                       ,.plpower(plpower)                       ,.prlspy(prlspy)                         ,
    .fmopb_cmode(fmopb_cmode)
);


QLK0RCIBCM3SF1V1_FPDEC fpdec(
    .fperty(fperty)                         ,.fpwrty(fpwrty)                         ,.fpara_fperty(fpara_fperty)             ,
    .fpara_fpwrty(fpara_fpwrty)
);


QLK0RCIBCM3SF1V1_FRQDEC frqdec(
    .BASECK(BASECK)                         ,.SYSRESB(SYSRESB)                       ,.RESETB(RESETB)                         ,
    .frqsel(frqsel)                         ,.fmopb_frqselh(fmopb_frqselh)           ,.fmopb_frqsell(fmopb_frqsell)           ,
    .r_frqsel_en(r_frqsel_en)               ,.b_fmopb_frqselh_en(b_fmopb_frqselh_en) ,.b_fmopb_frqsell_en(b_fmopb_frqsell_en) ,
    .fmopb_c3hff(fmopb_c3hff)               ,.HIOMSK(HIOMSK)                         ,
    .GOFIRMR(GOFIRMR)                       ,.NSRESB(NSRESB)                         ,
    .SCANMODE(SCANMODE)
);

endmodule	// QLK0RCIBCM3SF1V1_FMOP



module QLK0RCIBCM3SF1V1_BI( TESTMOD           , tmod_dft           , RESETB             ,
                           PSEL1              , BASECK             , 
                           PWRITE             , PENABLE            ,
			   PWDATA15           ,                      PWDATA13           , PWDATA12           ,
			   PWDATA11           , PWDATA10           , PWDATA9            , PWDATA8            ,
                                                                                          PWDATA4            ,
                           PWDATA3            , PWDATA2            , PWDATA1            , PWDATA0            ,
                           paddr              , prdata             ,
                           trmlv1_bgrt        ,							//TRMLV1
                           trmlv1_bgrtc       ,							//TRMLV1	// v1.1 add
                           trmlv2_iref        , trmlv2_vreadC      ,				//TRMLV2
                           trm0_vread         , trm0_idp           , trm0_osc           ,	//TRM0
                           trm0_cp            ,							//TRM0
                           trm0_irefD         , trm0_vreadR        ,				//TRM0
                           trm1_iref          ,							//TRM1
                           trm2_rxflagz       , trm3_r0a           , trm2_r1a           ,       //TRM2(RDN)	// v1.1 mod
                           trm3_frsel         ,							//TRM3
			   trm4_ctrim         , trm4_rtrim         ,				//TRM4		// v1.1 mod
			   trm4_wtrim         , trm4_ftrim         ,				//TRM4		// v1.1 add
                           fpara_fpecc        , fpara_fperty       , fpara_fpwrty       ,	//FPARA
                           fpara_fpser        , fpara_fpwwr        , fpara_btbls        ,	//FPARA
                           fmopb_ocden        , fmopb_c3hff        ,				//FMOPB HH
			   fmopb_cmode        , fmopb_ithl         ,				//FMOPB HL
                           fmopb_frqselh      , fmopb_frqsell      ,				//FMOPB HL
			   fmopb_lvimds       , fmopb_lvis         , fmopb_vpoc         ,	//FMOPB LH
			   fmopb_portselb     ,							//FMOPB LH	// v1.1 add
                           fmopb_wdtint       , fmopb_window       , fmopb_wdton        ,	//FMOPB LL
                           fmopb_wdcs         , fmopb_wdstbyon     ,				//FMOPB LL
                           tempcal0           , tempcal1           , tempcal2           ,	//TCAL
                           tempcal3           ,							//TCAL
                           b_trmlv1_bgrt_en   ,
			   b_trmlv1_bgrtc_en  ,									// v1.1 add
			   b_trmlv2_iref_en   , b_trmlv2_vreadC_en ,
		           b_trm0_vread_en    , b_trm0_idp_en      , b_trm0_osc_en      ,
			   b_trm0_cp_en       ,
                           b_trm0_irefD_en    , b_trm0_vreadR_en   ,
                           b_trm1_iref_en     ,
			   b_trm2_rxflagz_en  , b_trm3_r0a_en      , b_trm2_r1a_en      ,			// v1.1 mod
                           b_trm3_frsel_en    ,
                           b_trm4_ctrim_en    , wen_HIOTRM         , b_trm4_rtrim_en    ,       		// v1.1 mod
                           b_trm4_wtrim_en    , b_trm4_ftrim_en    ,                            		// v1.1 add
                           b_fpara_fpecc_en   , b_fpara_fperty_en  , b_fpara_fpwrty_en  ,
                           b_fpara_fpser_en   , b_fpara_fpwwr_en   , b_fpara_btbls_en   ,
                           b_fmopb_hh_en      , b_fmopb_hl_en      ,
                           b_fmopb_frqselh_en , b_fmopb_frqsell_en ,
                           b_fmopb_lh_en      , b_fmopb_ll_en      ,
                           b_tcal_hh_en       , b_tcal_hl_en       , b_tcal_lh_en       ,
                           b_tcal_ll_en       ,
                           tcpscen            , THSPEED            , TSUB               ,
                           TLPOWER            , TRLSPY             , TCSRCUT            ,
			   TCFLSTOP           ,
                           BRSAM              ,
			   ren_ext            , prdata_ext         ,
			   BBTESINST	      , CHMOD								// v1.1 add

                         );


  input         TESTMOD;       //テストモード信号
  input         tmod_dft;      //テストモード信号（テストモード時はSCANRESZになる)
  input         RESETB;        //リセット
  input         PSEL1;         //APB Peripheral SELect信号１
  input         BASECK;        // Clock
  input         PWRITE;        // APBライト信号
  input         PENABLE;       // APBアクセスイネーブル
  input         PWDATA15;      // APBライトデータ15（TPSCEN）
  input         PWDATA13;      // APBライトデータ13（TLPOWER）
  input         PWDATA12;      // APBライトデータ12（TSRCUT）
  input         PWDATA11;      // APBライトデータ11（TFLSTOP）
  input         PWDATA10;      // APBライトデータ10（TRLSPY）
  input         PWDATA9;       // APBライトデータ9 （THSPEED）
  input         PWDATA8;       // APBライトデータ8 （TSUB）
  input         PWDATA4;       // APBライトデータ4 （TRMT[4]用）
  input         PWDATA3;       // APBライトデータ3 （TRMT[3]用）
  input         PWDATA2;       // APBライトデータ2 （TRMT[2]用）
  input         PWDATA1;       // APBライトデータ1 （TRMT[1]用）
  input         PWDATA0;       // APBライトデータ0 （TRMT[0]用）

  input [6:0]	trmlv1_bgrt    ;
  input [3:0]   trmlv1_bgrtc   ;	// v1.1 add
  input [4:0]   trmlv2_iref    ;
  input [2:0]   trmlv2_vreadC  ;
  input [2:0]   trm0_vread     ;
  input [2:0]   trm0_idp       ;
  input [2:0]   trm0_osc       ;
  input [3:0]   trm0_cp        ;
  input [4:0]   trm0_irefD     ;
  input [2:0]   trm0_vreadR    ;
  input [4:0]   trm1_iref      ;
  input [1:0]   trm2_rxflagz   ;	// v1.1 mod
  input [7:0]   trm3_r0a       ;	// v1.1 mod
  input [7:0]   trm2_r1a       ;	// v1.1 add
  input [4:0]   trm3_frsel     ;
  input [6:0]   trm4_ctrim     ;        // v1.1 mod
  input [5:0]   trm4_rtrim     ;        // v1.1 mod
  input [2:0]   trm4_wtrim     ;        // v1.1 add
  input [5:0]   trm4_ftrim     ;        // v1.1 add
  input [3:0]   fpara_fpecc    ;
  input [2:0]   fpara_fperty   ;
  input [1:0]   fpara_fpwrty   ;
  input [2:0]   fpara_fpser    ;
  input [2:0]   fpara_fpwwr    ;
  input [1:0]   fpara_btbls    ;
  input         fmopb_ocden    ;
  input         fmopb_c3hff    ;
  input [1:0]	fmopb_cmode    ;
  input         fmopb_ithl     ;
  input [1:0]	fmopb_frqselh  ;
  input [2:0]	fmopb_frqsell  ;
  input [1:0]  	fmopb_lvimds   ;	// v1.1 add
  input	[1:0]	fmopb_lvis     ;
  input	[2:0]	fmopb_vpoc     ;
  input		fmopb_portselb ;	// v1.1 add
  input         fmopb_wdtint   ;
  input [1:0]   fmopb_window   ;
  input         fmopb_wdton    ;
  input [2:0]   fmopb_wdcs     ;
  input         fmopb_wdstbyon ;
  input [7:0]   tempcal0       ;
  input [7:0]   tempcal1       ;
  input [7:0]   tempcal2       ;
  input [7:0]   tempcal3       ;

  output        b_trmlv1_bgrt_en   ; // BIからの書き込み許可(trmlv1_bgrt)
  output        b_trmlv1_bgrtc_en  ; // BIからの書き込み許可(trmlv1_bgrtc)	// v1.1 add
  output        b_trmlv2_iref_en   ; // BIからの書き込み許可(trmlv2_iref)
  output        b_trmlv2_vreadC_en ; // BIからの書き込み許可(trmlv2_vreadC)
  output        b_trm0_osc_en      ; // BIからの書き込み許可(trm0_osc)
  output        b_trm0_vread_en    ; // BIからの書き込み許可(trm0_vread)
  output        b_trm0_vreadR_en   ; // BIからの書き込み許可(trm0_vreadR)
  output        b_trm0_irefD_en    ; // BIからの書き込み許可(trm0_irefD)
  output        b_trm0_idp_en      ; // BIからの書き込み許可(trm0_idp)
  output        b_trm0_cp_en       ; // BIからの書き込み許可(trm0_cp)
  output        b_trm1_iref_en     ; // BIからの書き込み許可(trm1_iref)
  output        b_trm2_rxflagz_en  ; // BIからの書き込み許可(rdn_rxflagz)	// v1.1 mod rdn --> trm2
  output        b_trm3_r0a_en      ; // BIからの書き込み許可(rdn_r0a)		// v1.1 mod rdn --> trm3
  output        b_trm2_r1a_en      ; // BIからの書き込み許可(rdn_r1a)		// v1.1 add
  output        b_trm3_frsel_en    ; // BIからの書き込み許可(trm3_frsel)
  output        b_fpara_fpecc_en   ; // BIからの書き込み許可(fpara_fpecc)
  output        b_fpara_fperty_en  ; // BIからの書き込み許可(fpara_fperty)
  output        b_fpara_fpwrty_en  ; // BIからの書き込み許可(fpara_fpwrty)
  output        b_fpara_fpser_en   ; // BIからの書き込み許可(fpara_fpser)
  output        b_fpara_fpwwr_en   ; // BIからの書き込み許可(fpara_fpwwr)
  output        b_fpara_btbls_en   ; // BIからの書き込み許可(fpara_btbls)
  output        b_fmopb_hh_en      ; // BIからの書き込み許可(fmopb_hh)
  output        b_fmopb_hl_en      ; // BIからの書き込み許可(fmopb_hl)
  output        b_fmopb_frqselh_en ; // BIからの書き込み許可(fmopb_frqselh)
  output        b_fmopb_frqsell_en ; // BIからの書き込み許可(fmopb_frqsell)
  output        b_fmopb_lh_en      ; // BIからの書き込み許可(fmopb_lh)
  output        b_fmopb_ll_en      ; // BIからの書き込み許可(fmopb_ll)
  output        b_tcal_hh_en       ; // BIからの書き込み許可(tcal_hh)
  output        b_tcal_hl_en       ; // BIからの書き込み許可(tcal_hl)
  output        b_tcal_lh_en       ; // BIからの書き込み許可(tcal_lh)
  output        b_tcal_ll_en       ; // BIからの書き込み許可(tcal_ll)

  input  [ 3:0] paddr;
  output [15:0] prdata;

  output        tcpscen            ; // テストモード用THSPEED,TSUB有効信号
  output        THSPEED            ; // テストモード用THSPEED
  output        TSUB               ; // テストモード用TSUB
  output	TLPOWER		   ; // TCPSCTLのTLPOWERビット本体
  output	TRLSPY 		   ; // TCPSCTLのTRLSPYビット本体
  output	TCSRCUT		   ; // TCPSCTLのTCSRCUTビット本体
  output	TCFLSTOP	   ; // TCPSCTLのTCFLSTOPビット本体
  output        BRSAM              ; // 

// SS2nd: ===== Add Input & Output Port ===================================================================
// SS2nd: 2007.07.17 Add: WRITE_EN BUS  for ATRM2 and ATRM 
  output	b_trm4_ctrim_en     ; // BIからの書き込み許可(trm4_ctrim)		v1.1 mod trm3 --> trm4
  output	wen_HIOTRM          ; // BIからの書き込み許可
  output	b_trm4_rtrim_en     ; // BIからの書き込み許可(trm4_rtrim)		v1.1 mod trm3 --> trm4
  output	b_trm4_wtrim_en     ; // BIからの書き込み許可(trm4_wtrim)		v1.1 mod trm3 --> trm4
  output	b_trm4_ftrim_en     ; // BIからの書き込み許可(trm4_ftrim)		v1.1 mod trm3 --> trm4


//
// SS2nd: 2007.07.18 Add
  input		ren_ext;
  input	[15:0]	prdata_ext;

// SS2nd: ===== Add END ===================================================================================

  input		BBTESINST ;				// v1.1 add
  input		CHMOD ;					// v1.1 add

  wire          sel_hiotrm  , sel_bectl   ,
                sel_trmw    , sel_trmr    , sel_trmt    , sel_tcpsctl ,
                sel_topt0   , sel_topt1   , sel_topt2   , sel_topt3   ,
                sel_tempcal0, sel_tempcal1, sel_tempcal2, sel_tempcal3 ;

  wire          tcpscen     , THSPEED   , TSUB       , TRLSPY       ;
  wire          trmt_trmlv1_bgrt  , trmt_trmlv2_iref  , trmt_trmlv2_vreadC ,
                trmt_trm0_osc     , trmt_trm0_vread   ,
                trmt_trm0_irefD   , trmt_trm0_vreadR  ,
                trmt_trm1_iref    ,
                trmt_trm0_idp     , trmt_trm0_cp      ,
                trmt_trm3_frsel   ,
                trmt_trm2_rxflagz , trmt_trm3_r0a     , trmt_trm2_r1a     ,		// v1.1 mod rdn --> trm2,trm3
                trmt_fpara_fpecc  , trmt_fpara_fperty , trmt_fpara_fpwrty  ,
                trmt_fpara_fpser  , trmt_fpara_fpwwr  , trmt_fpara_btbls ;

// SS2nd: 2007.07.17 Add Regs : TRMT selector for ATRM2 and ATRM 
//
  wire		trmt_trm4_ctrim    ; // Target Select sig by TRMT(trm4_ctrim)		// v1.1 mod trm3 --> trm4
  wire		trmt_trm4_rtrim    ; // Target Select sig by TRMT(trm4_rtrim)		// v1.1 mod trm3 --> trm4
  wire		trmt_trm4_wtrim    ; // Target Select sig by TRMT(trm4_wtrim)		// v1.1 add
  wire		trmt_trm4_ftrim    ; // Target Select sig by TRMT(trm4_ftrim)		// v1.1 add

  wire		trmt_trmlv1_bgrtc  ; // v1.1 add



  wire	[ 4:0]	trmt;		// SS2nd: 2007.07.17 Chg Bit-Width For ATRM2  
//wire		TLSPY;		// SS3rd: 2010.01.19 Del


QLK0RCIBCM3SF1V1_ADDEC addec(
    .TESTMOD(TESTMOD)                       ,.PSEL1(PSEL1)                           ,
    .paddr(paddr)                           ,.sel_hiotrm(sel_hiotrm)                 ,.sel_bectl(sel_bectl)                   ,
                                             .sel_trmw(sel_trmw)                     ,.sel_trmr(sel_trmr)                     ,
    .sel_trmt(sel_trmt)                     ,.sel_tcpsctl(sel_tcpsctl)               ,
    .sel_topt0(sel_topt0)                   ,.sel_topt1(sel_topt1)                   ,.sel_topt2(sel_topt2)                   ,
    .sel_topt3(sel_topt3)                   ,
    .sel_tempcal0(sel_tempcal0)             ,.sel_tempcal1(sel_tempcal1)             ,.sel_tempcal2(sel_tempcal2)             ,
    .sel_tempcal3(sel_tempcal3)             ,
// v1.1 add
    .BBTESINST(BBTESINST)		    ,.CHMOD(CHMOD)
);


QLK0RCIBCM3SF1V1_CNTDEC cntdec(
    .BASECK(BASECK)                         ,.TESTMOD(TESTMOD)                       ,.tmod_dft(tmod_dft)                     ,
    .RESETB(RESETB)                         ,.PWRITE(PWRITE)                         ,.PENABLE(PENABLE)                       ,
                                                                                      .PWDATA15(PWDATA15)                     ,
                                             .PWDATA13(PWDATA13)                     ,.PWDATA12(PWDATA12)                     ,
    .PWDATA11(PWDATA11)                     ,.PWDATA10(PWDATA10)                     ,.PWDATA9(PWDATA9)                       ,
    .PWDATA8(PWDATA8)                       ,
                                             .PWDATA4(PWDATA4)			     ,.PWDATA3(PWDATA3)                       ,
    .PWDATA2(PWDATA2)                       ,.PWDATA1(PWDATA1)                       ,.PWDATA0(PWDATA0)                       ,
    .sel_hiotrm(sel_hiotrm)                 ,.sel_bectl(sel_bectl)                   ,
    .sel_trmw(sel_trmw)                     ,.sel_trmt(sel_trmt)                     ,.sel_tcpsctl(sel_tcpsctl)               ,
    .sel_topt0(sel_topt0)                   ,.sel_topt1(sel_topt1)                   ,.sel_topt2(sel_topt2)                   ,
    .sel_topt3(sel_topt3)                   ,
    .sel_tempcal0(sel_tempcal0)             ,.sel_tempcal1(sel_tempcal1)             ,.sel_tempcal2(sel_tempcal2)             ,
    .sel_tempcal3(sel_tempcal3)             ,
    .BRSAM(BRSAM)                           ,
    .trmt(trmt)                             ,
    .tcpscen(tcpscen)                       ,.THSPEED(THSPEED)                       ,.TSUB(TSUB)                             ,
    .TLPOWER(TLPOWER)                       ,.TRLSPY(TRLSPY)                         ,
//  .TLSPY(TLSPY)                           ,.TCSRCUT(TCSRCUT)                       ,.TCFLSTOP(TCFLSTOP)                     ,
    .TCSRCUT(TCSRCUT)                       ,.TCFLSTOP(TCFLSTOP)                     ,
    .b_trmlv1_bgrt_en(b_trmlv1_bgrt_en)     ,.b_trmlv1_bgrtc_en(b_trmlv1_bgrtc_en)   ,						// v1.1 add
    .b_trmlv2_iref_en(b_trmlv2_iref_en)     ,.b_trmlv2_vreadC_en(b_trmlv2_vreadC_en) ,
    .b_trm0_osc_en(b_trm0_osc_en)           ,.b_trm0_vread_en(b_trm0_vread_en)       ,
    .b_trm0_irefD_en(b_trm0_irefD_en)       ,.b_trm0_vreadR_en(b_trm0_vreadR_en)     ,
    .b_trm1_iref_en(b_trm1_iref_en)         ,
    .b_trm0_idp_en(b_trm0_idp_en)           ,.b_trm0_cp_en(b_trm0_cp_en)             ,
    .b_trm3_frsel_en(b_trm3_frsel_en)       ,
    .b_trm2_rxflagz_en(b_trm2_rxflagz_en)   ,.b_trm3_r0a_en(b_trm3_r0a_en)           ,.b_trm2_r1a_en(b_trm2_r1a_en)           ,	// v1.1 mod
    .b_trm4_ctrim_en(b_trm4_ctrim_en)       ,.wen_HIOTRM(wen_HIOTRM)                 ,.b_trm4_rtrim_en(b_trm4_rtrim_en)       ,	// v1.1 mod
    .b_trm4_wtrim_en(b_trm4_wtrim_en)       ,.b_trm4_ftrim_en(b_trm4_ftrim_en)       ,						// v1.1 add
    .b_fpara_fpecc_en(b_fpara_fpecc_en)     ,.b_fpara_fperty_en(b_fpara_fperty_en)   ,.b_fpara_fpwrty_en(b_fpara_fpwrty_en)   ,
    .b_fpara_fpser_en(b_fpara_fpser_en)     ,.b_fpara_fpwwr_en(b_fpara_fpwwr_en)     ,.b_fpara_btbls_en(b_fpara_btbls_en)     ,
    .b_fmopb_hh_en(b_fmopb_hh_en)           ,.b_fmopb_hl_en(b_fmopb_hl_en)           ,
    .b_fmopb_frqselh_en(b_fmopb_frqselh_en) ,.b_fmopb_frqsell_en(b_fmopb_frqsell_en) ,
    .b_fmopb_lh_en(b_fmopb_lh_en)           ,.b_fmopb_ll_en(b_fmopb_ll_en)           ,
    .b_tcal_hh_en(b_tcal_hh_en)             ,.b_tcal_hl_en(b_tcal_hl_en)             ,.b_tcal_lh_en(b_tcal_lh_en)             ,
    .b_tcal_ll_en(b_tcal_ll_en)             ,

    .trmt_trmlv1_bgrt(trmt_trmlv1_bgrt)     ,.trmt_trmlv1_bgrtc(trmt_trmlv1_bgrtc)   ,						// v1.1 add
    .trmt_trmlv2_iref(trmt_trmlv2_iref)     ,.trmt_trmlv2_vreadC(trmt_trmlv2_vreadC) ,
    .trmt_trm0_osc(trmt_trm0_osc)           ,.trmt_trm0_vread(trmt_trm0_vread)       ,
    .trmt_trm0_irefD(trmt_trm0_irefD)       ,.trmt_trm0_vreadR(trmt_trm0_vreadR)     ,
    .trmt_trm1_iref(trmt_trm1_iref)         ,
    .trmt_trm0_idp(trmt_trm0_idp)           ,.trmt_trm0_cp(trmt_trm0_cp)             ,
    .trmt_trm3_frsel(trmt_trm3_frsel)       ,
    .trmt_trm4_ctrim(trmt_trm4_ctrim)       ,.trmt_trm4_rtrim(trmt_trm4_rtrim)       ,						// v1.1 mod
    .trmt_trm4_wtrim(trmt_trm4_wtrim)       ,.trmt_trm4_ftrim(trmt_trm4_ftrim)       ,						// v1.1 add
    .trmt_trm2_rxflagz(trmt_trm2_rxflagz)   ,.trmt_trm3_r0a(trmt_trm3_r0a)           ,.trmt_trm2_r1a(trmt_trm2_r1a)           ,	// v1.1 add
    .trmt_fpara_fpecc(trmt_fpara_fpecc)     ,.trmt_fpara_fperty(trmt_fpara_fperty)   ,.trmt_fpara_fpwrty(trmt_fpara_fpwrty)   ,
    .trmt_fpara_fpser(trmt_fpara_fpser)     ,.trmt_fpara_fpwwr(trmt_fpara_fpwwr)     ,.trmt_fpara_btbls(trmt_fpara_btbls)
);


QLK0RCIBCM3SF1V1_RDCNT rdcnt(
    .PWRITE(PWRITE)                         ,.PENABLE(PENABLE)                       ,.TESTMOD(TESTMOD)                       ,
    .prdata(prdata)                         ,.sel_hiotrm(sel_hiotrm)                 ,.sel_bectl(sel_bectl)                   ,
                                             .sel_trmr(sel_trmr)                     ,.sel_trmt(sel_trmt)                     ,
    .sel_tcpsctl(sel_tcpsctl)               ,
    .sel_topt0(sel_topt0)                   ,.sel_topt1(sel_topt1)                   ,.sel_topt2(sel_topt2)                   ,
    .sel_topt3(sel_topt3)                   ,
    .sel_tempcal0(sel_tempcal0)             ,.sel_tempcal1(sel_tempcal1)             ,.sel_tempcal2(sel_tempcal2)             ,
    .sel_tempcal3(sel_tempcal3)             ,
    .trmt_trmlv1_bgrt(trmt_trmlv1_bgrt)     ,.trmt_trmlv1_bgrtc(trmt_trmlv1_bgrtc)   ,						// v1.1 add
    .trmt_trmlv2_iref(trmt_trmlv2_iref)     ,.trmt_trmlv2_vreadC(trmt_trmlv2_vreadC) ,
    .trmt_trm0_osc(trmt_trm0_osc)           ,.trmt_trm0_vread(trmt_trm0_vread)       ,
    .trmt_trm1_iref(trmt_trm1_iref)         ,
    .trmt_trm0_irefD(trmt_trm0_irefD)       ,.trmt_trm0_vreadR(trmt_trm0_vreadR)     ,
    .trmt_trm0_idp(trmt_trm0_idp)           ,.trmt_trm0_cp(trmt_trm0_cp)             ,
    .trmt_trm3_frsel(trmt_trm3_frsel)       ,
    .trmt_trm2_rxflagz(trmt_trm2_rxflagz)   ,.trmt_trm3_r0a(trmt_trm3_r0a)           ,.trmt_trm2_r1a(trmt_trm2_r1a)           ,	// v1.1 mod
    .trmt_trm4_ctrim(trmt_trm4_ctrim)       ,.trmt_trm4_rtrim(trmt_trm4_rtrim)       ,						// v1.1 mod
    .trmt_trm4_wtrim(trmt_trm4_wtrim)       ,.trmt_trm4_ftrim(trmt_trm4_ftrim)       ,						// v1.1 add
    .trmt_fpara_fpecc(trmt_fpara_fpecc)     ,.trmt_fpara_fperty(trmt_fpara_fperty)   ,.trmt_fpara_fpwrty(trmt_fpara_fpwrty)   ,
    .trmt_fpara_fpser(trmt_fpara_fpser)     ,.trmt_fpara_fpwwr(trmt_fpara_fpwwr)     ,.trmt_fpara_btbls(trmt_fpara_btbls)     ,
    .tcpscen(tcpscen)                       ,
    .THSPEED(THSPEED)                       ,.TSUB(TSUB)                             ,.TLPOWER(TLPOWER)                       ,
    .TRLSPY(TRLSPY)                         ,
//  .TLSPY(TLSPY)                           ,.TCSRCUT(TCSRCUT)                       ,.TCFLSTOP(TCFLSTOP)                     ,
                                             .TCSRCUT(TCSRCUT)                       ,.TCFLSTOP(TCFLSTOP)                     ,
    .BRSAM(BRSAM)                           ,
    .trmt(trmt)                             ,
    .trmlv1_bgrt(trmlv1_bgrt)               ,.trmlv1_bgrtc(trmlv1_bgrtc)             ,						// v1.1 add
    .trmlv2_iref(trmlv2_iref)               ,.trmlv2_vreadC(trmlv2_vreadC)           ,
    .trm0_vread(trm0_vread)                 ,.trm0_idp(trm0_idp)                     ,
    .trm0_osc(trm0_osc)                     ,.trm0_cp(trm0_cp)                       ,
    .trm1_iref(trm1_iref)                   ,
    .trm0_irefD(trm0_irefD)                 ,.trm0_vreadR(trm0_vreadR)               ,
    .trm3_frsel(trm3_frsel)                 ,
    .trm2_rxflagz(trm2_rxflagz)             ,.trm3_r0a(trm3_r0a)                     ,.trm2_r1a(trm2_r1a)                     ,	// v1.1 mod
    .trm4_ctrim(trm4_ctrim)                 ,.trm4_rtrim(trm4_rtrim)                 ,	// v1.1 mod
    .trm4_wtrim(trm4_wtrim)                 ,.trm4_ftrim(trm4_ftrim)                 ,	// v1.1 add
    .fpara_fpecc(fpara_fpecc)               ,.fpara_fperty(fpara_fperty)             ,.fpara_fpwrty(fpara_fpwrty)             ,
    .fpara_fpser(fpara_fpser)               ,.fpara_fpwwr(fpara_fpwwr)               ,.fpara_btbls(fpara_btbls)               ,
    .fmopb_ocden(fmopb_ocden)               ,.fmopb_c3hff(fmopb_c3hff)               ,
    .fmopb_cmode(fmopb_cmode)               ,.fmopb_ithl(fmopb_ithl)                 ,
    .fmopb_frqselh(fmopb_frqselh)           ,.fmopb_frqsell(fmopb_frqsell)           ,
    .fmopb_lvimds(fmopb_lvimds)             ,.fmopb_lvis(fmopb_lvis)                 ,.fmopb_vpoc(fmopb_vpoc)                 ,
    .fmopb_portselb(fmopb_portselb)         ,						// v1.1 add
                                             .fmopb_wdtint(fmopb_wdtint)             ,
    .fmopb_window(fmopb_window)             ,.fmopb_wdton(fmopb_wdton)               ,.fmopb_wdcs(fmopb_wdcs)                 ,
    .fmopb_wdstbyon(fmopb_wdstbyon)         ,
    .tempcal3(tempcal3)                     ,.tempcal2(tempcal2)                     ,.tempcal1(tempcal1)                     ,
    .tempcal0(tempcal0)                     ,
    .ren_ext(ren_ext)                       ,.prdata_ext(prdata_ext)
);

endmodule	// QLK0RCIBCM3SF1V1_BI



//QLK0RCIBCM3SF1V1 APB address map
//                                    ----access許可-----
//PSEL1--------H- -----L-  ---  -size-  通常 セルフ  テスト RESET条件
//                  BECTL  00H   8bit   R/W   R/W     R/W   RESETB
//                   TRMW  01H   8bit   -/-   -/-     -/W     -
//                   TRMR  02H   8bit   -/-   -/-     R/-     -
//                   TRMT  03H   8bit   -/-   -/-     R/W   TESTMODE&RESETB --> v1.1 mod RESETB only
//                TCPSCTL  04H   8bit   -/-   -/-     R/W   TESTMODE&RESETB
//                  TOPT0  05H   8bit   -/-   -/-     R/W   SYSRESB
//                  TOPT1  06H   8bit   -/-   -/-     R/W   SYSRESB
//                  TOPT2  07H   8bit   -/-   -/-     R/W   SYSRESB
//
//  ★R：意味のあるリード値
//  ★-：リードしても"0"しか読めない。ライトは無視
//  ★W：意味のあるライト値
//  ★リセット条件SYSRESBのレジスタは、リセットシーケンスで上書きされる。
//    また、実体はNVMキャプチャ用のレジスタである。

module QLK0RCIBCM3SF1V1_ADDEC( TESTMOD    , PSEL1       , paddr       ,
                              sel_hiotrm  , sel_bectl   ,
                              sel_trmw    , sel_trmr    , sel_trmt    , sel_tcpsctl ,
                              sel_topt0   , sel_topt1   , sel_topt2   , sel_topt3   ,
                              sel_tempcal0, sel_tempcal1, sel_tempcal2, sel_tempcal3,
			      BBTESINST   , CHMOD
                            );
  input		TESTMOD ;
  input		PSEL1;
  input	[3:0]	paddr;
  output	sel_hiotrm;
  output        sel_bectl;
  output        sel_trmw;
  output        sel_trmr;
  output        sel_trmt;
  output        sel_tcpsctl;
  output        sel_topt0;
  output        sel_topt1;
  output        sel_topt2;
  output        sel_topt3;
  output        sel_tempcal0;
  output        sel_tempcal1;
  output        sel_tempcal2;
  output        sel_tempcal3;

  input		BBTESINST ;	// v1.1 add
  input		CHMOD ;		// v1.1 add

// SS2nd: ===== Add Input & Output Port ===================================================================
  reg        sel_hiotrm  , sel_bectl   ,
             sel_trmw    , sel_trmr    , sel_trmt    , sel_tcpsctl ,
             sel_topt0   , sel_topt1   , sel_topt2   , sel_topt3   ,
             sel_tempcal0, sel_tempcal1, sel_tempcal2, sel_tempcal3;

// AddDec for PSEL1
	always @ ( TESTMOD or BBTESINST or CHMOD or PSEL1 or paddr[3:0] ) begin
		{ sel_hiotrm,
                  sel_bectl,
                  sel_trmw,
                  sel_trmr,
                  sel_trmt,
                  sel_tcpsctl,
                  sel_topt0,
                  sel_topt1,
                  sel_topt2,
                  sel_topt3,
                  sel_tempcal0,
                  sel_tempcal1,
                  sel_tempcal2,
                  sel_tempcal3
                } = 14'b0;
		casex( {TESTMOD, BBTESINST, CHMOD, PSEL1, paddr[3:0]} )
			8'b00_?_1_0000 : sel_hiotrm   = 1'b1;
			8'b10_?_1_0000 : sel_hiotrm   = 1'b1;
			8'b00_?_1_0001 : sel_bectl    = 1'b1;
			8'b10_?_1_0001 : sel_bectl    = 1'b1;
                        // TESTMOD only
                        8'b10_?_1_0010 : sel_trmw     = 1'b1;
                        8'b00_0_1_0010 : sel_trmw     = 1'b1;	// v1.1 mod
                        8'b10_?_1_0011 : sel_trmr     = 1'b1;
                        8'b00_0_1_0011 : sel_trmr     = 1'b1;	// v1.1 mod
                        8'b10_?_1_0100 : sel_trmt     = 1'b1;
                        8'b00_0_1_0100 : sel_trmt     = 1'b1;	// v1.1 mod
                        8'b10_?_1_0101 : sel_tcpsctl  = 1'b1;
                        8'b1?_?_1_0110 : sel_topt0    = 1'b1;
                        8'b1?_?_1_0111 : sel_topt1    = 1'b1;
                        8'b00_?_1_1000 : sel_topt2    = 1'b1;	// SS3rd: 2010.01.25 Chg
                        8'b1?_?_1_1000 : sel_topt2    = 1'b1;
                        8'b1?_?_1_1001 : sel_topt3    = 1'b1;
                        8'b00_?_1_1100 : sel_tempcal0 = 1'b1;
                        8'b10_?_1_1100 : sel_tempcal0 = 1'b1;
                        8'b00_?_1_1101 : sel_tempcal1 = 1'b1;
                        8'b10_?_1_1101 : sel_tempcal1 = 1'b1;
                        8'b00_?_1_1110 : sel_tempcal2 = 1'b1;
                        8'b10_?_1_1110 : sel_tempcal2 = 1'b1;
                        8'b00_?_1_1111 : sel_tempcal3 = 1'b1;
                        8'b10_?_1_1111 : sel_tempcal3 = 1'b1;
			default        : sel_hiotrm   = 1'b0;
		endcase
	end

endmodule	// QLK0RCIBCM3SF1V1_ADDEC



module QLK0RCIBCM3SF1V1_CNTDEC( BASECK     , tmod_dft    ,
                               TESTMOD     , RESETB      ,
                               PWRITE      , PENABLE     ,
                               PWDATA15    ,               PWDATA13    , PWDATA12    ,
			       PWDATA11    , PWDATA10    , PWDATA9     , PWDATA8     ,
                                                                         PWDATA4     ,
                               PWDATA3     , PWDATA2     , PWDATA1     , PWDATA0     ,
                               sel_hiotrm  , sel_bectl   ,
                               sel_trmw    , sel_trmt    , sel_tcpsctl ,
                               sel_topt0   , sel_topt1   , sel_topt2   , sel_topt3   ,
                               sel_tempcal0, sel_tempcal1, sel_tempcal2, sel_tempcal3,
                               BRSAM       , trmt        ,
                               tcpscen     , THSPEED     , TSUB        , TLPOWER     ,
                               TRLSPY      ,
//			       TLSPY       , TCSRCUT     , TCFLSTOP    ,
			       TCSRCUT     , TCFLSTOP    ,
                               b_trmlv1_bgrt_en   , b_trmlv2_iref_en   , b_trmlv2_vreadC_en ,
                               b_trm0_osc_en      , b_trm0_vread_en    ,
                               b_trm0_irefD_en    , b_trm0_vreadR_en   ,
                               b_trm1_iref_en     ,
                               b_trm0_idp_en      , b_trm0_cp_en       ,
                               b_trm3_frsel_en    ,
				b_trm4_ctrim_en   , wen_HIOTRM         , b_trm4_rtrim_en    ,		// v1.1 mod
				b_trm2_rxflagz_en , b_trm3_r0a_en      , b_trm2_r1a_en      ,		// v1.1 mod
                               b_fpara_fpecc_en   , b_fpara_fperty_en  , b_fpara_fpwrty_en  ,
                               b_fpara_fpser_en   , b_fpara_fpwwr_en   , b_fpara_btbls_en   ,
                               b_fmopb_hh_en      , b_fmopb_hl_en      ,
                               b_fmopb_frqselh_en , b_fmopb_frqsell_en ,
                               b_fmopb_lh_en      , b_fmopb_ll_en      ,
                               b_tcal_hh_en       , b_tcal_hl_en       , b_tcal_lh_en       ,
                               b_tcal_ll_en       ,
                               trmt_trmlv1_bgrt   , trmt_trmlv2_iref   , trmt_trmlv2_vreadC , 
                               trmt_trm0_osc      , trmt_trm0_vread    ,
                               trmt_trm0_irefD    , trmt_trm0_vreadR   ,
                               trmt_trm1_iref     ,
                               trmt_trm0_idp      , trmt_trm0_cp       ,
                               trmt_trm3_frsel    ,
				trmt_trm4_ctrim   , trmt_trm4_rtrim    ,				// v1.1 mod
				trmt_trm2_rxflagz , trmt_trm3_r0a      ,trmt_trm2_r1a       ,		// v1.1 mod
			       trmt_fpara_fpecc	  , trmt_fpara_fperty  ,trmt_fpara_fpwrty   ,
			       trmt_fpara_fpser	  , trmt_fpara_fpwwr   ,trmt_fpara_btbls    ,
				b_trmlv1_bgrtc_en , b_trm4_wtrim_en    , b_trm4_ftrim_en    ,		// v1.1 add
				trmt_trmlv1_bgrtc , trmt_trm4_wtrim    , trmt_trm4_ftrim    		// v1.1 add
                             );


input         BASECK;             // 動作クロック
input         TESTMOD;            // テストモード信号
input         tmod_dft;           // テストモード信号（SCAN時にSCANRESZになる）
input         RESETB;             // リセット信号
input         PWRITE;             // APBライト信号
input         PENABLE;            // APBアクセスイネーブル
input         PWDATA15;           // APBライトデータ15（TCPSCEN）
input         PWDATA13;           // APBライトデータ13（TLPOWER）
input         PWDATA12;           // APBライトデータ12（TCSRCUT）
input         PWDATA11;           // APBライトデータ11（TCFLSTOP）
input         PWDATA10;           // APBライトデータ10（TRLSPY）
input         PWDATA9;            // APBライトデータ9 （THSPEED）
input         PWDATA8;            // APBライトデータ8 （TSUB）
input         PWDATA4;            // APBライトデータ4 （TRMT[4]用）
input         PWDATA3;            // APBライトデータ3 （TRMT[3]用）
input         PWDATA2;            // APBライトデータ2 （TRMT[2]用）
input         PWDATA1;            // APBライトデータ1 （TRMT[1]用）
input         PWDATA0;            // APBライトデータ0 （TRMT[0]用）
input         sel_hiotrm;         // PSEL1&PADDR=4'h0
input         sel_bectl;          // PSEL1&PADDR=4'h1
input         sel_trmw;           // PSEL1&PADDR=4'h2
input         sel_trmt;           // PSEL1&PADDR=4'h4
input         sel_tcpsctl;        // PSEL1&PADDR=4'h5
input         sel_topt0;          // PSEL1&PADDR=4'h6
input         sel_topt1;          // PSEL1&PADDR=4'h7
input         sel_topt2;          // PSEL1&PADDR=4'h8
input         sel_topt3;          // PSEL1&PADDR=4'h9
input         sel_tempcal0;       // PSEL1&PADDR=4'hC
input         sel_tempcal1;       // PSEL1&PADDR=4'hD
input         sel_tempcal2;       // PSEL1&PADDR=4'hE
input         sel_tempcal3;       // PSEL1&PADDR=4'hF

output        BRSAM;              // 
output [4:0]  trmt;               // TRMT		// SS2nd: 2007.07.17 Chg Bit-Width For ATRM2  
output        tcpscen;            // TCPSCTLのtcpscenビット本体
output        THSPEED;            // TCPSCTLのTHSPEEDビット本体
output        TSUB;               // TCPSCTLのTSUBビット本体
output        TLPOWER;		  // TCPSCTLのTLPOWERビット本体
output        TRLSPY;             // TCPSCTLのTRLSPYビット本体
//output        TLSPY;		  // TCPSCTLのTLSPYビット本体
output        TCSRCUT;		  // TCPSCTLのTCSRCUTビット本体
output        TCFLSTOP;		  // TCPSCTLのTCFLSTOPビット本体


//input         sel_trmr;           // PSEL1&PADDR=4'h3　TRMRは必要ない

// SS3rd v1.1 change rdn --> trm2
//
  output        b_trmlv1_bgrt_en   ; // BIからの書き込み許可(trmlv1_bgrt)
  output        b_trmlv1_bgrtc_en  ; // BIからの書き込み許可(trmlv1_bgrtc)	v1.1 add
  output        b_trmlv2_iref_en   ; // BIからの書き込み許可(trmlv2_iref)
  output        b_trmlv2_vreadC_en ; // BIからの書き込み許可(trmlv2_vreadC)
  output        b_trm0_osc_en      ; // BIからの書き込み許可(trm0_osc)
  output        b_trm0_vread_en    ; // BIからの書き込み許可(trm0_vread)
  output        b_trm0_vreadR_en   ; // BIからの書き込み許可(trm0_vreadR)
  output        b_trm0_irefD_en    ; // BIからの書き込み許可(trm0_irefD)
  output        b_trm0_idp_en      ; // BIからの書き込み許可(trm0_idp)
  output        b_trm0_cp_en       ; // BIからの書き込み許可(trm0_cp)
  output        b_trm1_iref_en     ; // BIからの書き込み許可(trm1_iref)
  output        b_trm2_rxflagz_en  ; // BIからの書き込み許可(rdn_rxflagz)	v1.1 mod rdn --> trm2
  output        b_trm3_r0a_en      ; // BIからの書き込み許可(rdn_r0a)		v1.1 mod rdn --> trm3
  output        b_trm2_r1a_en      ; // BIからの書き込み許可(rdn_r1a)		v1.1 add r1a
  output        b_trm3_frsel_en    ; // BIからの書き込み許可(trm3_frsel)
  output        b_fpara_fpecc_en   ; // BIからの書き込み許可(fpara_fpecc)
  output        b_fpara_fperty_en  ; // BIからの書き込み許可(fpara_fperty)
  output        b_fpara_fpwrty_en  ; // BIからの書き込み許可(fpara_fpwrty)
  output        b_fpara_fpser_en   ; // BIからの書き込み許可(fpara_fpser)
  output        b_fpara_fpwwr_en   ; // BIからの書き込み許可(fpara_fpwwr)
  output        b_fpara_btbls_en   ; // BIからの書き込み許可(fpara_btbls)
  output        b_fmopb_hh_en      ; // BIからの書き込み許可(fmopb_hh)
  output        b_fmopb_hl_en      ; // BIからの書き込み許可(fmopb_hl)
  output        b_fmopb_frqselh_en ; // BIからの書き込み許可(fmopb_frqselh)
  output        b_fmopb_frqsell_en ; // BIからの書き込み許可(fmopb_frqsell)
  output        b_fmopb_lh_en      ; // BIからの書き込み許可(fmopb_lh)
  output        b_fmopb_ll_en      ; // BIからの書き込み許可(fmopb_ll)
  output        b_tcal_hh_en       ; // BIからの書き込み許可(tcal_hh)
  output        b_tcal_hl_en       ; // BIからの書き込み許可(tcal_hl)
  output        b_tcal_lh_en       ; // BIからの書き込み許可(tcal_lh)
  output        b_tcal_ll_en       ; // BIからの書き込み許可(tcal_ll)


// SS3rd v1.1 change rdn --> trm2
//
  output        trmt_trmlv1_bgrt   ; // TRMTによるターゲット選択信号(trmlv1_bgrt)
  output        trmt_trmlv1_bgrtc  ; // TRMTによるターゲット選択信号(trmlv1_bgrtc) v1.1 add
  output        trmt_trmlv2_iref   ; // TRMTによるターゲット選択信号(trmlv2_iref)
  output        trmt_trmlv2_vreadC ; // TRMTによるターゲット選択信号(trmlv2_vreadC)
  output        trmt_trm0_osc      ; // TRMTによるターゲット選択信号(trm0_osc)
  output        trmt_trm0_vread    ; // TRMTによるターゲット選択信号(trm0_vread)
  output        trmt_trm0_vreadR   ; // TRMTによるターゲット選択信号(trm0_vreadR)
  output        trmt_trm0_irefD    ; // TRMTによるターゲット選択信号(trm0_irefD)
  output        trmt_trm0_idp      ; // TRMTによるターゲット選択信号(trm0_idp)
  output        trmt_trm0_cp       ; // TRMTによるターゲット選択信号(trm0_cp)
  output        trmt_trm1_iref     ; // TRMTによるターゲット選択信号(trm1_iref)
  output        trmt_trm2_rxflagz  ; // TRMTによるターゲット選択信号(trm2_rxflagz) v1.1 mod rdn --> trm2
  output        trmt_trm3_r0a      ; // TRMTによるターゲット選択信号(trm3_r0a)     v1.1 mod rdn --> trm3
  output        trmt_trm2_r1a      ; // TRMTによるターゲット選択信号(trm2_r1a)     v1.1 add r1a
  output        trmt_trm3_frsel    ; // TRMTによるターゲット選択信号(trm3_frsel)
  output        trmt_fpara_fpecc   ; // TRMTによるターゲット選択信号(fpara_fpecc)
  output        trmt_fpara_fperty  ; // TRMTによるターゲット選択信号(fpara_fperty)
  output        trmt_fpara_fpwrty  ; // TRMTによるターゲット選択信号(fpara_fpwrty)
  output        trmt_fpara_fpser   ; // TRMTによるターゲット選択信号(fpara_fpser)
  output        trmt_fpara_fpwwr   ; // TRMTによるターゲット選択信号(fpara_fpwwr)
  output        trmt_fpara_btbls   ; // TRMTによるターゲット選択信号(fpara_btbls)
 
// SS2nd: ===== Add Input & Output Port ===================================================================
//
// SS3rd v1.1 change trm3 --> trm4
//

// SS2nd: 2007.07.17 Add: WRITE_EN BUS  for ATRM2 and ATRM 
  output	b_trm4_ctrim_en     ; // BIからの書き込み許可(trm4_ctrim)
  output	wen_HIOTRM          ; // BIからの書き込み許可(trm4_ctrim)
  output	b_trm4_rtrim_en     ; // BIからの書き込み許可(trm4_rtrim)
  output	b_trm4_wtrim_en     ; // BIからの書き込み許可(trm4_wtrim)	v1.1 add
  output	b_trm4_ftrim_en     ; // BIからの書き込み許可(trm4_ftrim)	v1.1 add

// SS2nd: 2007.07.17 Add Regs : TRMT selector for ATRM2 and ATRM 
  output	trmt_trm4_ctrim    ; // Target Select sig by TRMT(trm4_ctrim)
  output	trmt_trm4_rtrim    ; // Target Select sig by TRMT(trm4_rtrim)
  output	trmt_trm4_wtrim    ; // Target Select sig by TRMT(trm4_wtrim)	v1.1 add
  output	trmt_trm4_ftrim    ; // Target Select sig by TRMT(trm4_ftrim)	v1.1 add

// SS2nd: ===== Add END ===================================================================================

  reg	[4:0]	trmt;    // TRMTレジスタ本体
  reg           tcpscen; // TCPSCTLのtcpscenビット本体
  reg           THSPEED; // TCPSCTLのTHSPEEDビット本体
  reg           TSUB;    // TCPSCTLのTSUBビット本体
  reg           TLPOWER; // TCPSCTLのTLPOWERビット本体
  reg           TRLSPY;  // TCPSCTLのTRLSPYビット本体
//reg           TLSPY;
  reg           TCSRCUT;
  reg           TCFLSTOP;

  reg		trmt_trmlv1_bgrt, trmt_trmlv1_bgrtc ;
  reg		trmt_trmlv2_iref, trmt_trmlv2_vreadC ;
  reg		trmt_trm0_osc, trmt_trm0_vread, trmt_trm0_idp ;
  reg		trmt_trm0_cp, trmt_trm0_irefD, trmt_trm0_vreadR ;
  reg		trmt_trm1_iref;
  reg		trmt_trm2_rxflagz, trmt_trm3_r0a, trmt_trm2_r1a ;
  reg		trmt_trm3_frsel ;
  reg		trmt_trm4_ctrim, trmt_trm4_rtrim, trmt_trm4_wtrim, trmt_trm4_ftrim ;

  reg		trmt_fpara_fpecc ;
  reg		trmt_fpara_fperty ;
  reg		trmt_fpara_fpwrty ;
  reg		trmt_fpara_fpser ;
  reg		trmt_fpara_fpwwr ;
  reg		trmt_fpara_btbls ;

  wire          write_en     = PWRITE & PENABLE ;

  wire          wen_HIOTRM   = sel_hiotrm   & write_en;
  wire          wen_BRSAM    = sel_bectl    & write_en;
  wire          wen_trmw     = sel_trmw     & write_en; // ユーザモードではsel_xxxxが変化しない
  wire          wen_trmt     = sel_trmt     & write_en; // ユーザモードではsel_xxxxが変化しない
  wire          wen_tcpsctl  = sel_tcpsctl  & write_en; // ユーザモードではsel_xxxxが変化しない
  wire          wen_topt0    = sel_topt0    & write_en; // ユーザモードではsel_xxxxが変化しない
  wire          wen_topt1    = sel_topt1    & write_en; // ユーザモードではsel_xxxxが変化しない
  wire          wen_topt2    = sel_topt2    & write_en & TESTMOD ;
  wire          wen_FRQSELH  = sel_topt2    & write_en & TESTMOD ;
  wire          wen_FRQSELL  = sel_topt2    & write_en;
  wire          wen_topt3    = sel_topt3    & write_en; // ユーザモードではsel_xxxxが変化しない
  wire          wen_TEMPCAL0 = sel_tempcal0 & write_en;
  wire          wen_TEMPCAL1 = sel_tempcal1 & write_en;
  wire          wen_TEMPCAL2 = sel_tempcal2 & write_en;
  wire          wen_TEMPCAL3 = sel_tempcal3 & write_en;
//wire		wen_trmr     = sel_trmr     & write_en;


//===================================================================
// v1.1 NVM change
//===================================================================
//
  wire		b_trmlv1_bgrt_en   =  trmt_trmlv1_bgrt   & wen_trmw ;
  wire		b_trmlv1_bgrtc_en  =  trmt_trmlv1_bgrtc  & wen_trmw ;	// v1.1 add
  wire		b_trmlv2_iref_en   =  trmt_trmlv2_iref   & wen_trmw ;
  wire		b_trmlv2_vreadC_en =  trmt_trmlv2_vreadC & wen_trmw ;
  wire		b_trm0_osc_en      =  trmt_trm0_osc      & wen_trmw ;
  wire		b_trm0_vread_en    =  trmt_trm0_vread    & wen_trmw ;
  wire		b_trm0_vreadR_en   =  trmt_trm0_vreadR   & wen_trmw ;
  wire		b_trm0_irefD_en    =  trmt_trm0_irefD    & wen_trmw ;
  wire		b_trm0_idp_en      =  trmt_trm0_idp      & wen_trmw ;
  wire		b_trm0_cp_en       =  trmt_trm0_cp       & wen_trmw ;
  wire		b_trm1_iref_en     =  trmt_trm1_iref     & wen_trmw ;
  wire		b_trm2_rxflagz_en  =  trmt_trm2_rxflagz  & wen_trmw ;	// v1.1 mod rdn_xx --> trm2_xx
  wire		b_trm3_r0a_en      =  trmt_trm3_r0a      & wen_trmw ;	// v1.1 mod rdn_xx --> trm2_xx
  wire          b_trm3_frsel_en    =  trmt_trm3_frsel    & wen_trmw ;
//wire		b_trm4_ctrim_en    = (trmt_trm4_ctrim    & wen_trmw ) | wen_HIOTRM ;		// v1.1 mod trm3 --> trm4
  wire		b_trm4_ctrim_en    =  trmt_trm4_ctrim    & wen_trmw ;				// v1.1 mod trm3 --> trm4, wen_HIOTRM del
  wire		b_trm4_rtrim_en    =  trmt_trm4_rtrim    & wen_trmw ;				// v1.1 mod trm3 --> trm4
  wire		b_trm4_wtrim_en    =  trmt_trm4_wtrim    & wen_trmw ;	// v1.1 add
//wire		b_trm4_ftrim_en    =  trmt_trm4_ftrim    & wen_trmw ;	// v1.1 add
  wire		b_trm4_ftrim_en    = (trmt_trm4_ftrim    & wen_trmw ) | wen_HIOTRM ;		// v1.1 add, wen_HIOTRM add
  wire		b_trm2_r1a_en      =  trmt_trm2_r1a      & wen_trmw ;	// v1.1 add

  wire          b_fpara_fpecc_en   =  trmt_fpara_fpecc   & wen_trmw ;
  wire          b_fpara_fperty_en  =  trmt_fpara_fperty  & wen_trmw ;
  wire          b_fpara_fpwrty_en  =  trmt_fpara_fpwrty  & wen_trmw ;
  wire          b_fpara_fpser_en   =  trmt_fpara_fpser   & wen_trmw ;
  wire          b_fpara_fpwwr_en   =  trmt_fpara_fpwwr   & wen_trmw ;
  wire          b_fpara_btbls_en   =  trmt_fpara_btbls   & wen_trmw ;
  wire          b_fmopb_hh_en      =  wen_topt3 ;
  wire          b_fmopb_hl_en      =  wen_topt2 ;
  wire          b_fmopb_frqselh_en =  wen_FRQSELH ;
  wire          b_fmopb_frqsell_en =  wen_FRQSELL ;
  wire          b_fmopb_lh_en      =  wen_topt1 ;
  wire          b_fmopb_ll_en      =  wen_topt0 ;
  wire          b_tcal_ll_en       =  wen_TEMPCAL0 ;
  wire          b_tcal_lh_en       =  wen_TEMPCAL1 ;
  wire          b_tcal_hl_en       =  wen_TEMPCAL2 ;
  wire          b_tcal_hh_en       =  wen_TEMPCAL3 ;

  wire		treg_res = RESETB & tmod_dft ;

////////////////////////////////////////////////bectl[0]
  reg		BRSAM;

  always @ ( posedge BASECK or negedge RESETB  )
	if( !RESETB  )		BRSAM <= 1'b0 ;
	else if( wen_BRSAM )	BRSAM <= PWDATA8;

////////////////////////////////////////////////trmt[3:0] -> [4:0]

  always @ ( posedge BASECK or negedge RESETB )			// v1.1 treg_res --> RESETB
	if( !RESETB )		trmt <= 5'b0_0000;
	else if( wen_trmt )	trmt <= {PWDATA4,PWDATA3,PWDATA2,PWDATA1,PWDATA0};


////////////////////////////////////////////////TCPSCTL
  always @ ( posedge BASECK or negedge treg_res )
//	if( !treg_res )		{tcpscen,TLSPY,TLPOWER,TCSRCUT,TCFLSTOP,TRLSPY,THSPEED,TSUB} <= 8'b00000000;
	if( !treg_res )		{tcpscen,      TLPOWER,TCSRCUT,TCFLSTOP,TRLSPY,THSPEED,TSUB} <= 7'b0000000;
	else if( wen_tcpsctl )
//		{tcpscen,TLSPY,TLPOWER,TCSRCUT,TCFLSTOP,TRLSPY,THSPEED,TSUB} <= {PWDATA15,PWDATA14,PWDATA13,PWDATA12,PWDATA11,PWDATA10,PWDATA9,PWDATA8};
		{tcpscen,      TLPOWER,TCSRCUT,TCFLSTOP,TRLSPY,THSPEED,TSUB} <= {PWDATA15,         PWDATA13,PWDATA12,PWDATA11,PWDATA10,PWDATA9,PWDATA8};
//		{tcpscen,TLSPY,TLPOWER,TCSRCUT,TCFLSTOP,TRLSPY,THSPEED,TSUB} <= {PWDATA7,PWDATA6,PWDATA5,PWDATA4,PWDATA3,PWDATA2,PWDATA1,PWDATA0};




  always @ ( trmt ) begin
	trmt_trm0_osc       = 1'b0;
	trmt_trm0_vread     = 1'b0;
	trmt_trmlv2_iref    = 1'b0;
	trmt_trm1_iref      = 1'b0;
	trmt_trm0_idp       = 1'b0;
	trmt_trm0_cp        = 1'b0;
	trmt_trm0_irefD     = 1'b0;
	trmt_trmlv2_vreadC  = 1'b0;
	trmt_trm0_vreadR    = 1'b0;
	trmt_trm3_frsel     = 1'b0;
	trmt_trm4_ctrim     = 1'b0;		// v1.1 mod trm3 --> trm4
	trmt_trm4_rtrim     = 1'b0;		// v1.1 mod trm3 --> trm4
	trmt_trmlv1_bgrt    = 1'b0;
	trmt_trm2_rxflagz   = 1'b0;		// v1.1 mod rdn --> trm2
	trmt_trm3_r0a       = 1'b0;		// v1.1 mod rdn --> trm2
	trmt_trm2_r1a       = 1'b0;		// v1.1 add
	trmt_fpara_fpecc    = 1'b0;
	trmt_fpara_fperty   = 1'b0;
	trmt_fpara_fpwrty   = 1'b0;
	trmt_fpara_fpser    = 1'b0;
	trmt_fpara_fpwwr    = 1'b0;
	trmt_fpara_btbls    = 1'b0;
	trmt_trmlv1_bgrtc   = 1'b0;		// v1.1 add
	trmt_trm4_wtrim     = 1'b0;		// v1.1 add
	trmt_trm4_ftrim     = 1'b0;		// v1.1 add

	  case( trmt )
//		5'h00   : 何も選択しない。デフォルト。
		5'h01   : trmt_trm0_osc       = 1'b1;	//TRMCP006-004     フラッシュ内蔵オシレータ周波数
		5'h02   : trmt_trm0_vread     = 1'b1;	//TRMCP017-015     フラッシュリード電圧
		5'h03   : trmt_trmlv2_iref    = 1'b1;	//TRMCP014-010     フラッシュリード電流（マクロ0）
		5'h04   : trmt_trm1_iref      = 1'b1;	//TRMCP114-110     フラッシュリード電流（マクロ1）
		5'h05   : trmt_trm0_idp       = 1'b1;	//TRMCP009-007     書き込み基準電流
		5'h06   : trmt_trm0_cp        = 1'b1;	//TRMCP003-000     チャージポンプ出力電圧
		5'h07   : trmt_trm0_irefD     = 1'b1;	//DTRMCP014-010    フラッシュリード電流（DATA）
		5'h08   : trmt_trmlv2_vreadC  = 1'b1;	//RTRMCP020-018    フラッシュリード電圧
		5'h09   : trmt_trm0_vreadR    = 1'b1;	//RTRMCP017-015    フラッシュリード電圧
		5'h0A   : trmt_trm3_frsel     = 1'b1;	//FRSEL4-0低速    （ 15K）リング
		5'h0B   : trmt_trm4_ctrim     = 1'b1;	//CTRIM6-0高速    （ 32M）リング CTRIM
		5'h0C   : trmt_trm4_rtrim     = 1'b1;	//RTRIM5-0高速    （ 32M）リング RTRIM
		5'h0D   : trmt_trmlv1_bgrt    = 1'b1;	//BGRT6-0          BGRトリミング
		5'h0E   : trmt_trm2_rxflagz   = 1'b1;
		5'h0F   : trmt_trm3_r0a       = 1'b1;
		5'h10   : trmt_fpara_fpecc    = 1'b1;
		5'h11   : trmt_fpara_fperty   = 1'b1;
		5'h12   : trmt_fpara_fpwrty   = 1'b1;
		5'h13   : trmt_fpara_fpser    = 1'b1;
		5'h14   : trmt_fpara_fpwwr    = 1'b1;
		5'h15   : trmt_fpara_btbls    = 1'b1;
		5'h16   : trmt_trmlv1_bgrtc   = 1'b1;	//BGRT10-7	BGRT温度トリミング		// v1.1 add
		5'h17   : trmt_trm4_wtrim     = 1'b1;	//WTRIM2-0	高速内蔵発振器 WTRIM		// v1.1 add
		5'h18   : trmt_trm4_ftrim     = 1'b1;	//FTRIM5-0	高速内蔵発振器 FTRIM		// v1.1 add
		5'h19   : trmt_trm2_r1a       = 1'b1;							// v1.1 add
//  		5'h1A   : Reserved
//  		5'h1B   : Reserved
//  		5'h1C   : Reserved
//  		5'h1D   : Reserved
//  		5'h1E   : Reserved
//  		5'h1F   : Reserved
    		default : trmt_trm0_vread = 1'b0; //LEDA対策用デフォルト
	  endcase
  end
endmodule	// QLK0RCIBCM3SF1V1_CNTDEC



module QLK0RCIBCM3SF1V1_RDCNT( PWRITE     , PENABLE     , TESTMOD     ,
                              prdata      ,
                              sel_hiotrm  , sel_bectl   ,
                                            sel_trmr    , sel_trmt    , sel_tcpsctl , //trmwはいらない
                              sel_topt0   , sel_topt1   , sel_topt2   , sel_topt3   ,
                              sel_tempcal0, sel_tempcal1, sel_tempcal2, sel_tempcal3,
                              trmt_trmlv1_bgrt   , trmt_trmlv2_iref   , trmt_trmlv2_vreadC ,
                              trmt_trm0_osc      , trmt_trm0_vread    ,
                              trmt_trm0_irefD    , trmt_trm0_vreadR   ,
                              trmt_trm1_iref     ,
                              trmt_trm0_idp      , trmt_trm0_cp       ,
                              trmt_trm3_frsel    ,
                              trmt_trm2_rxflagz  , trmt_trm3_r0a      , trmt_trm2_r1a      ,		// v1.1 mod rdn --> trm3
                              trmt_fpara_fpecc   , trmt_fpara_fperty  , trmt_fpara_fpwrty  ,
                              trmt_fpara_fpser   , trmt_fpara_fpwwr   , trmt_fpara_btbls   ,
                              tcpscen            , THSPEED            , TSUB               ,		//TCPSCTL
//			      TLPOWER            , TRLSPY             , TLSPY              ,		//TCPSCTL
			      TLPOWER            , TRLSPY             ,					//TCPSCTL
			      TCSRCUT            , TCFLSTOP           ,					//TCPSCTL
                              BRSAM              , trmt               , 
                              trmlv1_bgrt        ,                                   			//TRMLV1
                              trmlv2_iref        , trmlv2_vreadC      ,                			//TRMLV2
                              trm0_vread         , trm0_idp           , trm0_osc           ,		//TRM0
                              trm0_cp            ,                                      		//TRM0
                              trm0_irefD         ,                                      		//TRM0
                              trm0_vreadR        ,                                      		//FTRM0
                              trm1_iref          ,                                      		//TRM1
                              trm3_frsel         ,							//TRM3
                              trm2_rxflagz       , trm3_r0a           , trm2_r1a           ,   		//RDN		// v1.1 mod rdn --> trm2
                              fpara_fpecc        , fpara_fperty       , fpara_fpwrty       ,		//FPARA
                              fpara_fpser        , fpara_fpwwr        , fpara_btbls        ,		//FPARA
                              fmopb_ocden        , fmopb_c3hff        ,                     		//FMOPB HH
                              fmopb_cmode        , fmopb_ithl         ,					//FMOPB HL
                              fmopb_frqselh      , fmopb_frqsell      ,					//FMOPB HL
			      fmopb_lvimds       , fmopb_lvis         , fmopb_vpoc         ,		//FMOPB LH
			      fmopb_portselb     , 							//FMOPB LH	// v1.1 add
                              fmopb_wdtint       , fmopb_window       , fmopb_wdton        ,		//FMOPB LL
                              fmopb_wdcs         , fmopb_wdstbyon     ,					//FMOPB LL
                              tempcal3           , tempcal2           , tempcal1           ,		//TCAL
                              tempcal0           ,							//TCAL
			      trmt_trm4_ctrim    , trmt_trm4_rtrim    ,					//TRM4		// v1.1 mod
			      trmt_trm4_wtrim    , trmt_trm4_ftrim    ,					//TRM4		// v1.1 add
			      trmt_trmlv1_bgrtc  ,							//TRMLV1	// v1.1 add
			      trm4_ctrim         , trm4_rtrim         ,					//TRM4		// v1.1 mod
			      trm4_wtrim         , trm4_ftrim         ,					//TRM4		// v1.1 add
			      trmlv1_bgrtc       ,							//BGRT10-7	// v1.1 add
			      ren_ext		 , prdata_ext
                            );

  input         PWRITE;             // APBライトステータス
  input         PENABLE;            // APBアクセスイネーブル
  input         TESTMOD;
  output[15:0]  prdata;             // APBリードデータバス
  reg   [15:0]  prdata;

  input         sel_hiotrm;          // PSEL1&PADDR=4'h0
  input         sel_bectl;           // PSEL1&PADDR=4'h1
  input         sel_trmr;            // PSEL1&PADDR=4'h3　
  input         sel_trmt;            // PSEL1&PADDR=4'h4
  input         sel_tcpsctl;         // PSEL1&PADDR=4'h5
  input         sel_topt0;           // PSEL1&PADDR=4'h6
  input         sel_topt1;           // PSEL1&PADDR=4'h7
  input         sel_topt2;           // PSEL1&PADDR=4'h8
  input         sel_topt3;           // PSEL1&PADDR=4'h9
  input         sel_tempcal0;        // PSEL1&PADDR=4'hC
  input         sel_tempcal1;        // PSEL1&PADDR=4'hD
  input         sel_tempcal2;        // PSEL1&PADDR=4'hE
  input         sel_tempcal3;        // PSEL1&PADDR=4'hF

  input         trmt_trmlv1_bgrt   ; // TRMTによるターゲット選択信号(trmlv1_bgrt)
  input         trmt_trmlv1_bgrtc  ; // TRMTによるターゲット選択信号(trmlv1_bgrtc)		// v1.1 add
  input         trmt_trmlv2_iref   ; // TRMTによるターゲット選択信号(trmlv2_iref)
  input         trmt_trmlv2_vreadC ; // TRMTによるターゲット選択信号(trmlv2_vreadC)
  input         trmt_trm0_osc      ; // TRMTによるターゲット選択信号(trm0_osc)
  input         trmt_trm0_vread    ; // TRMTによるターゲット選択信号(trm0_vread)
  input         trmt_trm0_vreadR   ; // TRMTによるターゲット選択信号(trm0_vreadR)
  input         trmt_trm1_iref     ; // TRMTによるターゲット選択信号(trm1_iref)
  input         trmt_trm0_irefD    ; // TRMTによるターゲット選択信号(trm0_irefD)
  input         trmt_trm0_idp      ; // TRMTによるターゲット選択信号(trm0_idp)
  input         trmt_trm0_cp       ; // TRMTによるターゲット選択信号(trm0_cp)
  input         trmt_trm3_frsel    ; // TRMTによるターゲット選択信号(trm3_frsel)
  input         trmt_trm2_rxflagz  ; // TRMTによるターゲット選択信号(trm2_rxflagz)		// v1.1 mod rdn --> trm2
  input         trmt_trm3_r0a      ; // TRMTによるターゲット選択信号(trm3_r0a)			// v1.1 mod rdn --> trm3
  input         trmt_trm2_r1a      ; // TRMTによるターゲット選択信号(trm2_r1a)			// v1.1 add
  input         trmt_fpara_fpecc   ; // TRMTによるターゲット選択信号(fpara_fpecc)
  input         trmt_fpara_fperty  ; // TRMTによるターゲット選択信号(fpara_fperty)
  input         trmt_fpara_fpwrty  ; // TRMTによるターゲット選択信号(fpara_fpwrty)
  input         trmt_fpara_fpser   ; // TRMTによるターゲット選択信号(fpara_fpser)
  input         trmt_fpara_fpwwr   ; // TRMTによるターゲット選択信号(fpara_fpwwr)
  input         trmt_fpara_btbls   ; // TRMTによるターゲット選択信号(fpara_btbls)

  input         tcpscen            ; 
  input         THSPEED            ;
  input         TSUB               ;
  input         TLPOWER		   ; // TCPSCTLのTLPOWERビット本体
  input         TRLSPY             ;
//input         TLSPY 		   ; // TCPSCTLのTLSPYビット本体
  input         TCSRCUT		   ; // TCPSCTLのTCSRCUTビット本体
  input         TCFLSTOP	   ; // TCPSCTLのTCFLSTOPビット本体
  input         BRSAM              ; // 
  input [4:0]	trmt               ;
  input [6:0]   trmlv1_bgrt        ;
  input [2:0]   trmlv2_vreadC      ;
  input [4:0]   trmlv2_iref        ;
  input [2:0]   trm0_vread         ;
  input [2:0]   trm0_vreadR        ;
  input [2:0]   trm0_idp           ;
  input [2:0]   trm0_osc           ;
  input [3:0]   trm0_cp            ;
  input [4:0]   trm1_iref          ;
  input [4:0]   trm0_irefD         ;
  input [4:0]   trm3_frsel         ;
  input [1:0]   trm2_rxflagz       ;	// v1.1 mod
  input [7:0]   trm3_r0a           ;	// v1.1 mod
  input [7:0]   trm2_r1a           ;	// v1.1 mod
  input [3:0]   fpara_fpecc        ;
  input [2:0]   fpara_fperty       ;
  input [1:0]   fpara_fpwrty       ;
  input [2:0]   fpara_fpser        ;
  input [2:0]   fpara_fpwwr        ;
  input [1:0]   fpara_btbls        ;
  input         fmopb_ocden        ;
  input         fmopb_c3hff        ;
  input [1:0]   fmopb_cmode        ;
  input         fmopb_ithl         ;
  input [1:0]   fmopb_frqselh      ;
  input [2:0]   fmopb_frqsell      ;
  input [1:0]   fmopb_lvimds       ;	// v1.1 bit add
  input [1:0]   fmopb_lvis         ;
  input [2:0]   fmopb_vpoc         ;
  input		fmopb_portselb     ;	// v1.1 add
  input         fmopb_wdtint       ;
  input [1:0]   fmopb_window       ;
  input         fmopb_wdton        ;
  input [2:0]   fmopb_wdcs         ;
  input         fmopb_wdstbyon     ;
  input [7:0]   tempcal0           ;
  input [7:0]   tempcal1           ;
  input [7:0]   tempcal2           ;
  input	[7:0]	tempcal3           ;

// SS2nd: ===== Add Input & Output Port ===================================================================
// SS2nd: 2007.07.17 Add Regs : TRMT selector for ATRM2 and ATRM 
  input		trmt_trm4_ctrim    ; // Target Select sig by TRMT(trm4_ctrim)		// v1.1 mod trm3 --> trm4
  input		trmt_trm4_rtrim    ; // Target Select sig by TRMT(trm4_rtrim)		// v1.1 mod trm3 --> trm4
  input		trmt_trm4_wtrim    ; // Target Select sig by TRMT(trm4_wtrim)		// v1.1 add
  input		trmt_trm4_ftrim    ; // Target Select sig by TRMT(trm4_ftrim)		// v1.1 add

// TRMTにて選択される、レジスタ出力
// SS2nd: 2007.07.17 Add
////////////// TRM3 /////////////////////////////
  input	[ 6:0]	trm4_ctrim   	; //TRMT[4:0]=0Bh //CTRIM6-0				// v1.1 mod
  input	[ 5:0]	trm4_rtrim  	; //TRMT[4:0]=0Ch //RTRIM5-0				// v1.1 mod
  input	[ 3:0]	trmlv1_bgrtc   	; //TRMT[4:0]=16h //BGRT10-7				// v1.1 add
  input	[ 2:0]	trm4_wtrim   	; //TRMT[4:0]=17h //WTRIM2-0   				// v1.1 mod
  input	[ 5:0]	trm4_ftrim   	; //TRMT[4:0]=18h //FTRIM5-0   				// v1.1 mod


//
// SS2nd: 2007.07.18 Add
input		ren_ext;
input	[15:0]	prdata_ext;
// SS2nd: ===== Add Input & Output Port ===================================================================

  wire		read_en      = !PWRITE  & PENABLE ;

  wire          ren_hiotrm        = read_en      & sel_hiotrm;
  wire          ren_bectl         = read_en      & sel_bectl;
  wire          ren_trmt          = read_en      & sel_trmt ;
  wire          ren_trmr          = read_en      & sel_trmr ;
  wire          ren_tcpsctl       = read_en      & sel_tcpsctl;
  wire          ren_topt0         = read_en      & sel_topt0;
  wire          ren_topt1         = read_en      & sel_topt1;
  wire          ren_topt2         = read_en      & sel_topt2;
  wire          ren_topt3         = read_en      & sel_topt3;
  wire          ren_tempcal0      = read_en      & sel_tempcal0;
  wire          ren_tempcal1      = read_en      & sel_tempcal1;
  wire          ren_tempcal2      = read_en      & sel_tempcal2;
  wire          ren_tempcal3      = read_en      & sel_tempcal3;
//

  wire  [ 7:0]  bectl    = {7'b0,BRSAM};

// ====================== TRMR ==========================================================
  reg	[ 7:0]	trmr_bus ; // reg   [ 6:0]  trmr_bus;	// SS2nd: 2007.07.17 Chg Bit-width for ATRM/ATRM2 modification. 7bit -> 8bit

  always @ ( trmt_trmlv1_bgrt  or trmt_trmlv2_iref    or trmt_trmlv2_vreadC or
             trmt_trm0_osc     or trmt_trm0_vread     or
             trmt_trm1_iref    or
             trmt_trm0_irefD   or trmt_trm0_vreadR    or
             trmt_trm0_idp     or trmt_trm0_cp        or
             trmt_trm3_frsel   or
	     trmt_trm2_rxflagz or trmt_trm3_r0a       or trmt_trm2_r1a      or
  	     trmt_fpara_fpecc  or trmt_fpara_fperty   or trmt_fpara_fpwrty  or
  	     trmt_fpara_fpser  or trmt_fpara_fpwwr    or trmt_fpara_btbls   or
  	     trmt_trm4_ctrim   or trmt_trm4_rtrim     or
             trmt_trm4_wtrim   or trmt_trm4_ftrim     or
             trmt_trmlv1_bgrtc or
             trmlv1_bgrt       or                                                 //TRMLV1
             trmlv2_iref       or trmlv2_vreadC       or                          //TRMLV2
             trm0_vread        or trm0_idp            or trm0_osc           or    //TRM0
             trm0_cp           or                                                 //TRM0
             trm0_irefD        or                                                 //TRM0
             trm0_vreadR       or                                                 //FTRM0
             trm1_iref         or                                                 //TRM1
             trm3_frsel        or						  //TRM3
             trm4_ctrim        or trm4_rtrim          or			  //TRM3
             trm2_rxflagz      or trm3_r0a            or trm2_r1a           or	  //RDN
             fpara_fpwrty      or						  //FPARA
             fpara_fpecc       or fpara_fperty        or fpara_fpwrty       or	  //FPARA
             fpara_fpser       or fpara_fpwwr         or fpara_btbls	    or	  //FPARA
             trmlv1_bgrtc      or trm4_wtrim          or trm4_ftrim
             )
	case( 1'b1 ) 
		trmt_trm0_osc      : trmr_bus = {5'b0 , trm0_osc    [ 2:0]}  ; // TRMT=01h
		trmt_trm0_vread    : trmr_bus = {5'b0 , trm0_vread  [ 2:0]}  ; // TRMT=02h
		trmt_trmlv2_iref   : trmr_bus = {3'b0 , trmlv2_iref [ 4:0]}  ; // TRMT=03h
		trmt_trm1_iref     : trmr_bus = {3'b0 , trm1_iref   [ 4:0]}  ; // TRMT=04h
		trmt_trm0_idp      : trmr_bus = {5'b0 , trm0_idp    [ 2:0]}  ; // TRMT=05h
		trmt_trm0_cp       : trmr_bus = {4'b0 , trm0_cp     [ 3:0]}  ; // TRMT=06h
		trmt_trm0_irefD    : trmr_bus = {3'b0 , trm0_irefD  [ 4:0]}  ; // TRMT=07h
		trmt_trmlv2_vreadC : trmr_bus = {5'b0 , trmlv2_vreadC[2:0]}  ; // TRMT=08h
		trmt_trm0_vreadR   : trmr_bus = {5'b0 , trm0_vreadR [ 2:0]}  ; // TRMT=09h
		trmt_trm3_frsel    : trmr_bus = {3'b0 , trm3_frsel  [ 4:0]}  ; // TRMT=0Ah //FRSEL4-0
		trmt_trm4_ctrim    : trmr_bus = {1'b0 , trm4_ctrim  [ 6:0]}  ; // TRMT=0Bh //CTRIM6-0		// v1.1 mod
		trmt_trm4_rtrim    : trmr_bus = {2'b0 , trm4_rtrim  [ 5:0]}  ; // TRMT=0Ch //RTRIM5-0		// v1.1 mod
		trmt_trmlv1_bgrt   : trmr_bus = {1'b0 , trmlv1_bgrt [ 6:0]}  ; // TRMT=0Dh //BGRT6-0
		trmt_trm2_rxflagz  : trmr_bus = {6'b0 , trm2_rxflagz[ 1:0]}  ; // TRMT=0Eh //R0FLAGZ, R1FLAGZ	// v1.1 mod
		trmt_trm3_r0a      : trmr_bus = {       trm3_r0a    [ 7:0]}  ; // TRMT=0Fh //R0A7-0		// v1.1 mod
		trmt_fpara_fpecc   : trmr_bus = {4'b0 , fpara_fpecc [ 3:0]}  ; // TRMT=10h //FPECC3-0
		trmt_fpara_fperty  : trmr_bus = {5'b0 , fpara_fperty[ 2:0]}  ; // TRMT=11h //FPERTY2-0
		trmt_fpara_fpwrty  : trmr_bus = {6'b0 , fpara_fpwrty[ 1:0]}  ; // TRMT=12h //FPWRTY1-0
		trmt_fpara_fpser   : trmr_bus = {5'b0 , fpara_fpser [ 2:0]}  ; // TRMT=13h //FPSER2-0
		trmt_fpara_fpwwr   : trmr_bus = {5'b0 , fpara_fpwwr [ 2:0]}  ; // TRMT=14h //FPWWR2-0
		trmt_fpara_btbls   : trmr_bus = {6'b0 , fpara_btbls [ 1:0]}  ; // TRMT=15h //BTBLS1-0
		trmt_trmlv1_bgrtc  : trmr_bus = {4'b0 , trmlv1_bgrtc[ 3:0]}  ; // TRMT=16h //BGRT10-7	// v1.1 add
		trmt_trm4_wtrim    : trmr_bus = {5'b0 , trm4_wtrim  [ 2:0]}  ; // TRMT=17h //WTRIM2-0	// v1.1 add
		trmt_trm4_ftrim    : trmr_bus = {2'b0 , trm4_ftrim  [ 5:0]}  ; // TRMT=18h //FTRIM5-0	// v1.1 add
		trmt_trm2_r1a      : trmr_bus = {       trm2_r1a    [ 7:0]}  ; // TRMT=0Fh //R1A7-0		// v1.1 add
		default            : trmr_bus = 8'b0000000                   ;
	endcase

// ====================== APB Read BUS ==================================================
  always @ ( ren_hiotrm        or ren_bectl         or
             ren_trmt          or ren_trmr          or 
             ren_tcpsctl       or
             ren_topt0         or ren_topt1         or ren_topt2         or ren_topt3         or
             ren_tempcal0      or ren_tempcal1      or ren_tempcal2      or ren_tempcal3      or
             tcpscen           or THSPEED           or TSUB              or TLPOWER           or	//TCPSCTL
//           TRLSPY            or TLSPY             or TCSRCUT           or TCFLSTOP          or	//TCPSCTL
             TRLSPY            or TCSRCUT           or TCFLSTOP          or				//TCPSCTL
             trmr_bus          or 
             trm4_ftrim        or                                                               	//HIOTRM		// SS3rd: 2010.01.19 Temporary
             bectl             or                                                               	//BECTL
             trmt              or                                                               	//trmt
             fmopb_ocden       or fmopb_c3hff       or                                          	//FMOPB HH
	     fmopb_cmode       or fmopb_ithl        or fmopb_frqselh     or fmopb_frqsell     or	//FMOPB	HL
             fmopb_lvimds      or fmopb_lvis        or fmopb_vpoc        or fmopb_portselb    or  	//FMOPB LH
             fmopb_wdtint      or fmopb_window      or fmopb_wdton       or                       	//FMOPB LL
             fmopb_wdcs        or fmopb_wdstbyon    or                                            	//FMOPB LL
             tempcal3          or tempcal2          or tempcal1          or tempcal0          or  	//TCAL
	     ren_ext           or prdata_ext        or
	     TESTMOD
             )
	case( 1'b1 )
//		ren_hiotrm	: prdata = {8'b0, {1'b0, trm4_ctrim[6:0]}};
		ren_hiotrm	: prdata = {8'b0, {2'b0, trm4_ftrim[5:0]}};				// v1.1 mod
		ren_bectl       : prdata = {bectl[7:0], 8'b0};
		ren_trmr        : prdata = {trmr_bus[7:0], 8'b0};
		ren_trmt        : prdata = {8'b0, {3'b0,trmt[4:0]}};
		ren_tcpsctl     : prdata = {{tcpscen, 1'b0, TLPOWER, TCSRCUT, TCFLSTOP, TRLSPY, THSPEED, TSUB}, 8'b0};
		ren_topt0       : prdata = {8'b0, {fmopb_wdtint,fmopb_window,fmopb_wdton,fmopb_wdcs,fmopb_wdstbyon}};
		ren_topt1       : prdata = {{fmopb_vpoc[2:0], fmopb_portselb, fmopb_lvis[1:0], fmopb_lvimds[1:0]}, 8'b0};
		ren_topt2       : prdata = {8'b0, {{3{TESTMOD}}&{fmopb_cmode[1:0],fmopb_ithl}, {2{TESTMOD}}&fmopb_frqselh[1:0],fmopb_frqsell[2:0]}};
		ren_topt3       : prdata = {{6'b0, fmopb_ocden,fmopb_c3hff}, 8'b0};
		ren_tempcal0    : prdata = {8'b0, tempcal0[7:0]};
		ren_tempcal1    : prdata = {tempcal1[7:0], 8'b0};
		ren_tempcal2    : prdata = {8'b0, tempcal2[7:0]};
		ren_tempcal3    : prdata = {tempcal3[7:0], 8'b0};
//
		ren_ext         : prdata = prdata_ext;
		default         : prdata = 16'h0000;
	endcase
endmodule	// QLK0RCIBCM3SF1V1_RDCNT



module QLK0RCIBCM3SF1V1_MAIN( BASECK            , SYSRESB            ,
                             iromo              , pwdata             ,
                             b_trmlv1_bgrt_en   ,
                             b_trmlv1_bgrtc_en  ,								// v1.1 add
			     b_trmlv2_iref_en   , b_trmlv2_vreadC_en ,
                             b_trm0_osc_en      , b_trm0_vread_en    ,
                             b_trm1_iref_en     ,
                             b_trm0_irefD_en    , b_trm0_vreadR_en   ,
                             b_trm0_idp_en      , b_trm0_cp_en       ,
			     b_trm2_rxflagz_en  , b_trm3_r0a_en      , b_trm2_r1a_en      ,			// v1.1 mod
                             b_trm3_frsel_en    ,
                             b_trm4_ctrim_en    , wen_HIOTRM         , b_trm4_rtrim_en    ,                     // v1.1 mod
                             b_trm4_wtrim_en    , b_trm4_ftrim_en    ,                                          // v1.1 mod
                             b_fpara_fpecc_en   , b_fpara_fperty_en  , b_fpara_fpwrty_en  ,
                             b_fpara_fpser_en   , b_fpara_fpwwr_en   , b_fpara_btbls_en   ,
                             b_fmopb_hh_en      , b_fmopb_hl_en      ,
                             b_fmopb_frqselh_en , b_fmopb_frqsell_en ,
                             b_fmopb_lh_en      , b_fmopb_ll_en      ,
                             b_tcal_hh_en       , b_tcal_hl_en       , b_tcal_lh_en       ,
                             b_tcal_ll_en       ,
			     r_trmlv_en         ,							// SS3rd: 2010.02.01 Chg
                             r_trm0_en          , r_trm1_en          , r_trm2_en          ,
                             r_trm3_en          , r_trm4_en          , r_fpara_en         ,			// v1.1 rdn --> trm4
                             r_fmopb_en         , r_tcal_en          ,
                             trmlv1_bgrt        , trmlv1_bgrt_dft    , 				//TRMLV1	// Ver2.0 modify
                             trmlv1_bgrtc       , trmlv1_bgrtc_dft   , 				//TRMLV1	// v1.1 add
                             trmlv2_iref        , trmlv2_vreadC      ,				//TRMLV2
                             trm0_vread         , trm0_idp           , trm0_osc           ,	//TRM0
                             trm0_cp            ,                                     		//TRM0
                             trm0_vreadR        ,                                     		//FTRM0
                             trm1_iref          , trm0_irefD         ,				//TRM1
			     trm2_rxflagz       , trm3_r0a           , trm2_r1a           ,	//TRM2(RDN)     // v1.1 mod
                             trm3_frsel         ,						//TRM3
                             trm4_ctrim         , trm4_rtrim         ,                          //TRM4          // v1.1 mod
                             trm4_wtrim         , trm4_ftrim         ,                          //TRM4          // v1.1 add
                             fpara_fpecc        , fpara_fperty       , fpara_fpwrty       ,	//FPARA
                             fpara_fpser        , fpara_fpwwr        , fpara_btbls        ,	//FPARA
                             fmopb_ocden        , fmopb_c3hff        ,				//FMOPB HH
                             fmopb_cmode        , fmopb_ithl         ,				//FMOPB HL
                             fmopb_frqselh      , fmopb_frqsell      ,				//FMOPB HL
                             fmopb_lvimds       , fmopb_lvis         , fmopb_vpoc         ,	//FMOPB LH
			     fmopb_portselb     ,						//FMOPB LH	// v1.1 add
                             fmopb_wdtint       , fmopb_window       , fmopb_wdton        ,	//FMOPB LL
                             fmopb_wdcs         , fmopb_wdstbyon     ,				//FMOPB LL
                             tempcal0           , tempcal1           , tempcal2           ,	//TCAL
                             tempcal3           ,						//TCAL
                             TESTMOD            ,                                		//BASECK gating
			     wdton_ft_res       , wdstbyon_ft_res    ,
			     lvis_ft_res        , vpoc_ft_res        ,
			     portselb_ft_res	, bgr_ft_res_all     ,						// v1.1 add
			     RESETB             ,
			     SCANMODE           ,
                             TESTRMRD           , RESSQSTA           ,
                             TRMRD1CK           , TRMRD2CK           ,
			     PSYSRESB										// v1.1 add
                           );

  input         BASECK ;
  input         SYSRESB ;
  input         TESTMOD;
  input	[31:0]	iromo;
  input	[15:0]  pwdata;

//////////////////////////////////WRITE_EN from BI/////////////////
  input		b_trmlv1_bgrt_en   ; // BIからの書き込み許可(trmlv1_bgrt)
  input		b_trmlv1_bgrtc_en  ; // BIからの書き込み許可(trmlv1_bgrt)			// v1.1 add
  input         b_trmlv2_iref_en   ; // BIからの書き込み許可(trmlv2_iref)
  input         b_trmlv2_vreadC_en ; // BIからの書き込み許可(trmlv2_vreadC)
  input         b_trm0_osc_en      ; // BIからの書き込み許可(trm0_osc)
  input         b_trm0_vread_en    ; // BIからの書き込み許可(trm0_vread)
  input         b_trm0_vreadR_en   ; // BIからの書き込み許可(trm0_vreadR)
  input         b_trm1_iref_en     ; // BIからの書き込み許可(trm1_iref)
  input         b_trm0_irefD_en    ; // BIからの書き込み許可(trm0_irefD)
  input         b_trm0_idp_en      ; // BIからの書き込み許可(trm0_idp)
  input         b_trm0_cp_en       ; // BIからの書き込み許可(trm0_cp)
  input         b_trm2_rxflagz_en  ; // BIからの書き込み許可(trm2_rxflagz)              	// v1.1 mod
  input         b_trm3_r0a_en      ; // BIからの書き込み許可(trm3_r0a)                  	// v1.1 mod
  input         b_trm2_r1a_en      ; // BIからの書き込み許可(trm2_r1a)                  	// v1.1 mod
  input         b_trm3_frsel_en    ; // BIからの書き込み許可(trm3_frsel)
  input         b_trm4_ctrim_en    ; // BIからの書き込み許可(trm4_ctrim)	// SS2nd: Add	// v1.1 mod
//input         wen_HIOTRM         ; // Write_en from BI (TRM3.ctrim[6:0])	// SS2nd: Add
  input         wen_HIOTRM         ; // Write_en from BI (TRM4.ftrim[5:0])	// SS2nd: Add	// v1.1 mod
  input         b_trm4_rtrim_en    ; // BIからの書き込み許可(rtrim[5:0])	// SS2nd: Add	// v1.1 mod
  input         b_trm4_wtrim_en    ; // BIからの書き込み許可(trm4_wtrim)			// v1.1 mod
  input         b_trm4_ftrim_en    ; // BIからの書き込み許可(trm3_ftrim)			// v1.1 mod
  input         b_fpara_fpecc_en   ; // BIからの書き込み許可(fpara_fpecc)
  input         b_fpara_fperty_en  ; // BIからの書き込み許可(fpara_fperty)
  input         b_fpara_fpwrty_en  ; // BIからの書き込み許可(fpara_fpwrty)
  input         b_fpara_fpser_en   ; // BIからの書き込み許可(fpara_fpser)
  input         b_fpara_fpwwr_en   ; // BIからの書き込み許可(fpara_fpwwr)
  input         b_fpara_btbls_en   ; // BIからの書き込み許可(fpara_btbls)
  input         b_fmopb_hh_en      ; // BIからの書き込み許可(fmopb_hh)
  input         b_fmopb_hl_en      ; // BIからの書き込み許可(fmopb_hl)
  input         b_fmopb_frqselh_en ; // BIからの書き込み許可(fmopb_frqselh)
  input         b_fmopb_frqsell_en ; // BIからの書き込み許可(fmopb_frqsell)
  input         b_fmopb_lh_en      ; // BIからの書き込み許可(fmopb_lh)
  input         b_fmopb_ll_en      ; // BIからの書き込み許可(fmopb_ll)
  input         b_tcal_hh_en       ; // BIからの書き込み許可(tcal_hh)
  input         b_tcal_hl_en       ; // BIからの書き込み許可(tcal_hl)
  input         b_tcal_lh_en       ; // BIからの書き込み許可(tcal_lh)
  input         b_tcal_ll_en       ; // BIからの書き込み許可(tcal_ll)

//////////////////////////////////WRITE_EN from RESSEQ/////////////
  input         r_trmlv_en         ; // RESSEQからの書き込み許可(trmlv1,trmlv2)		// SS3rd:2010.02.01 Chg
  input         r_trm0_en          ; // RESSEQからの書き込み許可(trm0)
  input         r_trm1_en          ; // RESSEQからの書き込み許可(trm1)
  input         r_trm2_en          ; // RESSEQからの書き込み許可(trm2)
  input         r_trm3_en          ; // RESSEQからの書き込み許可(trm3)
  input         r_trm4_en          ; // RESSEQからの書き込み許可(trm4)			// v1.1 rename rdn --> trm4
  input         r_fpara_en         ; // RESSEQからの書き込み許可(fpara)
  input         r_fmopb_en         ; // RESSEQからの書き込み許可(fmopb)
  input         r_tcal_en          ; // RESSEQからの書き込み許可(tcal)

//////////////////////////////////TRMLV////////////////////////////
  output[6:0]	trmlv1_bgrt;
  output[6:0]	trmlv1_bgrt_dft;
  output[3:0]	trmlv1_bgrtc;				// v1.1 add
  output[3:0]	trmlv1_bgrtc_dft;			// v1.1 add

  output[4:0]	trmlv2_iref;
  output[2:0]	trmlv2_vreadC;

  output	bgr_ft_res_all ;			// v1.1 add

//////////////////////////////////TRM0////////////////////////////
  output[2:0]   trm0_vread;
  output[2:0]   trm0_vreadR;
  output[2:0]   trm0_idp;
  output[2:0]   trm0_osc;
  output[3:0]   trm0_cp;
  output[4:0]   trm0_irefD;

//////////////////////////////////TRM1////////////////////////////
  output[4:0]	trm1_iref;

//////////////////////////////////TRM2(RDN)///////////////////////
  output[1:0]	trm2_rxflagz;				// v1.1 mod
  output[7:0]	trm2_r1a;

//////////////////////////////////TRM3////////////////////////////
  output[4:0]	trm3_frsel;
  output[7:0]	trm3_r0a;				// v1.1 mod

//////////////////////////////////TRM4////////////////////////////
  output[6:0]	trm4_ctrim;				// SS2nd: Add	// v1.1 mod
  output[5:0]	trm4_rtrim;				// SS2nd: Add	// v1.1 mod
  output[2:0]	trm4_wtrim;						// v1.1 mod
  output[5:0]	trm4_ftrim;						// v1.1 mod

//////////////////////////////////FPARA////////////////////////////
  output[3:0]   fpara_fpecc;
  output[2:0]   fpara_fperty;
  output[1:0]   fpara_fpwrty;
  output[2:0]   fpara_fpser;
  output[2:0]   fpara_fpwwr;
  output[1:0]   fpara_btbls;

//////////////////////////////////FMOPB////////////////////////////
  output        fmopb_ocden;
  output        fmopb_c3hff;
  output[1:0]   fmopb_cmode;
  output        fmopb_ithl;
  output[1:0]   fmopb_frqselh;
  output[2:0]   fmopb_frqsell;
  output[1:0]	fmopb_lvimds;		// v1.1 add
  output[1:0]   fmopb_lvis;
  output[2:0]   fmopb_vpoc;
  output	fmopb_portselb;		// v1.1 add
  output        fmopb_wdtint;
  output[1:0]   fmopb_window;
  output        fmopb_wdton;
  output[2:0]   fmopb_wdcs;
  output        fmopb_wdstbyon;

//////////////////////////////////TEMPCAL//////////////////////////
  output[7:0]   tempcal0;
  output[7:0]   tempcal1;
  output[7:0]   tempcal2;
  output[7:0]   tempcal3;

// SS2nd:v1.10 ===== Add Input & Output Port ==============================================================
  output	wdton_ft_res;		// FT3_H for wdton RESET output;
  output	wdstbyon_ft_res;	// FT3_H for wdstbyon RESET output;
  output[1:0]	lvis_ft_res;		// FT3_L for lvis RESET output;
  output[2:0]	vpoc_ft_res;		// FT3_H for vpoc RESET output;
  output	portselb_ft_res;	// FT3_H for portselb RESET output;	// v1.1 add

  input		RESETB ;
  input		SCANMODE ;
  input		TESTRMRD ;
  input		RESSQSTA ;
  input		TRMRD1CK ;
  input		TRMRD2CK ;
  input		PSYSRESB ;							// v1.1 add

// SS2nd:v1.10 ===== Add END ==============================================================================


///////////////////////////////////////////////////////////////////
/////////////////////BASECK GATING/////////////////////////////////
///////////////////////////////////////////////////////////////////
// v1.1 mod rename r_rdn_en --> r_trm4_en
//
  wire baseckin;
  wire r_all_en = r_trm0_en          | r_trm1_en          | r_trm2_en          |
                  r_trm3_en          | r_trm4_en          | r_fpara_en         |
                  r_fmopb_en         | r_tcal_en          ;

// trmw = 00H-19H (25 items)
  wire b_all_trmw_en = b_trm0_osc_en     | b_trm0_vread_en    | b_trmlv2_iref_en  |
                       b_trm1_iref_en    | b_trm0_idp_en      | b_trm0_cp_en      |
                       b_trm0_irefD_en   | b_trmlv2_vreadC_en | b_trm0_vreadR_en  |
                       b_trm3_frsel_en   | b_trm4_ctrim_en    | b_trm4_rtrim_en   |
                       b_trmlv1_bgrt_en  | b_trm2_rxflagz_en  | b_trm3_r0a_en     |
                       b_fpara_fpecc_en  | b_fpara_fperty_en  | b_fpara_fpwrty_en |
                       b_fpara_fpser_en  | b_fpara_fpwwr_en   | b_fpara_btbls_en  |
                       b_trmlv1_bgrtc_en | b_trm4_wtrim_en    | b_trm4_ftrim_en   |
                       b_trm2_r1a_en     ;

//
//TBGTSMLALADPCLX2 baseck_latch ( .N01(baseckin), .N02(), .H01(r_all_en | fto_all), .H02(BASECK), .H03(TESTMOD) ) ;
//TBGTSMLALADPCLX2 baseck_latch ( .N01(baseckin), .N02(), .H01(r_all_en ), .H02(BASECK), .H03(TESTMOD) ) ;
//TBGTSMLALADCLX2 baseck_latch ( .N01(baseckin), .H01(r_all_en ), .H02(BASECK), .H03(TESTMOD) ) ;
  TBGTSMLALADCLX2 baseck_latch ( .N01(baseckin), .H01(r_all_en | wen_HIOTRM | b_fmopb_frqsell_en |
                                 b_tcal_hh_en | b_tcal_hl_en | b_tcal_lh_en | b_tcal_ll_en | b_all_trmw_en ), .H02(BASECK), .H03(TESTMOD) ) ;


///////////////////////////////////////////////////////////////////
//////////////////////////////////TRMLV////////////////////////////
///////////////////////////////////////////////////////////////////
  wire	[6:0]	trmlv1_bgrt;
  wire	[6:0]	trmlv1_bgrt_dft;							// Ver2.0 add
  wire	[6:0]	trmlv1_bgrt_in;
  wire  [3:0]   trmlv1_bgrtc;
  wire  [3:0]   trmlv1_bgrtc_dft;                                                       // Ver2.0 add
  wire  [3:0]   trmlv1_bgrtc_in;

  wire	[2:0]	trmlv2_vreadC;
  wire	[2:0]	trmlv2_vreadC_in;
  wire	[4:0]	trmlv2_iref;
  wire	[4:0]	trmlv2_iref_in;

  QLK0RCIBCM3SF1V1_TRMLV trmlv(
		.BASECK(BASECK),		.SYSRESB(SYSRESB),
		.SCANMODE(SCANMODE),
		.RESSQSTA(RESSQSTA),		.TRMRD1CK(TRMRD1CK),			.TRMRD2CK(TRMRD2CK),
		.trmlv2_vreadC(trmlv2_vreadC),	.trmlv2_vreadC_in(trmlv2_vreadC_in),	.b_trmlv2_vreadC_en(b_trmlv2_vreadC_en),
		.trmlv2_iref(trmlv2_iref),	.trmlv2_iref_in(trmlv2_iref_in),	.b_trmlv2_iref_en(b_trmlv2_iref_en),
		.trmlv1_bgrt(trmlv1_bgrt),	.trmlv1_bgrt_in(trmlv1_bgrt_in),	.b_trmlv1_bgrt_en(b_trmlv1_bgrt_en),
		.trmlv1_bgrtc(trmlv1_bgrtc),	.trmlv1_bgrtc_in(trmlv1_bgrtc_in),	.b_trmlv1_bgrtc_en(b_trmlv1_bgrtc_en),
		.TESTRMRD(TESTRMRD),		.r_trm3_en(r_trm3_en),
		.trmlv1_bgrt_dft(trmlv1_bgrt_dft),					// Ver2.0 add
		.trmlv1_bgrtc_dft(trmlv1_bgrtc_dft),					// v1.1 add
		.bgr_ft_res_all(bgr_ft_res_all)						// v1.1 add
		);

///////////////////////////////////////////////////////////////////
//////////////////////////////////TRM0/////////////////////////////
///////////////////////////////////////////////////////////////////
  wire	[2:0]	trm0_vread;
  wire	[2:0]	trm0_vread_in;
  wire		trm0_vread_en;
  wire	[2:0]	trm0_vreadR;
  wire	[2:0]	trm0_vreadR_in;
  wire		trm0_vreadR_en;
  wire	[2:0]	trm0_idp;
  wire	[2:0]	trm0_idp_in;
  wire		trm0_idp_en;
  wire	[2:0]	trm0_osc;
  wire	[2:0]	trm0_osc_in;
  wire		trm0_osc_en;
  wire	[3:0]	trm0_cp;
  wire	[3:0]	trm0_cp_in;
  wire		trm0_cp_en;
  wire	[4:0]	trm0_irefD;
  wire	[4:0]	trm0_irefD_in;
  wire		trm0_irefD_en;

  QLK0RCIBCM3SF1V1_TRM0 trm0(
		.BASECK(baseckin),		.RESETB(RESETB),
		.trm0_vread(trm0_vread),	.trm0_vread_in(trm0_vread_in),		.trm0_vread_en(trm0_vread_en),
		.trm0_vreadR(trm0_vreadR),	.trm0_vreadR_in(trm0_vreadR_in),	.trm0_vreadR_en(trm0_vreadR_en),
		.trm0_idp(trm0_idp),		.trm0_idp_in(trm0_idp_in),		.trm0_idp_en(trm0_idp_en),
		.trm0_osc(trm0_osc),		.trm0_osc_in(trm0_osc_in),		.trm0_osc_en(trm0_osc_en),
		.trm0_cp(trm0_cp),		.trm0_cp_in(trm0_cp_in),		.trm0_cp_en(trm0_cp_en),
		.trm0_irefD(trm0_irefD),	.trm0_irefD_in(trm0_irefD_in),		.trm0_irefD_en(trm0_irefD_en)
		);

///////////////////////////////////////////////////////////////////
//////////////////////////////////TRM1/////////////////////////////
///////////////////////////////////////////////////////////////////
  wire	[4:0]	trm1_iref;
  wire	[4:0]	trm1_iref_in;
  wire		trm1_iref_en;

  QLK0RCIBCM3SF1V1_TRM1 trm1(
		.BASECK(baseckin),		.RESETB(RESETB),
		.trm1_iref(trm1_iref),		.trm1_iref_in(trm1_iref_in),		.trm1_iref_en(trm1_iref_en)
		);

///////////////////////////////////////////////////////////////////
//////////////////////////////////TRM2(RDN)////////////////////////
///////////////////////////////////////////////////////////////////
  wire [1:0]  trm2_rxflagz;		// v1.1 mod
  wire [1:0]  trm2_rxflagz_in;		// v1.1 mod
  wire        trm2_rxflagz_en;
  wire [7:0]  trm2_r1a;
  wire [7:0]  trm2_r1a_in;
  wire        trm2_r1a_en;

  QLK0RCIBCM3SF1V1_TRM2 trm2(
                .BASECK(baseckin),                .SYSRESB(SYSRESB),
                .trm2_rxflagz(trm2_rxflagz),      .trm2_rxflagz_in(trm2_rxflagz_in),        .trm2_rxflagz_en(trm2_rxflagz_en),
                .trm2_r1a(trm2_r1a),              .trm2_r1a_in(trm2_r1a_in),                .trm2_r1a_en(trm2_r1a_en)
                );


///////////////////////////////////////////////////////////////////
//////////////////////////////////TRM3/////////////////////////////
///////////////////////////////////////////////////////////////////
  wire	[4:0]	trm3_frsel;
  wire	[4:0]	trm3_frsel_in;
  wire		trm3_frsel_en;

  wire [7:0]  trm3_r0a;
  wire [7:0]  trm3_r0a_in;
  wire        trm3_r0a_en;

  QLK0RCIBCM3SF1V1_TRM3 trm3 (
		.BASECK(baseckin),		.SYSRESB(SYSRESB),
		.trm3_frsel(trm3_frsel),	.trm3_frsel_in(trm3_frsel_in),		.trm3_frsel_en(trm3_frsel_en),
		.trm3_r0a(trm3_r0a),            .trm3_r0a_in(trm3_r0a_in),              .trm3_r0a_en(trm3_r0a_en)
		);

///////////////////////////////////////////////////////////////////
//////////////////////////////////TRM4(v1.0=RDN)///////////////////
///////////////////////////////////////////////////////////////////
  wire  [6:0]   trm4_ctrim;
  wire  [6:0]   trm4_ctrim_in;
  wire          trm4_ctrim_en;
  wire  [5:0]   trm4_rtrim;
  wire  [5:0]   trm4_rtrim_in;
  wire          trm4_rtrim_en;
  wire  [2:0]   trm4_wtrim;
  wire  [2:0]   trm4_wtrim_in;
  wire          trm4_wtrim_en;
  wire  [5:0]   trm4_ftrim;
  wire  [5:0]   trm4_ftrim_in;
  wire          trm4_ftrim_en;


  QLK0RCIBCM3SF1V1_TRM4 trm4 (
                .BASECK(baseckin),              .SYSRESB(SYSRESB),
                .trm4_ctrim(trm4_ctrim),        .trm4_ctrim_in(trm4_ctrim_in),          .trm4_ctrim_en(trm4_ctrim_en),
                .trm4_rtrim(trm4_rtrim),        .trm4_rtrim_in(trm4_rtrim_in),          .trm4_rtrim_en(trm4_rtrim_en),
                .trm4_wtrim(trm4_wtrim),        .trm4_wtrim_in(trm4_wtrim_in),          .trm4_wtrim_en(trm4_wtrim_en),
                .trm4_ftrim(trm4_ftrim),        .trm4_ftrim_in(trm4_ftrim_in),          .trm4_ftrim_en(trm4_ftrim_en)
                );


///////////////////////////////////////////////////////////////////
//////////////////////////////////TCAL/////////////////////////////
///////////////////////////////////////////////////////////////////
wire [7:0]  tempcal3;
wire [7:0]  tcal_hh_in;
wire        tcal_hh_en;
wire [7:0]  tempcal2;
wire [7:0]  tcal_hl_in;
wire        tcal_hl_en;
wire [7:0]  tempcal1;
wire [7:0]  tcal_lh_in;
wire        tcal_lh_en;
wire [7:0]  tempcal0;
wire [7:0]  tcal_ll_in;
wire        tcal_ll_en;
QLK0RCIBCM3SF1V1_TCAL tcal(
    .BASECK(baseckin)                       ,.SYSRESB(SYSRESB)                       ,
    .tempcal3(tempcal3)                     ,.tcal_hh_in(tcal_hh_in)                 ,.tcal_hh_en(tcal_hh_en)                 ,
    .tempcal2(tempcal2)                     ,.tcal_hl_in(tcal_hl_in)                 ,.tcal_hl_en(tcal_hl_en)                 ,
    .tempcal1(tempcal1)                     ,.tcal_lh_in(tcal_lh_in)                 ,.tcal_lh_en(tcal_lh_en)                 ,
    .tempcal0(tempcal0)                     ,.tcal_ll_in(tcal_ll_in)                 ,.tcal_ll_en(tcal_ll_en)
);

///////////////////////////////////////////////////////////////////
//////////////////////////////////FPARA////////////////////////////
///////////////////////////////////////////////////////////////////
wire [3:0]  fpara_fpecc;
wire [3:0]  fpara_fpecc_in;
wire        fpara_fpecc_en;
wire [2:0]  fpara_fperty;
wire [2:0]  fpara_fperty_in;
wire        fpara_fperty_en;
wire [1:0]  fpara_fpwrty;
wire [1:0]  fpara_fpwrty_in;
wire        fpara_fpwrty_en;
wire [2:0]  fpara_fpser;
wire [2:0]  fpara_fpser_in;
wire        fpara_fpser_en;
wire [2:0]  fpara_fpwwr;
wire [2:0]  fpara_fpwwr_in;
wire        fpara_fpwwr_en;
wire [1:0]  fpara_btbls;
wire [1:0]  fpara_btbls_in;
wire        fpara_btbls_en;
QLK0RCIBCM3SF1V1_FPARA fpara(
    .BASECK(baseckin)                       ,.SYSRESB(SYSRESB)                       ,
    .fpara_fpecc(fpara_fpecc)               ,.fpara_fpecc_in(fpara_fpecc_in)         ,.fpara_fpecc_en(fpara_fpecc_en)         ,
    .fpara_fperty(fpara_fperty)             ,.fpara_fperty_in(fpara_fperty_in)       ,.fpara_fperty_en(fpara_fperty_en)       ,
    .fpara_fpwrty(fpara_fpwrty)             ,.fpara_fpwrty_in(fpara_fpwrty_in)       ,.fpara_fpwrty_en(fpara_fpwrty_en)       ,
    .fpara_fpser(fpara_fpser)               ,.fpara_fpser_in(fpara_fpser_in)         ,.fpara_fpser_en(fpara_fpser_en)         ,
    .fpara_fpwwr(fpara_fpwwr)               ,.fpara_fpwwr_in(fpara_fpwwr_in)         ,.fpara_fpwwr_en(fpara_fpwwr_en)         ,
    .fpara_btbls(fpara_btbls)               ,.fpara_btbls_in(fpara_btbls_in)         ,.fpara_btbls_en(fpara_btbls_en)
);

///////////////////////////////////////////////////////////////////
//////////////////////////////////FMOPB////////////////////////////
///////////////////////////////////////////////////////////////////
  wire		fmopb_ocden;
  wire		fmopb_c3hff;
  wire	[7:0]	fmopb_hh_in;
  wire		fmopb_hh_en;
  wire	[1:0]	fmopb_frqselh;
  wire	[2:0]	fmopb_frqsell;
  wire	[7:0]	fmopb_hl_in;
  wire		fmopb_hl_en;
  wire		fmopb_frqselh_en;
  wire		fmopb_frqsell_en;
  wire	[1:0]	fmopb_lvimds;		// v1.1 add
  wire	[1:0]	fmopb_lvis;
  wire	[2:0]	fmopb_vpoc;
  wire		fmopb_portselb;		// v1.1 add
  wire	[7:0]	fmopb_lh_in;
  wire		fmopb_lh_en;
  wire		fmopb_wdtint;
  wire	[1:0]	fmopb_window;
  wire		fmopb_wdton;
  wire	[2:0]	fmopb_wdcs;
  wire		fmopb_wdstbyon;
  wire	[7:0]	fmopb_ll_in;
  wire		fmopb_ll_en;

  QLK0RCIBCM3SF1V1_FMOPB fmopb( 
		.BASECK(baseckin),			.SYSRESB(SYSRESB),
		.PSYSRESB(PSYSRESB),			// v1.1 add
		.fmopb_ocden(fmopb_ocden),		.fmopb_c3hff(fmopb_c3hff),	.fmopb_hh_in(fmopb_hh_in),
		.fmopb_hh_en(fmopb_hh_en),		.fmopb_cmode(fmopb_cmode),	.fmopb_ithl(fmopb_ithl),
                .fmopb_frqselh(fmopb_frqselh),          .fmopb_frqsell(fmopb_frqsell),
		.fmopb_hl_in(fmopb_hl_in),		.fmopb_hl_en(fmopb_hl_en),
                .fmopb_frqselh_en(fmopb_frqselh_en),    .fmopb_frqsell_en(fmopb_frqsell_en),
		.fmopb_lvimds(fmopb_lvimds),            .fmopb_lvis(fmopb_lvis),	.fmopb_vpoc(fmopb_vpoc),
		.fmopb_portselb(fmopb_portselb),	// v1.1 add
		.fmopb_lh_in(fmopb_lh_in),		.fmopb_lh_en(fmopb_lh_en),	.fmopb_wdtint(fmopb_wdtint),
		.fmopb_window(fmopb_window),		.fmopb_wdton(fmopb_wdton),	.fmopb_wdcs(fmopb_wdcs),
		.fmopb_wdstbyon(fmopb_wdstbyon),	.fmopb_ll_in(fmopb_ll_in),	.fmopb_ll_en(fmopb_ll_en),
		.wdton_ft_res(wdton_ft_res),		.wdstbyon_ft_res(wdstbyon_ft_res),
		.lvis_ft_res(lvis_ft_res),		.vpoc_ft_res(vpoc_ft_res),
		.portselb_ft_res(portselb_ft_res)	// v1.1 add
		);


////////////////////////////ライトデータセレクタ////////////////////////
// v1.1 mod rename r_rdn_en --> r_trm4_en
//
  wire iromo_en = r_trmlv_en         |
                  r_trm0_en          | r_trm1_en          |
                  r_trm2_en          | r_trm3_en          |
                  r_trm4_en          | r_fpara_en         |
                  r_fmopb_en         | r_tcal_en          ;


  assign  trmlv1_bgrt_in  [ 6: 0] = ( iromo_en ) ? iromo[ 6: 0]  : pwdata[ 6: 0] ;
  assign  trmlv1_bgrtc_in [ 3: 0] = ( iromo_en ) ? iromo[10: 7]  : pwdata[ 3: 0] ;	// v1.1 add
//assign  trmlv2_iref_in  [ 4: 0] = ( iromo_en ) ? iromo[15:11]  : pwdata[ 4: 0] ;
//assign  trmlv2_vreadC_in[ 2: 0] = ( iromo_en ) ? iromo[10: 8]  : pwdata[ 2: 0] ;
  assign  trmlv2_iref_in  [ 4: 0] = ( iromo_en ) ? iromo[ 7: 3]  : pwdata[ 4: 0] ;	// v1.1 mod
  assign  trmlv2_vreadC_in[ 2: 0] = ( iromo_en ) ? iromo[ 2: 0]  : pwdata[ 2: 0] ;	// v1.1 mod
  assign  trm0_vread_in   [ 2: 0] = ( iromo_en ) ? iromo[29:27]  : pwdata[ 2: 0] ;
  assign  trm0_idp_in     [ 2: 0] = ( iromo_en ) ? iromo[26:24]  : pwdata[ 2: 0] ;
  assign  trm0_osc_in     [ 2: 0] = ( iromo_en ) ? iromo[23:21]  : pwdata[ 2: 0] ;
  assign  trm0_cp_in      [ 3: 0] = ( iromo_en ) ? iromo[19:16]  : pwdata[ 3: 0] ;
  assign  trm0_vreadR_in  [ 2: 0] = ( iromo_en ) ? iromo[13:11]  : pwdata[ 2: 0] ;
  assign  trm0_irefD_in   [ 4: 0] = ( iromo_en ) ? iromo[ 4: 0]  : pwdata[ 4: 0] ;
  assign  trm1_iref_in    [ 4: 0] = ( iromo_en ) ? iromo[ 4: 0]  : pwdata[ 4: 0] ;
//assign  trm3_frsel_in   [ 4: 0] = ( iromo_en ) ? iromo[12: 8]  : pwdata[ 4: 0] ;
  assign  trm3_frsel_in   [ 4: 0] = ( iromo_en ) ? iromo[20:16]  : pwdata[ 4: 0] ;	// v1.1 mod
//assign  rdn_r0flagz_in          = ( iromo_en ) ? iromo[    0]  : pwdata[    0] ;
//assign  rdn_r0a_in      [ 7: 0] = ( iromo_en ) ? iromo[ 8: 1]  : pwdata[ 7: 0] ;
  assign  trm2_rxflagz_in [ 1: 0] = ( iromo_en ) ? iromo[25:24]  : pwdata[ 1: 0] ;	// v1.1 mod
  assign  trm3_r0a_in     [ 7: 0] = ( iromo_en ) ? iromo[31:24]  : pwdata[ 7: 0] ;	// v1.1 mod
  assign  trm2_r1a_in     [ 7: 0] = ( iromo_en ) ? iromo[23:16]  : pwdata[ 7: 0] ;	// v1.1 mod
  assign  fpara_fpecc_in  [ 3: 0] = ( iromo_en ) ? iromo[31:28]  : pwdata[ 3: 0] ;
  assign  fpara_fperty_in [ 2: 0] = ( iromo_en ) ? iromo[27:25]  : pwdata[ 2: 0] ;
  assign  fpara_fpwrty_in [ 1: 0] = ( iromo_en ) ? iromo[23:22]  : pwdata[ 1: 0] ;
  assign  fpara_fpser_in  [ 2: 0] = ( iromo_en ) ? iromo[21:19]  : pwdata[ 2: 0] ;
  assign  fpara_fpwwr_in  [ 2: 0] = ( iromo_en ) ? iromo[18:16]  : pwdata[ 2: 0] ;
  assign  fpara_btbls_in  [ 1: 0] = ( iromo_en ) ? iromo[15:14]  : pwdata[ 1: 0] ;
  assign  fmopb_hh_in     [ 7: 0] = ( iromo_en ) ? iromo[31:24]  : pwdata[15: 8] ;
  assign  fmopb_hl_in     [ 7: 0] = ( iromo_en ) ? iromo[23:16]  : pwdata[ 7: 0] ;
  assign  fmopb_lh_in     [ 7: 0] = ( iromo_en ) ? iromo[15: 8]  : pwdata[15: 8] ;
  assign  fmopb_ll_in     [ 7: 0] = ( iromo_en ) ? iromo[ 7: 0]  : pwdata[ 7: 0] ;
  assign  tcal_hh_in      [ 7: 0] = ( iromo_en ) ? iromo[31:24]  : pwdata[15: 8] ;
  assign  tcal_hl_in      [ 7: 0] = ( iromo_en ) ? iromo[23:16]  : pwdata[ 7: 0] ;
  assign  tcal_lh_in      [ 7: 0] = ( iromo_en ) ? iromo[15: 8]  : pwdata[15: 8] ;
  assign  tcal_ll_in      [ 7: 0] = ( iromo_en ) ? iromo[ 7: 0]  : pwdata[ 7: 0] ;

// SS2nd: 2007.07.16 Add: for ATRM2 NVM Capture
// ATRM2のライトは、TRMWを使用するが、TRMWの実体はなく、ここでライトデータのバスを決定している。
// ------- ATRM2 Write_BUS ------
//assign  trm3_ctrim_in   [ 6: 0] = ( iromo_en ) ? iromo[22:16]  : pwdata[ 6: 0] ; //CTRIM [ 6:0]
//assign  trm3_rtrim_in   [ 2: 0] = ( iromo_en ) ? iromo[26:24]  : pwdata[ 2: 0] ; //EXRTRIM, RTRIM [ 1:0]
//
  assign  trm4_ctrim_in   [ 6: 0] = ( iromo_en ) ? iromo[ 6: 0]  : pwdata[ 6: 0] ;	// v1.1 mod
  assign  trm4_rtrim_in   [ 5: 0] = ( iromo_en ) ? iromo[13: 8]  : pwdata[ 5: 0] ;	// v1.1 mod
  assign  trm4_wtrim_in   [ 2: 0] = ( iromo_en ) ? iromo[26:24]  : pwdata[ 2: 0] ;	// v1.1 add
  assign  trm4_ftrim_in   [ 5: 0] = ( iromo_en ) ? iromo[21:16]  : pwdata[ 5: 0] ;	// v1.1 add

///////////////////////////////////ライトイネーブル制御//////////////
/// r_ はリセットシーケンスでのラッチ許可                 データバス：iromo
/// b_ はbi(APBバス経由）のラッチ許可（テストかファーム） データバス：pwdata
/// f_ はFCB経由リード時のラッチ許可（ファーム）          データバス：iromo
//assign  trmlv1_bgrt_en   = r_trmlv1_en       | r_trm3_en & !TESTRMRD | b_trmlv1_bgrt_en;
//assign  trmlv2_iref_en   = r_trmlv2_en       | b_trmlv2_iref_en;
//assign  trmlv2_vreadC_en = r_trmlv2_en       | b_trmlv2_vreadC_en;
  assign  trm0_vread_en    = r_trm0_en         | b_trm0_vread_en;
  assign  trm0_vreadR_en   = r_trm0_en         | b_trm0_vreadR_en;
  assign  trm0_idp_en      = r_trm0_en         | b_trm0_idp_en;
  assign  trm0_osc_en      = r_trm0_en         | b_trm0_osc_en;
  assign  trm0_cp_en       = r_trm0_en         | b_trm0_cp_en;
  assign  trm1_iref_en     = r_trm1_en         | b_trm1_iref_en;
  assign  trm0_irefD_en    = r_trm0_en         | b_trm0_irefD_en;
  assign  trm2_rxflagz_en  = r_trm2_en         | b_trm2_rxflagz_en;			// v1.1 mod
  assign  trm2_r1a_en      = r_trm2_en         | b_trm2_r1a_en;				// v1.1 mod
  assign  trm3_frsel_en    = r_trm3_en         | b_trm3_frsel_en;
  assign  trm3_r0a_en      = r_trm3_en         | b_trm3_r0a_en;				// v1.1 mod
  assign  trm4_ctrim_en    = r_trm4_en         | b_trm4_ctrim_en;			// v1.1 mod
  assign  trm4_rtrim_en    = r_trm4_en         | b_trm4_rtrim_en;			// v1.1 mod
  assign  trm4_wtrim_en    = r_trm4_en         | b_trm4_wtrim_en;			// v1.1 mod
  assign  trm4_ftrim_en    = r_trm4_en         | b_trm4_ftrim_en;			// v1.1 mod
  assign  fpara_fpecc_en   = r_fpara_en        | b_fpara_fpecc_en;
  assign  fpara_fperty_en  = r_fpara_en        | b_fpara_fperty_en;
  assign  fpara_fpwrty_en  = r_fpara_en        | b_fpara_fpwrty_en;
  assign  fpara_fpser_en   = r_fpara_en        | b_fpara_fpser_en;
  assign  fpara_fpwwr_en   = r_fpara_en        | b_fpara_fpwwr_en;
  assign  fpara_btbls_en   = r_fpara_en        | b_fpara_btbls_en;
  assign  fmopb_hh_en      = r_fmopb_en        | b_fmopb_hh_en;
  assign  fmopb_hl_en      = r_fmopb_en        | b_fmopb_hl_en;
  assign  fmopb_frqselh_en = r_fmopb_en        | b_fmopb_frqselh_en;
  assign  fmopb_frqsell_en = r_fmopb_en        | b_fmopb_frqsell_en;
  assign  fmopb_lh_en      = r_fmopb_en        | b_fmopb_lh_en;
  assign  fmopb_ll_en      = r_fmopb_en        | b_fmopb_ll_en;
  assign  tcal_hh_en       = r_tcal_en         | b_tcal_hh_en;
  assign  tcal_hl_en       = r_tcal_en         | b_tcal_hl_en;
  assign  tcal_lh_en       = r_tcal_en         | b_tcal_lh_en;
  assign  tcal_ll_en       = r_tcal_en         | b_tcal_ll_en;

endmodule	// QLK0RCIBCM3SF1V1_MAIN


module QLK0RCIBCM3SF1V1_TRMLV( BASECK         , SYSRESB           ,
                               SCANMODE       ,
                               RESSQSTA       , TRMRD1CK          , TRMRD2CK            ,
                               trmlv2_vreadC  , trmlv2_vreadC_in  , b_trmlv2_vreadC_en  ,
                               trmlv2_iref    , trmlv2_iref_in    , b_trmlv2_iref_en    ,
                               trmlv1_bgrt    , trmlv1_bgrt_in    , b_trmlv1_bgrt_en    ,
                               trmlv1_bgrtc   , trmlv1_bgrtc_in   , b_trmlv1_bgrtc_en   ,
                               TESTRMRD       , r_trm3_en	  ,
			       trmlv1_bgrt_dft,						// Ver2.0 add
			       trmlv1_bgrtc_dft,					// v1.1 add
			       bgr_ft_res_all						// v1.1 add
                            );

  input         BASECK ;
  input         SYSRESB ;
  input         SCANMODE ;
  input         RESSQSTA ;

  input         TRMRD1CK ;
  input         TRMRD2CK ;

  output[2:0]	trmlv2_vreadC;
  input	[2:0]	trmlv2_vreadC_in;
  input		b_trmlv2_vreadC_en;

  output[4:0]	trmlv2_iref;
  input	[4:0]	trmlv2_iref_in;
  input		b_trmlv2_iref_en;

  output[6:0]	trmlv1_bgrt;
  output[6:0]	trmlv1_bgrt_dft;
  input	[6:0]	trmlv1_bgrt_in;
  input		b_trmlv1_bgrt_en;
  input		TESTRMRD;
  input		r_trm3_en;

  output[3:0]   trmlv1_bgrtc;
  output[3:0]   trmlv1_bgrtc_dft;
  input [3:0]   trmlv1_bgrtc_in;
  input         b_trmlv1_bgrtc_en;

  output	bgr_ft_res_all ;

  reg	[2:0]	trmlv2_vreadC;
  reg	[4:0]	trmlv2_iref;

  wire		bgrt_en,   bgrt_ck,  bgrt_ck_dft;
  wire		bgrtc_en,  bgrtc_ck, bgrtc_ck_dft;

  wire		vreadC_ck, vreadC_ck_dft;
  wire		iref_ck,   iref_ck_dft ;

////////////////////////////////////////////////TRMLV2-vreadC[2:0]
//
//TBGTSMLALADCLX2 vreadCck_latch ( .N01(vreadC_ck), .H01(b_trmlv2_vreadC_en), .H02(BASECK), .H03(1'b0) ) ;
//
//
//assign vreadC_ck_dft = ( SCANMODE ) ? SCANCLK   :
//                       ( RESSQSTA ) ? vreadC_ck : ~TRMRD2CK ;
//
// chnage prim v1.1

  TBGTSMLALADCLX2 vreadCck_latch ( .N01(vreadC_ck), .H01(b_trmlv2_vreadC_en), .H02(BASECK), .H03(SCANMODE) ) ;

  //vreadC_ck <-> ~TRMRD2CKセレクタ
  QLK0RCIBCM3SF1V1_TRMLV_MUX vread_ck_mux (
                .in1(vreadC_ck), .in2(~TRMRD2CK), .sel1(RESSQSTA|SCANMODE), .out(vreadC_ck_dft) ) ;

  always @ ( posedge vreadC_ck_dft or negedge SYSRESB )
	if( !SYSRESB )		trmlv2_vreadC <= 3'b000;
	else			trmlv2_vreadC <= trmlv2_vreadC_in;


////////////////////////////////////////////////TRMLV2-iref[4:0]
//
//TBGTSMLALADCLX2 irefck_latch ( .N01(iref_ck), .H01(b_trmlv2_iref_en), .H02(BASECK), .H03(1'b0) ) ;
//
//
//assign iref_ck_dft = ( SCANMODE ) ? SCANCLK :
//                     ( RESSQSTA ) ? iref_ck : ~TRMRD2CK ;
//
// chnage prim v1.1

  TBGTSMLALADCLX2 irefck_latch ( .N01(iref_ck), .H01(b_trmlv2_iref_en), .H02(BASECK), .H03(SCANMODE) ) ;

  //iref_ck <-> ~TRMRD2CKセレクタ
  QLK0RCIBCM3SF1V1_TRMLV_MUX iref_ck_mux (
                .in1(iref_ck), .in2(~TRMRD2CK), .sel1(RESSQSTA|SCANMODE), .out(iref_ck_dft) ) ;


  always @ ( posedge iref_ck_dft or negedge SYSRESB )
	if( !SYSRESB )		trmlv2_iref <= 5'b00000;
	else			trmlv2_iref <= trmlv2_iref_in;

//
// v1.3 add
//
  wire		bgrt_ft_res, bgrtc_ft_res ;

  assign bgr_ft_res_all = bgrt_ft_res | bgrtc_ft_res ;


////////////////////////////////////////////////TRMLV1-bgrt[6:0]
//
// v1.3 mod
//
//  assign bgrt_en = r_trm3_en & !TESTRMRD | b_trmlv1_bgrt_en ;
//  assign bgrt_ck = ~BASECK & bgrt_en ;
//
////assign bgrt_ck_dft = bgrt_ck | TRMRD1CK & ~SCANMODE ;
//  assign bgrt_ck_dft = ( bgrt_ck | TRMRD1CK ) & ~SCANMODE ;			// Ver2.0 modify
//

  QLK0RCIBCM3SF1V1_BGR_CLK   bgrt_clk    ( .clk_out(bgrt_ck_dft), .BASECK(BASECK), .r_trm3_en(r_trm3_en), .TRMRD1CK(TRMRD1CK),
                                           .TESTRMRD(TESTRMRD), .b_trmlv1_en(b_trmlv1_bgrt_en), .SCANMODE(SCANMODE) );

  QLK0RCIBCM3SF1V1_BGRT_LATCH bgrt_latch ( .trmlv1_bgrt(trmlv1_bgrt), .trmlv1_bgrt_in(trmlv1_bgrt_in),
                                           .bgrt_ck_dft(bgrt_ck_dft), .bgrt_ft_res(bgrt_ft_res) );


//assign trmlv1_bgrt = (SCANMODE) ? trmlv1_bgrt_in : trmlv1_bgrt_p ;
//assign trmlv1_bgrt = trmlv1_bgrt_p ;						// Ver2.0 modify
  assign trmlv1_bgrt_dft = (SCANMODE) ? 7'b000_0000 : trmlv1_bgrt ;		// Ver2.0 modify


////////////////////////////////////////////////TRMLV1-bgrt[10:7]
//
// v1.3 mod
//
//  assign bgrtc_en = r_trm3_en & !TESTRMRD | b_trmlv1_bgrtc_en ;
//  assign bgrtc_ck = ~BASECK & bgrtc_en ;
//
////assign bgrtc_ck_dft = bgrtc_ck | TRMRD1CK & ~SCANMODE ;
//  assign bgrtc_ck_dft = ( bgrtc_ck | TRMRD1CK ) & ~SCANMODE ;                     // Ver2.0 modify
//

  QLK0RCIBCM3SF1V1_BGR_CLK   bgrtc_clk    ( .clk_out(bgrtc_ck_dft), .BASECK(BASECK), .r_trm3_en(r_trm3_en), .TRMRD1CK(TRMRD1CK),
                                            .TESTRMRD(TESTRMRD), .b_trmlv1_en(b_trmlv1_bgrtc_en), .SCANMODE(SCANMODE) );

  QLK0RCIBCM3SF1V1_BGRTC_LATCH bgrtc_latch( .trmlv1_bgrtc(trmlv1_bgrtc), .trmlv1_bgrtc_in(trmlv1_bgrtc_in),
                                            .bgrtc_ck_dft(bgrtc_ck_dft), .bgrtc_ft_res(bgrtc_ft_res) );


  assign trmlv1_bgrtc_dft = (SCANMODE) ? 4'b0000 : trmlv1_bgrtc ;             // Ver2.0 modify

endmodule

//-------------------------------------------------------
//
// add cksel v1.1
//
//-------------------------------------------------------
module QLK0RCIBCM3SF1V1_TRMLV_MUX ( in1 , in2 , out , sel1 ) ;
input   in1 , in2 , sel1 ;
output  out ;
wire    sel1z, in1a, in2a;

  TBINVX4 sc_inv ( .N01(sel1z), .H01(sel1) );
  TBND2X2 clk_gate0 ( .N01(in1a) , .H01(in1)  , .H02(sel1)  ) ;
  TBND2X2 clk_gate1 ( .N01(in2a) , .H01(in2)  , .H02(sel1z) ) ;
  TBND2X2 clk_gate2 ( .N01(out)  , .H01(in1a) , .H02(in2a)  ) ;
endmodule


module QLK0RCIBCM3SF1V1_TRM1( BASECK       , RESETB ,
                              trm1_iref    , trm1_iref_in    , trm1_iref_en
                            );

  input         BASECK ;
  input         RESETB ;

  output[4:0]	trm1_iref;
  input	[4:0]	trm1_iref_in;
  input		trm1_iref_en;

  reg	[4:0]	trm1_iref;

////////////////////////////////////////////////TRM1-iref[4:0]
  always @ ( posedge BASECK or negedge RESETB )
	if( !RESETB )			trm1_iref <= 5'b00000;
	else if( trm1_iref_en )		trm1_iref <= trm1_iref_in;


endmodule	// QLK0RCIBCM3SF1V1_TRM1


module QLK0RCIBCM3SF1V1_TRM3 ( BASECK , SYSRESB ,
                               trm3_frsel   , trm3_frsel_in   , trm3_frsel_en,
			       trm3_r0a     , trm3_r0a_in     , trm3_r0a_en
                             );

  input		BASECK ;
  input		SYSRESB ;

  output[4:0]	trm3_frsel;
  input	[4:0]	trm3_frsel_in;
  input		trm3_frsel_en;

  reg	[4:0]	trm3_frsel;

  output[7:0]   trm3_r0a;
  input [7:0]   trm3_r0a_in;
  input         trm3_r0a_en;

  reg   [7:0]   trm3_r0a;

////////////////////////////////////////////////TRM3-frsel[4:0]
  always @ ( posedge BASECK or negedge SYSRESB )
	if( !SYSRESB )			trm3_frsel <= 5'b0_0000;
	else if( trm3_frsel_en )	trm3_frsel <= trm3_frsel_in;

////////////////////////////////////////////////RDN-r0a[7:0]
  always @ ( posedge BASECK or negedge SYSRESB )
        if( !SYSRESB )                  trm3_r0a <= 8'b00000000;
        else if( trm3_r0a_en )          trm3_r0a <= trm3_r0a_in;


endmodule // QLK0RCIBCM3SF1V1_TRM3

//
// v1.1 add
//
module QLK0RCIBCM3SF1V1_TRM4 ( BASECK , SYSRESB ,
                               trm4_ctrim, trm4_ctrim_in, trm4_ctrim_en,
                               trm4_rtrim, trm4_rtrim_in, trm4_rtrim_en,
                               trm4_wtrim, trm4_wtrim_in, trm4_wtrim_en,
                               trm4_ftrim, trm4_ftrim_in, trm4_ftrim_en
                             );

  input         BASECK ;
  input         SYSRESB ;

  output[6:0]   trm4_ctrim ;
  output[5:0]	trm4_ftrim ;
  output[2:0]	trm4_wtrim ;

  input [6:0]   trm4_ctrim_in ;
  input	[5:0]	trm4_ftrim_in ;
  input	[2:0]	trm4_wtrim_in ;
  input         trm4_ctrim_en, trm4_wtrim_en, trm4_ftrim_en ;

  output[5:0]   trm4_rtrim;
  input [5:0]   trm4_rtrim_in;
  input         trm4_rtrim_en;

  reg   [6:0]   trm4_ctrim ;
  reg	[5:0]	trm4_ftrim ;
  reg	[2:0]	trm4_wtrim ;
  reg   [5:0]   trm4_rtrim ;


//////////////////////////////////////////////// TRM4-CTRIM[6:0]
  always @ ( posedge BASECK or negedge SYSRESB )
        if( !SYSRESB )                  trm4_ctrim[6:0] <= 7'b000_0000;
        else if( trm4_ctrim_en )        trm4_ctrim[6:0] <= trm4_ctrim_in[6:0];

//////////////////////////////////////////////// TRM4-WTRIM[2:0]
  always @ ( posedge BASECK or negedge SYSRESB )
        if( !SYSRESB )                  trm4_wtrim[2:0] <= 3'b000;		// trm4_wtrim[2:0] <= 3'b100;
        else if( trm4_wtrim_en )        trm4_wtrim[2:0] <= trm4_wtrim_in[2:0];

//////////////////////////////////////////////// TRM4-FTRIM[5:0]
  always @ ( posedge BASECK or negedge SYSRESB )
        if( !SYSRESB )                  trm4_ftrim[5:0] <= 6'b00_0000;		// trm4_ftrim[5:0] <= 6'b10_0000;
        else if( trm4_ftrim_en )        trm4_ftrim[5:0] <= trm4_ftrim_in[5:0];


//////////////////////////////////////////////// TRM3-RTRIM[5:0]
  always @ ( posedge BASECK or negedge SYSRESB )
        if( !SYSRESB )                  trm4_rtrim[5:0] <= 6'b10_0000;
        else if( trm4_rtrim_en )        trm4_rtrim[5:0] <= {trm4_rtrim_in[5:0]};


endmodule // QLK0RCIBCM3SF1V1_TRM4


module QLK0RCIBCM3SF1V1_FMOPB( BASECK           , SYSRESB          ,
			       PSYSRESB         ,					// v1.1 add
                               fmopb_ocden      , fmopb_c3hff      ,
                               fmopb_hh_in      , fmopb_hh_en      ,
                               fmopb_cmode      , fmopb_ithl       ,
                               fmopb_frqselh    , fmopb_frqsell    ,
                               fmopb_hl_in      , fmopb_hl_en      ,
                               fmopb_frqselh_en , fmopb_frqsell_en ,
                               fmopb_lvimds     , fmopb_lvis       , fmopb_vpoc       ,
			       fmopb_portselb   ,					// v1.1 add
                               fmopb_lh_in      , fmopb_lh_en      ,
                               fmopb_wdtint     , fmopb_window     , fmopb_wdton      ,
                               fmopb_wdcs       , fmopb_wdstbyon   ,
                               fmopb_ll_in      , fmopb_ll_en      ,
			       wdton_ft_res     , wdstbyon_ft_res  ,
                               lvis_ft_res      , vpoc_ft_res      ,
			       portselb_ft_res						// v1.1 add
                             );

// Port Define -------------------------------------------------------
  input         BASECK , SYSRESB ;
  input		PSYSRESB ;		// v1.1 add

// TOPT3 =======================================================
  output        fmopb_ocden    , fmopb_c3hff;
  input [7:0]   fmopb_hh_in;
  input         fmopb_hh_en;

// TOPT2 =======================================================
  output[1:0]   fmopb_cmode;
  output        fmopb_ithl;
  output[1:0]   fmopb_frqselh;
  output[2:0]   fmopb_frqsell;
  input [7:0]   fmopb_hl_in;
  input         fmopb_hl_en;
  input         fmopb_frqselh_en;
  input         fmopb_frqsell_en;

// TOPT1 =======================================================
  output[1:0]	fmopb_lvimds;		// v1.1 bit1 add
  output[1:0]   fmopb_lvis;
  output[2:0]   fmopb_vpoc;
  output	fmopb_portselb;		// v1.1 bit4 add
  input	[7:0]   fmopb_lh_in;
  input         fmopb_lh_en;

  output[1:0]	lvis_ft_res;		// FT3_L for lvis RESET output;
  output[2:0]	vpoc_ft_res;		// FT3_H for vpoc RESET output;
  output	portselb_ft_res;	// FT3_H for portselb RESET output;	// v1.1 add

// TOPT0 =======================================================
  output        fmopb_wdtint;
  output[1:0]   fmopb_window;
  output        fmopb_wdton;
  output[2:0]   fmopb_wdcs;
  output        fmopb_wdstbyon;
  input [7:0]   fmopb_ll_in;
  input         fmopb_ll_en;

  output	wdton_ft_res;		// FT3_H for wdton RESET output;
  output	wdstbyon_ft_res;	// FT3_H for wdton RESET output;

// Wire & Register =============================================
  wire          fmopb_wdton , fmopb_wdstbyon;

  reg           fmopb_ocden , fmopb_c3hff;
  reg   [1:0]   fmopb_cmode;
  reg           fmopb_ithl;
  reg   [1:0]   fmopb_frqselh;
  reg   [2:0]   fmopb_frqsell;
  reg	[1:0]	fmopb_lvimds;		// v1.1 bit1 add
//reg   [1:0]   fmopb_lvis;
//reg   [2:0]   fmopb_vpoc;
  reg           fmopb_wdtint;
  reg   [1:0]   fmopb_window;
  reg   [2:0]   fmopb_wdcs;

////////////////////////////////////////////////FMOPB-ocden,c3hff
  wire	validFF = ( fmopb_hh_in[7:0] == 8'hFF ) ;

  always @ ( posedge BASECK or negedge SYSRESB )
	if( !SYSRESB )			{fmopb_ocden,fmopb_c3hff} <= 2'b00;
	else if( fmopb_hh_en )		{fmopb_ocden,fmopb_c3hff} <= {fmopb_hh_in[1], validFF};


////////////////////////////////////////////////FMOPB-cmode[1:0], fmopb_ithl, fmopb_frqselh[1,0], fmopb_frqsell[2,0];
  always @ ( posedge BASECK or negedge SYSRESB )
	if( !SYSRESB )			{fmopb_cmode,fmopb_ithl} <= 3'b111;
	else if( fmopb_hl_en )		{fmopb_cmode,fmopb_ithl} <= fmopb_hl_in[7:5];

  always @ ( posedge BASECK or negedge SYSRESB )
	if( !SYSRESB )			fmopb_frqselh <= 2'b01;
	else if( fmopb_frqselh_en )	fmopb_frqselh <= fmopb_hl_in[4:3];

  always @ ( posedge BASECK or negedge SYSRESB )
	if( !SYSRESB )			fmopb_frqsell <= 3'b101;
	else if( fmopb_frqsell_en )	fmopb_frqsell <= fmopb_hl_in[2:0];


////////////////////////////////////////////////FMOPB-vpoc[2:0], lvis[1:0], lvimds;
//wire   [5:0] fmopb_lh_in2 = {fmopb_lh_in[7:5],fmopb_lh_in[3:2],fmopb_lh_in[0]};
//always @ ( posedge BASECK or negedge SYSRESB )
//  if( !SYSRESB )
//    {fmopb_vpoc,fmopb_lvis,fmopb_lvimds} <= 6'b111111;
//  else if( fmopb_lh_en )
//    {fmopb_vpoc,fmopb_lvis,fmopb_lvimds} <= fmopb_lh_in2;

  QLK0RCIBCM3SF1V1_FT3_L_RST2 fmopb_vpoc2(.out(fmopb_vpoc[2]) ,.in(fmopb_lh_in[7]) ,.en(fmopb_lh_en) ,
                                          .BASECK(BASECK)     ,.resz(SYSRESB)      ,.ft_res(vpoc_ft_res[2]) );
  QLK0RCIBCM3SF1V1_FT3_H_RST2 fmopb_vpoc1(.out(fmopb_vpoc[1]) ,.in(fmopb_lh_in[6]) ,.en(fmopb_lh_en) ,
                                          .BASECK(BASECK)     ,.resz(SYSRESB)      ,.ft_res(vpoc_ft_res[1]) );
  QLK0RCIBCM3SF1V1_FT3_H_RST2 fmopb_vpoc0(.out(fmopb_vpoc[0]) ,.in(fmopb_lh_in[5]) ,.en(fmopb_lh_en) ,
                                          .BASECK(BASECK)     ,.resz(SYSRESB)      ,.ft_res(vpoc_ft_res[0]) );
  QLK0RCIBCM3SF1V1_FT3_L_RST2 fmopb_lvis1(.out(fmopb_lvis[1]) ,.in(fmopb_lh_in[3]) ,.en(fmopb_lh_en) ,
                                          .BASECK(BASECK)     ,.resz(SYSRESB)      ,.ft_res(lvis_ft_res[1]) );
  QLK0RCIBCM3SF1V1_FT3_L_RST2 fmopb_lvis0(.out(fmopb_lvis[0]) ,.in(fmopb_lh_in[2]) ,.en(fmopb_lh_en) ,
                                          .BASECK(BASECK)     ,.resz(SYSRESB)      ,.ft_res(lvis_ft_res[0]) );

//
// v1.1 bit4 add
//

  QLK0RCIBCM3SF1V1_FT3_H_RST2 fmopb_ptsb (.out(fmopb_portselb) ,.in(fmopb_lh_in[4]) ,.en(fmopb_lh_en) ,
                                          .BASECK(BASECK)      ,.resz(PSYSRESB)     ,.ft_res(portselb_ft_res) );

//
// v1.1 bit1 add
//
  always @ ( posedge BASECK or negedge SYSRESB )
	if( !SYSRESB )			fmopb_lvimds <= 2'b00;
	else if( fmopb_lh_en )		fmopb_lvimds <= fmopb_lh_in[1:0];


////////////////////////////////////////////////FMOPB-wdtint, window, wdcs;

  wire   [5:0] fmopb_ll_in2 = {fmopb_ll_in[7:5],fmopb_ll_in[3:1]};

  always @ ( posedge BASECK or negedge SYSRESB )
	if( !SYSRESB )			{fmopb_wdtint,fmopb_window,fmopb_wdcs} <= 6'b111111;
	else if( fmopb_ll_en )		{fmopb_wdtint,fmopb_window,fmopb_wdcs} <= fmopb_ll_in2;

  wire resz = SYSRESB ;

  QLK0RCIBCM3SF1V1_FT3_H_RST wdton_ft3   ( .out(fmopb_wdton), .in(fmopb_ll_in[4]), .en(fmopb_ll_en) ,
					   .BASECK(BASECK), .resz(resz), .ft_res(wdton_ft_res) );

  QLK0RCIBCM3SF1V1_FT3_H_RST wdstbyon_ft3( .out(fmopb_wdstbyon), .in(fmopb_ll_in[0]) ,.en(fmopb_ll_en) ,
	  				   .BASECK(BASECK), .resz(resz), .ft_res(wdstbyon_ft_res) );

endmodule	// QLK0RCIBCM3SF1V1_FMOPB



module QLK0RCIBCM3SF1V1_TRM0(  BASECK , RESETB ,
                               trm0_vread  , trm0_vread_in  , trm0_vread_en  ,
                               trm0_vreadR , trm0_vreadR_in , trm0_vreadR_en ,
                               trm0_idp    , trm0_idp_in    , trm0_idp_en    ,
                               trm0_osc    , trm0_osc_in    , trm0_osc_en    ,
                               trm0_cp     , trm0_cp_in     , trm0_cp_en     ,
                               trm0_irefD  , trm0_irefD_in  , trm0_irefD_en  
                             );

  input		BASECK , RESETB ;

  output[2:0]	trm0_vread ;
  input	[2:0]	trm0_vread_in;
  input		trm0_vread_en;

  output[2:0]	trm0_vreadR ;
  input	[2:0]	trm0_vreadR_in;
  input		trm0_vreadR_en;

  output[2:0]	trm0_idp;
  input	[2:0]	trm0_idp_in;
  input		trm0_idp_en;

  output[2:0]	trm0_osc;
  input	[2:0]	trm0_osc_in;
  input		trm0_osc_en;

  output[3:0]	trm0_cp;
  input	[3:0]	trm0_cp_in;
  input		trm0_cp_en;

  output[4:0]	trm0_irefD;
  input	[4:0]	trm0_irefD_in;
  input		trm0_irefD_en;

  reg	[2:0]	trm0_vread;
  reg	[2:0]	trm0_vreadR;
  reg	[2:0]	trm0_idp;
  reg	[2:0]	trm0_osc;
  reg	[3:0]	trm0_cp;
  reg	[4:0]	trm0_irefD;

////////////////////////////////////////////////FTRM0-vread[2:0]
  always @ ( posedge BASECK or negedge RESETB )
	if( !RESETB )			trm0_vread <= 3'b000;
	else if( trm0_vread_en )	trm0_vread <= trm0_vread_in;


////////////////////////////////////////////////TRM0-vreadR[2:0]
  always @ ( posedge BASECK or negedge RESETB )
	if( !RESETB )			trm0_vreadR <= 3'b000;
	else if( trm0_vreadR_en )	trm0_vreadR <= trm0_vreadR_in;


////////////////////////////////////////////////TRM0-idp[2:0]
  always @ ( posedge BASECK or negedge RESETB )
	if( !RESETB )			trm0_idp <= 3'b000;
	else if( trm0_idp_en )		trm0_idp <= trm0_idp_in;


////////////////////////////////////////////////TRM0-osc[2:0]
  always @ ( posedge BASECK or negedge RESETB )
	if( !RESETB )			trm0_osc <= 3'b000;
	else if( trm0_osc_en )		trm0_osc <= trm0_osc_in;


////////////////////////////////////////////////TRM0-cp[4:0]
  always @ ( posedge BASECK or negedge RESETB )
	if( !RESETB )			trm0_cp <= 4'b0000;
	else if( trm0_cp_en )		trm0_cp <= trm0_cp_in;


////////////////////////////////////////////////TRM0-irefD[4:0]
  always @ ( posedge BASECK or negedge RESETB )
	if( !RESETB )			trm0_irefD <= 5'b00000;
	else if( trm0_irefD_en )	trm0_irefD <= trm0_irefD_in;


endmodule	// QLK0RCIBCM3SF1V1_TRM0


//
// RDN --> TRM2 mod v1.1
//
module QLK0RCIBCM3SF1V1_TRM2( BASECK       , SYSRESB         ,
                             trm2_rxflagz , trm2_rxflagz_in , trm2_rxflagz_en  ,
                             trm2_r1a     , trm2_r1a_in     , trm2_r1a_en
                            );

  input		BASECK, SYSRESB ;

  output[1:0]	trm2_rxflagz;
  input	[1:0]	trm2_rxflagz_in;
  input         trm2_rxflagz_en;

  output[7:0]	trm2_r1a;
  input	[7:0]	trm2_r1a_in;
  input         trm2_r1a_en;

  reg	[1:0]	trm2_rxflagz;
  reg	[7:0]	trm2_r1a;

////////////////////////////////////////////////RDN-rxflagz
  always @ ( posedge BASECK or negedge SYSRESB )
	if( !SYSRESB )			trm2_rxflagz <= 2'b11;
	else if( trm2_rxflagz_en )	trm2_rxflagz <= trm2_rxflagz_in;


////////////////////////////////////////////////RDN-r1a[7:0]
  always @ ( posedge BASECK or negedge SYSRESB )
	if( !SYSRESB )			trm2_r1a <= 8'b00000000;
	else if( trm2_r1a_en )		trm2_r1a <= trm2_r1a_in;


endmodule	// QLK0RCIBCM3SF1V1_TRM2



module QLK0RCIBCM3SF1V1_TCAL( BASECK      , SYSRESB     ,
                              tempcal3    , tcal_hh_in  , tcal_hh_en  ,
                              tempcal2    , tcal_hl_in  , tcal_hl_en  ,
                              tempcal1    , tcal_lh_in  , tcal_lh_en  ,
                              tempcal0    , tcal_ll_in  , tcal_ll_en
                            );

input		BASECK , SYSRESB ;

output	[7:0]	tempcal3;
input	[7:0]	tcal_hh_in;
input		tcal_hh_en;

output	[7:0]	tempcal2;
input	[7:0]	tcal_hl_in;
input		tcal_hl_en;

output	[7:0]	tempcal1;
input	[7:0]	tcal_lh_in;
input		tcal_lh_en;

output	[7:0]	tempcal0;
input	[7:0]	tcal_ll_in;
input		tcal_ll_en;

reg	[7:0]	tempcal3;
reg	[7:0]	tempcal2;
reg	[7:0]	tempcal1;
reg	[7:0]	tempcal0;

////////////////////////////////////////////////tempcal3[7:0]
always @ ( posedge BASECK or negedge SYSRESB )
  if( !SYSRESB )
    tempcal3 <= 8'h00;
  else if( tcal_hh_en )
    tempcal3 <= tcal_hh_in;
////////////////////////////////////////////////tempcal2[7:0]
always @ ( posedge BASECK or negedge SYSRESB )
  if( !SYSRESB )
    tempcal2 <= 8'h00;
  else if( tcal_hl_en )
    tempcal2 <= tcal_hl_in;
////////////////////////////////////////////////tempcal1[7:0]
always @ ( posedge BASECK or negedge SYSRESB )
  if( !SYSRESB )
    tempcal1 <= 8'h00;
  else if( tcal_lh_en )
    tempcal1 <= tcal_lh_in;
////////////////////////////////////////////////tempcal0[7:0]
always @ ( posedge BASECK or negedge SYSRESB )
  if( !SYSRESB )
    tempcal0 <= 8'h00;
  else if( tcal_ll_en )
    tempcal0 <= tcal_ll_in;

endmodule	// QLK0RCIBCM3SF1V1_TCAL



module QLK0RCIBCM3SF1V1_FPARA( BASECK       , SYSRESB         ,
                               fpara_fpecc  , fpara_fpecc_in  , fpara_fpecc_en  ,
                               fpara_fperty , fpara_fperty_in , fpara_fperty_en ,
                               fpara_fpwrty , fpara_fpwrty_in , fpara_fpwrty_en ,
                               fpara_fpser  , fpara_fpser_in  , fpara_fpser_en  ,
                               fpara_fpwwr  , fpara_fpwwr_in  , fpara_fpwwr_en  ,
                               fpara_btbls  , fpara_btbls_in  , fpara_btbls_en
//                               RESETB
                            );

input         BASECK , SYSRESB ;


output [3:0]  fpara_fpecc;
input  [3:0]  fpara_fpecc_in;
input         fpara_fpecc_en;

output [2:0]  fpara_fperty;
input  [2:0]  fpara_fperty_in;
input         fpara_fperty_en;

output [1:0]  fpara_fpwrty;
input  [1:0]  fpara_fpwrty_in;
input         fpara_fpwrty_en;

output [2:0]  fpara_fpser;
input  [2:0]  fpara_fpser_in;
input         fpara_fpser_en;

output [2:0]  fpara_fpwwr;
input  [2:0]  fpara_fpwwr_in;
input         fpara_fpwwr_en;

output [1:0]  fpara_btbls;
input  [1:0]  fpara_btbls_in;
input         fpara_btbls_en;

//input         RESETB ;

reg    [3:0]  fpara_fpecc;
reg    [2:0]  fpara_fperty;
reg    [1:0]  fpara_fpwrty;
reg    [2:0]  fpara_fpser;
reg    [2:0]  fpara_fpwwr;
reg    [1:0]  fpara_btbls;

////////////////////////////////////////////////FPARA-fpecc[3:0]
always @ ( posedge BASECK or negedge SYSRESB )
  if( !SYSRESB )
    fpara_fpecc <= 4'b0000;
  else if( fpara_fpecc_en )
    fpara_fpecc <= fpara_fpecc_in;

////////////////////////////////////////////////FPARA-fperty[2:0]
always @ ( posedge BASECK or negedge SYSRESB )
  if( !SYSRESB )
    fpara_fperty <= 3'b000;
  else if( fpara_fperty_en )
    fpara_fperty <= fpara_fperty_in;

////////////////////////////////////////////////FPARA-fpwrty[1:0]
always @ ( posedge BASECK or negedge SYSRESB )
  if( !SYSRESB )
    fpara_fpwrty <= 2'b00;
  else if( fpara_fpwrty_en )
    fpara_fpwrty <= fpara_fpwrty_in;

////////////////////////////////////////////////FPARA-fpser[2:0]
always @ ( posedge BASECK or negedge SYSRESB )
  if( !SYSRESB )
    fpara_fpser <= 3'b000;
  else if( fpara_fpser_en )
    fpara_fpser <= fpara_fpser_in;

////////////////////////////////////////////////FPARA-fpwwr[2:0]
always @ ( posedge BASECK or negedge SYSRESB )
  if( !SYSRESB )
    fpara_fpwwr <= 3'b000;
  else if( fpara_fpwwr_en )
    fpara_fpwwr <= fpara_fpwwr_in;

////////////////////////////////////////////////FPARA-btbls[1:0]
always @ ( posedge BASECK or negedge SYSRESB )
  if( !SYSRESB )
    fpara_btbls <= 2'b00;
  else if( fpara_btbls_en )
    fpara_btbls <= fpara_btbls_in;

endmodule	// QLK0RCIBCM3SF1V1_FPARA



module QLK0RCIBCM3SF1V1_FMDDEC( phspeed, plpower, prlspy,
                               fmopb_cmode ) ;

input  [ 1:0]  fmopb_cmode;
output         phspeed ;
output         plpower ;
output         prlspy ;

reg            phspeed;
reg            plpower;
reg            prlspy;

always @ ( fmopb_cmode ) 
  case( fmopb_cmode )
    2'b00   : {phspeed, plpower, prlspy} = 3'b001 ;	//LV=RLOWSPY
    2'b01   : {phspeed, plpower, prlspy} = 3'b010 ;	//LP=LOWPOWER
    2'b10   : {phspeed, plpower, prlspy} = 3'b000 ;	//LS=LOWSPEED
    default : {phspeed, plpower, prlspy} = 3'b100 ;	//HS=HISPEED
  endcase

endmodule	// QLK0RCIBCM3SF1V1_FMDDEC



module QLK0RCIBCM3SF1V1_FPDEC( fperty , fpwrty ,
                               fpara_fperty , fpara_fpwrty ) ;
output [ 7:0]  fperty ;      //
output [ 7:0]  fpwrty ;      //
input  [ 2:0]  fpara_fperty; //
input  [ 1:0]  fpara_fpwrty; //

reg    [ 7:0]  fperty;
reg    [ 7:0]  fpwrty;

always @ ( fpara_fperty ) 
  case( fpara_fperty )
    3'h0    : fperty[7:0] = 8'h01;	//1
    3'h1    : fperty[7:0] = 8'h02;	//2
    3'h2    : fperty[7:0] = 8'h04;	//4
    3'h3    : fperty[7:0] = 8'h09;	//9
    3'h5    : fperty[7:0] = 8'h27;	//39
    3'h6    : fperty[7:0] = 8'h4F;	//79
    3'h7    : fperty[7:0] = 8'h63;	//99
    default : fperty[7:0] = 8'h13;	//19
  endcase

always @ ( fpara_fpwrty )
  case( fpara_fpwrty )
    2'h0    : fpwrty[7:0] = 8'h02;	//2
    2'h1    : fpwrty[7:0] = 8'h04;	//4
    2'h3    : fpwrty[7:0] = 8'h13;	//19
    default : fpwrty[7:0] = 8'h09;	//9
  endcase

endmodule	// QLK0RCIBCM3SF1V1_FPDEC



module QLK0RCIBCM3SF1V1_FRQDEC( BASECK,      SYSRESB,            RESETB,
                                frqsel,      fmopb_frqselh,      fmopb_frqsell,
                                r_frqsel_en, b_fmopb_frqselh_en, b_fmopb_frqsell_en,
                                fmopb_c3hff, HIOMSK,
				GOFIRMR, NSRESB,
                                SCANMODE );

  input		BASECK, SYSRESB, RESETB;
  output[4:0]	frqsel;
  input	[1:0]	fmopb_frqselh;
  input	[2:0]	fmopb_frqsell;
  input		r_frqsel_en;
  input		b_fmopb_frqselh_en;
  input		b_fmopb_frqsell_en;
  input		fmopb_c3hff;
  output	HIOMSK;
  input		SCANMODE;

  input		GOFIRMR, NSRESB ;		// v1.1 add

  reg		opfrqsl4;
  reg		opfrqsl3;
  reg		opfrqsl2;
  reg		opfrqsl1;
  reg		opfrqsl0;
  reg		frqsel4;
  reg		frqsel3;
  reg		frqsel2;
  reg		frqsel1;
  reg		frqsel0;
  reg		we_frqsel;

  wire	[4:0]	opfrqsl_in;
  wire		HIOMSK, frqsel_ck;

  assign  frqsel = { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 };

  assign  HIOMSK = r_frqsel_en | b_fmopb_frqselh_en | b_fmopb_frqsell_en;

  always @ ( posedge BASECK or negedge RESETB ) begin
	if( !RESETB )	we_frqsel <= 1'b0;
	else		we_frqsel <= HIOMSK;
  end

//
// ネガエッジのクロックで初期値が1のF/Fのクロックラインにインバータが入る。
// Kx4（V2.0)では、合成後viでedit。
//
// TBINVY0 U14 ( .H01(frqsel_ck), .N01(n17) );
//    ↓
// TBINVX1 .....
//

  TBGTSMLALADCLX2 frqselck_latch ( .N01(frqsel_ck), .H01(we_frqsel), .H02(BASECK), .H03(SCANMODE) ) ;

//assign	opfrqsl_in = ( fmopb_c3hff ) ? 5'b01010 : {fmopb_frqselh[1:0],fmopb_frqsell[2:0]};
//assign	opfrqsl_in = ( fmopb_c3hff ) ? 5'b01010 : 
//                     ( WARMUP ) ? {fmopb_frqselh[1:0], 3'b101} : {fmopb_frqselh[1:0],fmopb_frqsell[2:0]};
  assign	opfrqsl_in = {fmopb_frqselh[1:0],fmopb_frqsell[2:0]};

  always @ ( negedge frqsel_ck or negedge SYSRESB )
	if( !SYSRESB )	{opfrqsl4, opfrqsl3} <= 2'b01;
	else		{opfrqsl4, opfrqsl3} <= opfrqsl_in[4:3];


//
// v1.1 mod
//
//always @ ( negedge frqsel_ck or negedge RESETB )
//  if( !RESETB )
//    {opfrqsl2, opfrqsl1, opfrqsl0} <= 3'b101;
//  else
//    {opfrqsl2, opfrqsl1, opfrqsl0} <= opfrqsl_in[2:0];
//

  wire		gofirm_res ;

  assign gofirm_res = GOFIRMR & ~NSRESB ;

  always @ ( negedge frqsel_ck or negedge RESETB ) begin
	if( !RESETB )		{opfrqsl2, opfrqsl1, opfrqsl0} <= 3'b101;
	else if ( gofirm_res )	{opfrqsl2, opfrqsl1, opfrqsl0} <= 3'b101;
	else			{opfrqsl2, opfrqsl1, opfrqsl0} <= opfrqsl_in[2:0];
  end

	//SS3rd:シリアルプログラミングモード時はブランク品の場合は8MHz、それ以外はcibが保持するデータによって
	//　　　周波数を選択する。
	//　　　発振安定待ち中は1MHz出力を選択する。
	always @( fmopb_c3hff or opfrqsl4 or opfrqsl3 or opfrqsl2 or opfrqsl1 or opfrqsl0 ) begin
		casex ( { fmopb_c3hff , opfrqsl4 , opfrqsl3 , opfrqsl2 , opfrqsl1 , opfrqsl0 } )
			6'bx00000 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b00000 }; //24MHz
			6'bx00001 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b00001 }; //12MHz
			6'bx00010 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b00010 }; //6MHz
			6'bx00011 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b00011 }; //3MHz
			6'bx00100 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b00100 }; //1.5MHz
			6'bx00101 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b00101 }; //0.75MHz
			6'bx01000 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b01000 }; //32MHz
			6'bx01001 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b01001 }; //16MHz
			6'bx01010 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b01010 }; //8MHz
			6'bx01011 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b01011 }; //4MHz
			6'bx01100 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b01100 }; //2MHz
			6'bx01101 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b01101 }; //1MHz
			6'bx10000 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b10000 }; //24MHz
			6'bx10001 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b10001 }; //12MHz
			6'bx10010 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b10010 }; //6MHz
			6'bx10011 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b10011 }; //3MHz
			6'bx10100 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b10100 }; //1.5MHz
			6'bx10101 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b10101 }; //0.75MHz
			6'b011000 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b11000 }; //32MHz
			6'b011001 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b11001 }; //16MHz
			6'b011010 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b11010 }; //8MHz
			6'b011011 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b11011 }; //4MHz
			6'b011100 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b11100 }; //2MHz
			6'b011101 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b11101 }; //1MHz
			6'b011111 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b01010 }; //8MHz(ブランク品)
			6'b111000 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b01000 }; //32MHz
			6'b111001 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b01001 }; //16MHz
			6'b111010 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b01010 }; //8MHz
			6'b111011 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b01011 }; //4MHz
			6'b111100 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b01100 }; //2MHz
			6'b111101 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b01101 }; //1MHz
			6'b111111 : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b01010 }; //8MHz(ブランク品)
			default   : { frqsel4, frqsel3, frqsel2, frqsel1, frqsel0 } = { 5'b01101 }; //1MHz
		endcase
	end

endmodule



module QLK0RCIBCM3SF1V1_CIB( BASECK      , RESETB      , NSRESB      , SCANMODE    ,
                             FLMOD       , PSUBMODE    ,
                             FHLTST      , FSTPST      ,
                             SACEEN      ,
                             PTESINST    , OPTMDUMP    , OPTFLMEM    , 
                             RESSQSTA    ,
                             NVMRCEND    ,
                             PRDSELEN    , EXCHEN      , SECEN       , FSWEN       ,
                             CLKSEL1     , SRCUT       , HISPEED     , SUB         ,			// SS3rd: 2009.09.29 Chg
			     RLOWSPY     , LOWPOWER    ,						// SS3rd: 2009.09.29 Chg
                             FLSTOP      ,
                             iromo       , tid         , pid         ,
                             r_trmlv_en  ,
                             r_trm0_en   , r_trm1_en   , r_trm2_en   , r_trm3_en   ,
                             r_trm4_en   , r_fpara_en  , r_e2w_en    , r_fmopb_en  ,			// v1.1 mod
                             r_tcal_en   ,
                             CE0         , CE1         , EXA         , BFA         ,
                             ro0         , ro1         , flro        , 
                             a           , pa          , fla         ,
                             ta          , TESDBT      ,
                             PEXA        , EXCH        ,
                             SLFLASH     , 
                             tcpscen     , THSPEED     , TSUB        , TLPOWER     , TRLSPY      ,
                             TCSRCUT     , TCFLSTOP    ,
                             SELRO1      ,
			     MODEFNOP    ,								// SS2nd: 2007.07.12: Add
			     rstate      , rseq_dec_addr_ext_in      ,
			     AisS0       , AisS1       , AisS2       , AisS3       ,
			     ce0msk_en   ,
			     EXAmsk_en   ,
			     TPIDSEL     ,
			     OPBOEN      ,
			     BBNVM1      , BBNVM2      ,						// SS2nd-BB:07.09.19 Add
			     SELTAF      ,								// SS3rd: 2009.09.19 Add
			     CECCE       ,								// SS3rd: 2009.09.25 Add
			     TMBTSEL     , TMSPMD      , BTFLG       , BTBLS1      , BTBLS0      ,	// SS3rd: 2009.10.27 Add
			     ICENOECC    , SLECCOFF    , ECCER       , FMULTIEN    ,			// SS3rd: 2009.12.21 Add
			     OSCNOSTP    , OSCOUTEN    , POSCNOST    , POSCOUTE    , CPT         ,	// SS3rd: 2010.01.07 Add
			     phspeed     , plpower     , prlspy      ,					// SS3rd: 2010.01.19 Add
			     r_frqsel_en , opbmden     ,							// SS3rd: 2010.01.27 Add
			     TFLSTOPC    ,								// SS3rd: 2010.01.30 Add
                             AisRSEQ     , RDSETUP     , FLROACT
                          );

input   BASECK  ;  //
input   RESETB  ;  //
input   NSRESB  ;  // シリアルプログラミングモード用、JMP命令挿入タイミング感知信号
input   SCANMODE;  // SCANMODE端子復活。FLSTOPをRESETB期間中(1)にする。SCANMODEではRESETBを伝播させない。
input   FLMOD   ;  // FLASHモード（FCBでOPTFLMEM|FLSPMD）
input   PSUBMODE;  // CSCより
input   FHLTST  ;  // CPU-HALTステータス
input   FSTPST  ;  // CHIP-STOPモードステータス
input   SACEEN  ;  // FCB      shimo
input   PTESINST;  // 命令挿入テストモード
input   OPTMDUMP;  // Dumpromモード
input   OPTFLMEM;  // メモリテスタモード(BTSWAP,EXSWAPを禁止するために使用する）

input   RESSQSTA ; // リセットシーケンス開始許可
output  NVMRCEND ; //
output  PRDSELEN ; //
output  EXCHEN   ; //
output  SECEN    ; //
output  FSWEN    ; //

output  CLKSEL1  ; //
output  SRCUT    ; //
output  HISPEED  ; // FLASHのチャージポンプ動作信号				// SS3rd: 2009.09.29 Chg
output  SUB      ; // FLASHのSAの間欠動作（SUB）信号				// SS3rd: 2009.09.29 Chg
output  FLSTOP;      // FLASHストップモード信号


//input  [31:0]  iromo ; // FCBからのECCデコード済み入力
output [31:0]  iromo ; // ECCデコード済み出力
input  [31:0]  tid   ; // MODECTLからの命令入力
output [31:0]  pid   ; // CPUの命令バス


  output	r_trmlv_en	;
  output	r_trm0_en	;
  output	r_trm1_en	;
  output	r_trm2_en	;
  output	r_trm3_en	;
  output	r_trm4_en	;	// v1.1 mod
  output	r_fpara_en	;
  output	r_e2w_en	;
  output	r_fmopb_en	;
  output	r_tcal_en	;

output CE0;
output CE1;
output EXA;
output BFA;

input  [37:0]  ro0;//
input  [37:0]  ro1;//
output [37:0] flro;//
output [19:2]   a   ; // FLASHマクロへのアドレス
input  [19:2]   pa  ; // CPUからのアドレス
input  [19:2]   fla ; // FCBからのアドレス
input  [17:0]   ta  ; // MODECTLからのアドレス
input  TESDBT ;

input  PEXA;
input  EXCH;       // FCB Extra0←→Extra1入れ替え信号

input  SLFLASH;
input  tcpscen   ; // テストモード用THSPEED,TSUB有効信号
input  THSPEED   ; // テストモード用THSPEED
input  TSUB      ; // テストモード用TSUB
input  TLPOWER   ; // TCPSCTLのTLPOWERビット本体
input  TRLSPY    ; // TCPSCTLのTRLSPYビット本体
input  TCSRCUT   ; // TCPSCTLのTCSRCUTビット本体
input  TCFLSTOP  ; // TCPSCTLのTCFLSTOPビット本体

output	SELRO1	;  // 2006.05.10

// SS2nd: ===== Add Input & Output Port ===================================================================
// SS2nd: 2007.06.28 Add
output	RLOWSPY	;										// SS3rd: 2009.09.29 Chg
output	LOWPOWER;										// SS3rd: 2009.09.29 Chg
// SS2nd: 2007.07.12 Add
input	MODEFNOP ;	// for "STAY NOP" function of MISR
//
output	[4:0]	rstate;
input	[15:0]	rseq_dec_addr_ext_in;
// SS2nd: 2007.07.19 Add
output		AisS0	;
output		AisS1	;
output		AisS2	;
output		AisS3	;
input		ce0msk_en;
input		EXAmsk_en;	// SS2nd: 2007.09.08
// SS2nd: 2007.07.31 Add
input		TPIDSEL; // 1: IROMO bus connect to PID under TESINST mode.
			 // 0: TID   bus connect to PID under TESINST mode.
// 2007.07.31 Add for CSC Request.
output		OPBOEN;	// オプションバイトキャプチャ完了タイミング(BASECK 1cyc分) 
// 2007.09.19 Add for BB-Support
output		BBNVM1;
output		BBNVM2;
// SS2nd: ===== Add End ===================================================================================

// SS3rd:v1.00 ===== Add Input Port =======================================================================
input		SELTAF ;
input		CECCE ;
input  TMBTSEL;			// テンポラリブートスワップ信号
input  TMSPMD;			// テンポラリブートスワップモード信号
input  BTFLG;			// ブートスワップ信号
input  BTBLS1;			// ブートスワップ信号
input  BTBLS0;			// ブートスワップ信号
input		ICENOECC;	// 
input		SLECCOFF;	// 
output		ECCER;		// 
input		FMULTIEN;	// 
output		OSCNOSTP;	// 
output		OSCOUTEN;	// 
input		POSCNOST;	// 
input		POSCOUTE;	// 
input		CPT;		// 
input		phspeed;	// 
input		plpower;	// 
input		prlspy;		// 
output		r_frqsel_en;	// 
output		opbmden;	// 
input		TFLSTOPC;	// 
output		AisRSEQ;	//
input		RDSETUP;	//
input		FLROACT;	//
// SS3rd:v1.00 ===== Add END ==============================================================================

wire  CLKSEL1 , SRCUT ;
wire  rslflash   , rexa ;
wire  [ 7:0] rseq_addr;
wire  AisRSEQ , AisFLA ;


QLK0RCIBCM3SF1V1_CCNT ccnt(
    .BASECK(BASECK)                         ,.RESETB(RESETB)                         ,
    .NSRESB(NSRESB)                         ,.FLMOD(FLMOD)                           ,
    .PTESINST(PTESINST)                     ,.RESSQSTA(RESSQSTA)                     ,
    .NVMRCEND(NVMRCEND)                     ,
    .PRDSELEN(PRDSELEN)                     ,
    .EXCHEN(EXCHEN)                         ,.SECEN(SECEN)                           ,.FSWEN(FSWEN)                           ,
    .iromo(iromo)                           ,.tid(tid)                               ,.pid(pid)                               ,
    .AisRSEQ(AisRSEQ)                       ,.AisFLA(AisFLA)                         ,
    .r_trmlv_en(r_trmlv_en)                 ,
    .r_trm0_en(r_trm0_en)                   ,.r_trm1_en(r_trm1_en)                   ,.r_trm2_en(r_trm2_en)                   ,
    .r_trm3_en(r_trm3_en)                   ,.r_trm4_en(r_trm4_en)                   ,.r_fpara_en(r_fpara_en)                 ,	// v1.1 mod
    .r_e2w_en(r_e2w_en)                     ,.r_fmopb_en(r_fmopb_en)                 ,.r_tcal_en(r_tcal_en)                   ,
                                                                                      .rslflash(rslflash)                     ,
    .rexa(rexa)                             ,.rseq_addr(rseq_addr)                   ,
    .rstate(rstate)			    ,.rseq_dec_addr_ext_in(rseq_dec_addr_ext_in)                                      ,
    .TPIDSEL(TPIDSEL)                       ,
    .OPBOEN(OPBOEN)                         ,
    .BBNVM1(BBNVM1)			    ,.BBNVM2(BBNVM2)                         ,
    .r_frqsel_en(r_frqsel_en)               ,.opbmden(opbmden)									// SS3rd: 2010.01.27 Add
);


QLK0RCIBCM3SF1V1_MEMIF memif(
    .OPTFLMEM(OPTFLMEM)                     ,.OPTMDUMP(OPTMDUMP)                     ,
    .SCANMODE(SCANMODE)                     ,.BASECK(BASECK)                         ,.RESETB(RESETB)                         ,
    .FHLTST(FHLTST)                         ,.FSTPST(FSTPST)                         ,.FLMOD(FLMOD)                           ,
    .PSUBMODE(PSUBMODE)                     ,.SACEEN(SACEEN)                         ,
    .CLKSEL1(CLKSEL1)                       ,.HISPEED(HISPEED)                       ,
    .RLOWSPY(RLOWSPY)                       ,.LOWPOWER(LOWPOWER)                     ,						// SS2nd: 2007.06.28 Add	// SS3rd: 2009.09.29 Chg
    .SUB(SUB)                               ,.FLSTOP(FLSTOP)                         ,.SRCUT(SRCUT)                           ,		// SS3rd: 2009.09.29 Chg
    .CE0(CE0)                               ,.CE1(CE1)                               ,.EXA(EXA)                               ,
    .BFA(BFA)                               ,.ro0(ro0)                               ,.ro1(ro1)                               ,
    .flro(flro)                             ,.a(a)                                   ,.pa(pa)                                 ,
    .fla(fla)                               ,.PEXA(PEXA)                             ,.EXCH(EXCH)                             ,
    .ta(ta)                                 ,.TESDBT(TESDBT)                         ,
    .SLFLASH(SLFLASH)                       ,
    .rseq_addr(rseq_addr)                   ,.rslflash(rslflash)                     ,.rexa(rexa)                             ,
    .AisRSEQ(AisRSEQ)                       ,
    .AisFLA(AisFLA)                         ,
    .tcpscen(tcpscen)                       ,.THSPEED(THSPEED)                       ,.TSUB(TSUB)                             ,
    .TLPOWER(TLPOWER)                       ,.TRLSPY(TRLSPY)                         ,
    .TCSRCUT(TCSRCUT)                       ,.TCFLSTOP(TCFLSTOP)                     ,
    .data_ce(SELRO1)                        ,
    
    .MODEFNOP(MODEFNOP)                     ,
    .AisS0(AisS0)                           ,.AisS1(AisS1)                           ,.AisS2(AisS2)                           ,
    .AisS3(AisS3)                           ,
    .ce0msk_en(ce0msk_en)                   ,
    .EXAmsk_en(EXAmsk_en)                   ,
    .SELTAF(SELTAF)                         ,											// SS3rd: 2009.09.19 Add
    .CECCE(CECCE)                           ,.iromo(iromo)                           ,						// SS3rd: 2009.09.25 Add
    .TMBTSEL(TMBTSEL)                       ,.TMSPMD(TMSPMD)                         ,
    .BTFLG(BTFLG)                           ,.BTBLS1(BTBLS1)                         ,.BTBLS0(BTBLS0)                         ,	// SS3rd: 2009.10.27 Add
    .ICENOECC(ICENOECC)                     ,
    .RESSQSTA(RESSQSTA)                     ,.SLECCOFF(SLECCOFF)                     ,.ECCER(ECCER)                           ,
    .FMULTIEN(FMULTIEN)                     ,
    .OSCNOSTP(OSCNOSTP)                     ,.OSCOUTEN(OSCOUTEN)                     ,.POSCNOST(POSCNOST)                     ,
    .POSCOUTE(POSCOUTE)                     ,.CPT(CPT)                               ,
    .phspeed(phspeed)                       ,.plpower(plpower)                       ,.prlspy(prlspy)                         ,
    .opbmden(opbmden)                       ,
    .TFLSTOPC(TFLSTOPC)                     ,
    .RDSETUP(RDSETUP)                       ,.FLROACT(FLROACT)
);


endmodule	// QLK0RCIBCM3SF1V1_CIB



module QLK0RCIBCM3SF1V1_CCNT(BASECK      , RESETB      , NSRESB      ,
                             FLMOD       ,
                             PTESINST    ,
                             RESSQSTA    ,
                             NVMRCEND    ,
                             PRDSELEN    , EXCHEN      , SECEN       , FSWEN       ,
                             iromo       , tid         ,
                             pid         ,
                             AisRSEQ     , AisFLA      , 
                             r_trmlv_en  ,						// SS3rd: 2010.02.01 Chg
                             r_trm0_en   , r_trm1_en   , r_trm2_en   , r_trm3_en   ,
                             r_trm4_en   , r_fpara_en  , r_e2w_en    , r_fmopb_en  ,	// v1.1 mod
                             r_tcal_en   ,
                             rslflash    , rexa        , rseq_addr   ,
			     rstate      , rseq_dec_addr_ext_in      ,
			     TPIDSEL     ,
			     OPBOEN      ,
			     BBNVM1      , BBNVM2      ,
			     r_frqsel_en , opbmden					// SS3rd: 2010.01.27 Add
                           );

input   BASECK  ;
input   RESETB  ;
input   NSRESB  ;  //  シリアルプログラミングモード用、JMP命令挿入タイミング感知信号
input   FLMOD ;    //  FLASHモード（FCBでOPTFLMEM|FLSPMD)
input   PTESINST ; //  命令挿入テストモード
input   RESSQSTA ;
output  NVMRCEND ;
output  PRDSELEN ;
output  EXCHEN  ;
output  SECEN   ;
output  FSWEN   ;


input  [31:0]  iromo ;
input  [31:0]  tid;

output [31:0]  pid ;

output AisRSEQ            ;  // FLASHへのアドレスはリセットシーケンスからの出力
output AisFLA             ;  // FLASHへのアドレスはFLAを選択

  output	r_trmlv_en	;
  output	r_trm0_en	;
  output	r_trm1_en	;
  output	r_trm2_en	;
  output	r_trm3_en	;
  output	r_trm4_en	;	// v1.1 mod
  output	r_fpara_en	;
  output	r_e2w_en	;
  output	r_fmopb_en	;
  output	r_tcal_en	;

output rslflash ;            // リセットシーケンスのFLASH選択信号
output rexa ;                // リセットシーケンスのEXA信号
output [ 7:0]  rseq_addr  ;  // リセットシーケンスのアドレス

// SS2nd: ===== Add Input & Output Port ===================================================================
// SS2nd: 2007.07.18 Add
output	[4:0]	rstate;
input	[15:0]	rseq_dec_addr_ext_in;
// SS2nd: 2007.07.31 Add
input		TPIDSEL; // 1: IROMO bus connect to PID under TESINST mode.
			 // 0: TID   bus connect to PID under TESINST mode.
// 2007.07.31 Add for CSC Request.
output		OPBOEN;	// To CSC Option Byte Output Enable timing.(1pulse@BASECK)
// 2007.09.19 Add for BB-Support
output		BBNVM1;
output		BBNVM2;

// SS3rd: ===== Add Input & Output Port ===================================================================
output		r_frqsel_en;		// SS3rd: 2010.01.27 Add
output		opbmden;		// SS3rd: 2010.01.27 Add
// SS3rd: ===== Add END ===================================================================================

wire     rseq_end;

wire     PIDisTID = PTESINST  ;
wire     AisRSEQ  = !rseq_end ;
wire     AisFLA   = !AisRSEQ & FLMOD ;
//wire     AisPA    = !AisRSEQ & !AisFLA ; AisRSEQとAisFLAがあればどこででも作り出せる。

// SS2nd: 2007.07.31 Chg PID Bus for Pch-Dec TEST by MODECTL
wire  [31:0]  pid = (  PIDisTID     ) ? ( ( TPIDSEL ) ? iromo[31:0] :		// TESINST & TPIDSEL: IROMO -> PID
		    					tid[31:0]   )  :	// MODECTLからの命令挿入
                                        iromo[31:0]  ;   // それ以外は全てIROMOを接続
//                  (  PIDisTID     ) ? tid[31:0]    :   // MODECTLからの命令挿入

QLK0RCIBCM3SF1V1_RESSEQ resseq(
    .BASECK(BASECK)                         ,.RESETB(RESETB)                         ,
    .NSRESB(NSRESB)                         ,
    .RESSQSTA(RESSQSTA)                     ,
    .PRDSELEN(PRDSELEN)                     ,
    .EXCHEN(EXCHEN)                         ,.SECEN(SECEN)                           ,.FSWEN(FSWEN)                           ,
    .NVMRCEND(NVMRCEND)                     ,.rslflash(rslflash)                     ,.rexa(rexa)                             ,
    .rseq_addr(rseq_addr)                   ,
    .r_trmlv_en(r_trmlv_en)                 ,											// SS3rd: 2010.02.01 Chg
    .r_trm0_en(r_trm0_en)                   ,.r_trm1_en(r_trm1_en)                   ,.r_trm2_en(r_trm2_en)                   ,
    .r_trm3_en(r_trm3_en)                   ,.r_trm4_en(r_trm4_en)                   ,.r_fpara_en(r_fpara_en)                 ,	// v1.1 mod
    .r_e2w_en(r_e2w_en)                     ,.r_fmopb_en(r_fmopb_en)                 ,.r_tcal_en(r_tcal_en)                   ,
    .rseq_end(rseq_end)                     ,
    .rstate(rstate)			    ,.rseq_dec_addr_ext_in(rseq_dec_addr_ext_in) ,
    .OPBOEN(OPBOEN)                         ,
    .BBNVM1(BBNVM1)                         ,.BBNVM2(BBNVM2)                         ,
    .r_frqsel_en(r_frqsel_en)               ,.opbmden(opbmden)									// SS3rd: 2010.01.27 Add
);
   
endmodule	// QLK0RCIBCM3SF1V1_CCNT
 


module QLK0RCIBCM3SF1V1_RESSEQ(BASECK    , RESETB     , NSRESB     ,
                               RESSQSTA  ,
                               NVMRCEND  ,
                               PRDSELEN  , EXCHEN     , SECEN      , FSWEN      ,
                               rslflash  , rexa       , rseq_addr  ,
                               r_trmlv_en,							// SS3rd: 2010.02.01 Chg
                               r_trm0_en , r_trm1_en  , r_trm2_en  , r_trm3_en  ,
                               r_trm4_en , r_fpara_en ,						// v1.1 mod
                               r_e2w_en  , r_fmopb_en , r_tcal_en  ,
                               rseq_end  ,
			       rstate    , rseq_dec_addr_ext_in    ,
			       OPBOEN    ,
			       BBNVM1    , BBNVM2     ,
			       r_frqsel_en            , opbmden					// SS3rd: 2010.01.27 Add
                             );

  input         BASECK;
  input         RESETB;
  input         NSRESB;    //  シリアルプログラミングモード用、JMP命令挿入タイミング感知信号
  input         RESSQSTA;
  output        PRDSELEN;
  output        EXCHEN;
  output        SECEN;
  output        FSWEN;
  output        NVMRCEND;
  output        rslflash;
  output        rexa ;
  output[7:0]	rseq_addr;

  output	r_trmlv_en	;
  output	r_trm0_en	;
  output	r_trm1_en	;
  output	r_trm2_en	;
  output	r_trm3_en	;
  output	r_trm4_en	;	// v1.1 mod
  output	r_fpara_en	;
  output	r_e2w_en	;
  output	r_fmopb_en	;
  output	r_tcal_en	;
  output	rseq_end        ;

// SS2nd: ===== Add Input & Output Port ===================================================================
// SS2nd: 2007.07.18 Add
  output[4:0]	rstate	;
  input	[15:0]	rseq_dec_addr_ext_in;

// 2007.07.31 Add for CSC Request.
  output	OPBOEN;	// To CSC Option Byte Output Enable timing.(1pulse@BASECK)

// 2007.09.19 Add for BB-Support
  output	BBNVM1;
  output	BBNVM2;

// SS2nd: ===== Add END ===================================================================================

// SS3rd:v1.00 ===== Add Input & Output Port ==============================================================
  output	r_frqsel_en;	//
  output	opbmden;	//

// SS3rd:v1.00 ===== Add END ==============================================================================

  reg           NVMRCEND ;
  reg           opbmden ;

  reg	[15:0]  rseq_dec_addr;

  reg	[4:0]   rstate;	//
  wire	[4:0]   rstate_in;	//
  wire		rstate_en;

///////////////リセットシーケンスステート/////////
  wire   R_INIT  = rstate==5'h00;  // 0000H
  wire   R_TRM0  = rstate==5'h01;  // 0800H
  wire   R_TRM1  = rstate==5'h02;  // 0804H
  wire   R_TRM2  = rstate==5'h03;  // 0808H
  wire   R_TRM3  = rstate==5'h04;  // 080CH
  wire   R_TRM4  = rstate==5'h05;  // 0818H		// v1.1 RDN --> TRM4
  wire   R_VALID = rstate==5'h06;  // 0400H
  wire   R_FPARA = rstate==5'h07;  // 0824H
  wire   R_SECU  = rstate==5'h08;  // 0004H
  wire   R_E2W   = rstate==5'h09;  // 0008H
  wire   R_OPB   = rstate==5'h0A;  // 00C0H
  wire   R_0B    = rstate==5'h0B;  // r_fmopb_en timing
  wire   R_0C    = rstate==5'h0C;  // OPBOEN timing
  wire   R_0D    = rstate==5'h0D;  // Reserved
// For BB-Support
//wire   R_BBNV1 = rstate==5'h0E;  // 0810h
  wire   R_BBNV2 = rstate==5'h0F;  // 0814h
  wire   R_TCAL  = rstate==5'h10;  // 081Ch
  wire   R_END   = rstate==5'h11;  // 0000H
  wire   R_NON   = rstate==5'h12;  // 0000H
// -----------------------------------------------

/////////////// Capture & Each signals Generate under Reset Sequence.
  assign r_trmlv_en       = !RESSQSTA            ;			// SS3rd: 2010.02.01 Chg
//assign r_trmlv1_en      = !POCREL              ;			// SS3rd: 2010.01.14 Mod
//assign r_trmlv2_en      = R_INIT & TRMRDCLK    ;
//assign r_trmlv2_en      = TRMRD                ;
  assign rseq_end         = R_END | R_NON        ;
  assign r_trm0_en        = R_TRM1               ;
  assign r_trm1_en        = R_TRM2               ;
  assign r_trm2_en        = R_TRM3               ;
  assign r_trm3_en	  = R_TRM4               ;	// v1.1 mod
  assign r_trm4_en	  = R_VALID              ;
  assign r_fpara_en	  = R_SECU               ;
  assign r_e2w_en	  = R_OPB                ;
  assign r_fmopb_en       = R_0B                 ;

// For BB-Support
  assign BBNVM1		  = R_BBNV2		 ;
  assign BBNVM2		  = R_TCAL		 ;
  assign r_tcal_en	  = R_END & !NVMRCEND	 ;
// For BB-Support
  assign r_frqsel_en      = NVMRCEND & !opbmden  ;

  assign rslflash = !R_INIT & !R_END & !R_NON ;
  assign rexa     = rslflash & !R_OPB ;
  assign PRDSELEN =  R_SECU;
  assign EXCHEN   =  R_FPARA;
  assign SECEN    =  R_E2W;
  assign FSWEN    =  R_OPB;
  assign OPBOEN	  =  R_0C;	// for CSC. OPB capture done.

// ------------------------------------------------------------------


// ========= Generate Flash Address under Reset sequence.  ===========================================
// always @ ( rstate )
always @ ( rstate or rseq_dec_addr_ext_in )
  case( rstate )
    5'h01    : rseq_dec_addr = 16'h0800; //0000_1000_0000_0000	// 
    5'h02    : rseq_dec_addr = 16'h0804; //0000_1000_0000_0100	// 
    5'h03    : rseq_dec_addr = 16'h0808; //0000_1000_0000_1000	// 
    5'h04    : rseq_dec_addr = 16'h080C; //0000_1000_0000_1100	// 
    5'h05    : rseq_dec_addr = 16'h0818; //0000_1000_0001_1000	// 
    5'h06    : rseq_dec_addr = 16'h0400; //0000_0100_0000_0000	// 
    5'h07    : rseq_dec_addr = 16'h0824; //0000_1000_0010_0100	// 
    5'h08    : rseq_dec_addr = 16'h0004; //0000_0000_0000_0100	// 
    5'h09    : rseq_dec_addr = 16'h0008; //0000_0000_0000_1000	// 
    5'h0A    : rseq_dec_addr = 16'h00C0; //0000_0000_1100_0000	// 
    //
    5'h0B    : rseq_dec_addr = rseq_dec_addr_ext_in;
    5'h0C    : rseq_dec_addr = rseq_dec_addr_ext_in;
    5'h0D    : rseq_dec_addr = rseq_dec_addr_ext_in;
    //
    5'h0E    : rseq_dec_addr = 16'h0810; //0000_1000_0001_0000	// 
    5'h0F    : rseq_dec_addr = 16'h0814; //0000_1000_0001_0100	// 
    //
    5'h10    : rseq_dec_addr = 16'h081C; //0000_1000_0001_1100	// 
    //
    default  : rseq_dec_addr = 16'h0000; //0000_0000_0000_0000
  endcase

// ========= 有効アドレスのアウトプット =============================================================
///////////////////////////////////////////----_OO--_OOOO_OO--:   O=Output, "-"=Don't output
///////////////////////////////////////////1111_1
///////////////////////////////////////////5432_1098_7654_3210
//冗長対策のために、rseq_addrには必要なものだけ乗せる。
// SS3rd: 09.11.07: Chg rseq_addr. SS3rdでは、bit2,3,4,5,6,7,10,11の計8本が出力の対象。
//
// rseq_addrのバスと実アドレスのbit位置が変更となるため、受け側のモジュールの接続を変更すること。
assign rseq_addr[7] = rseq_dec_addr[11];
assign rseq_addr[6] = rseq_dec_addr[10];
assign rseq_addr[5] = rseq_dec_addr[ 7];
assign rseq_addr[4] = rseq_dec_addr[ 6];
assign rseq_addr[3] = rseq_dec_addr[ 5];
assign rseq_addr[2] = rseq_dec_addr[ 4];
assign rseq_addr[1] = rseq_dec_addr[ 3];
assign rseq_addr[0] = rseq_dec_addr[ 2];


// STATE Machine ///////////////////////////////
/////リセットシーケンスステート/////////////////rstate
wire    rseq_sp_wait1= R_END & !NSRESB              ;   // オプションバイトを読み終えたらRESB解除まで待つ
//assign  rstate_in    = ( WARMUP & R_INIT ) ? 5'b00011 : rstate + 1'b1 ;
assign  rstate_in    = rstate + 1'b1 ;						// SS3rd: 2009.12.09 Chg
assign  rstate_en    = RESSQSTA & ( !R_NON & !rseq_sp_wait1 );

always @ ( posedge BASECK or negedge RESETB )
  if( !RESETB )
    rstate <= 5'b00000;
  else if( rstate_en )
    rstate <= rstate_in;


// =============== Each Generated Signals =========================================================================
////////////////////////////////////////////////NVMRCEND
always @ ( posedge BASECK or negedge RESETB )
  if( !RESETB )
    NVMRCEND <= 1'b0;
  else if( R_END )
    NVMRCEND <= 1'b1;

////////////////////////////////////////////////opbmden
always @ ( posedge BASECK or negedge RESETB )
  if( !RESETB )
    opbmden <= 1'b0;
  else if( NVMRCEND )
    opbmden <= 1'b1;

endmodule	// QLK0RCIBCM3SF1V1_RESSEQ



module QLK0RCIBCM3SF1V1_MEMIF( OPTFLMEM  , OPTMDUMP  , SCANMODE  ,
                               BASECK    , RESETB    , FHLTST    , FSTPST    , 
                               FLMOD     , 
                               PSUBMODE  ,
                               SACEEN    ,
                               CLKSEL1   , SRCUT     , HISPEED   , SUB       ,						// SS3rd: 2009.09.29 Chg
			       RLOWSPY   , LOWPOWER  ,					// SS2nd: 2007.06.28 Add	// SS3rd: 2009.09.29 Chg
                               FLSTOP    ,
                               CE0       , CE1       , EXA       , BFA       ,
                               ro0       , ro1       , flro      ,
                               a         , pa        , fla       ,
                               ta        , TESDBT    ,
                               PEXA      , EXCH      ,
                               SLFLASH   , 
                               rseq_addr , rslflash  , rexa      ,
                               AisRSEQ   , AisFLA    , 
                               tcpscen   , THSPEED   , TSUB      , TLPOWER   ,
                               TRLSPY    , TCSRCUT   , TCFLSTOP  ,
                               data_ce   ,
			       MODEFNOP  ,
			       AisS0     , AisS1     , AisS2     , AisS3     ,
			       ce0msk_en ,
			       EXAmsk_en ,
			       SELTAF    ,							// SS3rd: 2009.09.19 Add
			       CECCE     , iromo     ,						// SS3rd: 2009.09.25 Add
			       TMBTSEL   , TMSPMD    , BTFLG     , BTBLS1    , BTBLS0    ,	// SS3rd: 2009.10.27 Add
                               ICENOECC  ,
                               RESSQSTA  , SLECCOFF  , ECCER     , FMULTIEN  ,
                               OSCNOSTP  , OSCOUTEN  , POSCNOST  , POSCOUTE  , CPT       ,
                               phspeed   , plpower   , prlspy    ,
                               opbmden   ,
                               TFLSTOPC  ,
                               RDSETUP   , FLROACT
                            );

input  OPTFLMEM;    // メモリテストモード（BFLASH書き換え用）
input  OPTMDUMP;    // DumpROMモード（OPTFLMEM&DumpROM でCLKSEL=1）
input  SCANMODE;    // SCANMODE端子復活。FLSTOPをRESETB期間中(1)にする。SCANMODEではRESETBを伝播させない。
input  BASECK;
input  RESETB;
input  FHLTST;      // CPU-HALTステータス
input  FSTPST;      // CHIP-STOPモードステータス
input  FLMOD;       // FCBより  
input  PSUBMODE;	// CSCより   
input  SACEEN;      // FCB      shimo
output CLKSEL1;     // 0:P1(P1はFCB→FLASHダイレクト接続)、0:C1         リセットシーケンスのみインプリshimo
output HISPEED;     // FLASHのチャージポンプ動作信号								// SS3rd: 2009.09.29 Chg
output SUB;         // FLASHのSAの間欠動作（SUB）信号								// SS3rd: 2009.09.29 Chg
output FLSTOP;      // FLASHのストップモード信号
output SRCUT;       // FLASHのセンスアンプ停止信号　　　　　　　　　　　リセットシーケンスのみインプリshimo
output CE0;
output CE1;       
output EXA;
output BFA;

input  [37:0]   ro0 ; //
input  [37:0]   ro1 ; //
output [37:0]   flro; //
output [19:2]   a   ; // FLASHマクロへのアドレス
input  [19:2]   pa  ; // CPUからのアドレス
input  [19:2]   fla ; // FCBからのアドレス
input  [17:0]   ta  ; // MODECTLからのアドレス
input  PEXA;       // FCB Extra選択信号 
input  EXCH;       // FCB Extra0←→Extra1入れ替え信号

input  SLFLASH;    // CPUからのFLASH選択信号

input  TESDBT;
input [ 7:0]    rseq_addr ; // リセットシーケンスアドレス
input           rslflash;   // リセットシーケンスSLFLASH
input           rexa    ;   // リセットシーケンスEXA　
input           AisRSEQ   ; // FLASHへのアドレスはリセットシーケンスからの出力
input           AisFLA    ; // FLASHへのアドレスはFLAを選択
input           tcpscen   ; // テストモード用THSPEED,TSUB有効信号
input           THSPEED   ; // テストモード用THSPEED
input           TSUB      ; // テストモード用TSUB
input		TLPOWER   ; // TCPSCTLのTLPOWERビット本体
input		TRLSPY    ; // TCPSCTLのTRLSPYビット本体
input		TCSRCUT   ; // TCPSCTLのTCSRCUTビット本体
input		TCFLSTOP  ; // TCPSCTLのTCFLSTOPビット本体

output		data_ce	  ;  // 2006.05.10

// SS2nd: ===== Add Input & Output Port ===================================================================
// SS2nd: 2007.06.28 Add : FSEL2, FMODE2
output		RLOWSPY	; // FLASH								// SS3rd: 2009.09.29 Chg
output		LOWPOWER; // FLASH								// SS3rd: 2009.09.29 Chg
// SS2nd: 2007.07.12 Add :MODEFNOP
input		MODEFNOP ;		// for "STAY NOP" function of MISR(MODECTL)
// SS2nd: 2007.07.19 Add
output		AisS0	;
output		AisS1	;
output		AisS2	;
output		AisS3	;
input		ce0msk_en;
input		EXAmsk_en;	// SS2nd: 2007.09.08 Add
// SS2nd: ===== Add END ===================================================================================

// SS3rd: ===== Add Input & Output Port ===================================================================
input		SELTAF ;
input		CECCE ;
output [31:0]	iromo ;
input  TMBTSEL;			// テンポラリブートスワップ信号
input  TMSPMD;			// テンポラリブートスワップモード信号
input  BTFLG;			// ブートスワップ信号
input  BTBLS1;			// ブートスワップ信号
input  BTBLS0;			// ブートスワップ信号
input  ICENOECC;		// ECCD disable信号
input  RESSQSTA;		// リセットシーケンス開始信号
input  SLECCOFF;		// 
output ECCER;			// 
input  FMULTIEN;		// 
output OSCNOSTP;		// 
output OSCOUTEN;		// 
input  POSCNOST;		// 
input  POSCOUTE;		// 
input  CPT;			// 
input  phspeed;			// 
input  plpower;			// 
input  prlspy;			// 
input  opbmden;			// 
input  TFLSTOPC;		// 
input  RDSETUP;			// 
input  FLROACT;			// 
// SS3rd: ===== Add END ===================================================================================

wire            BFA , EXA ;
//wire  [37:0]    ro0,ro1,flro;
wire  [37:0]    ro0,ro1;
wire  [19:2]    a , fla ;
wire  [19:2]    pa;
wire  [19:2]    select_addr ; // CIB(RSEQ)、FLA、PAセレクト後のアドレス


// SS2nd: ===== FLASH Address TRANSLATOR: Extra/Boot SWAP, BFA Access =====================================

///////////////////////////////////////////////////////////////////////
/////////////////////////  00000H <= Extra0 <= 003FFH /////////////////
/////////////////////////  00400H <= Extra1 <= 007FFH /////////////////
/////////////////////////  00800H <= Extra2 <= 00BFFH /////////////////
/////////////////////////  00C00H <= Extra3 <= 00FFFH /////////////////
/////////////////////////  EF000H <=   BFA  <= EFFFFH /////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////1111111111
///////////////////////////////9876543210
wire   [19:10] sector3_U = 10'b0000000011 ; // またはExtra3 またはBFA3
wire   [19:10] sector2_U = 10'b0000000010 ; // またはExtra2 またはBFA2
wire   [19:10] sector1_U = 10'b0000000001 ; // またはExtra1 またはBFA1
wire   [19:10] sector0_U = 10'b0000000000 ; // またはExtra0 またはBFA0
wire   [19:12] BFA_ADDR  =  8'b11101111   ; // BFAの4K領域  本CIBではEF000H〜EFFFFHの4K分が対象

wire  AisS0   = select_addr[19:10] == sector0_U ;
wire  AisS1   = select_addr[19:10] == sector1_U ;
wire  AisS2   = select_addr[19:10] == sector2_U ;
wire  AisS3   = select_addr[19:10] == sector3_U ;
//wire  AisBFA  = (select_addr[19:12] == BFA_ADDR) & PBFA ;
wire  AisBFA  = select_addr[19:12] == BFA_ADDR ;

wire  btswp   = ( TMSPMD ) ? TMBTSEL : ~BTFLG ;
wire  noswap  = OPTFLMEM | OPTMDUMP ; // DumpROM、またはメモリテストモードではスワップ禁止

wire  exswp   = EXCH & EXA & ~|select_addr[19:11] ;
//wire  btswp4  = ( ~BTBLS1 & ~BTBLS0 & btswp ) & ~EXA & ~BFA & ~noswap & ~|select_addr[19:13] ;
wire  btswp4  = ( ( ( ~BTBLS1 & ~BTBLS0 ) | ( BTBLS1 & BTBLS0 ) ) & btswp ) & ~EXA & ~BFA & ~noswap & ~|select_addr[19:13] ;	// Ver2.0 modify
wire  btswp8  = ( ~BTBLS1 &  BTBLS0 & btswp ) & ~EXA & ~BFA & ~noswap & ~|select_addr[19:14] ;
wire  btswp16 = (  BTBLS1 & ~BTBLS0 & btswp ) & ~EXA & ~BFA & ~noswap & ~|select_addr[19:15] ;


// SS2nd: ===== FLASH Address GENERATOR ===================================================================

///////rseq_addr(From RESSEQ)には必要分しか乗ってこないので、乗せ換えを行う。
/////////////////////////////////11111111-----------1-1-------------------------------------------------
/////////////////////////////////98765432-----------1-0-----98-----------7-6------------5------------432
wire [19:2]  dec_rseq_addr = {8'b00000000,rseq_addr[7:6],2'b00,rseq_addr[5:4],rseq_addr[3],rseq_addr[2:0]} ;
wire [19:2]  RAorFLA = dec_rseq_addr | {18{!AisRSEQ}} & fla[19:2] ;

wire   AisTA = TESDBT | SELTAF ;
wire   AisPA = !AisRSEQ & !AisTA & !FLMOD & !SCANMODE ;
wire  [19:2]  TAorRA_FLA;

assign TAorRA_FLA[19:2]  = ( AisTA ) ? ta[17:0] : RAorFLA[19:2] ;
assign select_addr[19:2] = ( AisPA ) ? pa[19:2] : TAorRA_FLA[19:2] ;
assign a[19:2] = { select_addr[19:15],(select_addr[14] ^ btswp16),(select_addr[13] ^ btswp8),(select_addr[12] ^ btswp4),
                   select_addr[11],(select_addr[10] ^ exswp),select_addr[9:2]} ;

// SS2nd: ===== FLASH Control SIGNALS =====================================================================
wire  cpu_exa = 1'b0; 
wire  fcb_exa = PEXA; 
wire  cpu_bfa = SLFLASH & AisBFA ;
wire  fcb_bfa =           AisBFA ;
wire  ce0_act = EXA | BFA ;

wire  cpu_ce0  =  ce0_act | ( ~pa[19] &  ~pa[18] );
wire  cpu_ce1  = ~ce0_act & ( ~pa[19] &   pa[18] );
//wire  cpu_ce2  = ~ce0_act & (  pa[19] &  ~pa[18] );
//wire  cpu_ce3  = ~ce0_act & (  pa[19] &   pa[18] );
wire  fcb_ce0  =  ce0_act | (~fla[19] & ~fla[18] );
wire  fcb_ce1  = ~ce0_act & (~fla[19] &  fla[18] );
//wire  fcb_ce2  = ~ce0_act & ( fla[19] & ~fla[18] );
//wire  fcb_ce3  = ~ce0_act & ( fla[19] &  fla[18] );
wire  rseq_ce0 = rslflash ;
wire  rseq_exa = rexa     ;


//wire    CLKSEL1   = ( AisRSEQ ) ? 1'b1 : ( OPTMDUMP) ? 1'b1 : !FLMOD ; 
//wire    CLKSEL1   = ( AisRSEQ ) ? RESSQSTA : ( OPTMDUMP ) ? 1'b1 : !FLMOD ; 
wire    CLKSEL1   = ( AisRSEQ ) ? RDSETUP : ( OPTMDUMP ) ? 1'b1 : !FLMOD ; 

wire    HISPEED   = ( tcpscen ) ? THSPEED :
                    ( opbmden ) ? phspeed : 1'b0 ; 									// SS3rd: 2010.01.12 Chg
wire    SUB       = ( tcpscen ) ? TSUB    : PSUBMODE ;
wire	LOWPOWER  = ( tcpscen ) ? TLPOWER :
                    ( opbmden ) ? plpower : 1'b0 ;									// SS3rd: 2010.01.12 Chg
wire	RLOWSPY   = ( tcpscen ) ? TRLSPY  :
                    ( opbmden ) ? prlspy  : 1'b1 ;									// SS3rd: 2010.01.19 Chg


wire    FLSTOP_pre = (!RESETB & !SCANMODE ) | (SUB & FHLTST) | FSTPST          ;	// SS2nd: 2007.06.26 Chg	// SS3rd: 2009.09.29 Chg
wire    FLSTOP     = ( TESDBT   ) ? 1'b0     :
                     ( SCANMODE ) ? 1'b1     : 
                     ( TFLSTOPC ) ? 1'b1     :										// SS3rd: 2010.01.30 Add
	             ( tcpscen  ) ? TCFLSTOP : FLSTOP_pre ;				// SS2nd: 2007.06.26-3 Chg

wire    OSCNOSTP  = POSCNOST & CPT & CE0 ;
wire    OSCOUTEN  = POSCOUTE & CPT & CE0 ;

// ====== CE Generate =====================================================================================
//wire	CE0_pre = ( AisPA ) ? cpu_ce0 & SLFLASH :
//		  ( AisTA ) ? ( BFA || TESDBT ) ? 1'b1 : ( ~ta[16] & ~ta[17] ) :
//		  ( AisFLA ) ? ( ( ce0msk_en ) ? 1'b0 : fcb_ce0 )
//		             : rseq_ce0 ;
wire	CE0_pre = ( AisPA ) ? cpu_ce0 & SLFLASH :
		  ( AisTA ) ? ( BFA || TESDBT ) ? 1'b1 : ( ~ta[16] & ~ta[17] ) :
		  ( AisFLA ) ? ( ( EXAmsk_en ) ? 1'b0 : fcb_ce0 )
		             : rseq_ce0 ;

wire    CE1_pre = ( AisPA ) ? cpu_ce1 & SLFLASH :
                  ( AisTA ) ? ( TESDBT ) ? 1'b1 : (  ta[16] & ~ta[17] ) :
		  ( AisFLA ) ? fcb_ce1
                             : 1'b0 ;

// for FLASH 4macro
//wire    CE2_pre = ( AisPA ) ? cpu_ce2 & SLFLASH :
//                  ( AisTA ) ? ( TESDBT ) ? 1'b1 : ( ~ta[16] &  ta[17] ) :
//                  ( AisFLA ) ? fcb_ce2
//                             : 1'b0 ;
//wire    CE3_pre = ( AisPA  ) ? cpu_ce3 & SLFLASH :
//                  ( AisTA ) ? ( TESDBT ) ? 1'b1 : (  ta[16] &  ta[17] ) :
//                  ( AisFLA ) ? fcb_ce3
//                             : 1'b0 ;

// assign  CE0     = CE0_pre & SACEEN;
// assign  CE1     = CE1_pre & SACEEN;
// assign  CE1     = (CE1_pre & SACEEN) | ( EXER & OSCOUTEN & EXA );				// SS2nd: 2007.07.05 Chg for STAY NOP(MODECTL)

assign  CE0     = ( MODEFNOP ) ? 1'b0 : ( CE0_pre | FMULTIEN ) & SACEEN ;
assign  CE1     = ( MODEFNOP ) ? 1'b0 : ( CE1_pre | FMULTIEN ) & SACEEN ;
// for FLASH 4macro
//assign  CE2     = ( MODEFNOP ) ? 1'b0 : CE2_pre & SACEEN ;
//assign  CE3     = ( MODEFNOP ) ? 1'b0 : CE3_pre & SACEEN ;

// ====== EXA Generate ====================================================================================
// assign  EXA     = ( AisRSEQ ) ? rseq_exa : ( AisFLA ) ? fcb_exa : cpu_exa ;  // ただし、CPUはExtra指せない
assign  EXA     = ( TESDBT    ) ? 1'b0     :
                  ( AisRSEQ   ) ? rseq_exa :
		  ( EXAmsk_en ) ? 1'b0	   :
		  ( AisFLA    ) ? fcb_exa  : cpu_exa ;  // ただし、CPUはExtra指せない	// SS2nd: 2007.09.08 Chg

// ====== BFA Generate ====================================================================================
assign  BFA     = ( TESDBT  ) ? 1'b0 :
                  ( AisRSEQ ) ? 1'b0 : ( AisFLA ) ? fcb_bfa : cpu_bfa ;

// ====== Generate RO0/1 select signal: ( use for flro & ICE ) ============================================
reg data_ce; //shimo 論理チェック！！
always @ ( posedge BASECK or negedge RESETB )
  if( !RESETB )
    data_ce <= 1'b0;
  else 
//    if ( !SLFLASH & !AisFLA )
    if ( !SLFLASH & AisPA )
         data_ce <= data_ce ;		// RO HOLD 2005.05.10
    else 
         data_ce <= CE1_pre ;

//always @ ( posedge BASECK or negedge RESETB )
//  if( !RESETB )
//    data_ce <= 1'b0;
//  else 
//    data_ce <= CE1 ;

////////////////////////////////////////////////SRCUT
//reg SRCUT_pre ;
//always @ ( negedge BASECK or negedge RESETB )
//  if( !RESETB )
//    SRCUT_pre <= 1'b0 ;
//  else
//    SRCUT_pre <= rseq_srcut;

//wire SRCUT  = ( tcpscen )? TCSRCUT :   (SRCUT_pre | FHLTST) ;
wire SRCUT  = ( tcpscen )? TCSRCUT :   FHLTST ;
 

// ========== ECCデコーダ入力信号セレクタ ===================================================================

	wire	[37:0]	eccdec_in = ( !data_ce ) ? ro0[37:0] : ro1[37:0] ;

// ========== ECCデコーダ ===================================================================================

	wire	p_eccer;

	wire	[31:0]	eccdec_out ;

//	wire	ecce	= FLSPM | OPTFLMEM & !AisRSEQ | CECCE ;

`ifdef FPGA_ICE
	wire	ecce	= ~ICENOECC ;
`else
//	wire	ecce	= CLKSEL1 | CECCE | ICENOECC ;
	wire	ecce	= ~RESSQSTA | CLKSEL1 | CECCE | ICENOECC ;
`endif

	QLK0RCIBCM3SF1V1_ECCD eccd ( .eco( eccdec_out[31:0] ), .ecf( p_eccer ), .dout( eccdec_in[31:0] ), .eout( eccdec_in[37:32] ), .ecce( ecce ));

	wire	ECCER	= p_eccer & ecce ;

//	wire	[31:0]	p_flro = ( SLECCOFF ) ? eccdec_in[31:0] : eccdec_out[31:0] ;
	wire	[31:0]	p_flro = ( SLECCOFF ) ? eccdec_in[31:0] : {32{FLROACT}}&eccdec_out[31:0] ;

//	wire	[37:0]	flro   = ( SACEEN ) ? { eccdec_in[37:32], p_flro[31:0] } : ( ro0 | ro1 ) ;
	wire	[37:0]	flro   = ( SACEEN ) ? { {6{FLROACT}}&eccdec_in[37:32], p_flro[31:0] } : ( ro0 | ro1 ) ;

	wire	[31:0]	iromo  = ( !RESSQSTA ) ? eccdec_in[31:0] : eccdec_out[31:0] ;

endmodule	// QLK0RCIBCM3SF1V1_MEMIF


module QLK0RCIBCM3SF1V1_ECCD (eco, ecf, dout, eout, ecce);

  input  [31:0] dout;
  input  [5:0]  eout;
  input  ecce;
  output [31:0] eco;
  output ecf;
  wire   [5:0]  syd;
  wire   [5:0]  sydz;
  wire  pbecce, eccd ;

  QLK0RCIBCM3SF1V1_ECCD_BUF ECCEB   ( .out(pbecce), .in1(ecce)   );
  QLK0RCIBCM3SF1V1_ECCD_INV ECCEZ   ( .out(eccd  ), .in1(pbecce) );

  QLK0RCIBCM3SF1V1_ECFL7 ECS (   .ecf(ecf),      .syd0(syd[0]), .syd1(syd[1]),   .syd2(syd[2]),  .syd3(syd[3]), 
                                .syd4(syd[4]),  .syd5(syd[5]) );
  QLK0RCIBCM3SF1V1_SYDR7 sydr0 ( .ot(syd[0]),    .otz(sydz[0]),  .i1(dout[0]),   .i2(dout[5]),   .i3(dout[6]), 
                                .i4(dout[10]),  .i5(dout[12]), .i6(dout[15]),   .i7(dout[17]),  .i8(dout[20]), 
                                .i9(dout[22]),  .i10(dout[23]),         .i11(dout[25]),         .i12(dout[26]), 
                                .i13(dout[28]), .i14(dout[30]),         .i15(dout[31]),         .i16(eout[0] ) );
  QLK0RCIBCM3SF1V1_SYDR7 sydr1 ( .ot(syd[1]),    .otz(sydz[1]),  .i1(dout[0]),   .i2(dout[1]),   .i3(dout[7]), 
                                .i4(dout[11]),  .i5(dout[13]),  .i6(dout[16]),  .i7(dout[17]),  .i8(dout[18]), 
                                .i9(dout[21]),  .i10(dout[23]),         .i11(dout[24]),         .i12(dout[26]), 
                                .i13(dout[27]), .i14(dout[29]),         .i15(dout[31]),         .i16(eout[1]) );
  QLK0RCIBCM3SF1V1_SYDR7 sydr2 ( .ot(syd[2]),    .otz(sydz[2]),  .i1(dout[1]),   .i2(dout[2]),   .i3(dout[6]), 
                                .i4(dout[8]) ,  .i5(dout[14]),  .i6(dout[15]),  .i7(dout[18]),  .i8(dout[19]), 
                                .i9(dout[22]),  .i10(dout[24]),         .i11(dout[25]),         .i12(dout[26]), 
                                .i13(dout[27]), .i14(dout[28]),         .i15(dout[30]),         .i16(eout[2]) );
  QLK0RCIBCM3SF1V1_SYDR7 sydr3 ( .ot(syd[3]),    .otz(sydz[3]),  .i1(dout[2]),   .i2(dout[3]),   .i3(dout[7]), 
                                .i4(dout[9]) ,  .i5(dout[12]),  .i6(dout[16]),  .i7(dout[17]),  .i8(dout[19]), 
                                .i9(dout[20]),  .i10(dout[23]),         .i11(dout[25]),         .i12(dout[27]), 
                                .i13(dout[28]), .i14(dout[29]),         .i15(dout[31]),         .i16(eout[3]) );
  QLK0RCIBCM3SF1V1_SYDR7 sydr4 ( .ot(syd[4]),    .otz(sydz[4]),  .i1(dout[3]),   .i2(dout[4]),   .i3(dout[8]), 
                                .i4(dout[10]),  .i5(dout[13]),  .i6(dout[15]),  .i7(dout[18]),  .i8(dout[20]),
                                .i9(dout[21]),  .i10(dout[23]),         .i11(dout[24]),         .i12(dout[26]), 
                                .i13(dout[28]), .i14(dout[29]),         .i15(dout[30]),         .i16(eout[4]) );
  QLK0RCIBCM3SF1V1_SYDR7 sydr5 ( .ot(syd[5]),    .otz(sydz[5]),  .i1(dout[4]),   .i2(dout[5]),   .i3(dout[9]), 
                                .i4(dout[11]),  .i5(dout[14]),  .i6(dout[16]),  .i7(dout[19]),  .i8(dout[21]), 
                                .i9(dout[22]),  .i10(dout[24]),         .i11(dout[25]),         .i12(dout[27]), 
                                .i13(dout[29]), .i14(dout[30]),         .i15(dout[31]),         .i16(eout[5])  );

  QLK0RCIBCM3SF1V1_DCORE7 dcore0  ( .eco(eco[0]),        .bin1(syd[0]),  .bin2(syd[1]),          .bin3(sydz[2]), 
                                 .bin4(sydz[3]),        .bin5(sydz[4]), .bin6(sydz[5]),         .din(dout[0]),  .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore1  ( .eco(eco[1]),        .bin1(sydz[0]), .bin2(syd[1]),          .bin3(syd[2]), 
                                 .bin4(sydz[3]),        .bin5(sydz[4]), .bin6(sydz[5]),         .din(dout[1]),  .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore2  ( .eco(eco[2]),        .bin1(sydz[0]), .bin2(sydz[1]),         .bin3(syd[2]),  
                                 .bin4(syd[3]),         .bin5(sydz[4]), .bin6(sydz[5]),         .din(dout[2]),  .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore3  ( .eco(eco[3]),        .bin1(sydz[0]), .bin2(sydz[1]),         .bin3(sydz[2]),  
                                .bin4(syd[3]),          .bin5(syd[4]),  .bin6(sydz[5]),         .din(dout[3]),  .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore4  ( .eco(eco[4]),        .bin1(sydz[0]), .bin2(sydz[1]),         .bin3(sydz[2]), 
                                .bin4(sydz[3]),         .bin5(syd[4]),  .bin6(syd[5]),          .din(dout[4]),  .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore5  ( .eco(eco[5]),        .bin1(syd[0]),  .bin2(sydz[1]),         .bin3(sydz[2]), 
                                .bin4(sydz[3]),         .bin5(sydz[4]), .bin6(syd[5]),          .din(dout[5]),  .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore6  ( .eco(eco[6]),        .bin1(syd[0]),  .bin2(sydz[1]),         .bin3(syd[2]), 
                                .bin4(sydz[3]),         .bin5(sydz[4]), .bin6(sydz[5]),         .din(dout[6]),  .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore7  ( .eco(eco[7]),        .bin1(sydz[0]), .bin2(syd[1]),          .bin3(sydz[2]),  
                                .bin4(syd[3]),          .bin5(sydz[4]), .bin6(sydz[5]),         .din(dout[7]),  .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore8  ( .eco(eco[8]),        .bin1(sydz[0]), .bin2(sydz[1]),         .bin3(syd[2]),  
                                .bin4(sydz[3]),         .bin5(syd[4]),  .bin6(sydz[5]),         .din(dout[8]),  .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore9  ( .eco(eco[9]),        .bin1(sydz[0]), .bin2(sydz[1]),         .bin3(sydz[2]),  
                                .bin4(syd[3]),          .bin5(sydz[4]), .bin6(syd[5]),          .din(dout[9]),  .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore10 ( .eco(eco[10]),       .bin1(syd[0]),  .bin2(sydz[1]),         .bin3(sydz[2]), 
                                .bin4(sydz[3]),         .bin5(syd[4]),  .bin6(sydz[5]),         .din(dout[10]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore11 ( .eco(eco[11]),       .bin1(sydz[0]), .bin2(syd[1]),          .bin3(sydz[2]), 
                                .bin4(sydz[3]),         .bin5(sydz[4]), .bin6(syd[5]),          .din(dout[11]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore12 ( .eco(eco[12]),       .bin1(syd[0]),  .bin2(sydz[1]),         .bin3(sydz[2]),  
                                .bin4(syd[3]),          .bin5(sydz[4]), .bin6(sydz[5]),         .din(dout[12]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore13 ( .eco(eco[13]),       .bin1(sydz[0]), .bin2(syd[1]),          .bin3(sydz[2]), 
                                .bin4(sydz[3]),         .bin5(syd[4]),  .bin6(sydz[5]),         .din(dout[13]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore14 ( .eco(eco[14]),       .bin1(sydz[0]), .bin2(sydz[1]),         .bin3(syd[2]), 
                                .bin4(sydz[3]),         .bin5(sydz[4]), .bin6(syd[5]),          .din(dout[14]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore15 ( .eco(eco[15]),       .bin1(syd[0]),  .bin2(sydz[1]),         .bin3(syd[2]), 
                                .bin4(sydz[3]),         .bin5(syd[4]),  .bin6(sydz[5]),         .din(dout[15]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore16 ( .eco(eco[16]),       .bin1(sydz[0]), .bin2(syd[1]),          .bin3(sydz[2]),  
                                .bin4(syd[3]),          .bin5(sydz[4]), .bin6(syd[5]),          .din(dout[16]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore17 ( .eco(eco[17]),       .bin1(syd[0]),  .bin2(syd[1]),          .bin3(sydz[2]),  
                                .bin4(syd[3]),          .bin5(sydz[4]), .bin6(sydz[5]),         .din(dout[17]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore18 ( .eco(eco[18]),       .bin1(sydz[0]), .bin2(syd[1]),          .bin3(syd[2]), 
                                .bin4(sydz[3]),         .bin5(syd[4]),  .bin6(sydz[5]),         .din(dout[18]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore19 ( .eco(eco[19]),       .bin1(sydz[0]), .bin2(sydz[1]),         .bin3(syd[2]),  
                                .bin4(syd[3]),          .bin5(sydz[4]), .bin6(syd[5]),          .din(dout[19]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore20 ( .eco(eco[20]),       .bin1(syd[0]),  .bin2(sydz[1]),         .bin3(sydz[2]),  
                                .bin4(syd[3]),          .bin5(syd[4]),  .bin6(sydz[5]),         .din(dout[20]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore21 ( .eco(eco[21]),       .bin1(sydz[0]), .bin2(syd[1]),          .bin3(sydz[2]), 
                                .bin4(sydz[3]),         .bin5(syd[4]),  .bin6(syd[5]),          .din(dout[21]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore22 ( .eco(eco[22]),       .bin1(syd[0]),  .bin2(sydz[1]),         .bin3(syd[2]), 
                                .bin4(sydz[3]),         .bin5(sydz[4]), .bin6(syd[5]),          .din(dout[22]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore23 ( .eco(eco[23]),       .bin1(syd[0]),  .bin2(syd[1]),          .bin3(sydz[2]),  
                                .bin4(syd[3]),          .bin5(syd[4]),  .bin6(sydz[5]),         .din(dout[23]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore24 ( .eco(eco[24]),       .bin1(sydz[0]), .bin2(syd[1]),          .bin3(syd[2]), 
                                .bin4(sydz[3]),         .bin5(syd[4]),  .bin6(syd[5]),          .din(dout[24]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore25 ( .eco(eco[25]),       .bin1(syd[0]),  .bin2(sydz[1]),         .bin3(syd[2]),  
                                .bin4(syd[3]),          .bin5(sydz[4]), .bin6(syd[5]),          .din(dout[25]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore26 ( .eco(eco[26]),       .bin1(syd[0]),  .bin2(syd[1]),          .bin3(syd[2]), 
                                .bin4(sydz[3]),         .bin5(syd[4]),  .bin6(sydz[5]),         .din(dout[26]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore27 ( .eco(eco[27]),       .bin1(sydz[0]), .bin2(syd[1]),          .bin3(syd[2]),  
                                .bin4(syd[3]),          .bin5(sydz[4]), .bin6(syd[5]),          .din(dout[27]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore28 ( .eco(eco[28]),       .bin1(syd[0]),  .bin2(sydz[1]),         .bin3(syd[2]),  
                                .bin4(syd[3]),          .bin5(syd[4]),  .bin6(sydz[5]),         .din(dout[28]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore29 ( .eco(eco[29]),       .bin1(sydz[0]), .bin2(syd[1]),          .bin3(sydz[2]),  
                                .bin4(syd[3]),          .bin5(syd[4]),  .bin6(syd[5]),          .din(dout[29]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore30 ( .eco(eco[30]),       .bin1(syd[0]),  .bin2(sydz[1]),         .bin3(syd[2]), 
                                .bin4(sydz[3]),         .bin5(syd[4]),  .bin6(syd[5]),          .din(dout[30]), .eccd(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7 dcore31 ( .eco(eco[31]),       .bin1(syd[0]),  .bin2(syd[1]),          .bin3(sydz[2]),  
                                .bin4(syd[3]),          .bin5(sydz[4]), .bin6(syd[5]),          .din(dout[31]), .eccd(eccd) );

endmodule

//----------------------------------
// QLK0RCIBCM3SF1V1_ECCD_BUF
//----------------------------------
module QLK0RCIBCM3SF1V1_ECCD_BUF ( out, in1 ) ;

  input    in1 ;
  output   out ;

  reg      out ;

  function buffunc ;
    //  synopsys map_to_module TBBUFX2
    //  synopsys return_port_name N01
    input H01 ;
    buffunc = H01  ;
  endfunction

  always @( in1 )
    out  = buffunc ( in1 ) ;

endmodule

//----------------------------------
// QLK0RCIBCM3SF1V1_ECCD_INV
//----------------------------------
module QLK0RCIBCM3SF1V1_ECCD_INV ( out, in1 ) ;

  input    in1 ;
  output   out ;

  reg      out ;

  function invfunc ;
    //  synopsys map_to_module TBINVX8
    //  synopsys return_port_name N01
    input H01 ;
    invfunc = ~H01  ;
  endfunction

  always @( in1 )
    out  = invfunc ( in1 ) ;

endmodule

module QLK0RCIBCM3SF1V1_SYDR7 (ot, otz, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16);

  input  i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16;
  output ot, otz;

  wire  t1, t2, t3, t4, t5, t6, t7 ;
  wire  neta, netb, net1, net2, net3 ;

QLK0RCIBCM3SF1V1_SYDR7_2XOR EC11 ( .out(t1),  .in1(i1),  .in2(i2) );
QLK0RCIBCM3SF1V1_SYDR7_2XOR EC12 ( .out(t2),  .in1(i3),  .in2(i4) );
QLK0RCIBCM3SF1V1_SYDR7_2XOR EC13 ( .out(t3),  .in1(i5),  .in2(i6) );
QLK0RCIBCM3SF1V1_SYDR7_2XOR EC14 ( .out(t4),  .in1(i7),  .in2(i8) );
QLK0RCIBCM3SF1V1_SYDR7_2XOR EC15 ( .out(t5),  .in1(i9),  .in2(i16) );
QLK0RCIBCM3SF1V1_SYDR7_2XOR EC16 ( .out(t6),  .in1(i10), .in2(i11) );
QLK0RCIBCM3SF1V1_SYDR7_2XOR EC17 ( .out(t7),  .in1(i12), .in2(i13) );
QLK0RCIBCM3SF1V1_SYDR7_3XOR EC21 ( .out(net1), .in1(t7),         .in2(t3),       .in3(t1)  );
QLK0RCIBCM3SF1V1_SYDR7_3XOR EC22 ( .out(net2), .in1(t6),         .in2(t4),       .in3(t2)  );
QLK0RCIBCM3SF1V1_SYDR7_3XOR EC23 ( .out(net3), .in1(t5),         .in2(i14),      .in3(i15) );
QLK0RCIBCM3SF1V1_SYDR7_3XOR EC31 ( .out(neta), .in1(net1),       .in2(net2),     .in3(net3) );
QLK0RCIBCM3SF1V1_SYDR7_3XNOR EC32( .out(netb), .in1(net1),       .in2(net2),     .in3(net3) );
QLK0RCIBCM3SF1V1_SYDR7_BUF EC41 ( .out(ot),  .in1(neta) );
QLK0RCIBCM3SF1V1_SYDR7_BUF EC42 ( .out(otz), .in1(netb) );

endmodule

//----------------------------------
// QLK0RCIBCM3SF1V1_SYDR7_2XOR
//----------------------------------
module QLK0RCIBCM3SF1V1_SYDR7_2XOR ( out, in1, in2 ) ;

  input    in1 , in2  ;
  output   out ;

  reg      out ;

  function xor2func ;
    //  synopsys map_to_module TBXR2X2
    //  synopsys return_port_name N01
    input H01, H02 ;
    xor2func =  H01 ^ H02  ;
  endfunction

  always @( in1 or in2 )
    out  = xor2func ( in1 , in2 ) ;

endmodule

//----------------------------------
// QLK0RCIBCM3SF1V1_SYDR7_3XOR
//----------------------------------
module QLK0RCIBCM3SF1V1_SYDR7_3XOR ( out, in1, in2, in3 ) ;

  input    in1 , in2 , in3 ;
  output   out ;

  reg      out ;

  function xor3func ;
    //  synopsys map_to_module TBXR3X2
    //  synopsys return_port_name N01
    input H01, H02, H03 ;
    xor3func =  H01 ^ H02 ^ H03 ;
  endfunction

  always @( in1 or in2 or in3 )
    out  = xor3func ( in1 , in2 , in3 ) ;

endmodule

//----------------------------------
// QLK0RCIBCM3SF1V1_SYDR7_3XNOR
//----------------------------------
module QLK0RCIBCM3SF1V1_SYDR7_3XNOR ( out, in1, in2, in3 ) ;

  input    in1 , in2 , in3 ;
  output   out ;

  reg      out ;

  function xnor3func ;
    //  synopsys map_to_module TBXN3X2
    //  synopsys return_port_name N01
    input H01, H02, H03 ;
    xnor3func =  ~( H01 ^ H02 ^ H03 ) ;
  endfunction

  always @( in1 or in2 or in3 )
    out  = xnor3func ( in1 , in2 , in3 ) ;

endmodule

//----------------------------------
// QLK0RCIBCM3SF1V1_SYDR7_BUF
//----------------------------------
module QLK0RCIBCM3SF1V1_SYDR7_BUF ( out, in1 ) ;

  input    in1 ;
  output   out ;

  reg      out ;

  function buffunc ;
    //  synopsys map_to_module TBBUFX4
    //  synopsys return_port_name N01
    input H01 ;
    buffunc = H01  ;
  endfunction

  always @( in1 )
    out  = buffunc ( in1 ) ;

endmodule

module QLK0RCIBCM3SF1V1_DCORE7 (eco, bin1, bin2, bin3, bin4, bin5, bin6, din, eccd);

  input  bin1, bin2, bin3, bin4, bin5, bin6, din, eccd;
  output eco;

  wire  ecd1, ecd2, ecd ;
  wire  dinz, dinzz ;

  QLK0RCIBCM3SF1V1_DCORE7_3NAND EC7 (.out(ecd1), .in1(bin1), .in2(bin2), .in3(bin3) );
  QLK0RCIBCM3SF1V1_DCORE7_3NAND EC8 (.out(ecd2), .in1(bin4), .in2(bin5), .in3(bin6) );
  QLK0RCIBCM3SF1V1_DCORE7_3NOR EC9  (.out(ecd ), .in1(ecd1), .in2(ecd2), .in3(eccd) );
  QLK0RCIBCM3SF1V1_DCORE7_INV ECI   (.out(dinz), .in1(din ) );
  QLK0RCIBCM3SF1V1_DCORE7_INV ECJ   (.out(dinzz), .in1(dinz) );
  QLK0RCIBCM3SF1V1_DCORE7_2MUX ECH  (.out(eco ), .in1(dinz), .in2(dinzz), .in3(ecd) );

endmodule

//----------------------------------
// QLK0RCIBCM3SF1V1_DCORE7_3NAND
//----------------------------------
module QLK0RCIBCM3SF1V1_DCORE7_3NAND ( out, in1, in2, in3 ) ;

  input    in1 , in2 , in3  ;
  output   out ;

  reg      out ;

  function nand3func ;
    //  synopsys map_to_module TBND3X2
    //  synopsys return_port_name N01
    input H01, H02, H03 ;
    nand3func = ~( H01 & H02 & H03 ) ;
  endfunction

  always @( in1 or in2 or in3 )
    out  = nand3func ( in1 , in2,  in3 ) ;

endmodule

//----------------------------------
// QLK0RCIBCM3SF1V1_DCORE7_3NOR
//----------------------------------
module QLK0RCIBCM3SF1V1_DCORE7_3NOR ( out, in1, in2, in3 ) ;

  input    in1 , in2 , in3  ;
  output   out ;

  reg      out ;

  function nor3func ;
    //  synopsys map_to_module TBNR3X2
    //  synopsys return_port_name N01
    input H01, H02, H03 ;
    nor3func = ~( H01 | H02 | H03 ) ;
  endfunction

  always @( in1 or in2 or in3 )
    out  = nor3func ( in1 , in2,  in3 ) ;

endmodule

//----------------------------------
// QLK0RCIBCM3SF1V1_DCORE7_INV
//----------------------------------
module QLK0RCIBCM3SF1V1_DCORE7_INV ( out, in1 ) ;

  input    in1 ;
  output   out ;

  reg      out ;

  function invfunc ;
    //  synopsys map_to_module TBINVX2
    //  synopsys return_port_name N01
    input H01 ;
    invfunc = ~H01  ;
  endfunction

  always @( in1 )
    out  = invfunc ( in1 ) ;

endmodule

//----------------------------------
// QLK0RCIBCM3SF1V1_DCORE7_2MUX
//----------------------------------
module QLK0RCIBCM3SF1V1_DCORE7_2MUX ( out, in1, in2, in3 ) ;

  input    in1 , in2 , in3  ;
  output   out ;

  reg      out ;

  function mux2func ;
    //  synopsys map_to_module TBMXI2X2
    //  synopsys return_port_name N01
    input H01, H02, H03 ;

    mux2func = H03 ? ~H02 : ~H01 ;

  endfunction

  always @( in1 or in2 or in3 )
    out  = mux2func ( in1 , in2,  in3 ) ;

endmodule


module QLK0RCIBCM3SF1V1_ECFL7 (ecf, syd0, syd1, syd2, syd3, syd4, syd5);

  input  syd0, syd1, syd2, syd3, syd4, syd5;
  output ecf;

  wire syd_1, syd_2 ;

  QLK0RCIBCM3SF1V1_ECFL7_3NOR ECF1 ( .out(syd_1), .in1(syd0), .in2(syd1), .in3(syd2) );
  QLK0RCIBCM3SF1V1_ECFL7_3NOR ECF2 ( .out(syd_2), .in1(syd3), .in2(syd4), .in3(syd5) );
  QLK0RCIBCM3SF1V1_ECFL7_2NAND ECF3 ( .out(ecf), .in1(syd_1), .in2(syd_2) );

endmodule


//----------------------------------
// QLK0RCIBCM3SF1V1_ECFL7_3NOR
//----------------------------------
module QLK0RCIBCM3SF1V1_ECFL7_3NOR ( out, in1, in2, in3 ) ;

  input    in1 , in2 , in3  ;
  output   out ;

  reg      out ;

  function nor3func ;
    //  synopsys map_to_module TBNR3X2
    //  synopsys return_port_name N01
    input H01, H02, H03 ;
    nor3func = ~( H01 | H02 | H03 ) ;
  endfunction

  always @( in1 or in2 or in3 )
    out  = nor3func ( in1 , in2,  in3 ) ;

endmodule

//----------------------------------
// QLK0RCIBCM3SF1V1_ECFL7_2NAND
//----------------------------------
module QLK0RCIBCM3SF1V1_ECFL7_2NAND ( out, in1, in2 ) ;

  input    in1 , in2  ;
  output   out ;

  reg      out ;

  function nand2func ;
    //  synopsys map_to_module TBND2X2
    //  synopsys return_port_name N01
    input H01, H02 ;
    nand2func = ~( H01 & H02 ) ;
  endfunction

  always @( in1 or in2 )
    out  = nand2func ( in1 , in2 ) ;

endmodule


// ========== Common Module for Fault TOLERANT ==============================================================
//リセット値が１
module QLK0RCIBCM3SF1V1_FT3_H( out , in , en , BASECK , resz , fto );
output out;     // 訂正済み出力（3bitの多数決）
input  in;      // 入力
input  en;      // 書き込み許可
input  BASECK;  // クロック
input  resz;    // リセット（ロウアクティブ）
output fto;     // 2006.02.06

reg         out;
reg  [2:0]  cap_bit;
wire        ft_en  = ( cap_bit!=3'b000 ) & ( cap_bit!=3'b111)  ;   // 訂正許可
wire        cap_en = en | ft_en ;        // 訂正許可または書き込み許可（cap_bitライトイネーブル）
wire        cap_in = ( en ) ? in : out ; // cap_bitライトデータ

assign      fto    = ft_en;     // 2006.02.06

always @ ( cap_bit )
  case( cap_bit )
    3'b000 : out = 1'b0;
    3'b001 : out = 1'b0;
    3'b010 : out = 1'b0;
    3'b011 : out = 1'b1;
    3'b100 : out = 1'b0;
    3'b101 : out = 1'b1;
    3'b110 : out = 1'b1;
    3'b111 : out = 1'b1;
  endcase

always @ ( posedge BASECK or negedge resz )
  if( !resz )
    cap_bit <= 3'b111;
  else if( cap_en )
    cap_bit <= {cap_in,cap_in,cap_in} ;

endmodule	// QLK0RCIBCM3SF1V1_FT3_H



//リセット値が0
module QLK0RCIBCM3SF1V1_FT3_L( out , in , en , BASECK , resz , fto );
output out;     // 訂正済み出力（3bitの多数決）
input  in;      // 入力
input  en;      // 書き込み許可
input  BASECK;  // クロック
input  resz;    // リセット（ロウアクティブ）
output fto;     // 2006.02.06

reg         out;
reg  [2:0]  cap_bit;
wire        ft_en  = ( cap_bit!=3'b000 ) & ( cap_bit!=3'b111)  ;   // 訂正許可
wire        cap_en = en | ft_en ;        // 訂正許可または書き込み許可（cap_bitライトイネーブル）
wire        cap_in = ( en ) ? in : out ; // cap_bitライトデータ

assign      fto    = ft_en;     // 2006.02.06

always @ ( cap_bit )
  case( cap_bit )
    3'b000 : out = 1'b0;
    3'b001 : out = 1'b0;
    3'b010 : out = 1'b0;
    3'b011 : out = 1'b1;
    3'b100 : out = 1'b0;
    3'b101 : out = 1'b1;
    3'b110 : out = 1'b1;
    3'b111 : out = 1'b1;
  endcase

always @ ( posedge BASECK or negedge resz )
  if( !resz )
    cap_bit <= 3'b000;
  else if( cap_en )
    cap_bit <= {cap_in,cap_in,cap_in} ;

endmodule	// QLK0RCIBCM3SF1V1_FT3_L


// ========== Common Module for Fault TOLERANT with RESET ===================================================

// --------- FT3 with RESET Register: Type(1) ------------------------------------
//リセット値が1
// RESET masked by NSRESB
module QLK0RCIBCM3SF1V1_FT3_H_RST ( out , in , en , BASECK , resz , ft_res );
output out;     // 訂正済み出力（3bitの多数決）
input  in;      // 入力
input  en;      // 書き込み許可
input  BASECK;  // クロック
input  resz;    // リセット（ロウアクティブ）
output ft_res;  // 2008.05.02: Active H reset

reg         out;
reg  [2:0]  cap_bit;
reg	ft_res;

// wire        ft_en  = ( cap_bit!=3'b000 ) & ( cap_bit!=3'b111)  ;   // 訂正許可
wire        cap_en = en ;	// 書き込み許可（cap_bitライトイネーブル）
wire        cap_in = in ;	// cap_bitライトデータ

// assign      fto    = ft_en;     // 2006.02.06

always @ ( cap_bit )
//  case( cap_bit )
  case( { cap_bit[2], ~cap_bit[1], cap_bit[0]}  )
    3'b000 : out = 1'b0;
    3'b001 : out = 1'b0;
    3'b010 : out = 1'b0;
    3'b011 : out = 1'b1;
    3'b100 : out = 1'b0;
    3'b101 : out = 1'b1;
    3'b110 : out = 1'b1;
    3'b111 : out = 1'b1;
  endcase

// RESET Generate
always @ ( cap_bit )
  case( cap_bit )
    3'b010 : ft_res = 1'b0;
    3'b101 : ft_res = 1'b0;
    default: ft_res = 1'b1;
  endcase

always @ ( posedge BASECK or negedge resz )
  if( !resz )
    cap_bit <= 3'b111;
  else if( cap_en )
    cap_bit <= {cap_in, ~cap_in, cap_in} ;

endmodule // QLK0RCIBCM3SF1V1_FT3_H_RST


//リセット値が0
// RESET masked by NSRESB
module QLK0RCIBCM3SF1V1_FT3_L_RST ( out , in , en , BASECK , resz , ft_res );
output out;     // 訂正済み出力（3bitの多数決）
input  in;      // 入力
input  en;      // 書き込み許可
input  BASECK;  // クロック
input  resz;    // リセット（ロウアクティブ）
output ft_res;  // 2008.05.02: Active H reset

reg         out;
reg  [2:0]  cap_bit;
reg	ft_res ;

wire        cap_en = en ;	// 書き込み許可（cap_bitライトイネーブル）
wire        cap_in = in ;	// cap_bitライトデータ

// wire	cap_out = { cap_bit[2], ~cap_bit[1], cap_bit[0] };

always @ ( cap_bit )
//  case( cap_bit )
  case( { cap_bit[2], ~cap_bit[1], cap_bit[0]}  )
    3'b000 : out = 1'b0;
    3'b001 : out = 1'b0;
    3'b010 : out = 1'b0;
    3'b011 : out = 1'b1;
    3'b100 : out = 1'b0;
    3'b101 : out = 1'b1;
    3'b110 : out = 1'b1;
    3'b111 : out = 1'b1;
  endcase

// RESET Generate
always @ ( cap_bit )
  case( cap_bit )
    3'b010 : ft_res = 1'b0;
    3'b101 : ft_res = 1'b0;
    default: ft_res = 1'b1;
  endcase

always @ ( posedge BASECK or negedge resz )
  if( !resz )
    cap_bit <= 3'b000;
  else if( cap_en )
    cap_bit <= { cap_in, ~cap_in, cap_in } ;

endmodule // QLK0RCIBCM3SF1V1_FT3_L_RST


// --------- FT3 with RESET Register: Type(2) ------------------------------------
//リセット値が1
// RESET non-masked
module QLK0RCIBCM3SF1V1_FT3_H_RST2 ( out , in , en , BASECK , resz , ft_res );
output out;     // 訂正済み出力（3bitの多数決）
input  in;      // 入力
input  en;      // 書き込み許可
input  BASECK;  // クロック
input  resz;    // リセット（ロウアクティブ）
output ft_res;  // 2008.05.02: Active H reset

reg         out;
reg  [2:0]  cap_bit;
reg	ft_res;

wire        cap_en = en ;	// 書き込み許可（cap_bitライトイネーブル）
wire        cap_in = in ;	// cap_bitライトデータ

always @ ( cap_bit )
  case( { cap_bit[2], ~cap_bit[1], cap_bit[0]}  )
    3'b000 : out = 1'b0;
    3'b001 : out = 1'b0;
    3'b010 : out = 1'b0;
    3'b011 : out = 1'b1;
    3'b100 : out = 1'b0;
    3'b101 : out = 1'b1;
    3'b110 : out = 1'b1;
    3'b111 : out = 1'b1;
  endcase

// RESET Generate
always @ ( cap_bit )
  case( cap_bit )
    3'b010 : ft_res = 1'b0;
    3'b101 : ft_res = 1'b0;
    default: ft_res = 1'b1;
  endcase

always @ ( posedge BASECK or negedge resz )
  if( !resz )
    cap_bit <= 3'b101;
  else if( cap_en )
    cap_bit <= {cap_in, ~cap_in, cap_in} ;

endmodule // QLK0RCIBCM3SF1V1_FT3_H_RST2


//リセット値が0
// RESET non-masked
module QLK0RCIBCM3SF1V1_FT3_L_RST2 ( out , in , en , BASECK , resz , ft_res );
output out;     // 訂正済み出力（3bitの多数決）
input  in;      // 入力
input  en;      // 書き込み許可
input  BASECK;  // クロック
input  resz;    // リセット（ロウアクティブ）
output ft_res;  // 2008.05.02: Active H reset

reg         out;
reg  [2:0]  cap_bit;
reg	ft_res ;

wire        cap_en = en ;	// 書き込み許可（cap_bitライトイネーブル）
wire        cap_in = in ;	// cap_bitライトデータ

always @ ( cap_bit )
  case( { cap_bit[2], ~cap_bit[1], cap_bit[0]}  )
    3'b000 : out = 1'b0;
    3'b001 : out = 1'b0;
    3'b010 : out = 1'b0;
    3'b011 : out = 1'b1;
    3'b100 : out = 1'b0;
    3'b101 : out = 1'b1;
    3'b110 : out = 1'b1;
    3'b111 : out = 1'b1;
  endcase

// RESET Generate
always @ ( cap_bit )
  case( cap_bit )
    3'b010 : ft_res = 1'b0;
    3'b101 : ft_res = 1'b0;
    default: ft_res = 1'b1;
  endcase

always @ ( posedge BASECK or negedge resz )
  if( !resz )
    cap_bit <= 3'b010;
  else if( cap_en )
    cap_bit <= { cap_in, ~cap_in, cap_in } ;

endmodule // QLK0RCIBCM3SF1V1_FT3_L_RST2


// --------- FT3 RESET OR module -------------------------------------------------
module QLK0RCIBCM3SF1V1_FT3_RST_OR (
	 CIBRESRQ,
	 NSRESB,
	 wdton_ft_res,	wdstbyon_ft_res,
	 lvis_ft_res,	vpoc_ft_res,
	 portselb_ft_res,		// v1.1 add
	 bgr_ft_res_all			// v1.1 add
 );

// ==== PORT def ===========
//output	FT3RESRQ;
  output	CIBRESRQ ;	// NSRESB masked FT3 RESET Request

  input		NSRESB;
  input		wdton_ft_res;
  input		wdstbyon_ft_res;
  input	[1:0]	lvis_ft_res;
  input	[2:0]	vpoc_ft_res;
  input		portselb_ft_res ;
  input		bgr_ft_res_all ;

 wire		ft3_res_masked; 

// ==== MAIN ===============

   assign ft3_res_masked = ( NSRESB & ( wdton_ft_res | wdstbyon_ft_res |
                                        lvis_ft_res[1] | lvis_ft_res[0] |
                                        vpoc_ft_res[2] | vpoc_ft_res[1] | vpoc_ft_res[0] | portselb_ft_res | bgr_ft_res_all ) );

   assign CIBRESRQ = ( ft3_res_masked );
   
endmodule // QLK0RCIBCM3SF1V1_FT3_RST_OR

module QLK0RCIBCM3SF1V1_BGRT_LATCH ( trmlv1_bgrt, trmlv1_bgrt_in, bgrt_ck_dft, bgrt_ft_res ) ;

  input	[6:0]	trmlv1_bgrt_in ;
  input		bgrt_ck_dft ;

  output[6:0]	trmlv1_bgrt ;
  output	bgrt_ft_res ;

  wire		ft_res0, ft_res1, ft_res2, ft_res3, ft_res4, ft_res5, ft_res6 ;
 
  assign  bgrt_ft_res = ft_res0 | ft_res1 | ft_res2 | ft_res3 | ft_res4 | ft_res5 | ft_res6 ;

  QLK0RCIBCM3SF1V1_FT3_L_RST3 bgrt_0 ( .dout(trmlv1_bgrt[0]), .din(trmlv1_bgrt_in[0]), .clkin(bgrt_ck_dft), .ft_res(ft_res0) );
  QLK0RCIBCM3SF1V1_FT3_L_RST3 bgrt_1 ( .dout(trmlv1_bgrt[1]), .din(trmlv1_bgrt_in[1]), .clkin(bgrt_ck_dft), .ft_res(ft_res1) );
  QLK0RCIBCM3SF1V1_FT3_L_RST3 bgrt_2 ( .dout(trmlv1_bgrt[2]), .din(trmlv1_bgrt_in[2]), .clkin(bgrt_ck_dft), .ft_res(ft_res2) );
  QLK0RCIBCM3SF1V1_FT3_L_RST3 bgrt_3 ( .dout(trmlv1_bgrt[3]), .din(trmlv1_bgrt_in[3]), .clkin(bgrt_ck_dft), .ft_res(ft_res3) );
  QLK0RCIBCM3SF1V1_FT3_L_RST3 bgrt_4 ( .dout(trmlv1_bgrt[4]), .din(trmlv1_bgrt_in[4]), .clkin(bgrt_ck_dft), .ft_res(ft_res4) );
  QLK0RCIBCM3SF1V1_FT3_L_RST3 bgrt_5 ( .dout(trmlv1_bgrt[5]), .din(trmlv1_bgrt_in[5]), .clkin(bgrt_ck_dft), .ft_res(ft_res5) );
  QLK0RCIBCM3SF1V1_FT3_L_RST3 bgrt_6 ( .dout(trmlv1_bgrt[6]), .din(trmlv1_bgrt_in[6]), .clkin(bgrt_ck_dft), .ft_res(ft_res6) );

endmodule

module QLK0RCIBCM3SF1V1_BGRTC_LATCH ( trmlv1_bgrtc, trmlv1_bgrtc_in, bgrtc_ck_dft, bgrtc_ft_res ) ;

  input	[3:0]   trmlv1_bgrtc_in ;
  input		bgrtc_ck_dft ;

  output[3:0]   trmlv1_bgrtc ;
  output	bgrtc_ft_res;

  wire		ft_res0, ft_res1, ft_res2, ft_res3 ;

  assign  bgrtc_ft_res = ft_res0 | ft_res1 | ft_res2 | ft_res3 ;

  QLK0RCIBCM3SF1V1_FT3_L_RST3 bgrtc_0 ( .dout(trmlv1_bgrtc[0]), .din(trmlv1_bgrtc_in[0]), .clkin(bgrtc_ck_dft), .ft_res(ft_res0) );
  QLK0RCIBCM3SF1V1_FT3_L_RST3 bgrtc_1 ( .dout(trmlv1_bgrtc[1]), .din(trmlv1_bgrtc_in[1]), .clkin(bgrtc_ck_dft), .ft_res(ft_res1) );
  QLK0RCIBCM3SF1V1_FT3_L_RST3 bgrtc_2 ( .dout(trmlv1_bgrtc[2]), .din(trmlv1_bgrtc_in[2]), .clkin(bgrtc_ck_dft), .ft_res(ft_res2) );
  QLK0RCIBCM3SF1V1_FT3_L_RST3 bgrtc_3 ( .dout(trmlv1_bgrtc[3]), .din(trmlv1_bgrtc_in[3]), .clkin(bgrtc_ck_dft), .ft_res(ft_res3) );

endmodule


module QLK0RCIBCM3SF1V1_BGR_CLK ( clk_out, BASECK, TRMRD1CK, r_trm3_en, TESTRMRD,
				  b_trmlv1_en, SCANMODE
				  );

  input		BASECK ;
  input		TRMRD1CK ;
  input		r_trm3_en ;
  input		TESTRMRD ;
  input		b_trmlv1_en ;
  input		SCANMODE ;

  output	clk_out ;

  wire		testrmrd_b, r_en, bgrt_en, baseck_b, bgrt_ck, bgrt_ck_or, scanmode_b ;

//
//assign bgrt_en = r_trm3_en & !TESTRMRD | b_trmlv1_bgrt_en ;
//assign bgrt_ck = ~BASECK & bgrt_en ;
//assign bgrt_ck_dft = ( bgrt_ck | TRMRD1CK ) & ~SCANMODE ;                     // Ver2.0 modify
//

  
  TBINVX2 trmrd_inv ( .N01(testrmrd_b),  .H01(TESTRMRD) );
  TBAD2X2 en_and    ( .N01(r_en),        .H01(r_trm3_en),  .H02(testrmrd_b)  ) ;
  TBOR2X2 en_or     ( .N01(bgrt_en),     .H01(r_en),       .H02(b_trmlv1_en) ) ;

  TBINVX2 clk_inv1  ( .N01(baseck_b),    .H01(BASECK) );
  TBAD2X2 clk_gate1 ( .N01(bgrt_ck),     .H01(baseck_b),   .H02(bgrt_en)  ) ;

  TBOR2X2 clk_or    ( .N01(bgrt_ck_or),  .H01(bgrt_ck),    .H02(TRMRD1CK) );

  TBINVX2 md_inv2   ( .N01(scanmode_b),  .H01(SCANMODE) );
  TBAD2X2 clk_gate2 ( .N01(clk_out),     .H01(bgrt_ck_or), .H02(scanmode_b)  ) ;

endmodule

//
// for bgr
//
module QLK0RCIBCM3SF1V1_FT3_L_RST3 ( dout, din, clkin, ft_res );

  output	dout ;		// 訂正なし出力

  input		din ;		// 入力
  input		clkin ;		// クロック
  output	ft_res ;	// リセット（active H)

  reg		ft_res ;
  wire		dout1, dout2, dout3 ;

  assign  dout = dout1 ;

  // RESET Generate
  always @ ( dout1 or dout2 or dout3 )
	case( {dout1,dout2,dout3} )
	   3'b010 : ft_res = 1'b0;
	   3'b101 : ft_res = 1'b0;
	   default: ft_res = 1'b1;
	endcase

  TBLAHQX1 ft3_latch1 ( .N01(dout1), .H01(din),  .H02(clkin) ) ;
  TBLAHQX1 ft3_latch2 ( .N01(dout2), .H01(~din), .H02(clkin) ) ;
  TBLAHQX1 ft3_latch3 ( .N01(dout3), .H01(din),  .H02(clkin) ) ;

endmodule // QLK0RCIBCM3SF1V1_FT3_L_RST3


module QLK0RCIBCM3SF1V1_MONI (  a, BFA, EXA, CE0, CE1, CLKSEL1, SRCUT,
				SCANCLK, RESETB, SCANMODE,
				scan_moni ) ;

  input	[19:2]	a ;
  input		BFA, EXA ;
  input		CE0, CE1 ;
  input		CLKSEL1, SRCUT ;
  input		SCANCLK, RESETB, SCANMODE ;

  output	scan_moni ;

  wire		eor_in;
  wire		a_9_s, a_8_s, a_7_s, a_6_s, a_5_s, a_4_s, a_3_s, a_2_s ;
  reg		scan_moni;

  assign a_9_s = a[9] & SCANMODE ;
  assign a_8_s = a[8] & SCANMODE ;
  assign a_7_s = a[7] & SCANMODE ;
  assign a_6_s = a[6] & SCANMODE ;
  assign a_5_s = a[5] & SCANMODE ;
  assign a_4_s = a[4] & SCANMODE ;
  assign a_3_s = a[3] & SCANMODE ;
  assign a_2_s = a[2] & SCANMODE ;

  assign eor_in = a[19]^a[18]^a[17]^a[16]^a[15]^a[14]^a[13]^a[12]^a[11]^a[10]^a_9_s^
                  a_8_s^a_7_s^a_6_s^a_5_s^a_4_s^a_3_s^a_2_s^BFA^EXA^CE0^CE1^CLKSEL1^SRCUT ;

  // synopsys async_set_reset "RESETB"
  always @ ( negedge SCANCLK or negedge RESETB ) begin
//always @ ( posedge SCANCLK or negedge RESETB ) begin
	if ( !RESETB ) 		scan_moni <= 1'b0 ;
	else			scan_moni <= eor_in ;
  end

endmodule


  
