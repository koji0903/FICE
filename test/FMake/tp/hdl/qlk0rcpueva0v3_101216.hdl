/********************************************************************************/
/* K0R CPUEVA Macro                                                           	*/
/*                                      Made K.Ishihara K.tanaka K.kawai        */
/********************************************************************************/
/* Ver1.00  New                                                                 */
/* Ver1.50  Add FLREAD                                2007.05.30 K.Tanaka       */
/*              FCHRAM                                2007.05.30 K.Tanaka       */
/*              mem_access                            2007.05.30 K.Tanaka       */
/*              stbst                                 2007.07.02 K.Tanaka       */
/* Ver1.51  Add OCDMOD                                2007.11.30 K.Tanaka       */
/* Ver1.52  Modified MONMD Signal during svmod        2008.02.26 K.Tanaka       */
/* Ver2.00  低消費化全面見直し                        2008.01.16 K.Ishihara	*/
/*            ADR:アドレス演算器をadrout_pc,adrout_ma,adrout_subに３分割	*/
/*　　　　　　ADR:SLFLASH出力の経路を高速化					*/
/*　　　　　　ADR:imdrの入力経路を根元でマスク					*/
/*　　　　　　ADR:割込み制御回路をintclk_onの信号でゲーティング			*/
/*　　　　　　ALU:ALUを5分割、exeout,muluout,transout,transin,bitshout		*/
/*　　　　　　ALU:imdr,汎用レジスタの入出力経路を根元でマスク			*/
/* Ver2.01  Modified CPUMISAL Signal                  2008.08.29 K.Tanaka       */
/* Ver3.00  低電流回路削除(Ver2.00追加分)					*/
/*	    DataFlashアクセス時のウエイト機能追加				*/
/*	    割り込み発生時の分岐先変更						*/
/*	    アドレスバスのゲーティング回路追加					*/
/*      2010.01.21                                                              */
/*              DataFlashアクセス中はDMA転送をマスク                            */
/*              - dmaackの論理にsldfwait_pre追加                                */
/*              PCにソフトブレイク時の分岐先追加(BFA)                           */
/*              - softbrk_sub信号を追加                                         */
/*      2010.01.26                                                              */
/*		PC分岐回路にSVMODによる分岐信号追加				*/
/*      2010.01.29                                                              */
/*		intackにWEDの論理追加(記述の簡略化)				*/
/*      2010.02.02								*/
/* 		- OCD分岐条件見直し						*/
/*		  (monmd,ivack,softbrk_sub)->(monmd)				*/
/*		  softbrk_sub信号を削除						*/
/*      2010.02.03								*/
/*		- CRC演算器(modectl)からのHALT解除信号を追加(CRCHLTEN)		*/
/*      2010.02.04								*/
/*		- DataFlashリードタイミング信号を変更				*/
/*      2010.02.05								*/
/*		- DFlash vs 2ndSFR の競合対応					*/
/*		  互いのウエイトが発生したとき片方のウエイト信号をマスクする	*/
/*      2010.02.06								*/
/*		- ADR階層のWED端子 WED/wed が混在していたため wed に統一	*/
/*      2010.02.10								*/
/*		- intackがMONMD中有効になるように論理追加			*/
/*		- BASECK -> BASECKHS(マクロTOP)					*/
/*		- imdr_groupAをコメントアウト(接続先がない)			*/
/*		- cpuリードバス、ワードアクセス時にRVEONがバスに乗るように修正	*/
/********************************************************************************/
module QLK0RCPUEVA0V3(
	PC19, PC18, PC17, PC16, PC15, PC14, PC13, PC12, PC11, PC10, PC9, PC8, PC7, PC6, PC5, PC4, PC3, PC2, PC1, PC0,
	PA19, PA18, PA17, PA16, PA15, PA14, PA13, PA12, PA11, PA10, PA9, PA8, PA7, PA6, PA5, PA4, PA3, PA2,
	PID31, PID30, PID29, PID28, PID27, PID26, PID25, PID24, PID23, PID22, PID21, PID20, PID19, PID18, PID17, PID16,
	PID15, PID14, PID13, PID12, PID11, PID10, PID9, PID8, PID7, PID6, PID5, PID4, PID3, PID2, PID1, PID0,
	MA15, MA14, MA13, MA12, MA11, MA10, MA9, MA8, MA7, MA6, MA5, MA4, MA3, MA2, MA1, MA0,
	DMAMA15, DMAMA14, DMAMA13, DMAMA12, DMAMA11, DMAMA10, DMAMA9, DMAMA8, DMAMA7, DMAMA6, DMAMA5,
	DMAMA4, DMAMA3, DMAMA2, DMAMA1, DMAMA0, DMARQ, DMAACK, DMARD, DMAWR, DMAWDOP, DMAEN,
	SLMEM, SLFLASH, SLEXM, SLBMEM, SLIRAM, HLTST, STPST, STBEN,
	MDR15, MDR14, MDR13, MDR12, MDR11, MDR10, MDR9, MDR8, MDR7, MDR6, MDR5, MDR4, MDR3, MDR2, MDR1, MDR0,
	MDW15, MDW14, MDW13, MDW12, MDW11, MDW10, MDW9, MDW8, MDW7, MDW6, MDW5, MDW4, MDW3, MDW2, MDW1, MDW0,
	BITEN7, BITEN6, BITEN5, BITEN4, BITEN3, BITEN2, BITEN1, BITEN0,
	CPUWR, CPURD, WDOP, WDWR, EXMA3, EXMA2, EXMA1, EXMA0,
	VCOUT6, VCOUT5, VCOUT4, VCOUT3, VCOUT2, VCOUT1,
	INTDBG, INTNMI, INTRQ3, INTRQ2, INTRQ1, INTRQ0, INTACK, SKIPEXE, MONMD, MONMDSTP, SOFTBRK, BRKMSK,
	WAITMEM, WAITFL, WAITMOD, WAITEXM, DMAWAIT, OCDWAIT,
	FLSIZE3, FLSIZE2, FLSIZE1, FLSIZE0, BFSIZE3, BFSIZE2, BFSIZE1, BFSIZE0,
	RAMSIZE7, RAMSIZE6, RAMSIZE5, RAMSIZE4, RAMSIZE3, RAMSIZE2, RAMSIZE1, RAMSIZE0,
	BMSIZE3, BMSIZE2, BMSIZE1, BMSIZE0,
	WAIT2ND7, WAIT2ND6, WAIT2ND5, WAIT2ND4, WAIT2ND3, WAIT2ND2, WAIT2ND1, WAIT2ND0,
	FLREAD, FCHRAM,
// for EVA
        WAITFL2, ICEWAITMEM,
        SVI, SVVCOUT7, SVVCOUT6, SVVCOUT5, SVVCOUT4, SVVCOUT3, SVVCOUT2, SVVCOUT1, SVVCOUT0,
        SVINTACK, SVMOD, SVMODF,
        ALT1, ALT2,
        SP15, SP14, SP13, SP12, SP11, SP10, SP9, SP8, SP7, SP6, SP5, SP4, SP3, SP2, SP1, SP0,
        SPINC, SPDEC, IDPOP,
        ICECSGREGU, ICECSGREGA, ICEIFA4, ICEIFA3, ICEIFA2,
        ICEDO31, ICEDO30, ICEDO29, ICEDO28, ICEDO27, ICEDO26, ICEDO25, ICEDO24,
        ICEDO23, ICEDO22, ICEDO21, ICEDO20, ICEDO19, ICEDO18, ICEDO17, ICEDO16,
        ICEDO15, ICEDO14, ICEDO13, ICEDO12, ICEDO11, ICEDO10, ICEDO9, ICEDO8,
        ICEDO7, ICEDO6, ICEDO5, ICEDO4, ICEDO3, ICEDO2, ICEDO1, ICEDO0,
        FLREADB3, FLREADB2, FLREADB1, FLREADB0,
        IMDR15, IMDR14, IMDR13, IMDR12, IMDR11, IMDR10, IMDR9, IMDR8,
        IMDR7, IMDR6, IMDR5, IMDR4, IMDR3, IMDR2, IMDR1, IMDR0,
        IDADR31, IDADR30, IDADR29, IDADR28, IDADR27, IDADR26, IDADR25, IDADR24,
        IDADR23, IDADR22, IDADR21, IDADR20, IDADR19, IDADR18, IDADR17, IDADR16,
        IDADR15, IDADR14, IDADR13, IDADR12, IDADR11, IDADR10, IDADR9, IDADR8,
        IDADR7, IDADR6, IDADR5, IDADR4, IDADR3, IDADR2, IDADR1, IDADR0,
        STAGEADR1, STAGEADR0,
        PREFIX, PCWAITF,
        ICEMSKNMI, ICEMSKDBG,
        CPUMASK, CPUMISAL, SPREL,
        // Ver1.51
        OCDMOD,
//
	PSELCPU, PSELBCD, CPUSTART, /*DECDYCUT,*/ BASECKHS, RESB, SCANMODE,
	DFSIZE1, DFSIZE0, DFLEN, SLDFLASH, DRDCLK,
	WED, FLSPM, GOFIRM,
	GATEAD1, GATEAD2, GATEAD3,
	MONPC19, MONPC18, MONPC17, MONPC16, MONPC15, MONPC14, MONPC13, MONPC12, MONPC11, MONPC10,
	MONPC9, MONPC8, MONPC7, MONPC6, MONPC5, MONPC4, MONPC3, MONPC2, MONPC1, MONPC0,
	MONMA15, MONMA14, MONMA13, MONMA12, MONMA11, MONMA10,
	MONMA9, MONMA8, MONMA7, MONMA6, MONMA5, MONMA4, MONMA3, MONMA2, MONMA1, MONMA0,
	MONMDR15, MONMDR14, MONMDR13, MONMDR12, MONMDR11, MONMDR10,
	MONMDR9, MONMDR8, MONMDR7, MONMDR6, MONMDR5, MONMDR4, MONMDR3, MONMDR2, MONMDR1, MONMDR0,
	MONMDW15, MONMDW14, MONMDW13, MONMDW12, MONMDW11, MONMDW10,
	MONMDW9, MONMDW8, MONMDW7, MONMDW6, MONMDW5, MONMDW4, MONMDW3, MONMDW2, MONMDW1, MONMDW0, 
	CRCHLTEN
	);

	output	PC19, PC18, PC17, PC16, PC15, PC14, PC13, PC12, PC11, PC10, PC9, PC8, PC7, PC6, PC5, PC4, PC3, PC2, PC1, PC0;
	output	PA19, PA18, PA17, PA16, PA15, PA14, PA13, PA12, PA11, PA10, PA9, PA8, PA7, PA6, PA5, PA4, PA3, PA2;
	output	MA15, MA14, MA13, MA12, MA11, MA10, MA9, MA8, MA7, MA6, MA5, MA4, MA3, MA2, MA1, MA0;
	output	DMAACK;
	output	SLMEM, SLFLASH, SLEXM, SLBMEM, SLIRAM;
	output	HLTST, STPST;
	output	STBEN;
	output	MDW15, MDW14, MDW13, MDW12, MDW11, MDW10, MDW9, MDW8, MDW7, MDW6, MDW5, MDW4, MDW3, MDW2, MDW1, MDW0;
	output	BITEN7, BITEN6, BITEN5, BITEN4, BITEN3, BITEN2, BITEN1, BITEN0;
	output	CPUWR, CPURD, WDOP, WDWR;
	output	EXMA3, EXMA2, EXMA1, EXMA0;
	output	INTACK;
	output	SKIPEXE;
	output	MONMD, MONMDSTP;
	output	SOFTBRK, BRKMSK;
	output	DMAWAIT, OCDWAIT;
	output	FLREAD, FCHRAM;
	output	SLDFLASH, DRDCLK;
	output	MONPC19, MONPC18, MONPC17, MONPC16, MONPC15, MONPC14, MONPC13, MONPC12, MONPC11, MONPC10;
	output	MONPC9, MONPC8, MONPC7, MONPC6, MONPC5, MONPC4, MONPC3, MONPC2, MONPC1, MONPC0;
	output	MONMA15, MONMA14, MONMA13, MONMA12, MONMA11, MONMA10;
	output	MONMA9, MONMA8, MONMA7, MONMA6, MONMA5, MONMA4, MONMA3, MONMA2, MONMA1, MONMA0;
	output	MONMDR15, MONMDR14, MONMDR13, MONMDR12, MONMDR11, MONMDR10;
	output	MONMDR9, MONMDR8, MONMDR7, MONMDR6, MONMDR5, MONMDR4, MONMDR3, MONMDR2, MONMDR1, MONMDR0;
	output	MONMDW15, MONMDW14, MONMDW13, MONMDW12, MONMDW11, MONMDW10;
	output	MONMDW9, MONMDW8, MONMDW7, MONMDW6, MONMDW5, MONMDW4, MONMDW3, MONMDW2, MONMDW1, MONMDW0;

// for EVA
        output  SVINTACK, SVMOD, SVMODF;
        output  ALT1, ALT2;
        output  SP15, SP14, SP13, SP12, SP11, SP10, SP9, SP8, SP7, SP6, SP5, SP4, SP3, SP2, SP1, SP0;
        output  SPINC, SPDEC, IDPOP;
        output  ICEDO31, ICEDO30, ICEDO29, ICEDO28, ICEDO27, ICEDO26, ICEDO25, ICEDO24;
        output  ICEDO23, ICEDO22, ICEDO21, ICEDO20, ICEDO19, ICEDO18, ICEDO17, ICEDO16;
        output  ICEDO15, ICEDO14, ICEDO13, ICEDO12, ICEDO11, ICEDO10, ICEDO9, ICEDO8;
        output  ICEDO7, ICEDO6, ICEDO5, ICEDO4, ICEDO3, ICEDO2, ICEDO1, ICEDO0;
        output  FLREADB3, FLREADB2, FLREADB1, FLREADB0;
        output  IMDR15, IMDR14, IMDR13, IMDR12, IMDR11, IMDR10, IMDR9, IMDR8;
        output  IMDR7, IMDR6, IMDR5, IMDR4, IMDR3, IMDR2, IMDR1, IMDR0;
        output  IDADR31, IDADR30, IDADR29, IDADR28, IDADR27, IDADR26, IDADR25, IDADR24;
        output  IDADR23, IDADR22, IDADR21, IDADR20, IDADR19, IDADR18, IDADR17, IDADR16;
        output  IDADR15, IDADR14, IDADR13, IDADR12, IDADR11, IDADR10, IDADR9, IDADR8;
        output  IDADR7, IDADR6, IDADR5, IDADR4, IDADR3, IDADR2, IDADR1, IDADR0;
        output  STAGEADR1, STAGEADR0;
        output  PREFIX, PCWAITF;
        output  CPUMASK, CPUMISAL, SPREL;
//

	input	PID31, PID30, PID29, PID28, PID27, PID26, PID25, PID24, PID23, PID22, PID21, PID20, PID19, PID18, PID17, PID16;
	input	PID15, PID14, PID13, PID12, PID11, PID10, PID9, PID8, PID7, PID6, PID5, PID4, PID3, PID2, PID1, PID0;
	input	DMAMA15, DMAMA14, DMAMA13, DMAMA12, DMAMA11, DMAMA10, DMAMA9, DMAMA8, DMAMA7, DMAMA6, DMAMA5;
	input	DMAMA4, DMAMA3, DMAMA2, DMAMA1, DMAMA0;
	input	DMARQ, DMARD, DMAWR, DMAWDOP, DMAEN;
	input	MDR15, MDR14, MDR13, MDR12, MDR11, MDR10, MDR9, MDR8, MDR7, MDR6, MDR5, MDR4, MDR3, MDR2, MDR1, MDR0;
	input	VCOUT6, VCOUT5, VCOUT4, VCOUT3, VCOUT2, VCOUT1;
	input	INTDBG, INTNMI, INTRQ3, INTRQ2, INTRQ1, INTRQ0;
	input	WAITMEM, WAITFL, WAITMOD, WAITEXM;
	input	FLSIZE3, FLSIZE2, FLSIZE1, FLSIZE0;
	input	BFSIZE3, BFSIZE2, BFSIZE1, BFSIZE0;
	input	RAMSIZE7, RAMSIZE6, RAMSIZE5, RAMSIZE4, RAMSIZE3, RAMSIZE2, RAMSIZE1, RAMSIZE0;
	input	BMSIZE3, BMSIZE2, BMSIZE1, BMSIZE0;
	input	WAIT2ND7, WAIT2ND6, WAIT2ND5, WAIT2ND4, WAIT2ND3, WAIT2ND2, WAIT2ND1, WAIT2ND0;
	input	PSELCPU, PSELBCD;
	input	CPUSTART/*, DECDYCUT*/;
	input	BASECKHS, RESB;
	input	SCANMODE;
	input	DFSIZE1, DFSIZE0;
	input	DFLEN;
	input	WED, FLSPM, GOFIRM;
	input	GATEAD1, GATEAD2, GATEAD3;
	input	CRCHLTEN;
// for EVA
        input   WAITFL2, ICEWAITMEM;
        input   SVI, SVVCOUT7, SVVCOUT6, SVVCOUT5, SVVCOUT4, SVVCOUT3, SVVCOUT2, SVVCOUT1, SVVCOUT0;
        input   ICECSGREGU, ICECSGREGA, ICEIFA4, ICEIFA3, ICEIFA2;
        input   ICEMSKNMI, ICEMSKDBG;
        // Ver1.51
        input   OCDMOD;
//
	wire	[19:0]	pc_inc;
// for EVA
//	wire	[7:0]	ID_stage1, ID_stage0, ID_stage1_dec;
	wire	[7:0]	ID_stage1_dec;
//
	wire	[7:0]	MEM_stage1, MEM_stage0;
// for EVA
//	wire	[1:0]	stage_adr;
//	wire	[14:0]	SP, sp_inc;
	wire	[14:0]	sp_inc;
//
	wire	[7:0]	A, X, B, C, D, E, H, L, buf1, buf0;
	wire	[7:0]	A_bank0,X_bank0,B_bank0,C_bank0,D_bank0,E_bank0,H_bank0,L_bank0;
	wire	[7:0]	A_bank1,X_bank1,B_bank1,C_bank1,D_bank1,E_bank1,H_bank1,L_bank1;
	wire	[7:0]	A_bank2,X_bank2,B_bank2,C_bank2,D_bank2,E_bank2,H_bank2,L_bank2;
	wire	[7:0]	A_bank3,X_bank3,B_bank3,C_bank3,D_bank3,E_bank3,H_bank3,L_bank3;
	wire	[3:0]	dec_alu_input10;
	wire	[3:0]	dec_alu_input20;
	wire	[3:0]	dec_alu_transout;
	wire	[4:0]	dec_alu_bitsh;
	wire	[3:0]	ES, CS, buf2;
// for EVA
//	wire	[15:0]	imdr;
//
	wire	[7:0]	PSW;
	wire	[1:0]	intisp;
	wire	[1:0]	BCDADJ;
	wire	[15:0]	ma_pre;
	wire		RVEON;

	wire		ivack, rstvec, skpack, dec_alu_add, dec_alu_sub, dec_alu_and, dec_alu_or, dec_alu_exor, dec_alu_ror;
	wire		dec_alu_rol, dec_alu_shr, dec_alu_shl, dec_alu_sar, dec_alu_mulu, dec_alu_carry, dec_word_access;
	wire		dec_alu_andbit, dec_alu_orbit, dec_alu_exorbit, dec_alu_biten; 
	wire		dec_xch_byte, dec_xchw_bc, dec_xchw_de, dec_xchw_hl, dec_SP_enable, dec_A_enable, dec_X_enable;
	wire		dec_B_enable, dec_C_enable, dec_D_enable, dec_E_enable, dec_H_enable, dec_L_enable, dec_ES_enable;
	wire		dec_Z_enable, dec_CY_enable, dec_AC_enable, dec_IE_enable, dec_ISP_enable, dec_NMIS_enable, dec_RBS_enable;
	wire		dec_buf0_enable, dec_buf1_enable, dec_buf2_enable, dec_ma_enable, dec_ma_data_sp, dec_ma_data_saddr_op1;
	wire		dec_ma_data_saddr_op2, dec_ma_data_sfr_op1, dec_ma_data_sfr_op2, dec_ma_data_op12, dec_ma_data_op23;
	wire		dec_ma_data_HL, dec_ma_data_HLop1, dec_ma_data_HLop2, dec_ma_data_HLB, dec_ma_data_HLC, dec_ma_data_DE;
	wire		dec_ma_data_DEop1, dec_ma_data_DEop2, dec_ma_data_SPop1, dec_ma_data_BCop12, dec_ma_data_Bop12, dec_ma_data_Cop12;
	wire		dec_sp_set_enable, dec_sp_inc, dec_sp_dec, dec_pc_inc1, dec_pc_inc2, dec_pc_inc3, dec_pc_inc4, dec_clear_stage;
	wire		dec_pc_set_enable, dec_pc_set_op01, dec_pc_set_op12, dec_pc_set_op123, dec_pc_set_AX, dec_pc_set_BC;
	wire		dec_pc_set_DE, dec_pc_set_HL, dec_pc_set_pc1, dec_pc_set_pc2, dec_pc_set_pc3, dec_pc_set_pc12, dec_pc_set_calt;
	wire		dec_pc_set_vec, dec_pc_set_brk, dec_pc_set_dbg, dec_pc_set_ret, dec_cpuwr_enable, dec_cpurd_enable;
	wire		dec_stage_cut_brtf, dec_stage_cut_ifbr, dec_ifbr_not, dec_ifbr_zero, dec_ifbr_ht;
	wire		dec_mem_stage_op2, dec_mem_stage_op3, dec_mem_stage_op23, dec_set_buf_retadr, dec_set_buf_intr;
	wire		dec_skc, dec_sknc, dec_skz, dec_sknz, dec_skh, dec_sknh, dec_prefix, dec_halt, dec_stop;
	wire		dec_movs, dec_cmps, CPUEN, slreg, slmirr, maw1, stage_cut, MAA, A_access, X_access, B_access, C_access;
	wire		D_access, E_access, H_access, L_access, INT_access, skp_block, intblock, PSW_block, SP_enable, CS_enable;
	wire		stage_cut_br, pc_set_brk, pc_set_dbg, waitdma, ivack_pre, fchiram, fchiram_skp, romrd_skp;
	wire		pc_wait_flg, stby_wait_flg, reg_wait, pa_data_buf, pa_data_mem, pa_data_spen, pa_st2;
	wire		data_hazard_flg, data_hazard, sp_hazard, pswlock;
	wire		wait_block_brtf, pswen, INT_wait, dopen, waitint, prefix_ack;
	wire		exmmsk, flmask, mem_access, stbst;
	wire		dec_alu_transin, cpuwr_reg, wait2ndsfr, sl2ndwait_pre;
// for EVA
	wire	[14:0]	SP_usr, SP_sv;
	wire		dec_alt1, dec_alt2, svmodi;
//
	wire	[3:0]	dec_alu_input10_dmy;
	wire		waitdflash, sldfwait_pre;
	wire		GATEAD1, GATEAD2, GATEAD3;
	wire		CRCHLTEN;

	assign dec_alu_input10_dmy[3] = dec_alu_input10[3];
	assign dec_alu_input10_dmy[2] = dec_alu_input10[2] ^ (dec_alu_input10[3] & ~dec_alu_input10[2] & dec_alu_input10[1] & dec_alu_input10[0]) ;
	assign dec_alu_input10_dmy[1] = dec_alu_input10[1];
	assign dec_alu_input10_dmy[0] = dec_alu_input10[0] ^ (dec_alu_input10[3] & ~dec_alu_input10[2] & dec_alu_input10[1] & dec_alu_input10[0]) ;

	QLK0RCPUEVA0V3_DEC dec(
// for EVA
//		.ID_stage1(ID_stage1_dec), .ID_stage0(ID_stage0), .decout_mask_reg(decout_mask_reg),
		.ID_stage1(ID_stage1_dec), 
                .ID_stage0({IDADR7, IDADR6, IDADR5, IDADR4, IDADR3, IDADR2, IDADR1, IDADR0}),
//
// for EVA
//		.stage_adr(stage_adr), .ivack(ivack),  .rstvec(rstvec), .skpack(skpack),
                .stage_adr({STAGEADR1, STAGEADR0}), .ivack(ivack), .rstvec(rstvec), .skpack(skpack),
//
		.dec_alu_input10(dec_alu_input10), .dec_alu_input20(dec_alu_input20),
		.dec_alu_add(dec_alu_add), .dec_alu_sub(dec_alu_sub), .dec_alu_and(dec_alu_and),
		.dec_alu_or(dec_alu_or), .dec_alu_exor(dec_alu_exor),
		.dec_alu_andbit(dec_alu_andbit), .dec_alu_orbit(dec_alu_orbit), .dec_alu_exorbit(dec_alu_exorbit),
		.dec_alu_ror(dec_alu_ror), .dec_alu_rol(dec_alu_rol),
		.dec_alu_shr(dec_alu_shr), .dec_alu_shl(dec_alu_shl), .dec_alu_sar(dec_alu_sar),
		.dec_alu_mulu(dec_alu_mulu), .dec_alu_carry(dec_alu_carry),
		.dec_alu_transin(dec_alu_transin), .dec_alu_transout(dec_alu_transout),
		.dec_alu_bitsh(dec_alu_bitsh), .dec_alu_biten(dec_alu_biten),
		.dec_word_access(dec_word_access),
		.dec_xch_byte(dec_xch_byte), .dec_xchw_bc(dec_xchw_bc), 
		.dec_xchw_de(dec_xchw_de), .dec_xchw_hl(dec_xchw_hl), 
		.dec_SP_enable(dec_SP_enable),
		.dec_A_enable(dec_A_enable), .dec_X_enable(dec_X_enable),
		.dec_B_enable(dec_B_enable), .dec_C_enable(dec_C_enable),
		.dec_D_enable(dec_D_enable), .dec_E_enable(dec_E_enable),
		.dec_H_enable(dec_H_enable), .dec_L_enable(dec_L_enable),
		.dec_ES_enable(dec_ES_enable),
		.dec_Z_enable(dec_Z_enable), .dec_CY_enable(dec_CY_enable),
		.dec_AC_enable(dec_AC_enable), .dec_IE_enable(dec_IE_enable),
		.dec_ISP_enable(dec_ISP_enable), .dec_NMIS_enable(dec_NMIS_enable), .dec_RBS_enable(dec_RBS_enable),
		.dec_buf0_enable(dec_buf0_enable), .dec_buf1_enable(dec_buf1_enable), .dec_buf2_enable(dec_buf2_enable),
		.dec_ma_enable(dec_ma_enable),
		.dec_ma_data_sp(dec_ma_data_sp),
		.dec_ma_data_saddr_op1(dec_ma_data_saddr_op1), .dec_ma_data_saddr_op2(dec_ma_data_saddr_op2),
		.dec_ma_data_sfr_op1(dec_ma_data_sfr_op1), .dec_ma_data_sfr_op2(dec_ma_data_sfr_op2),
		.dec_ma_data_op12(dec_ma_data_op12), .dec_ma_data_op23(dec_ma_data_op23),
		.dec_ma_data_HL(dec_ma_data_HL), .dec_ma_data_HLop1(dec_ma_data_HLop1), .dec_ma_data_HLop2(dec_ma_data_HLop2),
		.dec_ma_data_HLB(dec_ma_data_HLB), .dec_ma_data_HLC(dec_ma_data_HLC),
		.dec_ma_data_DE(dec_ma_data_DE), .dec_ma_data_DEop1(dec_ma_data_DEop1), .dec_ma_data_DEop2(dec_ma_data_DEop2),
		.dec_ma_data_SPop1(dec_ma_data_SPop1),
		.dec_ma_data_BCop12(dec_ma_data_BCop12),
		.dec_ma_data_Bop12(dec_ma_data_Bop12), .dec_ma_data_Cop12(dec_ma_data_Cop12),
		.dec_sp_set_enable(dec_sp_set_enable), .dec_sp_inc(dec_sp_inc), .dec_sp_dec(dec_sp_dec),
		.dec_pc_inc1(dec_pc_inc1), .dec_pc_inc2(dec_pc_inc2),
		.dec_pc_inc3(dec_pc_inc3), .dec_pc_inc4(dec_pc_inc4),
		.dec_clear_stage(dec_clear_stage), .dec_pc_set_enable(dec_pc_set_enable),
		.dec_pc_set_op01(dec_pc_set_op01), .dec_pc_set_op12(dec_pc_set_op12), .dec_pc_set_op123(dec_pc_set_op123),
		.dec_pc_set_AX(dec_pc_set_AX), .dec_pc_set_BC(dec_pc_set_BC),
		.dec_pc_set_DE(dec_pc_set_DE), .dec_pc_set_HL(dec_pc_set_HL),
		.dec_pc_set_pc1(dec_pc_set_pc1), .dec_pc_set_pc2(dec_pc_set_pc2), .dec_pc_set_pc3(dec_pc_set_pc3),
		.dec_pc_set_pc12(dec_pc_set_pc12),
		.dec_pc_set_calt(dec_pc_set_calt), .dec_pc_set_vec(dec_pc_set_vec),
		.dec_pc_set_brk(dec_pc_set_brk), .dec_pc_set_dbg(dec_pc_set_dbg),
		.dec_pc_set_ret(dec_pc_set_ret),
		.dec_cpuwr_enable(dec_cpuwr_enable), .dec_cpurd_enable(dec_cpurd_enable),
		.dec_stage_cut_brtf(dec_stage_cut_brtf), .dec_stage_cut_ifbr(dec_stage_cut_ifbr),
		.dec_ifbr_not(dec_ifbr_not), .dec_ifbr_zero(dec_ifbr_zero), .dec_ifbr_ht(dec_ifbr_ht),
		.dec_mem_stage_op2(dec_mem_stage_op2), .dec_mem_stage_op3(dec_mem_stage_op3), .dec_mem_stage_op23(dec_mem_stage_op23),
		.dec_set_buf_retadr(dec_set_buf_retadr), .dec_set_buf_intr(dec_set_buf_intr),
		.dec_skc(dec_skc), .dec_sknc(dec_sknc), .dec_skz(dec_skz), .dec_sknz(dec_sknz), .dec_skh(dec_skh), .dec_sknh(dec_sknh),
		.dec_prefix(dec_prefix), .dec_halt(dec_halt), .dec_stop(dec_stop), .dec_movs(dec_movs), .dec_cmps(dec_cmps),
// for EVA
		.dec_alt1(dec_alt1), .dec_alt2(dec_alt2),
//
		.cpuen(CPUEN), .baseck(BASECKHS), .resb(RESB), .scanmode(SCANMODE) );

	QLK0RCPUEVA0V3_ALU alu(
// for EVA
//		.imdr(imdr), .pselcpu(PSELCPU),  .pselbcd(PSELBCD), .slreg(slreg), .slmirr(slmirr),
                .pselcpu(PSELCPU),  .pselbcd(PSELBCD), .slreg(slreg), .slmirr(slmirr),
                .imdr({IMDR15, IMDR14, IMDR13, IMDR12, IMDR11, IMDR10, IMDR9, IMDR8,
                       IMDR7, IMDR6, IMDR5, IMDR4, IMDR3, IMDR2, IMDR1, IMDR0}),
//
		.vpa({MA3, MA2, MA1, MA0}),
		.pid({PID31, PID30, PID29, PID28, PID27, PID26, PID25, PID24, PID23, PID22, PID21, PID20, PID19, PID18, PID17, PID16,
		      PID15, PID14, PID13, PID12, PID11, PID10, PID9, PID8, PID7, PID6, PID5, PID4, PID3, PID2, PID1, PID0}),
		.mdw({MDW15, MDW14, MDW13, MDW12, MDW11, MDW10, MDW9, MDW8, MDW7, MDW6, MDW5, MDW4, MDW3, MDW2, MDW1, MDW0}),
		.biten({BITEN7, BITEN6, BITEN5, BITEN4, BITEN3, BITEN2, BITEN1, BITEN0}),
		.pc({PC19, PC18, PC17, PC16, PC15, PC14, PC13, PC12, PC11, PC10, PC9, PC8, PC7, PC6, PC5, PC4, PC3, PC2, PC1, PC0}),
		.ma_pre(ma_pre), .maw1(maw1), .pc_inc(pc_inc), .wdop(WDOP), .wdwr(WDWR),
// for EVA
//		.ID_stage0(ID_stage0), .MEM_stage0(MEM_stage0), .MEM_stage1(MEM_stage1),
		.ID_stage0({IDADR7, IDADR6, IDADR5, IDADR4, IDADR3, IDADR2, IDADR1, IDADR0}),
		.MEM_stage0(MEM_stage0), .MEM_stage1(MEM_stage1),
//
		.cpuwr(CPUWR), .cpuwr_reg(cpuwr_reg), .cpurd(CPURD), .stage_cut(stage_cut),
		.A(A), .X(X), .B(B), .C(C), .D(D), .E(E), .H(H), .L(L), .CS(CS), .ES(ES), .PSW(PSW), .MAA(MAA), .BCDADJ(BCDADJ),
		.A_bank0(A_bank0), .X_bank0(X_bank0), .B_bank0(B_bank0), .C_bank0(C_bank0),
		.D_bank0(D_bank0), .E_bank0(E_bank0), .H_bank0(H_bank0), .L_bank0(L_bank0),
		.A_bank1(A_bank1), .X_bank1(X_bank1), .B_bank1(B_bank1), .C_bank1(C_bank1),
		.D_bank1(D_bank1), .E_bank1(E_bank1), .H_bank1(H_bank1), .L_bank1(L_bank1),
		.A_bank2(A_bank2), .X_bank2(X_bank2), .B_bank2(B_bank2), .C_bank2(C_bank2),
		.D_bank2(D_bank2), .E_bank2(E_bank2), .H_bank2(H_bank2), .L_bank2(L_bank2),
		.A_bank3(A_bank3), .X_bank3(X_bank3), .B_bank3(B_bank3), .C_bank3(C_bank3),
		.D_bank3(D_bank3), .E_bank3(E_bank3), .H_bank3(H_bank3), .L_bank3(L_bank3),
		.A_access(A_access), .X_access(X_access), .B_access(B_access), .C_access(C_access),
		.D_access(D_access), .E_access(E_access), .H_access(H_access), .L_access(L_access),
		.INT_access(INT_access), .skp_block(skp_block),
		.intblock(intblock), .PSW_block(PSW_block), .SP_enable(SP_enable), .CS_enable(CS_enable),
		.stage_cut_br(stage_cut_br), .pc_set_brk(pc_set_brk), .pc_set_dbg(pc_set_dbg),
// for EVA
//		.buf2(buf2), .buf1(buf1), .buf0(buf0), .SP(SP), .sp_inc(sp_inc),
		.buf2(buf2), .buf1(buf1), .buf0(buf0), .sp_inc(sp_inc),
                .SP({SP15, SP14, SP13, SP12, SP11, SP10, SP9, SP8, SP7, SP6, SP5, SP4, SP3, SP2, SP1}), .SP0(SP0),
//
		.dmard(DMARD), .dmawr(DMAWR), .dmawdop(DMAWDOP), .waitdma(waitdma),
		.ivack(ivack), .ivack_pre(ivack_pre), .intisp(intisp),
		.fchiram(fchiram), .fchiram_skp(fchiram_skp), .romrd_skp(romrd_skp),
		.pc_wait_flg(pc_wait_flg), .reg_wait(reg_wait),
		.pa_data_buf(pa_data_buf), .pa_data_mem(pa_data_mem), .pa_data_spen(pa_data_spen),
		.pa_st2(pa_st2), .slflash(SLFLASH),
		.data_hazard_flg(data_hazard_flg), .data_hazard(data_hazard), .sp_hazard(sp_hazard),
		.dec_alu_input10(dec_alu_input10_dmy), .dec_alu_input20(dec_alu_input20),
		.dec_alu_add(dec_alu_add), .dec_alu_sub(dec_alu_sub), .dec_alu_and(dec_alu_and),
		.dec_alu_or(dec_alu_or), .dec_alu_exor(dec_alu_exor),
		.dec_alu_andbit(dec_alu_andbit), .dec_alu_orbit(dec_alu_orbit), .dec_alu_exorbit(dec_alu_exorbit),
		.dec_alu_ror(dec_alu_ror), .dec_alu_rol(dec_alu_rol),
		.dec_alu_shr(dec_alu_shr), .dec_alu_shl(dec_alu_shl), .dec_alu_sar(dec_alu_sar),
		.dec_alu_mulu(dec_alu_mulu), .dec_alu_carry(dec_alu_carry),
		.dec_alu_transin(dec_alu_transin), .dec_alu_transout(dec_alu_transout),
		.dec_alu_bitsh(dec_alu_bitsh), .dec_alu_biten(dec_alu_biten),
		.dec_word_access(dec_word_access),
		.dec_xch_byte(dec_xch_byte), .dec_xchw_bc(dec_xchw_bc),
		.dec_xchw_de(dec_xchw_de), .dec_xchw_hl(dec_xchw_hl),
		.dec_A_enable(dec_A_enable), .dec_X_enable(dec_X_enable),
		.dec_B_enable(dec_B_enable), .dec_C_enable(dec_C_enable),
		.dec_D_enable(dec_D_enable), .dec_E_enable(dec_E_enable),
		.dec_H_enable(dec_H_enable), .dec_L_enable(dec_L_enable),
		.dec_ES_enable(dec_ES_enable),
		.dec_Z_enable(dec_Z_enable), .dec_CY_enable(dec_CY_enable),
		.dec_AC_enable(dec_AC_enable), .dec_IE_enable(dec_IE_enable),
		.dec_ISP_enable(dec_ISP_enable), .dec_RBS_enable(dec_RBS_enable),
		.dec_buf0_enable(dec_buf0_enable), .dec_buf1_enable(dec_buf1_enable), .dec_buf2_enable(dec_buf2_enable),
		.dec_SP_enable(dec_SP_enable),
		.dec_cpuwr_enable(dec_cpuwr_enable),
		.dec_cpurd_enable(dec_cpurd_enable),
		.dec_sp_set_enable(dec_sp_set_enable), .dec_sp_inc(dec_sp_inc),  .dec_sp_dec(dec_sp_dec),
		.dec_stage_cut_brtf(dec_stage_cut_brtf), .dec_stage_cut_ifbr(dec_stage_cut_ifbr),
		.dec_ifbr_not(dec_ifbr_not), .dec_ifbr_zero(dec_ifbr_zero), .dec_ifbr_ht(dec_ifbr_ht),
		.dec_set_buf_retadr(dec_set_buf_retadr), .dec_set_buf_intr(dec_set_buf_intr),
		.dec_skc(dec_skc), .dec_sknc(dec_sknc), .dec_skz(dec_skz), .dec_sknz(dec_sknz),
		.dec_skh(dec_skh), .dec_sknh(dec_sknh),
		.dec_movs(dec_movs), .dec_cmps(dec_cmps),
		.dec_ma_enable(dec_ma_enable),
		.skpack(skpack), .skipexe(SKIPEXE), .pswlock(pswlock),
		.wait_block_brtf(wait_block_brtf),
		.mem_access(mem_access),
// for EVA
                .SP_usr(SP_usr), .SP_sv(SP_sv),
                .svmod(SVMOD), .svmodi(svmodi),
                .alt1(ALT1), .alt2(ALT2),
                .spinc(SPINC), .spdec(SPDEC),
                .icecsgregu(ICECSGREGU), .icecsgrega(ICECSGREGA), .iceifa({ICEIFA4, ICEIFA3, ICEIFA2}),
                .icedo({ICEDO31, ICEDO30, ICEDO29, ICEDO28, ICEDO27, ICEDO26, ICEDO25, ICEDO24,ICEDO23,
                        ICEDO22, ICEDO21, ICEDO20, ICEDO19, ICEDO18, ICEDO17, ICEDO16,ICEDO15,
                        ICEDO14, ICEDO13, ICEDO12, ICEDO11, ICEDO10, ICEDO9, ICEDO8,
                        ICEDO7, ICEDO6, ICEDO5, ICEDO4, ICEDO3, ICEDO2, ICEDO1, ICEDO0}),
//
		.cpuen(CPUEN), .pswen(pswen), .baseck(BASECKHS), .resb(RESB), .scanmode(SCANMODE),
		.RVEON(RVEON)
		);

	QLK0RCPUEVA0V3_ADR adr(
// for EVA
//		.ID_stage1(ID_stage1), .ID_stage0(ID_stage0), .ID_stage1_dec(ID_stage1_dec),
                .ID_stage1_dec(ID_stage1_dec),
                .ID_stage3({IDADR31, IDADR30, IDADR29, IDADR28, IDADR27, IDADR26, IDADR25, IDADR24}),
                .ID_stage2({IDADR23, IDADR22, IDADR21, IDADR20, IDADR19, IDADR18, IDADR17, IDADR16}),
                .ID_stage1({IDADR15, IDADR14, IDADR13, IDADR12, IDADR11, IDADR10, IDADR9, IDADR8}),
                .ID_stage0({IDADR7, IDADR6, IDADR5, IDADR4, IDADR3, IDADR2, IDADR1, IDADR0}),
//
		.MEM_stage1(MEM_stage1), .MEM_stage0(MEM_stage0),
// for EVA
//		.stage_adr(stage_adr), .pc_inc(pc_inc),
                .stage_adr({STAGEADR1, STAGEADR0}), .pc_inc(pc_inc),
//
		.pc_wait_flg(pc_wait_flg), .stby_wait_flg(stby_wait_flg), .reg_wait(reg_wait),
		.pa_data_buf(pa_data_buf), .pa_data_mem(pa_data_mem), .pa_st2(pa_st2), .pa_data_spen(pa_data_spen),
		.pa({PA19, PA18, PA17, PA16, PA15, PA14, PA13, PA12, PA11, PA10, PA9, PA8, PA7, PA6, PA5, PA4, PA3, PA2}),
		.pc({PC19, PC18, PC17, PC16, PC15, PC14, PC13, PC12, PC11, PC10, PC9, PC8, PC7, PC6, PC5, PC4, PC3, PC2, PC1, PC0}),
		.pid({PID31, PID30, PID29, PID28, PID27, PID26, PID25, PID24, PID23, PID22, PID21, PID20, PID19, PID18, PID17, PID16,
		      PID15, PID14, PID13, PID12, PID11, PID10, PID9, PID8, PID7, PID6, PID5, PID4, PID3, PID2, PID1, PID0}),
		.data_hazard_flg(data_hazard_flg), .data_hazard(data_hazard), .sp_hazard(sp_hazard),
		.A_access(A_access), .X_access(X_access), .B_access(B_access), .C_access(C_access),
		.D_access(D_access), .E_access(E_access), .H_access(H_access), .L_access(L_access),
		.dec_RBS_enable(dec_RBS_enable),
		.INT_access(INT_access), .INT_wait(INT_wait), .wait2ndsfr(wait2ndsfr), .sl2ndwait_pre(sl2ndwait_pre), .dopen(dopen),
		.dec_NMIS_enable(dec_NMIS_enable), .SP_enable(SP_enable),
		.CS_enable(CS_enable),
		.dec_SP_enable(dec_SP_enable),
		.dec_pc_inc1(dec_pc_inc1), .dec_pc_inc2(dec_pc_inc2),
		.dec_pc_inc3(dec_pc_inc3), .dec_pc_inc4(dec_pc_inc4),
		.dec_clear_stage(dec_clear_stage), .dec_pc_set_enable(dec_pc_set_enable),
		.dec_pc_set_op01(dec_pc_set_op01), .dec_pc_set_op12(dec_pc_set_op12), .dec_pc_set_op123(dec_pc_set_op123),
		.dec_pc_set_AX(dec_pc_set_AX), .dec_pc_set_BC(dec_pc_set_BC),
		.dec_pc_set_DE(dec_pc_set_DE), .dec_pc_set_HL(dec_pc_set_HL),
		.dec_pc_set_pc1(dec_pc_set_pc1), .dec_pc_set_pc2(dec_pc_set_pc2), .dec_pc_set_pc3(dec_pc_set_pc3),
		.dec_pc_set_pc12(dec_pc_set_pc12),
		.dec_pc_set_calt(dec_pc_set_calt), .dec_pc_set_vec(dec_pc_set_vec),
		.dec_pc_set_brk(dec_pc_set_brk), .dec_pc_set_dbg(dec_pc_set_dbg),
		.dec_pc_set_ret(dec_pc_set_ret),
		.dec_ma_enable(dec_ma_enable),
		.dec_ma_data_sp(dec_ma_data_sp),
		.dec_ma_data_saddr_op1(dec_ma_data_saddr_op1), .dec_ma_data_saddr_op2(dec_ma_data_saddr_op2),
		.dec_ma_data_sfr_op1(dec_ma_data_sfr_op1), .dec_ma_data_sfr_op2(dec_ma_data_sfr_op2),
		.dec_ma_data_op12(dec_ma_data_op12), .dec_ma_data_op23(dec_ma_data_op23),
		.dec_ma_data_HL(dec_ma_data_HL), .dec_ma_data_HLop1(dec_ma_data_HLop1), .dec_ma_data_HLop2(dec_ma_data_HLop2),
		.dec_ma_data_HLB(dec_ma_data_HLB), .dec_ma_data_HLC(dec_ma_data_HLC),
		.dec_ma_data_DE(dec_ma_data_DE), .dec_ma_data_DEop1(dec_ma_data_DEop1), .dec_ma_data_DEop2(dec_ma_data_DEop2),
		.dec_ma_data_SPop1(dec_ma_data_SPop1),
		.dec_ma_data_BCop12(dec_ma_data_BCop12),
		.dec_ma_data_Bop12(dec_ma_data_Bop12), .dec_ma_data_Cop12(dec_ma_data_Cop12),
		.dec_sp_set_enable(dec_sp_set_enable), .dec_cpurd_enable(dec_cpurd_enable), .dec_cpuwr_enable(dec_cpuwr_enable),
		.dec_mem_stage_op2(dec_mem_stage_op2), .dec_mem_stage_op3(dec_mem_stage_op3), .dec_mem_stage_op23(dec_mem_stage_op23),
		.dec_prefix(dec_prefix), .stage_cut(stage_cut),
		.A(A), .X(X), .B(B), .C(C), .D(D), .E(E), .H(H), .L(L), .CS(CS), .ES(ES),
		.buf2(buf2), .buf1(buf1), .buf0(buf0),
		.ma({MA15, MA14, MA13, MA12, MA11, MA10, MA9, MA8, MA7, MA6, MA5, MA4, MA3, MA2, MA1, MA0}),
		.ma_pre(ma_pre), .maw1(maw1),
		.exma({EXMA3, EXMA2, EXMA1, EXMA0}),
		.slmem(SLMEM), .slflash(SLFLASH), .slreg(slreg), .slmirr(slmirr), .slexm(SLEXM), .slbmem(SLBMEM), .sliram(SLIRAM),
		.cpuwr(CPUWR), .cpuwr_reg(cpuwr_reg), .cpurd(CPURD),
// for EVA
//		.imdr(imdr),
                .imdr({IMDR15, IMDR14, IMDR13, IMDR12, IMDR11, IMDR10, IMDR9, IMDR8,
                       IMDR7, IMDR6, IMDR5, IMDR4, IMDR3, IMDR2, IMDR1, IMDR0}),
//
		.dmama({DMAMA15, DMAMA14, DMAMA13, DMAMA12, DMAMA11, DMAMA10, DMAMA9, DMAMA8, DMAMA7, DMAMA6, DMAMA5,
			DMAMA4, DMAMA3, DMAMA2, DMAMA1, DMAMA0}),
		.hltst(HLTST), .stbst(stbst), .dmarq(DMARQ), .dmaack(DMAACK), .waitdma(waitdma), .waitint(waitint),
		.waitfl(WAITFL), .waitexm(WAITEXM), .waitmod(WAITMOD), .waitmem(WAITMEM),
		.vcout({VCOUT6, VCOUT5, VCOUT4, VCOUT3, VCOUT2, VCOUT1}),
// for EVA
//		.MAA(MAA), .IE(PSW[7]), .SP(SP), .sp_inc(sp_inc), .wdop(WDOP),
                .MAA(MAA), .IE(PSW[7]), .sp_inc(sp_inc), .wdop(WDOP),
                .SP({SP15, SP14, SP13, SP12, SP11, SP10, SP9, SP8, SP7, SP6, SP5, SP4, SP3, SP2, SP1}),
//
		.intdbg(INTDBG), .intnmi(INTNMI), .intrq3(INTRQ3), .intrq2(INTRQ2), .intrq1(INTRQ1), .intrq0(INTRQ0),
		.isp(PSW[2:1]), .intack(INTACK), .ivack(ivack), .ivack_pre(ivack_pre), .monmd(MONMD), .monmdstp(MONMDSTP), .softbrk(SOFTBRK),
		.intisp(intisp), .intblock(intblock), .PSW_block(PSW_block), .skp_block(skp_block),  .wait_block_brtf(wait_block_brtf),
		.stage_cut_br(stage_cut_br), .pc_set_brk(pc_set_brk), .pc_set_dbg(pc_set_dbg),
		.prefix_ack(prefix_ack), .fchiram(fchiram), .fchiram_skp(fchiram_skp), .romrd_skp(romrd_skp), .rstvec(rstvec),
		.flsize({FLSIZE3, FLSIZE2, FLSIZE1, FLSIZE0}), .bfsize({BFSIZE3, BFSIZE2, BFSIZE1, BFSIZE0}),
		.ramsize({RAMSIZE7, RAMSIZE6, RAMSIZE5, RAMSIZE4, RAMSIZE3, RAMSIZE2, RAMSIZE1, RAMSIZE0}),
		.bmsize({BMSIZE3, BMSIZE2, BMSIZE1, BMSIZE0}),
		.wait2nd({WAIT2ND7, WAIT2ND6, WAIT2ND5, WAIT2ND4, WAIT2ND3, WAIT2ND2, WAIT2ND1, WAIT2ND0}),
		.exmmsk(exmmsk), .flmask(flmask), /*.decdycut(DECDYCUT),*/ .brkmsk(BRKMSK),
		.flread(FLREAD), .fchram(FCHRAM), .mem_access(mem_access),
// for EVA
                .svi(SVI), .svvcout({SVVCOUT7, SVVCOUT6, SVVCOUT5, SVVCOUT4, SVVCOUT3, SVVCOUT2, SVVCOUT1, SVVCOUT0}),
                .svintack(SVINTACK), .svmod(SVMOD), .svmodf(SVMODF), .svmodi(svmodi),
                .dec_alt1(dec_alt1), .dec_alt2(dec_alt2), .alt1(ALT1), .alt2(ALT2),
                .dec_sp_inc(dec_sp_inc), .idpop(IDPOP),
                .flreadb({FLREADB3, FLREADB2, FLREADB1, FLREADB0}),
                .prefix(PREFIX), .pcwaitf(PCWAITF),
                .icemsknmi(ICEMSKNMI), .icemskdbg(ICEMSKDBG),
                .cpumisal(CPUMISAL), .sprel(SPREL),
                .pswen(pswen),
                // Ver1.51
                .ocdmod(OCDMOD),
//
		.cpuen(CPUEN), .baseck(BASECKHS), .resb(RESB), .scanmode(SCANMODE),
		.dfsize({DFSIZE1,DFSIZE0}), .dflen(DFLEN),
		.sldflash(SLDFLASH), .drdclk(DRDCLK), .waitdflash(waitdflash), .sldfwait_pre(sldfwait_pre),
		.wed(WED), .gofirm(GOFIRM),
		.RVEON(RVEON), 
		.gatead1(GATEAD1), .gatead2(GATEAD2), .gatead3(GATEAD3),
		.mdw({MDW15, MDW14, MDW13, MDW12, MDW11, MDW10, MDW9, MDW8, MDW7, MDW6, MDW5, MDW4, MDW3, MDW2, MDW1, MDW0}),
		.monpc({MONPC19, MONPC18, MONPC17, MONPC16, MONPC15, MONPC14, MONPC13, MONPC12, MONPC11, MONPC10, 
			MONPC9, MONPC8, MONPC7, MONPC6, MONPC5, MONPC4, MONPC3, MONPC2, MONPC1, MONPC0}),
		.monma({MONMA15, MONMA14, MONMA13, MONMA12, MONMA11, MONMA10, 
			MONMA9, MONMA8, MONMA7, MONMA6, MONMA5, MONMA4, MONMA3, MONMA2, MONMA1, MONMA0}),
		.monmdr({MONMDR15, MONMDR14, MONMDR13, MONMDR12, MONMDR11, MONMDR10, 
			 MONMDR9, MONMDR8, MONMDR7, MONMDR6, MONMDR5, MONMDR4, MONMDR3, MONMDR2, MONMDR1, MONMDR0}),
		.monmdw({MONMDW15, MONMDW14, MONMDW13, MONMDW12, MONMDW11, MONMDW10, 
			 MONMDW9, MONMDW8, MONMDW7, MONMDW6, MONMDW5, MONMDW4, MONMDW3, MONMDW2, MONMDW1, MONMDW0})
		);

	QLK0RCPUEVA0V3_CLK clk(
		.mdr({MDR15, MDR14, MDR13, MDR12, MDR11, MDR10, MDR9, MDR8, MDR7, MDR6, MDR5, MDR4, MDR3, MDR2, MDR1, MDR0}),
// for EVA
//		.imdr(imdr), .pselcpu(PSELCPU), .pselbcd(PSELBCD), .slreg(slreg), .rga(MA4), .vpa({MA3, MA2, MA1, MA0}),
                .pselcpu(PSELCPU), .pselbcd(PSELBCD), .slreg(slreg), .rga(MA4), .vpa({MA3, MA2, MA1, MA0}),
                .imdr({IMDR15, IMDR14, IMDR13, IMDR12, IMDR11, IMDR10, IMDR9, IMDR8,
                       IMDR7, IMDR6, IMDR5, IMDR4, IMDR3, IMDR2, IMDR1, IMDR0}),
//
		.dec_set_buf_retadr(dec_set_buf_retadr), .dec_set_buf_intr(dec_set_buf_intr),
		.dec_halt(dec_halt), .dec_stop(dec_stop), .stben(STBEN), .pc_wait_flg(pc_wait_flg),
		.stby_wait_flg(stby_wait_flg),
		.intdbg(INTDBG), .intnmi(INTNMI), .intrq3(INTRQ3), .intrq2(INTRQ2), .intrq1(INTRQ1), .intrq0(INTRQ0),
		.cpurd(CPURD), .wdop(WDOP),
// for EVA
//		.SP(SP), .PSW(PSW), .CS(CS), .ES(ES), .MAA(MAA), .BCDADJ(BCDADJ),
                .PSW(PSW), .CS(CS), .ES(ES), .MAA(MAA), .BCDADJ(BCDADJ),
                .SP({SP15, SP14, SP13, SP12, SP11, SP10, SP9, SP8, SP7, SP6, SP5, SP4, SP3, SP2, SP1}),
//
		.A_bank0(A_bank0), .X_bank0(X_bank0), .B_bank0(B_bank0), .C_bank0(C_bank0),
		.D_bank0(D_bank0), .E_bank0(E_bank0), .H_bank0(H_bank0), .L_bank0(L_bank0),
		.A_bank1(A_bank1), .X_bank1(X_bank1), .B_bank1(B_bank1), .C_bank1(C_bank1),
		.D_bank1(D_bank1), .E_bank1(E_bank1), .H_bank1(H_bank1), .L_bank1(L_bank1),
		.A_bank2(A_bank2), .X_bank2(X_bank2), .B_bank2(B_bank2), .C_bank2(C_bank2),
		.D_bank2(D_bank2), .E_bank2(E_bank2), .H_bank2(H_bank2), .L_bank2(L_bank2),
		.A_bank3(A_bank3), .X_bank3(X_bank3), .B_bank3(B_bank3), .C_bank3(C_bank3),
		.D_bank3(D_bank3), .E_bank3(E_bank3), .H_bank3(H_bank3), .L_bank3(L_bank3),
		.INT_wait(INT_wait), .wait2ndsfr(wait2ndsfr), .sl2ndwait_pre(sl2ndwait_pre), .waitdma(waitdma), .waitint(waitint),
		.dmarq(DMARQ), .dopen(dopen), .dmaack(DMAACK),
		.waitfl(WAITFL), .waitmod(WAITMOD), .waitexm(WAITEXM), .dmaen(DMAEN), .dmawait(DMAWAIT), .ocdwait(OCDWAIT),
		.pswlock(pswlock), .exmmsk(exmmsk), .flmask(flmask), .hltst(HLTST), .stpst(STPST), .stbst(stbst),
// for EVA
                .SP_usr(SP_usr), .SP_sv(SP_sv), .svmod(SVMOD), .alt1(ALT1),
                .svi(SVI),
                .waitfl2(WAITFL2), .icewaitmem(ICEWAITMEM),
                .cpumask(CPUMASK),
//
		.cpustart(CPUSTART), .cpuen(CPUEN), .pswen(pswen), .baseck(BASECKHS), .resb(RESB), .scanmode(SCANMODE),
		.sldfwait_pre(sldfwait_pre), .waitdflash(waitdflash),
		.RVEON(RVEON), .crchlten(CRCHLTEN)
		);

endmodule

/********************************************************************************/
/* K0R EVA ADR Block                                                           	*/
/*                                                          Made K.Tanaka       */
/********************************************************************************/
/* Ver1.00  New                                                                 */
/* Ver1.50  Add flread                                2007.05.30 K.Tanaka       */
/*              fchram                                2007.05.30 K.Tanaka       */
/*              mem_access                            2007.05.30 K.Tanaka       */
/*              stbst                                 2007.07.02 K.Tanaka       */
/* Ver1.51  Add ocdmod                                2007.11.30 K.Tanaka       */
/* Ver1.52  Modified MONMD Signal during svmod        2008.02.26 K.Tanaka       */
/* Ver2.01  Modified CPUMISAL Signal                  2008.08.29 K.Tanaka       */
/********************************************************************************/
module QLK0RCPUEVA0V3_ADR(
	ID_stage1, ID_stage0, ID_stage1_dec, 
	MEM_stage1, MEM_stage0,
	stage_adr, pc, pc_inc, pc_wait_flg, stby_wait_flg, reg_wait,
	pa_data_buf, pa_data_mem, pa_data_spen,
	pa_st2, pa, pid, data_hazard_flg, data_hazard, sp_hazard,
	dec_NMIS_enable, SP_enable,
	CS_enable,
	A_access, X_access, B_access, C_access,
	D_access, E_access, H_access, L_access,
	dec_RBS_enable, INT_access, INT_wait, wait2ndsfr, sl2ndwait_pre, dopen,
	dec_SP_enable,
	dec_pc_inc1, dec_pc_inc2, dec_pc_inc3, dec_pc_inc4,
	dec_clear_stage, dec_pc_set_enable,
	dec_pc_set_op01, dec_pc_set_op12, dec_pc_set_op123,
	dec_pc_set_AX, dec_pc_set_BC,
	dec_pc_set_DE, dec_pc_set_HL,
	dec_pc_set_pc1, dec_pc_set_pc2, dec_pc_set_pc3,
	dec_pc_set_pc12,
	dec_pc_set_calt, dec_pc_set_vec,
	dec_pc_set_brk, dec_pc_set_dbg,
	dec_pc_set_ret,
	dec_ma_enable,
	dec_ma_data_sp,
	dec_ma_data_saddr_op1, dec_ma_data_saddr_op2,
	dec_ma_data_sfr_op1, dec_ma_data_sfr_op2,
	dec_ma_data_op12, dec_ma_data_op23,
	dec_ma_data_HL, dec_ma_data_HLop1, dec_ma_data_HLop2,
	dec_ma_data_HLB, dec_ma_data_HLC,
	dec_ma_data_DE, dec_ma_data_DEop1, dec_ma_data_DEop2,
	dec_ma_data_SPop1,
	dec_ma_data_BCop12, dec_ma_data_Bop12, dec_ma_data_Cop12,
	dec_sp_set_enable, dec_cpurd_enable, dec_cpuwr_enable,
	dec_mem_stage_op2, dec_mem_stage_op3, dec_mem_stage_op23,
	dec_prefix,
	stage_cut, A, X, B, C, D, E, H, L, CS, ES,
	buf2, buf1, buf0, ma, ma_pre, exma, maw1, slmem, slflash, slreg, slmirr, slexm, slbmem, sliram,
	imdr, cpuwr, cpuwr_reg, cpurd,
	hltst, stbst, dmama, dmarq, dmaack, waitdma, waitint, waitfl, waitexm, waitmod, waitmem, vcout,
	MAA, IE, SP, sp_inc, wdop, intdbg, intnmi, intrq3, intrq2, intrq1, intrq0,
	isp, intack, ivack, ivack_pre, monmd, monmdstp, softbrk, intisp,
	intblock, PSW_block, skp_block, wait_block_brtf,
	stage_cut_br, pc_set_brk, pc_set_dbg,
	prefix_ack, fchiram, fchiram_skp, romrd_skp, rstvec,
	flsize, bfsize, ramsize, bmsize, wait2nd,
	exmmsk, flmask, /*decdycut,*/ brkmsk,
	flread, fchram, mem_access,
// for EVA
        svi, svvcout,
        svintack, svmod, svmodf, svmodi,
        dec_alt1, dec_alt2, alt1, alt2,
        dec_sp_inc, idpop,
        flreadb,
        ID_stage3, ID_stage2,
        prefix, pcwaitf,
        icemsknmi, icemskdbg,
        cpumisal, sprel,
        pswen,
        // Ver1.51
        ocdmod,
//
	cpuen, baseck, resb, scanmode,
	dfsize, dflen,
	sldfwait_pre, sldflash, drdclk, waitdflash,
	wed, gofirm,
	RVEON, 
	gatead1, gatead2, gatead3, mdw,
	monpc, monma, monmdr, monmdw
	);

	output	[7:0]	ID_stage1, ID_stage0, ID_stage1_dec;
	output	[7:0]	MEM_stage1, MEM_stage0;
	output	[1:0]	stage_adr;
	output	[19:0]	pc, pc_inc;
	output		pc_wait_flg, stby_wait_flg, reg_wait, pa_data_buf, pa_data_mem;
	output		pa_data_spen;
	output		pa_st2;
	output	[17:0]	pa;
	output	[15:0]	ma, ma_pre;
	output	[3:0]	exma;
	output		maw1;
	output		slmem, slflash, slreg, slmirr, slexm, slbmem, sliram;
	output		intack, ivack, ivack_pre;
	output		monmd, monmdstp, softbrk;
	output		pc_set_brk, pc_set_dbg;
	output		prefix_ack, fchiram, fchiram_skp, romrd_skp;
	output		rstvec;
	output	[1:0]	intisp;
	output		data_hazard_flg, data_hazard, sp_hazard;
	output		INT_wait, wait2ndsfr, sl2ndwait_pre;
	output		dopen;
	output		brkmsk;
	output		flread, fchram;
	output		SP_enable, CS_enable;
	output		sldfwait_pre;
	output		sldflash;
	output		drdclk;
	output	[19:0]	monpc;
	output	[15:0]	monma;
	output	[15:0]	monmdr;
	output	[15:0]	monmdw;
// for EVA
        output          svintack, svmod, svmodf, svmodi;
        output          alt1, alt2;
        output          idpop;
        output  [3:0]   flreadb;
        output  [7:0]   ID_stage3, ID_stage2;
        output          prefix, pcwaitf;
        output          cpumisal;
        output          sprel;
	output		waitdflash;
//

	input	[31:0]	pid;
	input		dec_NMIS_enable;
	input		A_access,X_access,B_access,C_access;
	input		D_access,E_access,H_access,L_access;
	input		dec_RBS_enable, INT_access;
	input		dec_SP_enable;
	input		dec_pc_inc1, dec_pc_inc2, dec_pc_inc3, dec_pc_inc4, dec_clear_stage;
	input		dec_pc_set_enable;
	input		dec_pc_set_op01, dec_pc_set_op12, dec_pc_set_op123;
	input		dec_pc_set_AX, dec_pc_set_BC, dec_pc_set_DE, dec_pc_set_HL;
	input		dec_pc_set_pc1, dec_pc_set_pc2, dec_pc_set_pc3, dec_pc_set_pc12;
	input		dec_pc_set_calt, dec_pc_set_vec;
	input		dec_pc_set_brk, dec_pc_set_dbg;
	input		dec_pc_set_ret;
	input		dec_ma_enable;
	input		dec_ma_data_sp;
	input		dec_ma_data_saddr_op1, dec_ma_data_saddr_op2;
	input		dec_ma_data_sfr_op1, dec_ma_data_sfr_op2;
	input		dec_ma_data_op12, dec_ma_data_op23;
	input		dec_ma_data_HL, dec_ma_data_HLop1, dec_ma_data_HLop2;
	input		dec_ma_data_HLB, dec_ma_data_HLC;
	input		dec_ma_data_SPop1;
	input		dec_ma_data_DE, dec_ma_data_DEop1, dec_ma_data_DEop2;
	input		dec_ma_data_BCop12, dec_ma_data_Bop12, dec_ma_data_Cop12;
	input		dec_sp_set_enable;
	input		dec_cpurd_enable, dec_cpuwr_enable;
	input		dec_mem_stage_op2, dec_mem_stage_op3, dec_mem_stage_op23;
	input		dec_prefix;
	input		stage_cut;
	input	[7:0]	A, X, B, C, D, E, H, L, buf1, buf0;
	input		MAA;
	input	[3:0]	CS, ES, buf2;
	input	[15:0]	imdr;
	input	[15:0]	dmama;
	input		dmarq, dmaack, waitdma, waitint, waitfl, waitexm, waitmod, waitmem;
	input		hltst;
	input		stbst;		// add v1.50 2007.07.02 K.Tanaka
	input	[5:0]	vcout;
	input		IE;
	input	[14:0]	SP, sp_inc;
	input		wdop;
	input	[1:0]	isp;
	input		intdbg, intnmi, intrq3, intrq2, intrq1, intrq0;
	input		intblock, PSW_block, skp_block;
	input		wait_block_brtf;
	input		stage_cut_br;
	input	[3:0]	flsize, bfsize;
	input	[7:0]	ramsize;
	input	[3:0]	bmsize;
	input	[7:0]	wait2nd;
	input		cpuwr, cpuwr_reg, cpurd;
	input		exmmsk;
	input		flmask;
//	input		decdycut;
	input		mem_access;
	input		cpuen, baseck, resb;
	input		scanmode;
	input	[1:0]	dfsize;
	input		wed;
	input		gofirm;
	input		RVEON;
	input		gatead1, gatead2, gatead3;
	input	[15:0]	mdw;
// for EVA
        input           svi;
        input   [7:0]   svvcout;
        input           dec_alt1, dec_alt2;
        input           dec_sp_inc;
        input           icemsknmi, icemskdbg;
        input           pswen;
        input           ocdmod;
	input		dflen;
//

	wire	[15:0]	ma;
	wire	[3:0]	DS;
	wire	[17:0]	pa;
	wire	[1:0]	distance_pa_pc, pa_inc_en;
	wire		pa_st0, pa_st1, pa_st2, pa_st3;
	wire		pc_jump_en, pc_jump, pa_jump_en;
	wire		inc_pa;
	wire		pc_wait_flg, stby_wait_flg;
	wire	[18:0]	adrg, adrp;
	wire		adrsp1, adrsp2, adrsp3, adrsg0, adrsg1, adrsg2, adrsg3;
	wire		adrcy1, adrcy2, adrcy3, adrcy4;
	wire	[3:0]	adrout1, adrout2, adrout3, adrout4, adrout5;
	wire	[19:0]	adrout_ma, adrout_pa;
	wire		fchiram_wait, fchiram_ramrd, fchiram_romrd, prefix_wait;
	wire		pa_data_en, pa_data_sub2, pa_data_sub4;
	wire		brunch_en;
	wire		slexm_pre, slexm_pre2;
	wire		slram, slflash, slexm;
	wire		slmem_msk;
	wire		ma_data_saddr_op1a, ma_data_saddr_op1b, ma_data_saddr_op2a, ma_data_saddr_op2b;
	wire		ma_data_adrout, pc_set_adrout;
	wire		sp_hazard_flg, data_hazard_flg;
	wire		iopen, inten, nmien;
	wire		mirror_en, slmirr;
	wire		int_suspend, nmi_suspend, dma_suspend;
	wire		data_hazard_flg_pre;
	wire		pc_set_rp;
	wire		prefix_exe;
	wire		check234map_13, check234map_12, check234map_11, check234map_10;
	wire		check234map_03, check234map_02, check234map_01;
	wire		intclk_on;
	wire		SP_enable, CS_enable;
	wire	[15:0]	imdr_groupC;
	wire		sl2ndwait_pre, sl2ndwait_0, sl2ndwait_1, sl2ndwait_2, sl2ndwait_3, sl2ndwait_4, sl2ndwait_5, sl2ndwait_6, sl2ndwait_7, sl2ndwait;
	wire		dflash_countend_b;
//	wire		sldfwait_pre;
	wire		sldfwait;
	wire		intack_internal;
	wire		gatead;

	reg	[7:0]	ID_stage3, ID_stage2, ID_stage1, ID_stage0, ID_stage1_dec;
	reg	[7:0]	MEM_stage1, MEM_stage0;
	reg	[1:0]	stage_adr;
	reg	[19:0]	pc, pc_jump_address;
	reg	[19:0]	maw;
	reg	[15:0]	ma_pre;
	reg	[3:0]	exma;
	reg		slmem_pre, slreg, slexm_en, slflash_pre;
	reg		ma_enable_fchiram;
	reg	[17:0]	pa_pre;
	reg	[31:0]	id_que1;
	reg		inc_pa_pre, inc_pa_mst, inc_pa_slv;
	reg	[1:0]	pc_wait_cnt;
	reg		pc_wait_slv;
	reg		fchiram_wait_pre;
	reg		romrd_wait;
	reg		inc_que_flg;
	reg	[19:0]	pc_inc;
	reg		intack_pre, ivack_pre, ivack_end, ivack, ivack_dly;
	reg		fchiram_pre;
	reg		ma_enable_slv;
	reg		prefix_ack, prefix_es;
	reg		pc_set_op01 ;
	reg		pc_set_brk, pc_set_dbg ;
	reg		pa_data_pre, pa_data_maw, pa_data_buf, pa_data_mem, pa_data_block;
	reg		pa_data_mlt1, pa_data_cyc1;
	reg	[19:0]	adrin1_ma, adrin1_pa, adrin2_ma, adrin2_pa, adrout_sub;
	reg		data_hazard, sp_hazard;
	reg		mkiack;
	reg		nmiack_buf, mkiack_buf;
	reg	[1:0]	intisp, intisp_pre;
	reg		int_suspend_fchiram;
	reg		inten_block, nmien_block;
	reg	[5:0]	vcode;
	reg		nmiack, dbgd, nmid, DBGS, NMIS;
	reg		monmd_pre, monmdstp_pre;
	reg		hazard_dbgintack;
	reg		softbrk;
	reg		rstvec;
	reg		SP_enable_pre, CS_enable_pre;
	reg		wait2ndsfr;
	reg		sldflash_enable;
	reg	[1:0]	dflash_count;
	reg		waitdflash;
	reg		sldflash;
	reg		drdclk;
	reg	[19:0]	pc_set_op01_data;

// for EVA
        reg             alt1i;
        reg             sviack, svintack, sviack_buf;
//

/*------------------------------------------------------------------------------*/
/* アドレス計算(メモリ用アドレス計算)                                           */
/*------------------------------------------------------------------------------*/
/* Ver2.0　メモリ用アドレス演算器を分割						*/
/*------------------------------------------------------------------------------*/
// アドレス計算器入力１を生成
// 条件付き分岐命令であった場合、条件不成立時は、pa_preを読みだす。

	always @(dec_ma_data_BCop12 or dec_ma_data_DEop1 or dec_ma_data_DEop2 or
		dec_ma_data_HLop1 or dec_ma_data_HLop2 or dec_ma_data_HLB or dec_ma_data_HLC or
		dec_ma_data_SPop1 or dec_ma_data_Bop12 or dec_ma_data_Cop12 or
		B or C or D or E or H or L or DS or SP) begin
		case(1'b1)
			dec_ma_data_BCop12      : adrin1_ma = {DS,B,C} ;
			dec_ma_data_DEop1       : adrin1_ma = {DS,D,E} ;
			dec_ma_data_DEop2       : adrin1_ma = {DS,D,E} ;
			dec_ma_data_HLop1       : adrin1_ma = {DS,H,L} ;
			dec_ma_data_HLop2       : adrin1_ma = {DS,H,L} ;
			dec_ma_data_HLB         : adrin1_ma = {DS,H,L} ;
			dec_ma_data_HLC         : adrin1_ma = {DS,H,L} ;
			dec_ma_data_SPop1       : adrin1_ma = {4'hf,SP,1'b0} ;
			dec_ma_data_Bop12       : adrin1_ma = {DS,8'h00,B} ;
			dec_ma_data_Cop12       : adrin1_ma = {DS,8'h00,C} ;
			default                 : adrin1_ma = 20'h00000 ;
		endcase
	end

// アドレス計算器入力２を生成
	always @(dec_ma_data_HLop1 or dec_ma_data_DEop1 or dec_ma_data_SPop1 or
		dec_ma_data_HLop2 or dec_ma_data_DEop2 or
		dec_ma_data_BCop12 or dec_ma_data_Bop12 or dec_ma_data_Cop12 or
		dec_ma_data_HLB or dec_ma_data_HLC or
		ID_stage1 or ID_stage2 or B or C) begin
		case(1'b1)
			dec_ma_data_HLop1       : adrin2_ma = {12'h000,ID_stage1} ;
			dec_ma_data_DEop1       : adrin2_ma = {12'h000,ID_stage1} ;
			dec_ma_data_SPop1       : adrin2_ma = {12'h000,ID_stage1} ;
			dec_ma_data_HLop2       : adrin2_ma = {12'h000,ID_stage2} ;
			dec_ma_data_DEop2       : adrin2_ma = {12'h000,ID_stage2} ;
			dec_ma_data_BCop12      : adrin2_ma = {4'h0,ID_stage2,ID_stage1} ;
			dec_ma_data_Bop12       : adrin2_ma = {4'h0,ID_stage2,ID_stage1} ;
			dec_ma_data_Cop12       : adrin2_ma = {4'h0,ID_stage2,ID_stage1} ;
			dec_ma_data_HLB         : adrin2_ma = {12'h000,B} ;
			dec_ma_data_HLC         : adrin2_ma = {12'h000,C} ;
			default                 : adrin2_ma = 20'h00000 ;
		endcase
	end

// アドレス計算

        assign adrout_ma = adrin1_ma + adrin2_ma;

/*------------------------------------------------------------------------------*/
/* アドレス計算(条件分岐用アドレス計算）                                        */
/*------------------------------------------------------------------------------*/
/* Ver2.0　プログラム用アドレス演算器を分割					*/
/*------------------------------------------------------------------------------*/

// アドレス計算器入力１を生成
// 条件付き分岐命令であった場合、条件不成立時は、pa_preを読みだす。
	always @(dec_pc_set_pc1 or dec_pc_set_pc2 or dec_pc_set_pc3 or dec_pc_set_pc12 or pc_inc) begin
		case(1'b1)
			dec_pc_set_pc1  : adrin1_pa = pc_inc ;
			dec_pc_set_pc2  : adrin1_pa = pc_inc ;
			dec_pc_set_pc3  : adrin1_pa = pc_inc ;
			dec_pc_set_pc12 : adrin1_pa = pc_inc ;
			default         : adrin1_pa = 20'h00000 ;
		endcase
	end

// アドレス計算器入力２を生成
// 分岐条件不成立時(stage_cut)に、不要なアドレス計算をさせない。
	always @(dec_pc_set_pc1 or dec_pc_set_pc2 or dec_pc_set_pc3 or dec_pc_set_pc12 or
		ID_stage1 or ID_stage2 or ID_stage3) begin
		case(1'b1)
			dec_pc_set_pc1	: adrin2_pa = {{12{ID_stage1[7]}},ID_stage1} ;
			dec_pc_set_pc2	: adrin2_pa = {{12{ID_stage2[7]}},ID_stage2} ;
			dec_pc_set_pc3	: adrin2_pa = {{12{ID_stage3[7]}},ID_stage3} ;
			dec_pc_set_pc12	: adrin2_pa = {{4{ID_stage2[7]}},ID_stage2,ID_stage1} ;
			default		: adrin2_pa = 20'h00000 ;
		endcase
	end

// アドレス計算

        assign adrout_pa = (stage_cut) ? {pa_pre[17:0],2'b0} : (adrin1_pa + adrin2_pa);

/*------------------------------------------------------------------------------*/
/* アドレス計算(RAMフェッチ時のフェッチアドレス）                               */
/*------------------------------------------------------------------------------*/
/* Ver2.0　RAMフェッチ用アドレス演算器を分割					*/
/*------------------------------------------------------------------------------*/

// RAMフェッチ制御。fchiram中はPCのカウントアップと連動させてmaもカウントアップするが、
// 命令を先読みする必要があるため、PCの指すアドレスから-4あるいは-2してmaを更新する。
// 以下は-2する場合と-4する場合の条件。基本的には交互に減算されるが、RAM空間にジャンプした直後などは-2。
// 分岐時のアドレス演算が優先されるので、分岐判定時でも、pa_data_enを有効にしても問題なし。
	assign pa_data_en = fchiram & ~(dec_ma_enable) ;
	assign pa_data_sub2 = pa_data_en & ((pc_wait_cnt[1] | pc_wait_cnt[0]) | (fchiram_wait & (pc_wait_cnt == 1))) ;
	assign pa_data_sub4 = pa_data_en & (pc_wait_cnt == 2'b0) ;

	always @(pa_data_sub2 or pa_data_sub4 or pa_pre) begin
		case(1'b1)
			pa_data_sub2	: adrout_sub = {pa_pre[17:0],2'b0} - 2 ;
			pa_data_sub4	: adrout_sub = {pa_pre[17:0],2'b0} - 4 ;
			default		: adrout_sub = 20'h00000 ;
		endcase
	end

/*------------------------------------------------------------------------------*/
/* ジャンプ命令実行フラグ							*/
/*------------------------------------------------------------------------------*/
/*   コールリターン、分岐命令でプログラムカウンタの分岐を実行するフラグを生成。	*/
/*   ＲＯＭデータアクセスの際は、プログラムアドレスのみの制御信号も生成する。	*/
/*------------------------------------------------------------------------------*/

// マルチサイクル命令の終了時にジャンプの実行許可信号。
// 条件分岐命令で条件不成立となった場合は１になり分岐の実行を抑える。
	assign brunch_en = ((stage_adr == 1) || (stage_adr == 2)) & stage_cut ;

// プログラムカウンタのジャンプ条件。
// ジャンプ実行許可状態でジャンプ命令がデコードされた場合１になる。
	assign pc_jump = (pc_set_op01 | pc_set_adrout |
			 dec_pc_set_op12 | dec_pc_set_op123 |
			 dec_pc_set_AX | dec_pc_set_BC | dec_pc_set_DE | dec_pc_set_HL |
			 dec_pc_set_calt | dec_pc_set_vec | dec_pc_set_brk | dec_pc_set_dbg) & ~brunch_en ;

// プログラムカウンタのジャンプ許可信号。
// ジャンプ命令の実行、リターン命令の実行で１になる。
// FLASHのデータによる条件分岐で条件不成立となった場合は０になる。
// SPの更新と分岐命令のHazardが発生した場合は、分岐動作の発生を送らせるため１クロック分０になる。
	assign pc_jump_en = (pc_jump | dec_pc_set_ret) & ~(pa_data_mem & ~stage_cut) & ~sp_hazard_flg;

// プログラムアドレスの不規則変化許可信号。
// FLASHにデータアクセスする際にPCを無視してPAを書き換える際に１になる。
	assign pa_jump_en = (pa_st3 & (pa_data_maw | prefix_wait | slmirr)) | pa_data_buf | pa_data_mlt1 | pa_data_cyc1 ;

/*------------------------------------------------------------------------------*/
/* ジャンプ先アドレス選択							*/
/*------------------------------------------------------------------------------*/
/*   ジャンプ先の命令メモリ(ＲＯＭ)アドレスを選択する。				*/
/*------------------------------------------------------------------------------*/

// ベクタアドレスの取り込み信号。
// 内部ウェイトで保持する為に一度受け直す。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)			pc_set_op01 <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg)	pc_set_op01 <= pc_set_op01 ;
			else			pc_set_op01 <= dec_pc_set_op01 ;
		end
	end

// ソフトウェアブレーク信号。
// 内部ウェイトで保持する為に一度受け直す。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)			pc_set_brk <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg)	pc_set_brk <= pc_set_brk ;
			else			pc_set_brk <= dec_pc_set_brk ;
		end
	end

// デバッグ割り込み信号。
// 内部ウェイトで保持する為に一度受け直す。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)			pc_set_dbg <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg)	pc_set_dbg <= pc_set_dbg ;
			else			pc_set_dbg <= dec_pc_set_dbg ;
		end
	end

// ベクタコードの取り込み。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)			vcode <= 6'b0 ;
		else if (cpuen) begin
			if (data_hazard)	vcode <= vcode ;
// for EVA
                        else if (svintack | svmod | svmodi)     vcode <= svvcout[6:1] ;
//
			else			vcode <= vcout ;
		end
	end

// PC相対の分岐命令でアドレス計算器出力を選択する条件。
	assign pc_set_adrout = dec_pc_set_pc1 | dec_pc_set_pc2 | dec_pc_set_pc3 | dec_pc_set_pc12 ;

// ジャンプ先のプログラムカウンタ値を条件に応じて設定。
/*------------------------------------------------------------------------------*/
/* Ver2.0　case文に変更（SLFLASHのスピードアップをしやすくする為		*/
/*　　　　演算器のadroutをプログラムアドレス用のadrout_paに変更			*/
/*------------------------------------------------------------------------------*/
	always @(adrout_pa or
		 pc_set_op01 or dec_pc_set_op12 or dec_pc_set_op123 or pc_set_adrout or
		 dec_pc_set_AX or dec_pc_set_BC or dec_pc_set_DE or dec_pc_set_HL or
		 dec_pc_set_calt or dec_pc_set_vec or dec_pc_set_brk or dec_pc_set_dbg or
		 dec_pc_set_ret or pc or
		 ID_stage1 or ID_stage2 or ID_stage3 or vcode or
		 A or X or B or C or D or E or H or L or CS or
		 buf2 or buf1 or buf0 or pc_set_op01_data) begin
                case(1'b1)
                        pc_set_adrout           : pc_jump_address = adrout_pa ;
//                      pc_set_op01             : pc_jump_address = {4'b0, ID_stage3, ID_stage2} ;
			pc_set_op01             : pc_jump_address = pc_set_op01_data ;
                        dec_pc_set_op12         : pc_jump_address = {4'h0, ID_stage2, ID_stage1} ;
                        dec_pc_set_op123        : pc_jump_address = {ID_stage3[3:0], ID_stage2, ID_stage1} ;
                        dec_pc_set_AX           : pc_jump_address = {CS, A, X} ;
                        dec_pc_set_BC           : pc_jump_address = {CS, B, C} ;
                        dec_pc_set_DE           : pc_jump_address = {CS, D, E} ;
                        dec_pc_set_HL           : pc_jump_address = {CS, H, L} ;
                        dec_pc_set_calt         : pc_jump_address = {4'b0, 8'h00, 2'b10, ID_stage1[1:0], ID_stage1[6:4], 1'b0} ;
                        dec_pc_set_vec          : pc_jump_address = {4'b0, 8'h00, 1'b0, vcode, 1'b0} ;
                        dec_pc_set_brk          : pc_jump_address = {4'b0, 8'h00, 8'h7e} ;
                        dec_pc_set_dbg          : pc_jump_address = {4'b0, 8'h00, 8'h02} ;
                        dec_pc_set_ret          : pc_jump_address = {buf2, buf1, buf0} ;
                        default                 : pc_jump_address = pc ;
                endcase
	end

/*------------------------------------------------------------------------------*/
/* Ver3.0 割り込み発生時のジャンプ先を変更					*/
/*　　　　pc_set_op01の時の分岐先をモード毎に定義				*/
/*------------------------------------------------------------------------------*/
	always @(svmod or pc or gofirm or monmd or ivack_dly or RVEON or wed or ID_stage2 or ID_stage3) begin
		if (!svmod) begin
			if(pc == 20'h0 & gofirm) 	pc_set_op01_data <= 20'hEFFFC ;
			else if (monmd) begin
				if(~wed)	pc_set_op01_data <= 20'hF07E0 ;
				else 		pc_set_op01_data <= 20'hEFFF4 ;
			end
			else if(RVEON & ~wed & ivack_dly)	pc_set_op01_data <= 20'hF08C0 ;
			else			pc_set_op01_data <= {4'h0, ID_stage3, ID_stage2} ;
		end
		else		pc_set_op01_data <= {4'h0, ID_stage3, ID_stage2} ;
	end
/*------------------------------------------------------------------------------*/
/* データメモリ(ＲＡＭ)からの命令フェッチ信号					*/
/*------------------------------------------------------------------------------*/
/*   プログラムカウンタがＲＡＭアドレスを指している場合、ＲＡＭフェッチモード	*/
/*   に入る。ただしＲＯＭデータアクセスの際には、このモードから抜ける。		*/
/*------------------------------------------------------------------------------*/

// PCがRAM空間を指す場合は、以下の信号が１になりRAMフェッチを開始する。
// FLASHのデータリードと割り込み処理の実行時には０になる。
// FLASHリードでfchiram信号を落とすのは、FLASHを読み出すサイクルのみ。
	assign fchiram = fchiram_pre & ~(pa_data_maw | pa_data_buf | pa_data_mlt1 | ivack) ;

// RAM空間へのフェッチアクセスを示す信号。データアクセスの場合は０になる。
// for EVA
//	assign fchram = fchiram & ~mem_access ;
        assign fchram = ((fchiram & ~mem_access) | (fchiram_pre & svintack)) ;
//

// PCがRAM空間を指していない場合、ジャンプする場合、
// ESを使ったデータアクセスでアドレスがFLASH空間を指していなかった場合に次のクロックでfchiramを０にする。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)		fchiram_pre <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg)	fchiram_pre <= fchiram_pre ;
			else if (((pc_jump_address[19:16] > flsize) & (pc_jump_address[19:10] < {4'hE,2'b11,bfsize})) ||
				 (pc_jump_address[19:16] == 4'hf)) begin
				if (dec_sp_set_enable && pa_st3 && pc_jump_en)
						fchiram_pre <= 1'b0 ;
				else		fchiram_pre <= 1'b1 ;
			end
			else	fchiram_pre <= 1'b0 ;
		end
	end

/*------------------------------------------------------------------------------*/
/* ＲＯＭデータアクセス制御							*/
/*------------------------------------------------------------------------------*/
/*   ミラー空間やＥＳを使ってＲＯＭにデータアクセスする命令が実行された場合、	*/
/*   パイプラインを引き延ばして命令バスからデータを読み出す。その際、実行	*/
/*   サイクル数に応じた制御信号を内部で生成する。				*/
/*------------------------------------------------------------------------------*/

// ミラー空間アクセス許可信号。maがミラー空間を指定した場合１になる。
// for EVA
//	assign mirror_en = (maw[19:9] >= {4'hF,3'b000,bmsize}) & (maw[19:8] < {4'hf,ramsize}) ;
        assign mirror_en = (((svmodi || svmod) && !alt1i) ? 1'b0 : ((maw[19:9] >= {4'hF,3'b000,bmsize}) & (maw[19:8] < {4'hf,ramsize}))) & ~sldfwait_pre ;
//

// ミラー空間選択信号。
// FLASHのデータリード直後、マルチサイクルでのFLASHデータアクセス時は０になる。
// FLASHリード後に、slmirrを落とすために~pa_data_memと~pa_data_mlt1を使用する。
	assign slmirr = dec_cpurd_enable & mirror_en & ~pa_data_mem & ~pa_data_mlt1 ;

// RAM空間選択信号。
// ミラー空間選択時には０になる。
	assign slram = ~slmirr & (maw[19:16] == 4'hf) ;

// 内部RAMが選択された時１となる。
	assign sliram = (
			 (( maw[15:9] < {3'b000,bmsize} ) |
			  ((maw[15:4] < {12'hFEE}) & (maw[15:8] >= {ramsize}))) &
			 ( maw[19:16] == 4'hf )) |
			(dmaack | exmmsk) ;

// for EVA

        reg             prefix;

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)                              prefix <= 1'b0 ;
                else if (cpuen) begin
                        if (pc_wait_flg)                prefix <= prefix ;
                        else if (pa_st2)                prefix <= 1'b0 ;
                        else if (pa_data_maw)           prefix <= prefix ;
                        else if (pa_data_buf)           prefix <= prefix ;
                        else if (!dec_clear_stage)      prefix <= prefix ;
                        else if (prefix_ack && fchiram && dec_ma_enable)
                                                        prefix <= prefix ;
                        else                            prefix <= dec_prefix ;
                end
        end

        wire            prefix_block;

        assign prefix_block = (ID_stage0 == 8'hFF) | ({ID_stage0,ID_stage1} == 16'h61A1) |
                                 ({ID_stage0,ID_stage1} == 16'h61B1) | ({ID_stage0,ID_stage1} == 16'h61C1) ;
//

// FLASHへのデータアクセス発生を表す信号。
// データハザードが発生した場合以外のミラー空間アクセスおよびPREFIX命令実行時に１になり、
// FLASHへのデータアクセス中は保持される。FLASHリードアクセス直後は０になる。
// マルチサイクル命令の２クロック目でもprefix_ackを立ち上げてES連動を有効にする。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)				prefix_ack <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg)			prefix_ack <= prefix_ack ;
			else if (slmirr && !data_hazard_flg)	prefix_ack <= 1'b1 ;
			else if (pa_st2)			prefix_ack <= 1'b0 ;
			else if (!dec_clear_stage && (stage_adr == 2'b00))
								prefix_ack <= prefix_ack ;
			else if (pa_data_maw)			prefix_ack <= prefix_ack ;
			else if (pa_data_buf)			prefix_ack <= prefix_ack ;
			else					prefix_ack <= dec_prefix | slmirr ;
		end
	end

// ３サイクル命令のEXMEMアクセスではアドレスがESと連動する期間を延長する。
// prefix_ackは命令キューの制御に使用しているため、個別の信号で対応する。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)			prefix_es <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg)	prefix_es <= prefix_es ;
			else if (!dec_clear_stage && (stage_adr == 2'b01))
						prefix_es <= prefix_ack ;
			else			prefix_es <= 1'b0 ;
		end
	end

// PREFIX命令はESがFLASH空間以外を指した場合は通常動作をする。
// FLASH空間を指した場合はこの信号が１となり、FLASHリード動作をする。
	assign prefix_exe = (pa_data_sub2 | pa_data_sub4) ?
	     prefix_ack & (((adrout_sub[19:16] != 4'hf) & ((adrout_sub[19:16] <= flsize) | (adrout_sub[19:10] >= {4'hE,2'b11,bfsize}))) | pa_st2 ) :
	     prefix_ack & (((maw[19:16] != 4'hf) & ((maw[19:16] <= flsize) | (maw[19:10] >= {4'hE,2'b11,bfsize}))) | pa_st2 ) ;

// PREFIX命令によるFLASHリードアクセス制御信号。
// PREFIX命令実行後に１になり、FLASHリードアクセス直後は０になる。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)				pa_data_pre <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg && dec_prefix)	pa_data_pre <= pa_data_pre ;
			else if (pa_st2)		pa_data_pre <= 1'b0 ;
			else				pa_data_pre <= dec_prefix ;
		end
	end

// PREFIX命令およびミラー空間リードアクセスの制御信号。
// PREFIX命令が実行された場合とミラー空間が選択された場合に１となる。
// データハザードが発生した場合とPREFIX命令でRAM空間にアクセスした場合は０になる。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)				pa_data_maw <= 1'b0 ;
		else if (cpuen) begin
// for EVA
//			if (slram | slexm_pre | pa_data_maw | pa_data_buf | data_hazard_flg)
                        if (slram | slexm_pre | pa_data_maw | pa_data_buf | data_hazard_flg | prefix_block)
//
								pa_data_maw <= 1'b0 ;
			else if (pc_wait_flg && dec_prefix)	pa_data_maw <= pa_data_maw ;
			else					pa_data_maw <= pa_data_pre | slmirr ;
		end
	end

// PIDバスのデータをバッファに格納する制御信号。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)	pa_data_buf <= 1'b0 ;
		else if (cpuen) pa_data_buf <= pa_data_maw ;
	end

// FLASHへのデータアクセスがマルチサイクル命令で実行された事を表す信号。
// FLASHリードのマルチサイクル命令である事を示す。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)	pa_data_mlt1 <= 1'b0 ;
		else if (cpuen) begin
			if (!dec_clear_stage)	pa_data_mlt1 <= pa_data_buf | pa_data_mem ;
			else 			pa_data_mlt1 <= 1'b0 ;
		end
	end

// FLASHへのデータアクセスが２クロック命令で実行された事を表す信号。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)	pa_data_cyc1 <= 1'b0 ;
		else if (cpuen) begin
			if (!dec_clear_stage) pa_data_cyc1 <= pa_data_mlt1 ;
			else pa_data_cyc1 <= 1'b0 ;
		end
	end

// バッファに取り込んだFLASHのデータを書き戻す制御信号。
// マルチサイクル命令によるFLASHアクセスだった場合は複数クロック立ち上がる。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)	pa_data_mem <= 1'b0 ;
		else if (cpuen) begin
			if (pc_jump_en) pa_data_mem <= 1'b0 ;
			else  pa_data_mem <= pa_data_buf | (pa_data_mlt1 & dec_clear_stage) | pa_data_cyc1 ;
		end
	end

// FLASHへのリードアクセス命令終了直前で立ち上がり、割り込み受け付けをブロックする。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)	pa_data_block <= 1'b0 ;
		else if (cpuen) begin
			if (pa_data_block || (stage_adr != 2'b0)) pa_data_block <= 1'b0 ;
			else pa_data_block <= pa_data_mem ;
		end
	end

// FLASHへのデータアクセスサイクルを示す信号。
	assign flread = pa_data_maw | pa_data_buf ;

// for EVA

        reg     [3:0]   flreadb;

        always @(flread or ma or wdop) begin
                if (flread) begin
                        casex ({wdop,ma[1:0]})
                                3'b0_00 : flreadb = 4'b0001 ;
                                3'b0_01 : flreadb = 4'b0010 ;
                                3'b0_10 : flreadb = 4'b0100 ;
                                3'b0_11 : flreadb = 4'b1000 ;
                                3'b1_00 : flreadb = 4'b0011 ;
                                3'b1_10 : flreadb = 4'b1100 ;
                                default : flreadb = 4'b0000 ;
                        endcase
                end
                else    flreadb = 4'b0000 ;
        end
//

// SPの更新を例外的に許すために、FLASHのデータアクセス直後に分岐した事を検出する。
// ただし、SP操作命令実行中であった場合は上記の操作は無効とする。
	assign pa_data_spen = pa_data_block & ~SP_enable ;

// FLASHフェッチ中にFLASHへデータアクセスした場合１となる。
// 命令実行をNOPに置き換えるスキップ要因。
	assign romrd_skp = pa_data_mem & ~pa_data_mlt1 ;

/*------------------------------------------------------------------------------*/
/* ＲＡＭアドレス選択								*/
/*------------------------------------------------------------------------------*/
/*   ＲＡＭアドレスを選択する。ＰＲＥＦＩＸ命令直後であればＥＳと連動する。	*/
/*------------------------------------------------------------------------------*/

// ４通りのsaddrアクセスを表す信号。
	assign ma_data_saddr_op1a = dec_ma_data_saddr_op1 & (ID_stage1[7:5] == 3'b000) ;
	assign ma_data_saddr_op1b = dec_ma_data_saddr_op1 & ~(ID_stage1[7:5] == 3'b000) ;
	assign ma_data_saddr_op2a = dec_ma_data_saddr_op2 & (ID_stage2[7:5] == 3'b000) ;
	assign ma_data_saddr_op2b = dec_ma_data_saddr_op2 & ~(ID_stage2[7:5] == 3'b000) ;

// データセグメント。PREFIX命令実行時にはESに置き換わる。
// for EVA
//	assign DS = (prefix_ack || prefix_es) ? ES : 4'hf ;
        assign DS = ((prefix_ack || prefix_es) && ~prefix_block) ? ES : 4'hf ;
//

// アドレス計算器出力をmaとして選択する信号。
	assign ma_data_adrout = dec_ma_data_HLop1 | dec_ma_data_HLop2 |
				dec_ma_data_HLB | dec_ma_data_HLC |
				dec_ma_data_DEop1 | dec_ma_data_DEop2 | dec_ma_data_SPop1 |
				dec_ma_data_BCop12 | dec_ma_data_Bop12 | dec_ma_data_Cop12 ;

// アドレスを条件に応じて設定する。
// Hazardが発生した場合やRAMフェッチ中にSPの更新と分岐命令のHazardが発生した場合は、
// 不正なメモリアクセスを防ぐため０になる。この場合SLMEMも０になる。
/*------------------------------------------------------------------------------*/
/* Ver2.0　pa_data_sub2,sub4のRAMフェッチ時の経路をma_preにダイレクトに接続する	*/
/*　　　　その為にmawからは削除する。mawがSLFLASHの条件に絡むため、SLFLASHの	*/
/*　　　　スピードアップを行なう。						*/
/*　　　　演算器のadroutをメモリアドレス用のadrout_maに変更			*/
/*------------------------------------------------------------------------------*/
	always @(adrout_ma or DS or ma or D or E or H or L or
		 ID_stage1 or ID_stage2 or ID_stage3 or
		 dec_ma_data_sfr_op1 or dec_ma_data_sfr_op2 or
		 ma_data_saddr_op1a or ma_data_saddr_op2a or ma_data_saddr_op1b or ma_data_saddr_op2b or
		 dec_ma_data_op12 or dec_ma_data_op23 or dec_ma_data_DE or dec_ma_data_HL or
		 dec_ma_data_sp or ma_data_adrout or pc_jump_en or
		 sp_inc or sp_hazard_flg or data_hazard_flg or fchiram) begin
		if (data_hazard_flg && ~(fchiram && pc_jump_en && ~sp_hazard_flg))
						maw = 20'h00000 ;
		else if (ma_data_adrout)	maw = adrout_ma ;
		else if (ma_data_saddr_op1a)	maw = {DS, 8'hff, ID_stage1} ;
		else if (ma_data_saddr_op1b)	maw = {DS, 8'hfe, ID_stage1} ;
		else if (ma_data_saddr_op2a)	maw = {DS, 8'hff, ID_stage2} ;
		else if (ma_data_saddr_op2b)	maw = {DS, 8'hfe, ID_stage2} ;
		else if (dec_ma_data_sfr_op1)	maw = {DS, 8'hff, ID_stage1} ;
		else if (dec_ma_data_sfr_op2)	maw = {DS, 8'hff, ID_stage2} ;
		else if (dec_ma_data_op12)	maw = {DS, ID_stage2, ID_stage1} ;
		else if (dec_ma_data_op23)	maw = {DS, ID_stage3, ID_stage2} ;
		else if (dec_ma_data_DE)	maw = {DS, D, E} ;
		else if (dec_ma_data_HL)	maw = {DS, H, L} ;
		else if (dec_ma_data_sp)	maw = {DS, sp_inc, 1'b0} ;
		else				maw = 20'h00000 ;
	end

// FLASHデータリード時にバッファに取り込むPIDバスの上位側か下位側かを選択する信号。
	assign maw1 = maw[1] ;

// for EVA

        reg             sprel;

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb) begin
                        sprel <= 1'b0 ;
                end
                else if (cpuen) begin
                        if (reg_wait) begin
                                sprel <= sprel ;
                        end
                        else begin
                                sprel <= dec_ma_data_SPop1 ;
                        end
                end
        end
//

/*------------------------------------------------------------------------------*/
/* ＲＡＭアドレスレジスタ							*/
/*------------------------------------------------------------------------------*/
/*   ＲＡＭアドレスを格納する。アドレスがメモリ空間のどの領域を指しているかを	*/
/*   判定する。ＲＡＭフェッチ中ＲＡＭデータアクセスが発生した場合は、		*/
/*   パイプラインを引き延ばす制御信号を生成する。				*/
/*------------------------------------------------------------------------------*/

// FLASHへのフェッチアクセスを表す信号。
// PAがFLASH空間を指していて、かつインクリメントする時１になる。
// RAMフェッチ中などFLASHにフェッチアクセスしない場合は０になる。
// for EVA
        wire erea_flash = (svmodf & ~(alt1i & alt1)) ? (pa[17:14] != 4'hf) :
                                                        ((pa[17:14] <= flsize) || (pa[17:8] >= {4'hE,2'b11,bfsize}) && (pa[17:14] != 4'hf)) ;
//
// PAがフラッシュ空間を指している事が絶対条件。
// かつ、プリフェッチ状態(~pa_st3)、またはPA更新時(inc_pa)、または分岐実行時(pc_jump_en)、
// またはFLASHデータアクセス時にSLFLASHを更新する。
// ただし、FLASHデータアクセス命令がマルチサイクル命令だった場合は、保持する必要がある。
/*------------------------------------------------------------------------------*/
/* Ver2.0　SLFLASHのスピードアップのため、ネックとなるslmirr、prefix_waitの信号	*/
/*　　　　の経路を切る。							*/
/*        slmirrはFlashリードの１発目に立ち、論理が大きいので変化スピードが遅い	*/
/*　　　　１発目のデータは元々使用していないため、他の信号に変更する。		*/
/*　　　　代わりにpa_data_maw(２発目）、pa_data_buf(３発目)を使用する。		*/
/*------------------------------------------------------------------------------*/
// for EVA
//	always @(pa or flsize or bfsize or pa_st3 or inc_pa or pc_jump_en or pa_data_maw or pa_data_buf) begin
        always @(erea_flash or pa_st3 or inc_pa or pc_jump_en or pa_data_maw or pa_data_buf) begin
//
// for EVA
//		if (((pa[17:14] <= flsize) || (pa[17:8] >= {4'hE,2'b11,bfsize}) && (pa[17:14] != 4'hf))) begin
                if (erea_flash) begin
//
//			slflash_pre = ~pa_st3 | inc_pa | pc_jump_en | slmirr | prefix_wait ;
			slflash_pre = ~pa_st3 | inc_pa | pc_jump_en | pa_data_maw | pa_data_buf ;
//
		end
		else begin
			slflash_pre = 1'b0 ;
		end
	end

// FLASHリードがマルチサイクル命令であった場合(pa_data_mlt1)は、SLFLASH信号を立ち下げ、PIDデータを保持する。
// ただし、分岐時(pc_jump_en)は分岐するので、保持しない。
	assign slflash = ((slflash_pre & ~(pa_data_mlt1 & ~pc_jump_en)) | (pc == 0)) & flmask ;

// 外部メモリへのフェッチ／データアクセス条件で１となる。
	always @(fchiram or dec_cpurd_enable or dec_cpuwr_enable or pa_st2) begin
		if (fchiram) begin
			slexm_en = (dec_cpuwr_enable & ~pa_st2) | (dec_cpurd_enable | ~dec_cpuwr_enable | pa_st2) ;
		end
		else begin
			slexm_en = dec_cpuwr_enable | dec_cpurd_enable ;
		end
	end

// 外部メモリ空間選択信号。FLSIZE信号により選択された範囲で１となる。
// DMA転送中は０となり。DMAと外部バスサイクルとの競合を避ける。
/*------------------------------------------------------------------------------*/
/* Ver2.0　maw(データリード)の経路より、RAMフェッチ時の演算器を別にした。	*/
/*　　　　その為、外部メモリフェッチ時はadrout_subを使用するため、その選択信号	*/
/*        を追加。								*/
/*------------------------------------------------------------------------------*/
// for EVA
//	assign slexm_pre = slexm_en & ((maw[19:16] > flsize) &	
//                (maw[19:10] < {4'hE,2'b11,bfsize}) & (maw[19:16] != 4'hf)) & ~(exmmsk | dmaack) ;
//	assign slexm_pre2 = slexm_en & ((adrout_sub[19:16] > flsize) &
//		(adrout_sub[19:10] < {4'hE,2'b11,bfsize}) & (adrout_sub[19:16] != 4'hf)) & ~(exmmsk | dmaack) ;
//
// for EVA
        wire erea_exmem = (svmodf & ~(alt1)) ? 1'b0 : ((maw[19:16] > flsize) & 
                (maw[19:10] < {4'hE,2'b11,bfsize}) & (maw[19:16] != 4'hf)) ;
        wire erea_exmem2= (svmodf & ~(alt1)) ? 1'b0 : ((adrout_sub[19:16] > flsize) & 
                (adrout_sub[19:10] < {4'hE,2'b11,bfsize}) & (adrout_sub[19:16] != 4'hf)) ;
//        assign slexm_pre = slexm_en & erea_exmem & ~(exmmsk | dmaack | wait2ndsfr) ;
//        assign slexm_pre2 = slexm_en & erea_exmem2 & ~(exmmsk | dmaack | wait2ndsfr) ;
        assign slexm_pre = slexm_en & erea_exmem & ~(exmmsk | dmaack | wait2ndsfr | waitdflash) ;
        assign slexm_pre2 = slexm_en & erea_exmem2 & ~(exmmsk | dmaack | wait2ndsfr | waitdflash) ;
//
	assign slexm = (pa_data_sub2 | pa_data_sub4) ?
			slexm_pre2 & ~(dec_ma_enable & fchiram & pc_wait_flg) :
			slexm_pre & ~(dec_ma_enable & fchiram & pc_wait_flg) ;

// RAMアドレスと空間選択信号。割り込みやジャンプ命令のハザードと内部ウェイト発生時には保持される。
/*------------------------------------------------------------------------------*/
/* Ver2.0　SLFLASHのスピードアップのため、pa_data_sub2,pa_data_sub4(RAMフェッチ)*/
/*　　　　の際はアドレス演算器を専用に持ち、直接adrout_subを入力するように変更。*/
/*        dec_ma_enable時にma_preにmawの値を入れているが、ハザード発生時に０に	*/
/*　　　　なってしまう。mawがハザード発生時に０にしているが、ma_preにはハザード	*/
/*　　　　時の処理が入っていないためである。そこでmawのハザード条件発生時と同じ	*/
/*　　　　論理でma_preの値を変えないようにする。				*/
/*------------------------------------------------------------------------------*/
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) begin
			exma <= 4'h0 ;
			ma_pre <= 16'h0000 ;
			slmem_pre <= 1'b0 ;
			slreg <= 1'b0 ;
		end
		else if (cpuen) begin
			if ((dec_pc_set_ret && pc_wait_flg) ||
			    (dec_sp_set_enable && (pc_wait_slv && !(data_hazard || sp_hazard)))) begin
				exma <= exma ;
				ma_pre <= ma_pre ;
				slmem_pre <= slmem_pre ;
				slreg <= slreg ;
			end
			else if ((pa_data_sub2 || pa_data_sub4) & ~(pc_set_adrout & ~stage_cut)) begin
				exma <= adrout_sub[19:16] ;
				ma_pre <= adrout_sub[15:0] ;
				if ((adrout_sub[19:16] == 4'hf) & !mirror_en) slmem_pre <= 1'b1 ;
				else                                          slmem_pre <= 1'b0 ;
				slreg <= 1'b0 ;
			end
			else if (dec_ma_enable || fchiram) begin
				exma <= maw[19:16] ;
				if (data_hazard_flg && ~(fchiram && pc_jump_en && ~sp_hazard_flg)) ma_pre <= ma_pre;
				else ma_pre <= maw[15:0] ;
				if (maw[19:5] == 15'h7ff7) begin
					slmem_pre <= 1'b0 ;
					slreg <= 1'b1 ;
				end
				else if ((maw[19:16] == 4'hf) & !mirror_en) begin
					slmem_pre <= 1'b1 ;
					slreg <= 1'b0 ;
				end
				else begin
					slmem_pre <= 1'b0 ;
					slreg <= 1'b0 ;
				end
			end
		end
	end

// RAMフェッチ中のRAMアクセス時の保持信号。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)	ma_enable_fchiram <= 1'b0 ;
		else if (cpuen)	ma_enable_fchiram <= dec_ma_enable & fchiram ;
	end

// slmemのマスクは多重アクセスを防ぐ。
// しかし、メモリ選択信号は、レジスタ出力でなくてはいけないため、pc_wait_cntを使う。
// RAMフェッチ中にHALT/STOPに移行した場合は、RAMへのフェッチアクセスを防ぐ。
	assign slmem_msk = (ma_enable_fchiram & (pc_wait_cnt[1] | pc_wait_cnt[0])) | waitfl | stbst ;	// add stbst v1.50 2007.07.02 K.Tanaka

// RAM空間選択信号。CPUWRかCPURDが１の時に立つ。
// DMA転送中は無条件でSLMEMを１にする。
	assign slmem = (slmem_pre & (cpuwr | cpurd) & ~(slmem_msk)) | waitdma ;

// 実際に出力されるma。ワードアクセス時は最下位ビットが０固定になり奇数番地へのアクセスを禁止する。
// DMA転送時はdmamaを出力する。この時も奇数番地へのワードアクセスは禁止。
	assign ma = (waitdma) ? (wdop) ? {dmama[15:1],1'b0} : dmama : 
				(wdop) ? {ma_pre[15:1],1'b0} : ma_pre ;

// for EVA
        wire            cpumisal;

	// for EVA Ver2.01 RAMフェッチ中はデータアクセスのみに限定する。
        // assign cpumisal = wdop & ma_pre[0] & (cpuwr | cpurd) ;
	assign cpumisal = (!fchiram) ?  wdop & ma_pre[0] & (cpuwr | cpurd) :
					wdop & ma_pre[0] & (cpuwr | cpurd) & ma_enable_fchiram ;
//

// RAMフェッチ中にRAMへのデータアクセスが発生した場合、
// 以下の信号で命令キュー、パイプラインレジスタの制御を行なう。
// RAMフェッチで通常の条件分岐で分岐しない場合、この処理は不要だが、
// FLASHデータを参照した場合は、PAの読み直し処理を２クロック幅で実現する。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)				ma_enable_slv <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg)		ma_enable_slv <= ma_enable_slv ;
			else if (dec_clear_stage)	ma_enable_slv <= (dec_ma_enable & ~pc_jump_en) | pa_data_mlt1 ;
		end
	end

/*------------------------------------------------------------------------------*/
/* Ver2.0 2ndSFRウエイト発生信号						*/
/*------------------------------------------------------------------------------*/
/*   NPBマクロを搭載する際のウエイト発生のため、2ndSFRへのアクセス時にウエイト	*/
/*   を発生させる。								*/
/*     F0000-F00FF  WAIT2ND0=1でウエイト					*/
/*     F0100-F01FF  WAIT2ND1=1でウエイト					*/
/*     F0200-F02FF  WAIT2ND2=1でウエイト					*/
/*     F0300-F03FF  WAIT2ND3=1でウエイト					*/
/*     F0400-F04FF  WAIT2ND4=1でウエイト					*/
/*     F0500-F05FF  WAIT2ND5=1でウエイト					*/
/*     F0600-F06FF  WAIT2ND6=1でウエイト					*/
/*     F0700-F07FF  WAIT2ND7=1でウエイト					*/
/*										*/
/*  exmmsk信号にはwaitexmは入っていない。その為にwaitexmを追加する必要あり。	*/
/*------------------------------------------------------------------------------*/

	assign sl2ndwait_0 = (maw[10:8] == 3'b000) & wait2nd[0] ;
	assign sl2ndwait_1 = (maw[10:8] == 3'b001) & wait2nd[1] ;
	assign sl2ndwait_2 = (maw[10:8] == 3'b010) & wait2nd[2] ;
	assign sl2ndwait_3 = (maw[10:8] == 3'b011) & wait2nd[3] ;
	assign sl2ndwait_4 = (maw[10:8] == 3'b100) & wait2nd[4] ;
	assign sl2ndwait_5 = (maw[10:8] == 3'b101) & wait2nd[5] ;
	assign sl2ndwait_6 = (maw[10:8] == 3'b110) & wait2nd[6] ;
	assign sl2ndwait_7 = (maw[10:8] == 3'b111) & wait2nd[7] ;

	assign sl2ndwait_pre = slexm_en & (maw[19:12] == 8'hf0) & (maw[11] == 1'b0) &
		(sl2ndwait_0 | sl2ndwait_1 | sl2ndwait_2 | sl2ndwait_3 | sl2ndwait_4 | sl2ndwait_5 | sl2ndwait_6 | sl2ndwait_7);

	assign sl2ndwait = sl2ndwait_pre & ~(dec_ma_enable & fchiram & pc_wait_flg) & ~(exmmsk | waitexm | waitdflash);

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if      (!resb)      wait2ndsfr <= 1'b0 ;
		else if (wait2ndsfr) wait2ndsfr <= waitmem ;
		else if (sl2ndwait)  wait2ndsfr <= 1'b1 ;
		else                 wait2ndsfr <= 1'b0 ;
	end

/*------------------------------------------------------------------------------*/
/* Ver3.0 Data_Flashウエイト発生信号						*/
/*------------------------------------------------------------------------------*/
/*   DataFlashアクセス時は1クロックアクセスではスピードネックにるためウェイト	*/
/*   対応を実施。								*/
/*     none  :		      DFSIZE[1:0] = 2'h00;				*/
/*     4K    : F1000H-F1FFFH  DFSIZE[1:0] = 2'h01;				*/
/*     8K    : F1000H-F2FFFH  DFSIZE[1:0] = 2'h10;				*/
/*     16K   : F1000H-F4FFFH  DFSIZE[1:0] = 2'h11;				*/
/*  exmmsk信号にはwaitexmは入っていない。その為にwaitexmを追加する必要あり。	*/
/*------------------------------------------------------------------------------*/

	always @(dfsize[1:0] or maw[14:12]) begin
		casex ({dfsize[1:0], maw[14:12]})
			{2'b00,3'bxxx} : sldflash_enable = 1'b0;
			{2'b01,3'b001} : sldflash_enable = 1'b1; /* F1000H-F1FFFH */
			{2'b10,3'b001} : sldflash_enable = 1'b1; /* F1000H-F2FFFH */
			{2'b10,3'b010} : sldflash_enable = 1'b1; /* F1000H-F2FFFH */
			{2'b11,3'b001} : sldflash_enable = 1'b1; /* F1000H-F4FFFH */
			{2'b11,3'b010} : sldflash_enable = 1'b1; /* F1000H-F4FFFH */
			{2'b11,3'b011} : sldflash_enable = 1'b1; /* F1000H-F4FFFH */
			{2'b11,3'b100} : sldflash_enable = 1'b1; /* F1000H-F4FFFH */
			default : sldflash_enable = 1'b0;
		endcase
	end

	assign sldfwait_pre = slexm_en & (maw[19:16] == 4'hf) & (maw[15] == 1'b0) & sldflash_enable;

	assign sldfwait = sldfwait_pre & ~(dec_ma_enable & fchiram & pc_wait_flg) & ~(exmmsk | waitexm | wait2ndsfr);

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if      (!resb)      		waitdflash <= 1'b0 ;
		else begin
			if (waitdflash) 	waitdflash <= dflash_countend_b ;
			else if (sldfwait)   	waitdflash <= 1'b1 ;
			else                 	waitdflash <= 1'b0 ;
		end
	end

	always @(posedge baseck or negedge resb) begin
		if	(!resb)	     		dflash_count <= 2'b10 ;
		else begin
			if (waitdflash) begin
				if (dflash_count == 2'b00)
					dflash_count <= 2'b10 ;
				else	dflash_count <= dflash_count - 1'b1 ;
			end
			else		     	dflash_count <= 2'b10 ;
		end
	end

	assign	dflash_countend_b = dflash_count[1] | dflash_count[0] ;

/*------------------------------------------------------------------------------*/
/* Ver3.0 SLDFLASH : DataFlashアクセス信号					*/
/*------------------------------------------------------------------------------*/

	always @(posedge baseck or negedge resb) begin
		if	(!resb)		sldflash <= 1'b0 ;
		else if	(dflen) begin
			if 	(!sldflash)	sldflash <= sldfwait ;
			else begin
				if (sldfwait || waitdflash)	sldflash <= 1'b1 ;
				else				sldflash <= 1'b0 ;
			end
		end
		else		sldflash <= 1'b0 ;
	end

/*------------------------------------------------------------------------------*/
/* Ver3.0 DRDCLK : DataFlashアクセス信号					*/
/*------------------------------------------------------------------------------*/

	always @(posedge baseck or negedge resb) begin
		if (!resb)		drdclk <= 1'b1 ;
		else if (dflen) begin
			if (waitdflash) begin
				if (dflash_count == 2'b01)	drdclk <= 1'b1 ;
				else				drdclk <= 1'b0 ;
			end
			else		drdclk <= 1'b1 ;
		end
		else			drdclk <= 1'b1 ;
	end

/*------------------------------------------------------------------------------*/
/* Ver2.0 SP,CSレジスタアクセス信号						*/
/*------------------------------------------------------------------------------*/
/*   SP,CSレジスタはハザード要因を作るため、SLFLASHへのタイミングネックパスと	*/
/*   なる。そのため、MEMステージではなく、ADRステージでデコードを行なう。	*/
/*------------------------------------------------------------------------------*/
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) begin
			SP_enable_pre <= 1'b0 ;
			CS_enable_pre <= 1'b0 ;
		end
		else if (cpuen & dec_ma_enable) begin
			if (maw[19:1] == 19'h7fffc) SP_enable_pre <= 1'b1 ;	//SPアドレス：FFFF8,FFFF9
			else                        SP_enable_pre <= 1'b0 ;
			if (maw[19:0] == 20'hffffc) CS_enable_pre <= 1'b1 ;	//CSアドレス：FFFFC
			else                        CS_enable_pre <= 1'b0 ;
		end
	end
	assign SP_enable = dec_SP_enable | (cpuwr_reg & SP_enable_pre);
	assign CS_enable = cpuwr_reg & CS_enable_pre;

/*------------------------------------------------------------------------------*/
/* 内部ウェイト制御								*/
/*------------------------------------------------------------------------------*/
/*   ハザード発生時、ＲＡＭへのフェッチアクセス時、ＲＯＭデータアクセス時、	*/
/*   ＤＭＡ発生時に内部ウェイト信号を発生させる。				*/
/*   ウェイト発生要因の種類によってウェイト時間を制御する。			*/
/*------------------------------------------------------------------------------*/

// RAMフェッチ中の内部ウェイト発生要因。
// RAMフェッチ中の条件分岐、FLASHリードなどを除くRAMアクセスを表す信号。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)				fchiram_wait_pre <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg)		fchiram_wait_pre <= fchiram_wait_pre ;
			else if (((pa_inc_en == 2'h1) || ((dec_ma_enable || stage_cut_br) && (dec_clear_stage || stage_cut)))
				 && (pa_inc_en != 2'h0) && ~(pa_data_buf && !inc_pa))
							fchiram_wait_pre <= 1'b1 ;
			else 				fchiram_wait_pre <= 1'b0 ;
		end
	end

// RAMフェッチ中の内部ウェイト信号。PCの下位２ビットが2'b11だった場合で、
// 上記の条件を満たしていれば内部ウェイトが発生する。ウェイト時間は２クロック。
// fchiram_ramrdは、４バイト命令と、PC下２桁が2'b11のアドレスへ分岐した時に立つ。
// ウェイトを挿入し、RAMフェッチ時のバス幅補正を行なう。
	assign fchiram_wait = fchiram & pc[1] & pc[0] & ~dec_ma_enable & (dec_pc_inc4 || pa_st2) ;

// RAMフェッチ中の内部ウェイト信号がRAMアクセスで発生した場合１となる。
	assign fchiram_ramrd = fchiram_wait & ma_enable_slv ;

// RAMフェッチ中にFLASHリードアクセスで発生した場合１となる。
	assign fchiram_romrd = fchiram & prefix_exe & ~inc_pa_mst ;

// FLASHへのリードアクセス時に発生する内部ウェイト要因。ウェイト時間は２クロック。
// for EVA
//	assign prefix_wait = prefix_ack & (pa_data_pre | pa_data_maw | pa_data_buf) & ~slram & ~slexm_pre ;
        assign prefix_wait = prefix_ack & (pa_data_pre | pa_data_maw | pa_data_buf) & ~slram & ~slexm_pre & ~prefix_block ;
//

// FLASHフェッチ中のFLASHへのリードアクセス時に１となる。
// 内部ウェイト発生要因ではない。PAのインクリメントや命令キューの転送を制御する。
// FLASHへのデータアクセス時のPIDデータ取り直しで発生する。通常この信号が０でも
// PIDデータの取り直し様に１クロックのウェイトが入る。しかし、FLASHアクセス命令実行時に、
// PAのインクリメントが無い場合は、PIDデータ取り直しのウェイトが不要だが、
// 実行クロック数を合わせるために個の信号でウェイトを挿入する。特殊な制御を要するケース。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)				romrd_wait <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg & fchiram)	romrd_wait <= romrd_wait ;
			else if (~fchiram & (pa_data_buf || pa_data_mlt1 || pa_data_cyc1) & ~inc_pa)
							romrd_wait <= 1'b1 ;
			else 				romrd_wait <= 1'b0 ;
		end
	end

// 実際の内部ウェイト信号。データハザード発生時はかならず１になる。
// その他の要因は内部ウェイト直後でない場合に１となる。
	assign pc_wait_flg = (((fchiram & ~pa_st0) | prefix_wait | (slmirr & ~pa_data_mlt1)) & ~pc_wait_slv) | data_hazard_flg ;

/*------------------------------------------------------------------------------*/
/* Ver2.0 stbyの信号がSLFLASHに絡みスピードネックとなるため、ハザード条件を	*/
/*　　　　抜いたstby_wait_flgを作成。						*/
/*------------------------------------------------------------------------------*/
	assign stby_wait_flg = fchiram & ~pa_st0 & ~pc_wait_slv ;

// 割り込み動作とINTマクロのIF/MKレジスタ、PSWへのライトアクセスが競合する場合を想定して
// 外部ウェイトを発生させる。ただしRETI/RETB命令、内部ウェイトでは発生しない。
	assign INT_wait = (INT_access | (slmem_pre & cpuwr & ((ma[15:0] == 16'hfffa) | (ma[15:4] == 12'hffe) | (ma[15:4] == 12'hffd))))
			 & ~({ID_stage0,ID_stage1} == 16'h61FC) & ~({ID_stage0,ID_stage1} == 16'h61EC) & (stage_adr != 2'h3) & ~reg_wait
			 & ~wait_block_brtf ;

// for EVA
        wire            fchram_mask;
        wire            pcwaitf_maccess;
        wire            pcwaitf_pre;
        reg             waitexm_ice;

        // WAITEXMをラッチした信号。PCWAITF信号のマスクに使用する。
        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)      waitexm_ice <= 1'b0 ;
                else            waitexm_ice <= waitexm ;
        end

        assign fchram_mask = fchiram & (pc_jump_address[19:16] <= flsize) & (stage_adr == 2'h3) ;

        // フェッチバスを使用するデータアクセスに対してPCWAITFをマスクする。
        assign pcwaitf_maccess = fchiram_skp | romrd_skp | (slexm & fchiram & dec_ma_enable) ;

        assign pcwaitf_pre = ((pc_wait_flg | pa_st2 | pa_st1 | pa_st0 | waitint) & (stage_adr == 2'h0)) | pcwaitf_maccess |
                             ((stage_adr == 2'h1) & fchiram & pc_wait_flg) | fchram_mask | (fchiram & waitdma) | waitfl ;

        // RAM(EXMEM)フェッチ中のEXMEMアクセスでPCWAITFをマスクする。ただしフェッチアクセスはマスクしない。
        assign pcwaitf = pcwaitf_pre & ~(~fchram & (waitexm | waitexm_ice) & pa_st3) ;

//

// 内部ウェイト信号のウェイト時間をカウントする。
// ただし、ハザード発生直後やRAMフェッチ中のウェイト発生直後のミラーアクセス時には、
// ウェイト解除信号の発生を防ぐためカウント値は保持される。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)		pc_wait_cnt <= 2'h0 ;
		else if (cpuen) begin
			if (pc_wait_slv)	pc_wait_cnt <= 2'h0 ;
			else if ((data_hazard || (fchiram && (pc_wait_cnt == 2'h1))) && slmirr) pc_wait_cnt <= pc_wait_cnt ;
			else if (pc_wait_flg)	pc_wait_cnt <= pc_wait_cnt + 2'h1 ;
		end
	end

// 内部ウェイト発生解除信号。ウェイト要因に対応したクロック数をカウントしたら１になる。
	always @(pc_wait_cnt or fchiram_wait or prefix_wait or slmirr) begin
		if (slmirr)		pc_wait_slv = (pc_wait_cnt == 2'h2) ;
		else if (prefix_wait)	pc_wait_slv = (pc_wait_cnt == 2'h2) ;
		else if (fchiram_wait)	pc_wait_slv = (pc_wait_cnt == 2'h2) ;
		else			pc_wait_slv = (pc_wait_cnt == 2'h1) ;
	end

/*------------------------------------------------------------------------------*/
/* ＲＯＭアドレスのインクリメント信号を生成					*/
/*------------------------------------------------------------------------------*/
/*   フェッチアクセスするＲＯＭアドレスのインクリメント条件をプログラムカウンタ	*/
/*   の下位２ビットと現在実行している命令の命令長で生成する。			*/
/*------------------------------------------------------------------------------*/

// PAのインクリメント条件。
// PAを更新する条件を満たしていても、ハザードが発生していた場合は、
// PAの更新を実行しない。
	always @(pc or dec_pc_inc1 or dec_pc_inc2 or dec_pc_inc3 or dec_pc_inc4) begin
		casex ({pc[1:0],dec_pc_inc1,dec_pc_inc2,dec_pc_inc3,dec_pc_inc4})
			6'b00_0001 : inc_pa_pre	= 1'b1 ;
			6'b01_0001 : inc_pa_pre	= 1'b1 ;
			6'b01_0010 : inc_pa_pre	= 1'b1 ;
			6'b10_0001 : inc_pa_pre	= 1'b1 ;
			6'b10_0010 : inc_pa_pre	= 1'b1 ;
			6'b10_0100 : inc_pa_pre	= 1'b1 ;
			6'b11_0001 : inc_pa_pre	= 1'b1 ;
			6'b11_0010 : inc_pa_pre	= 1'b1 ;
			6'b11_0100 : inc_pa_pre	= 1'b1 ;
			6'b11_1000 : inc_pa_pre	= 1'b1 ;
			default   : inc_pa_pre = 1'b0 ;
		endcase
	end

	assign	inc_pa = inc_pa_pre & ~data_hazard_flg ;

/*------------------------------------------------------------------------------*/
/* ＲＯＭアドレスのインクリメント情報						*/
/*------------------------------------------------------------------------------*/
/*   ＲＯＭアドレスがインクリメントされた情報を２命令分保持する。		*/
/*   ＲＯＭアドレスが２回連続でインクリメントされた事を示す信号を生成する。	*/
/*   これらの信号で、命令キューの転送、パイプラインへの命令供給を制御する。	*/
/*------------------------------------------------------------------------------*/

// １命令前にPAがインクリメントされた事を表す信号。
// データバザードを除くウェイト発生時とマルチサイクル命令以外のFLASHリードアクセスまたは、
// RAMフェッチ中のFLASHリードとハザード発生時は保持される。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)		inc_pa_mst <= 1'b0 ;
		else if (cpuen) begin
			if ((pc_wait_flg && !data_hazard_flg) || (romrd_wait && !(pa_data_mlt1 || pa_data_cyc1)) ||
			   (fchiram && (pa_st2 || data_hazard_flg)))
								inc_pa_mst <= inc_pa_mst ;
			else					inc_pa_mst <= inc_pa ;
		end
	end

// ２命令前のPAがインクリメントされた事を表す信号。
// 前の命令でPAがインクリメントされていた場合のデータハザードを除くウェイト発生時または、
// RAMフェッチ中のFLASHリードとハザード発生時は保持される。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)		inc_pa_slv <= 1'b0 ;
		else if (cpuen) begin
			if ((pc_wait_flg && !(data_hazard_flg && !inc_pa_mst)) || (romrd_wait && !(pa_data_mlt1 || pa_data_cyc1)) ||
			   (fchiram && (pa_st2 | data_hazard_flg)))
								inc_pa_slv <= inc_pa_slv ;
			else					inc_pa_slv <= inc_pa_mst ;
		end
	end

/*------------------------------------------------------------------------------*/
/* ＲＡＭフェッチアクセスの制御信号						*/
/*------------------------------------------------------------------------------*/
/*   ＲＡＭフェッチ中ＲＡＭデータアクセスが発生し命令データの取り直しをしている	*/
/*   間、命令の実行をスキップする。						*/
/*------------------------------------------------------------------------------*/

// RAMフェッチ中にRAMアクセスが発生した場合１となる。
// 命令実行をNOPに置き換えるスキップ要因。
	assign fchiram_skp = fchiram & ma_enable_slv ;

/*------------------------------------------------------------------------------*/
/* 命令メモリ先行フェッチ用アドレス作成						*/
/*------------------------------------------------------------------------------*/
/*   プログラムカウンタに対して２命令分先行して命令をフェッチする。		*/
/*   プログラムアドレスとプログラムカウンタの距離を計算し、ジャンプ命令、	*/
/*   ＲＡＭフェッチ中のＲＡＭアクセス、ＲＯＭデータアクセスなどで距離が		*/
/*   縮まったら先行フェッチを行なう。						*/
/*   プログラムアドレスはレジスタだが、ジャンプ実行時には、ジャンプ先アドレスを	*/
/*   直接出力し分岐ペナルティを軽減している。					*/
/*------------------------------------------------------------------------------*/

// PAとPCの差。
	assign	distance_pa_pc = pa_pre[1:0] - pc[3:2] ;

// PAとPCの差。通常命令が実行されている時は常に3となり、ジャンプ、割り込み直後などは0から2となる。
// ただし、ジャンプ命令実行時、割り込み処理実行時、FLASHリードアクセス時はdistance_pa_pcの値によらず3となる。
	assign	pa_inc_en = (pc_jump_en || pa_data_maw || pa_data_buf || pa_data_mlt1 || pa_data_cyc1 || intack_internal) ?
				 2'h3 : distance_pa_pc ;

// PAとPCの状態を表す信号。
	assign	pa_st0 = (pa_inc_en == 2'h0) ;
	assign	pa_st1 = (pa_inc_en == 2'h1) ;
	assign	pa_st2 = (pa_inc_en == 2'h2) ;
	assign	pa_st3 = (pa_inc_en == 2'h3) ;

// 分岐命令でPCの変化が早いため、プリフェッチ中はOCDの実行後ブレークをマスクする。
	assign	brkmsk = pa_st0 | pa_st1 | pa_st2 ;

// プログラムアドレス。通常はinc_paでインクリメントされる。
// FLASHリードアクセス以外の内部ウェイト要因で保持される。
// ジャンプ命令実行時は、ジャンプ先がRAM空間だった場合はジャンプ先アドレスがそのまま、
// FLASH空間だった場合は、１クロック前にジャンプ先アドレスが出力されているため、
// ジャンプ先アドレスをインクリメントさせたアドレスが取り込まれる。
// RAMフェッチ中にRAMアクセス、条件付きジャンプ命令が発生した場合、PAはデクリメントされるが、
// PAのインクリメント条件と重なった場合は保持される。
// PAの不規則変化許可状態(pa_jump_en)では、通常はmawが取り込まれるが、
// FLASHリードアクセスを伴う命令が終了する際は、RAMフェッチ中でなくPAがインクリメントされなければ、
// PC+8それ以外の条件ではPC+12が取り込まれる。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)
			pa_pre <= 18'h0 ;
		else if (cpuen) begin
			if (!(prefix_wait || slmirr) && pc_wait_flg)
				pa_pre <= pa_pre ;
			else if (pc_jump_en)
				if (((pc_jump_address[19:16] > flsize) & (pc_jump_address[19:10] < {4'hE,2'b11,bfsize})) ||
				     (pc_jump_address[19:16] == 4'hf))
									pa_pre <= pc_jump_address[19:2] ;
				else					pa_pre <= pc_jump_address[19:2] + 18'h00001 ;
			else if (fchiram && !prefix_wait && !slmirr &&
				((dec_ma_enable) && pa_st3 && (dec_clear_stage))) begin
				pa_pre <= pa_pre ;
			end
			else if (pa_jump_en) begin
			// FLASHの読みだし後に、PAを読み出し前の状態に戻す。
			// FLASHリードシーケンスのpa_data_mawでは＋２、pa_data_buf以降では＋３。ただし、マルチサイクル命令は除く。
			// マルチサイクル命令の場合、pa_data_mawは、High期間が延び、以降の信号はずれていく。
				if ((pa_data_maw || pa_data_buf || pa_data_mlt1 || pa_data_cyc1)) begin
					if (pa_data_maw)	pa_pre <= pc[19:2] + 18'h00002 ;
					else			pa_pre <= pc[19:2] + 18'h00003 ;
				end
				else if (prefix_exe)	pa_pre <= {maw[19:16], maw[15:2]} ;
				else if (slmirr)	pa_pre <= {3'b000, MAA, maw[15:2]} ;
			end
			else if ((pa_inc_en != 2'h3) || inc_pa)
				pa_pre <= pa_pre + 18'h00001 ;
		end
	end

// 実際のプログラムアドレス。
// ジャンプ命令実行時はpc_jump_addressが直接出力される。
	assign pa = (pc_jump_en) ? pc_jump_address[19:2] : pa_pre ;

// PCがBFLASH、BRAM空間を指した場合１となる。
	assign slbmem = ((pc[19:10] >= {4'hE,2'b11,bfsize}) & (pc[19:16] < 4'hF)) ||
			((pc[19:11] >= {4'hF,4'h0,1'b1}) & (pc[19:9] < {4'hF,3'b000,bmsize})) ;

/*------------------------------------------------------------------------------*/
/* プログラムカウンタ								*/
/*------------------------------------------------------------------------------*/
/*   プログラムカウンタを実行している命令の命令長に応じてインクリメントする。	*/
/*------------------------------------------------------------------------------*/

// 実行される命令の命令長に応じてPCのインクリメント値を選択。
	always @(pc or dec_pc_inc1 or dec_pc_inc2 or dec_pc_inc3 or dec_pc_inc4) begin
		if (dec_pc_inc1)	pc_inc = pc + 20'h00001 ;
		else if (dec_pc_inc2)	pc_inc = pc + 20'h00002 ;
		else if (dec_pc_inc3)	pc_inc = pc + 20'h00003 ;
		else if (dec_pc_inc4)	pc_inc = pc + 20'h00004 ;
		else			pc_inc = pc ;
	end

// プログラムカウンタ。通常の命令実行状態(pa_st3)でインクリメントされる。
// ジャンプ命令実行時はpc_jump_addressを取り込む。
// FLASHフェッチ中のFLASHリード実行の最後までPCを保持する。
// ただし、FLASHリードがマルチサイクルだった場合は、slmirrだけでは、足りないので、pa_data_mlt1も必要。
// RAMフェッチ中のRAMアクセス実行の最後までPCを保持する。
// PAとの差が詰まってしまい、プリフェッチ状態に入る事を防ぐ。
// 分岐時には、PCを保持しない。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)						pc <= 20'h0 ;
		else if (cpuen) begin
	 		if (pc_wait_flg || slmirr || prefix_wait || (pa_data_mlt1 & !pc_jump_en) || (fchiram && dec_ma_enable && !pc_jump_en))
									pc <= pc ;
			else if (dec_pc_set_enable && pc_jump_en)	pc <= pc_jump_address ;
			else if (pc_set_op01)				pc <= pc_jump_address ;
			else if (pa_st3)				pc <= pc_inc ;
		end
	end

/*------------------------------------------------------------------------------*/
/* Ver2.0  PC,imdrのデータラインゲーティング（電流削減のため）			*/
/*------------------------------------------------------------------------------*/
/* Ver3.0  ディレイによるヒゲ防止の対策を見直す(CPUV1.5と等価に戻す)		*/
/*------------------------------------------------------------------------------*/

	assign imdr_groupC = imdr ;
//	assign imdr_groupC = (fchiram) ? imdr : 16'h0000;

/*------------------------------------------------------------------------------*/
/* 命令キュー									*/
/*------------------------------------------------------------------------------*/
/*   命令メモリからフェッチした命令を命令キューに順次転送する。			*/
/*------------------------------------------------------------------------------*/
/* Ver2.0　imdrの入力をimdr_groupCに変更					*/
/*------------------------------------------------------------------------------*/

// RAMフェッチ中に命令キューの転送条件が成立した場合セットされる。
// RAMフェッチ中は、キューの転送にこの信号を使用する。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)	inc_que_flg <= 1'b0 ;
		else if (cpuen)	inc_que_flg <= fchiram & (~pa_st3 | inc_pa) ;
	end

// 命令キュー。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)
			id_que1 <= 32'h0 ;
		else if (cpuen) begin
			if (fchiram) begin
			// RAMフェッチ中の命令キュー転送条件。
			// RAMのデータにアクセスする際は、命令によってinc_paが立っているので、保持を優先する。
				if (ma_enable_fchiram)
					id_que1 <= id_que1 ;
				else if (inc_que_flg) begin
					id_que1[7:0] <= id_que1[23:16] ;
					id_que1[15:8] <= id_que1[31:24] ;
					id_que1[23:16] <= imdr_groupC[7:0] ;
					id_que1[31:24] <= imdr_groupC[15:8] ;
				end
			end
			else begin
			// ROMフェッチ中、キューは、
			// またはプリフェッチ状態(!pa_st3)、またはPA更新時(inc_pa)にPIDのデータを取り込む。
			// FLASHのデータを読み出す際は、命令によってinc_paが１になっているので、保持を優先する。
			// ただし、FLASHリードがマルチサイクルだった場合は、slmirrだけでは、足りないので、pa_data_mlt1も必要。
			// 分岐時には保持しない。
				if (slmirr || prefix_wait || (pa_data_mlt1 && !pc_jump_en))
					id_que1 <= id_que1 ;
				else if (!pa_st3 || inc_pa)
					id_que1 <= pid ;
			end
		end
	end

/*------------------------------------------------------------------------------*/
/* ＩＤステージのパイプラインレジスタ						*/
/*------------------------------------------------------------------------------*/
/*   命令キューに保持されている命令データが転送され命令のデコードを行なう。	*/
/*   １バイトのレジスタが４つあり、実行している命令の命令長により命令キュー、命	*/
/*   令データバス、または既にパイプラインレジスタに保持されているデータを転送	*/
/*   する。ジャンプ命令実行時、ＲＡＭフェッチ中のＲＡＭアクセス命令直後、ＲＯＭ	*/
/*   アクセス実行時には、例外的にデータのクリアまたは保持を行なう。		*/
/*   ＲＡＭフェッチモードでは、命令データバスの代わりにデータリードバスから	*/
/*   命令データが転送される。							*/
/*------------------------------------------------------------------------------*/
/* Ver2.0　デコーダの1stMAP時に２バイト目を前の値に固定する。			*/
/*　　　　その為に2nd,3rd,4th-MAP時のデコード信号を作成				*/
/*------------------------------------------------------------------------------*/

	assign check234map_10 = (id_que1[7:0] == 8'h31 || id_que1[7:0] == 8'h61 || id_que1[7:0] == 8'h71) ? 1'b1:1'b0;
	assign check234map_11 = (id_que1[15:8] == 8'h31 || id_que1[15:8] == 8'h61 || id_que1[15:8] == 8'h71) ? 1'b1:1'b0;
	assign check234map_12 = (id_que1[23:16] == 8'h31 || id_que1[23:16] == 8'h61 || id_que1[23:16] == 8'h71) ? 1'b1:1'b0;
	assign check234map_13 = (id_que1[31:24] == 8'h31 || id_que1[31:24] == 8'h61 || id_que1[31:24] == 8'h71) ? 1'b1:1'b0;
	assign check234map_01 = (ID_stage1 == 8'h31 || ID_stage1 == 8'h61 || ID_stage1 == 8'h71) ? 1'b1:1'b0;
	assign check234map_02 = (ID_stage2 == 8'h31 || ID_stage2 == 8'h61 || ID_stage2 == 8'h71) ? 1'b1:1'b0;
	assign check234map_03 = (ID_stage3 == 8'h31 || ID_stage3 == 8'h61 || ID_stage3 == 8'h71) ? 1'b1:1'b0;


// for EVA
        assign idpop = dec_sp_inc & ( (ID_stage0[7:4] == 4'hC) | ({ID_stage0,ID_stage1[7:4]} == 12'h61C) ) ;
//

// IDステージのパイプラインレジスタ。ここに格納されたデータがデコードされる。
// CALLT命令の際にテーブルアドレスを一時格納する。また、割り込みや命令の先読み中などではクリアされる。
// 内部ウェイト発生時、FLASHリードアクセス時、RAMフェッチ中のRAMアクセス、FLASHリードアクセス時は保持される。
// fchiram_wait発生時は強制的にMDRバスと１段目のキューからデータを取り込む。
// RAMフェッチ中のPREFIX命令実行とRAMアクセス実行後、命令先読み状態(pa_st2)が発生するが、
// このときはPCの値に応じてMDRバスか命令キューからデータを取り込む。
// ミラー空間アクセス時もPCの値に応じて、通常はPIDバスと命令キュー、RAMフェッチ中はMDRバスと命令キューからデータを取り込む。
// 上記以外の場合は、PCの値と実行される命令の命令長に応じでバスと１段目のキュー、２段目のキューからデータを取り込む。
// バスは、通常PIDバスだが、RAMフェッチ中はMDRバスとなる。
/*------------------------------------------------------------------------------*/
/* Ver2.0　デコーダの1stMAP時に２バイト目を前の値に固定する。			*/
/*　　　　その為にID_stage1_decとデコーダ用の２バイト目のレジスタを新設		*/
/*　　　　imdrを必要な時だけ開くimdr_groupCに変更				*/
/*　　　　アドレスステージのデコーダ出力にヒゲがのるため、ID_stage0,1が更新され	*/
/*　　　　た時にトグルするdecout_mask_regを新設					*/
/*------------------------------------------------------------------------------*/
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) begin
			ID_stage3 <= 8'h00 ;
			ID_stage2 <= 8'h00 ;
			ID_stage1 <= 8'h00 ;
			ID_stage0 <= 8'h00 ;
			ID_stage1_dec <= 8'h00 ;
		end
		else if (cpuen) begin
			if (dec_pc_set_op01) begin
				casex (pc[1])
					1'b1 : ID_stage3 <= pid[31:24] ;
					default : ID_stage3 <= pid[15:8] ;
				endcase
				casex (pc[1])
					1'b1 : ID_stage2 <= pid[23:16] ;
					default : ID_stage2 <= pid[7:0] ;
				endcase
				ID_stage1 <= 8'h00 ;
				ID_stage0 <= 8'h00 ;
				ID_stage1_dec <= 8'h00 ;
			end
			else if (pa_st0 || (pc_set_op01 && !ivack) || pa_st1 || (pc_jump_en && stage_cut_br && !pc_wait_flg) ||
				(dec_pc_set_ret && !pc_wait_flg)) begin
				ID_stage3 <= 8'h00 ;
				ID_stage2 <= 8'h00 ;
				ID_stage1 <= 8'h00 ;
				ID_stage0 <= 8'h00 ;
				ID_stage1_dec <= 8'h00 ;
			end
			// pc_wait_flg発生時には、IDステージのレジスタは保持しておく。
			// FLASHフェッチ中のFLASHリード時(slmirr || prefix_wait)には保持する。
			// ただし、FLASHリードがマルチサイクルだった場合は、slmirrだけでは、足りないので、pa_data_mlt1も必要。
			// RAMフェッチ中のRAMアクセス時(fchiram && dec_ma_enable)にも保持する。
			else if (pc_wait_flg || (pc_jump && !pa_data_cyc1) || ma_enable_fchiram ||
				(!fchiram && (slmirr || prefix_wait || pa_data_mlt1))) begin
				ID_stage3 <= ID_stage3 ;
				ID_stage2 <= ID_stage2 ;
				ID_stage1 <= ID_stage1 ;
				ID_stage0 <= ID_stage0 ;
				ID_stage1_dec <= ID_stage1_dec ;
			end
			else if (fchiram_wait) begin
				ID_stage3 <= imdr_groupC[7:0] ;
				ID_stage2 <= id_que1[31:24] ;
				ID_stage1 <= id_que1[23:16] ;
				ID_stage0 <= id_que1[15:8] ;
				if (check234map_11) ID_stage1_dec <= id_que1[23:16] ;
			end
			else if (fchiram_ramrd || fchiram_romrd) begin
				ID_stage3 <= ID_stage3 ;
				ID_stage2 <= ID_stage2 ;
				ID_stage1 <= ID_stage1 ;
				ID_stage0 <= ID_stage0 ;
				ID_stage1_dec <= ID_stage1_dec ;
			end
			else if (~prefix_ack && pa_st2) begin
				casex ({fchiram,pc[1:0]})
					3'b001 : ID_stage3 <= pid[7:0] ;
					3'b010 : ID_stage3 <= pid[15:8] ;
					3'b011 : ID_stage3 <= pid[23:16] ;
					3'b101 : ID_stage3 <= imdr_groupC[7:0] ;
					3'b110 : ID_stage3 <= imdr_groupC[15:8] ;
					default : ID_stage3 <= id_que1[31:24] ;
				endcase
				casex ({fchiram,pc[1:0]})
					3'bx01 : ID_stage2 <= id_que1[31:24] ;
					3'b010 : ID_stage2 <= pid[7:0] ;
					3'b011 : ID_stage2 <= pid[15:8] ;
					3'b110 : ID_stage2 <= imdr_groupC[7:0] ;
					3'b111 : ID_stage2 <= imdr_groupC[15:8] ;
					default : ID_stage2 <= id_que1[23:16] ;
				endcase
				casex ({fchiram,pc[1:0]})
					3'bx01 : ID_stage1 <= id_que1[23:16] ;
					3'bx10 : ID_stage1 <= id_que1[31:24] ;
					3'b011 : ID_stage1 <= pid[7:0] ;
					3'b111 : ID_stage1 <= imdr_groupC[7:0] ;
					default : ID_stage1 <= id_que1[15:8] ;
				endcase
				casex ({fchiram,pc[1:0]})
					3'bx01 : ID_stage0 <= id_que1[15:8] ;
					3'bx10 : ID_stage0 <= id_que1[23:16] ;
					3'bx11 : ID_stage0 <= id_que1[31:24] ;
					default : ID_stage0 <= id_que1[7:0] ;
				endcase
				casex ({fchiram,pc[1:0]})
					3'bx01 : if (check234map_11) ID_stage1_dec <= id_que1[23:16] ;
					3'bx10 : if (check234map_12) ID_stage1_dec <= id_que1[31:24] ;
					3'b011 : if (check234map_13) ID_stage1_dec <= pid[7:0] ;
					3'b111 : if (check234map_13) ID_stage1_dec <= imdr_groupC[7:0] ;
					default : if (check234map_10) ID_stage1_dec <= id_que1[15:8] ;
				endcase
			end
			else if (dec_pc_inc1) begin
				casex ({fchiram,pc[1:0]})
					3'bx01 : ID_stage3 <= id_que1[15:8] ;
					3'bx10 : ID_stage3 <= id_que1[23:16] ;
					3'bx11 : ID_stage3 <= id_que1[31:24] ;
					default : ID_stage3 <= id_que1[7:0] ;
				endcase
				ID_stage2 <= ID_stage3 ;
				ID_stage1 <= ID_stage2 ;
				ID_stage0 <= ID_stage1 ;
				if (check234map_01) ID_stage1_dec <= ID_stage2;
			end
			else if (dec_pc_inc2) begin
				casex ({fchiram,pc[1:0]})
					3'bx01 : ID_stage3 <= id_que1[23:16] ;
					3'bx10 : ID_stage3 <= id_que1[31:24] ;
					3'b011 : ID_stage3 <= pid[7:0] ;
					3'b111 : ID_stage3 <= imdr_groupC[7:0] ;
					default : ID_stage3 <= id_que1[15:8] ;
				endcase
				casex ({fchiram,pc[1:0]})
					3'bx01 : ID_stage2 <= id_que1[15:8] ;
					3'bx10 : ID_stage2 <= id_que1[23:16] ;
					3'bx11 : ID_stage2 <= id_que1[31:24] ;
					default	: ID_stage2 <= id_que1[7:0] ;
				endcase
				ID_stage1 <= ID_stage3 ;
				ID_stage0 <= ID_stage2 ;
				if (check234map_02) ID_stage1_dec <= ID_stage3;
			end
			else if (dec_pc_inc3) begin
				casex ({fchiram,pc[1:0]})
					3'bx01 : ID_stage3 <= id_que1[31:24] ;
					3'b010 : ID_stage3 <= pid[7:0] ;
					3'b011 : ID_stage3 <= pid[15:8] ;
					3'b110 : ID_stage3 <= imdr_groupC[7:0] ;
					3'b111 : ID_stage3 <= imdr_groupC[15:8] ;
					default : ID_stage3 <= id_que1[23:16] ;
				endcase
				casex ({fchiram,pc[1:0]})
					3'bx01 : ID_stage2 <= id_que1[23:16] ;
					3'bx10 : ID_stage2 <= id_que1[31:24] ;
					3'b011 : ID_stage2 <= pid[7:0] ;
					3'b111 : ID_stage2 <= imdr_groupC[7:0] ;
					default : ID_stage2 <= id_que1[15:8] ;
				endcase
				casex ({fchiram,pc[1:0]})
					3'bx01 : ID_stage1 <= id_que1[15:8] ;
					3'bx10 : ID_stage1 <= id_que1[23:16] ;
					3'bx11 : ID_stage1 <= id_que1[31:24] ;
					default : ID_stage1 <= id_que1[7:0] ;
				endcase
				ID_stage0 <= ID_stage3 ;
				if (check234map_03) begin
					casex ({fchiram,pc[1:0]})
						3'bx01 : ID_stage1_dec <= id_que1[15:8] ;
						3'bx10 : ID_stage1_dec <= id_que1[23:16] ;
						3'bx11 : ID_stage1_dec <= id_que1[31:24] ;
						default : ID_stage1_dec <= id_que1[7:0] ;
					endcase
				end
			end
			else if (dec_pc_inc4) begin
				casex ({fchiram,pc[1:0]})
					3'b001 : ID_stage3 <= pid[7:0] ;
					3'b010 : ID_stage3 <= pid[15:8] ;
					3'b011 : ID_stage3 <= pid[23:16] ;
					3'b101 : ID_stage3 <= imdr_groupC[7:0] ;
					3'b110 : ID_stage3 <= imdr_groupC[15:8] ;
					3'b111 : ID_stage3 <= imdr_groupC[7:0] ;
					default : ID_stage3 <= id_que1[31:24] ;
				endcase
				casex ({fchiram,pc[1:0]})
					3'bx01 : ID_stage2 <= id_que1[31:24] ;
					3'b010 : ID_stage2 <= pid[7:0] ;
					3'b011 : ID_stage2 <= pid[15:8] ;
					3'b110 : ID_stage2 <= imdr_groupC[7:0] ;
					3'b111 : ID_stage2 <= imdr_groupC[15:8] ;
					default : ID_stage2 <= id_que1[23:16] ;
				endcase
				casex ({fchiram,pc[1:0]})
					3'bx01 : ID_stage1 <= id_que1[23:16] ;
					3'bx10 : ID_stage1 <= id_que1[31:24] ;
					3'b011 : ID_stage1 <= pid[7:0] ;
					3'b111 : ID_stage1 <= imdr_groupC[7:0] ;
					default : ID_stage1 <= id_que1[15:8] ;
				endcase
				casex ({fchiram,pc[1:0]})
					3'bx01 : ID_stage0 <= id_que1[15:8] ;
					3'bx10 : ID_stage0 <= id_que1[23:16] ;
					3'bx11 : ID_stage0 <= id_que1[31:24] ;
					default : ID_stage0 <= id_que1[7:0] ;
				endcase
				casex ({fchiram,pc[1:0]})
					3'bx01 : if (check234map_11) ID_stage1_dec <= id_que1[23:16] ;
					3'bx10 : if (check234map_12) ID_stage1_dec <= id_que1[31:24] ;
					3'b011 : if (check234map_13) ID_stage1_dec <= pid[7:0] ;
					3'b111 : if (check234map_13) ID_stage1_dec <= imdr_groupC[7:0] ;
					default : if (check234map_10) ID_stage1_dec <= id_que1[15:8] ;
				endcase
			end
		end
	end

/*------------------------------------------------------------------------------*/
/* マルチサイクル命令の制御							*/
/*------------------------------------------------------------------------------*/
/*   実行に複数クロックを必要とする命令のクロック数を示す。			*/
/*------------------------------------------------------------------------------*/

// 命令実行中カウントアップされ、終了時に立ち下がる。
// 大部分の命令は１クロック実行なのでカウントアップされる事はないが、
// ジャンプ命令やリードモディファイライト命令ではカウントアップする。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)					stage_adr <= 2'h0 ;
		else if (cpuen) begin
			if (pc_wait_flg | pa_st2)		stage_adr <= stage_adr ;
			else if (dec_clear_stage | brunch_en)	stage_adr <= 2'h0 ;
			else					stage_adr <= stage_adr + 2'h1 ;
		end
	end

/*------------------------------------------------------------------------------*/
/* ＭＥＭステージのパイプラインレジスタ						*/
/*------------------------------------------------------------------------------*/
/*   ＩＤステージからオペランドデータが転送される。１バイトのレジスタ２つで	*/
/*   構成され、ＡＬＵによる演算に必要なオペランドのみが転送される。		*/
/*------------------------------------------------------------------------------*/

// MEMステージのパイプラインレジスタ。このデータがオペランドとして演算などに使用される。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) begin
			MEM_stage0 <= 8'h00 ;
		end
		else if (cpuen) begin
			if (dec_mem_stage_op2)		MEM_stage0 <= ID_stage2 ;
			else if (dec_mem_stage_op3)	MEM_stage0 <= ID_stage3 ;
			else if (dec_mem_stage_op23)	MEM_stage0 <= ID_stage2 ;
			else				MEM_stage0 <= ID_stage1 ;
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) begin
			MEM_stage1 <= 8'h00 ;
		end
		else if (cpuen) begin
			if (dec_mem_stage_op23)		MEM_stage1 <= ID_stage3 ;
			else				MEM_stage1 <= ID_stage2 ;
		end
	end

/*------------------------------------------------------------------------------*/
/* データハザードフラグ								*/
/*------------------------------------------------------------------------------*/
/*   汎用レジスタへのアクセスがＩＤステージとＭＥＭステージで重複した場合、	*/
/*   データハザードフラグを生成する。						*/
/*   ＲＡＭフェッチアクセス時、ＲＯＭデータアクセス時に汎用レジスタへの不正な	*/
/*   データ転送をマスクする。ただし、ＲＡＭフェッチ中にハザード発生した場合は	*/
/*   ウェイト動作を共有するため、例外的に転送を許可する。			*/
/*------------------------------------------------------------------------------*/

// レジスタペアが選択された場合１となる。
	assign pc_set_rp = dec_pc_set_AX | dec_pc_set_BC | dec_pc_set_DE | dec_pc_set_HL ;

// SP更新と割り込みを含む分岐命令とのHazard発生時に１となる。
// RAMフェッチ実行中は特殊な制御が必要なため、他のハザード要因と区別する。
	assign sp_hazard_flg = (dec_ma_data_sp | dec_ma_data_SPop1 | dec_sp_set_enable) & SP_enable ;

// データハザード発生フラグ。
// 汎用レジスタへの書き込み命令のMEMステージとレジスタアドレッシングまたはスタック動作のIDステージ、
// 同じレジスタでぶつかった場合１となる。
// またバンク切り替え命令、PSWアクセスとレジスタによる間接メモリアクセスがぶつかった場合も１となる。
	assign data_hazard_flg_pre = ((dec_ma_data_DE | dec_ma_data_DEop1 | dec_ma_data_DEop2)
										&	(D_access | E_access | dec_RBS_enable)) |
				     ((dec_ma_data_HL | dec_ma_data_HLop1 | dec_ma_data_HLop2 | dec_ma_data_HLB | dec_ma_data_HLC)
										&	(H_access | L_access | dec_RBS_enable)) |
				      (dec_ma_data_BCop12			&	(B_access | C_access | dec_RBS_enable)) |
				     ((dec_ma_data_Bop12 | dec_ma_data_HLB)	&	(B_access | dec_RBS_enable)) |
				     ((dec_ma_data_Cop12 | dec_ma_data_HLC)	&	(C_access | dec_RBS_enable)) |
				      sp_hazard_flg |
				     (dec_pc_set_AX				&	(A_access | X_access | dec_RBS_enable)) |
				     (dec_pc_set_BC				&	(B_access | C_access | dec_RBS_enable)) |
				     (dec_pc_set_DE				&	(D_access | E_access | dec_RBS_enable)) |
				     (dec_pc_set_HL				&	(H_access | L_access | dec_RBS_enable)) |
				     (pc_set_rp					&	CS_enable) ;

// RAMフェッチによるウェイト中は、ハザード条件が成立しても無効とする。
	assign data_hazard_flg = data_hazard_flg_pre & ~(fchiram & (pc_wait_cnt != 0)) ;

// １クロック前にハザードが発生した事を表す信号。
// RAMフェッチ中は立たない。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) data_hazard <= 1'b0 ;
		else if (cpuen) begin
			if (fchiram) data_hazard <= 1'b0 ;
			else data_hazard <= data_hazard_flg ;
		end
	end

// １クロック前にSPによるハザードが発生した事を表す信号
// RAMフェッチ中のみ１となり、MAとSPの更新を許可する。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) sp_hazard <= 1'b0 ;
		else if (cpuen) begin
			if (sp_hazard) sp_hazard <= 1'b0 ;
			else sp_hazard <= sp_hazard_flg & fchiram ;
		end
	end

// RAMフェッチ中とFlashリードサイクル中に、レジスタのデータを保持するための信号。
	assign reg_wait = ~(data_hazard_flg) &
			 ((fchiram & (pc_wait_cnt != 0)) |
			 pa_data_maw | pa_data_buf )  ;

/*------------------------------------------------------------------------------*/
/* リセットベクタフラグ								*/
/*------------------------------------------------------------------------------*/
/*   リセットベクタフラグを生成する。						*/
/*------------------------------------------------------------------------------*/

// PCが０であった場合１となる。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) rstvec <= 1'b0 ;
		else if (cpuen) begin
			if (rstvec || pc_set_op01) rstvec <= 1'b0 ;
// for EVA
//			else if (pc == 20'h0) rstvec <= 1'b1 ;
                        else if ((pc == 20'h0) & !svmod) rstvec <= 1'b1 ;
//
		end
	end

/*------------------------------------------------------------------------------*/
/* 割り込み受け付けフラグ							*/
/*------------------------------------------------------------------------------*/
/*   命令実行中または、割り込み保留命令をＩＥフラグを判別し、割り込み受け付け	*/
/*   フラグを生成する。								*/
/*------------------------------------------------------------------------------*/

// マスカブル割り込み実行禁止信号。PSWを操作した場合１となり、割り込み実行は禁止となる。
// DMA転送受け付け時にも１とする事でintenを立ち下げる。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)				inten_block <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg && !fchiram)	inten_block <= inten_block ;
			else if ((reg_wait || (pa_st2 && pc_wait_flg)) && fchiram)	inten_block <= inten_block ;
			else if (pa_st3 || pa_st2)	inten_block <= PSW_block & dec_cpuwr_enable ;
		end
	end

// ノンマスカブル割り込み実行禁止信号。PSWを操作した場合１となり、割り込み実行は禁止となる。
// DMA転送受け付け時にも１とする事でintenを立ち下げる。RAMフェッチ中はHigh期間延長。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) 				nmien_block <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg && !fchiram)	nmien_block <= nmien_block ;
			else if ((reg_wait || (pa_st2 && pc_wait_flg)) && fchiram)	nmien_block <= nmien_block ;
			else if (pa_st3 || pa_st2)	nmien_block <= (dec_pc_set_ret & intblock) | dmaack ;
		end
	end

// マスカブル割り込み保留信号。
// PSWを操作した場合、INTマクロのSFRを操作した場合、PUSH/POP PSW命令は割り込み要求が保留される。
// DMA受け付け時にも割り込みは保留される。DMA要求と割り込み要求が同時であればDMAが優先される。
// ただし、RAMフェッチ中のRAMアクセス直後に限っては、IDステージでの割り込み保留を無効化する。
	assign int_suspend = inten_block | nmien_block |
			(
			( ( (PSW_block | (maw == 20'hffffa) | ((maw[19:4] == 16'hfffe) | (maw[19:4] == 16'hfffd))) & dec_cpuwr_enable ) |
			({ID_stage0,ID_stage1} == 16'h61CD)) & ~(fchiram_skp | romrd_skp)
			) ;

// RAMフェッチ中のメモリアクセス動作完了まで割り込み保留情報を保持しておく。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) 			int_suspend_fchiram <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg)	int_suspend_fchiram <= int_suspend_fchiram ;
			else			int_suspend_fchiram <= int_suspend & fchiram & dec_ma_enable;
		end
	end

// ノンマスカブル割り込み保留信号。
// DMA受け付け時にも割り込みは保留される。DMA要求と割り込み要求が同時であればDMAが優先される。
// for EVA
//	assign nmi_suspend = nmien_block | ((ID_stage0 == 8'h11) & ~(fchiram_skp | romrd_skp)) |
//			     skp_block | dmaack | (dmarq & ~(intdbg | intnmi)) ;
        assign nmi_suspend = svmod | nmien_block | ((ID_stage0 == 8'h11) & ~(fchiram_skp | romrd_skp)) |
                             skp_block | dmaack | (dmarq & ~(intdbg | intnmi | svi)) ;
//

// 割り込み受け付け可能状態で１となる。
// 割り込み保留命令でなく、命令実行途中でなければ割り込み受け付け可能。
// マスカブル／ノンマスカブル問わずこの信号が１でなければ割り込みは受け付けない。
	assign iopen = (pa_st3 | pa_st2) & (dec_clear_stage | pa_data_mem) & ~pc_wait_flg & ~(fchiram & dec_ma_enable) &
			~(pc_jump_en | pa_data_maw | pa_data_buf | pa_data_mlt1 | pa_data_cyc1 | intack_internal) ;

// 割り込み許可状態でかつマスカブル割り込み受け付け可能であれば１となる。
	assign inten = IE & iopen & ~int_suspend & ~nmi_suspend & ~int_suspend_fchiram ;

// ノンマスカブル割り込み受け付け可能であれば１となる。
	assign nmien = iopen & ~nmi_suspend ;

/*------------------------------------------------------------------------------*/
/* 割り込み優先順位判定								*/
/*------------------------------------------------------------------------------*/
/*   マスカブル割り込みの優先順位を判定しＩＳＰフラグを生成する。		*/
/*   ノンマスカブル、デバッグ割り込みの優先順位を判定し、ＮＭＩＳ、ＤＢＧＳ	*/
/*   フラグを生成する。								*/
/*   割り込み可能であれば、割り込み動作を開始する。				*/
/*------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------*/
/* Ver2.0  電流削減の為、割込み要求なしの時に割り込み制御回路を停止する。	*/
/*------------------------------------------------------------------------------*/
	assign intclk_on = intdbg | intnmi | (IE & (intrq3 | intrq2 | intrq1 | intrq0))  |
			   ivack | ivack_dly | dec_NMIS_enable | dec_pc_set_dbg | monmd |
			   svi | svintack | svmod | svmodi | alt1 | alt2;

// 割り込み要求信号に応じてISPフラグに取り込むべきデータを選択する。
	always @(intrq3 or intrq2 or intrq1 or intrq0) begin
		casex ({intrq3,intrq2,intrq1,intrq0})
			4'b1000 : intisp_pre = 2'b10 ;
			4'b0100 : intisp_pre = 2'b01 ;
			4'b0010 : intisp_pre = 2'b00 ;
			default : intisp_pre = 2'b00 ;
		endcase
	end

// 割り込み要求が受け付けられた場合、このデータがISPフラグに格納される。
/*------------------------------------------------------------------------------*/
/* Ver2.0  intclk_onでゲーティング						*/
/*------------------------------------------------------------------------------*/
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) intisp <= 2'b00 ;
		else if (cpuen & intclk_on) begin
			if (data_hazard)	intisp <= intisp ;
			else			intisp <= intisp_pre ;
		end
	end

// 優先順位を判別し、マスカブル割り込み受け付け可能な場合１となる。
/*------------------------------------------------------------------------------*/
/* Ver2.0  intclk_onで出力変化							*/
/*------------------------------------------------------------------------------*/
	always @(intrq3 or intrq2 or intrq1 or intrq0 or isp or inten or DBGS or NMIS or intclk_on) begin
		if (inten & intclk_on) begin
			casex ({intrq3,intrq2,intrq1,intrq0,isp,DBGS,NMIS})
				8'b1000_11_00 : mkiack = 1'b1 ;
				8'b0100_1x_00 : mkiack = 1'b1 ;
				8'b0010_1x_00 : mkiack = 1'b1 ;
				8'b0010_01_00 : mkiack = 1'b1 ;
				8'b0001_xx_00 : mkiack = 1'b1 ;
				default : mkiack = 1'b0 ;
			endcase
		end
		else	mkiack = 1'b0 ;
	end

// 優先順位を判定し、ノンマスカブル割り込み受け付け可能な場合１となる。
// また、デバッグ割り込みフラグとノンマスカブル割り込みフラグのデータを選択する。
// for EVA
//	always @(intdbg or intnmi or DBGS or NMIS or nmien) begin
//		if (nmien) begin
//			casex ({intdbg,intnmi,DBGS,NMIS})
//				4'b1x_0x : {nmiack,dbgd,nmid} = 3'b1_10 ;
//				4'b01_00 : {nmiack,dbgd,nmid} = 3'b1_01 ;
//				default : {nmiack,dbgd,nmid} = 3'b0_00 ;
//			endcase
//		end
//		else	{nmiack,dbgd,nmid} = 3'b0_00 ;
//	end

        wire intnmi_eva = intnmi & ~icemsknmi ;
        wire intdbg_eva = intdbg & ~icemskdbg ;

            always @(intdbg_eva or intnmi_eva or DBGS or NMIS or nmien) begin
                    if (nmien) begin
                            casex ({intdbg_eva,intnmi_eva,DBGS,NMIS})
                                    4'b1x_0x : {nmiack,dbgd,nmid} = 3'b1_10 ;
                                    4'b01_00 : {nmiack,dbgd,nmid} = 3'b1_01 ;
                                    default : {nmiack,dbgd,nmid} = 3'b0_00 ;
                            endcase
                    end
                    else        {nmiack,dbgd,nmid} = 3'b0_00 ;
            end
//
// for EVA

        always @(svi or nmien) begin
                if (nmien) begin
                        sviack = svi ;
                end
                else    sviack = 1'b0 ;
        end

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)              svintack <= 1'b0 ;
                else if (cpuen) begin
                        if (svintack)   svintack <= 1'b0 ;
                        else            svintack <= sviack ;
                end
        end

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb) begin
                        sviack_buf <= 1'b0 ;
                end
                else if (cpuen) begin
                        if (pc_wait_flg) begin
                                sviack_buf <= sviack_buf ;
                        end
                        else begin
                                sviack_buf <= sviack ;
                        end
                end
        end
//

// 割り込み受け付け信号を１クロック保持しivackのHIGH幅を延長する。
/*------------------------------------------------------------------------------*/
/* Ver2.0  intclk_onでゲーティング						*/
/*------------------------------------------------------------------------------*/
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) begin
			nmiack_buf <= 1'b0 ;
			mkiack_buf <= 1'b0 ;
		end
		else if (cpuen & intclk_on) begin
			if (pc_wait_flg) begin
				nmiack_buf <= nmiack_buf ;
				mkiack_buf <= mkiack_buf ;
			end
			else begin
				nmiack_buf <= nmiack ;
				mkiack_buf <= mkiack ;
			end
		end
	end

// デバック割り込み／ノンマスカブル割り込みフラグ。
// ノンマスカブル割り込み受け付け後、データが取り込まれる。
// 通常NMISはRET命令でクリアされるが、デバッグ割り込み中はクリアされない。
/*------------------------------------------------------------------------------*/
/* Ver2.0  intclk_onでゲーティング						*/
/*------------------------------------------------------------------------------*/
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) begin
			DBGS <= 1'b0 ;
			NMIS <= 1'b0 ;
		end
		else if (cpuen & intclk_on) begin
			if (dec_pc_set_dbg) begin
				DBGS <= 1'b1 ;
			end
			else if (nmiack) begin
				DBGS <= dbgd ;
				NMIS <= nmid ;
			end
			else if (dec_NMIS_enable) begin
				if (!DBGS) begin
					DBGS <= DBGS ;
					NMIS <= 1'b0 ;
				end
				else begin
					DBGS <= 1'b0 ;
					NMIS <= NMIS ;
				end
			end
		end
	end

// 割り込み応答信号。割り込みが受け付けられた場合１となる。
// ただし、割り込み競合ウェイト、外部メモリアクセスウェイト中は０とする。
/*------------------------------------------------------------------------------*/
/* Ver2.0  intclk_onでゲーティング						*/
/*------------------------------------------------------------------------------*/
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)		intack_pre <= 1'b0 ;
		else if (cpuen & intclk_on) begin
			if (intack_internal)	intack_pre <= 1'b0 ;
			else		intack_pre <= mkiack | nmiack ;
		end
	end

// for EVA
//
//	assign intack = intack_pre & ~waitint & ~waitexm & ~wait2ndsfr & ~waitfl & ~waitmod ;
//	assign intack = intack_pre & ~waitint & ~waitexm & ~wait2ndsfr & ~waitfl & ~waitmod & ~svintack ;
	assign intack_internal = intack_pre & ~waitint & ~waitexm & ~wait2ndsfr & ~waitdflash & ~waitfl & ~waitmod & ~svintack ;
//	assign intack = intack_internal & ~(RVEON & ~wed) ;
	assign intack = intack_internal & (~(RVEON & ~wed) | (intdbg | dec_pc_set_dbg | hazard_dbgintack)) ;
//

// intackを受けてivackのHIGH幅を延長する。
/*------------------------------------------------------------------------------*/
/* Ver2.0  intclk_onでゲーティング						*/
/*------------------------------------------------------------------------------*/
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)		ivack_pre <= 1'b0 ;
		else if (cpuen & intclk_on) begin
			if (ivack_pre)	ivack_pre <= 1'b0 ;
// for EVA
//			else		ivack_pre <= intack_internal ;
                        else            ivack_pre <= intack_internal | svintack ;
//
		end
	end

// ivack_preを受けてivackのHIGH幅を延長する。
/*------------------------------------------------------------------------------*/
/* Ver2.0  intclk_onでゲーティング						*/
/*------------------------------------------------------------------------------*/
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)		ivack_end <= 1'b0 ;
		else if (cpuen & intclk_on) begin
			if (ivack_end)	ivack_end <= 1'b0 ;
			else		ivack_end <= ivack_pre ;
		end
	end

// 割り込み処理実行フラグ。デコーダはこの信号で割り込み処理の制御信号を生成する。
/*------------------------------------------------------------------------------*/
/* Ver2.0  intclk_onでゲーティング						*/
/*------------------------------------------------------------------------------*/
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)		ivack <= 1'b0 ;
// for EVA
//		else if (cpuen & intclk_on)	ivack <= mkiack | nmiack | ivack_pre | ivack_end | nmiack_buf | mkiack_buf ;
                else if (cpuen & intclk_on)     ivack <= sviack | sviack_buf | mkiack | nmiack | ivack_pre | ivack_end | nmiack_buf | mkiack_buf ;
//
	end

// セルフ中のユーザー割り込みはivackで判断して分岐先をF08C0Hへ変更する
// SP書き換え時にivackが分岐先を決める前に落ちてしまうので１クロック伸ばす
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)		ivack_dly <= 1'b0 ;
		else if (cpuen & intclk_on) ivack_dly <= ivack ;
	end

// ハザード発生時に、デバッグ割り込みのINTACKを保持しておく。
/*------------------------------------------------------------------------------*/
/* Ver2.0  intclk_onでゲーティング						*/
/*------------------------------------------------------------------------------*/
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)		hazard_dbgintack <= 1'b0 ;
		else if (cpuen & intclk_on) begin
					hazard_dbgintack <= intack_internal & intdbg & data_hazard_flg ;
		end
	end

// for EVA

        // ハザード発生時にSVINTACKを保持しておく
        reg             hazard_svintack;

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)              hazard_svintack <= 1'b0 ;
                else if (cpuen) begin
                                        hazard_svintack <= svintack & data_hazard_flg ;
                end
        end
//

// デバッグ割り込みが受け付けられた場合とSOFTBREAKが実行された場合に立ち上がり。
// RETIまたはRETBで立ち下がる。ただしRETBによるクリアは禁止されるべき。
/*------------------------------------------------------------------------------*/
/* Ver2.0  intclk_onでゲーティング						*/
/*------------------------------------------------------------------------------*/
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)					monmd_pre <= 1'b0 ;
		else if (cpuen & intclk_on) begin
// for EVA Ver1.51 OCDMODで、OCDブレーク中、SVMODからRETIしたとき、MONMODを落とさないようにする。
//			if (pa_st2 && nmien_block && !(fchiram && pc_wait_flg))		monmd_pre <= 1'b0 ;
                        if ((pa_st2 && nmien_block && !(fchiram && pc_wait_flg) && !(ocdmod && svmod))) monmd_pre <= 1'b0 ;
//
			else if (!monmd && data_hazard_flg)	monmd_pre <= 1'b0 ;
// for Eva Ver1.52 monmdはICEのSoftBreakでは立てない
//			else if (monmd || dec_pc_set_dbg)	monmd_pre <= 1'b1 ;
                        else if ((monmd || dec_pc_set_dbg) && ocdmod)   monmd_pre <= 1'b1 ;
// for Eva Ver1.52 modmdはICEのHardBreakでは立てない
			else					monmd_pre <= (intack_internal & intdbg) | hazard_dbgintack ;
		end
	end

// モニタモード信号。
	assign monmd = monmd_pre ;

// デバッグ割り込みが受け付けられた場合とSOFTBREAKが実行された場合に立ち上がり。
// RETIで立ち下がる。
/*------------------------------------------------------------------------------*/
/* Ver2.0  intclk_onでゲーティング						*/
/*------------------------------------------------------------------------------*/
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)					monmdstp_pre <= 1'b0 ;
		else if (cpuen & intclk_on) begin
			// MONMDSTPがRETIでのみ立ち下がる
// for EVA Ver1.51 OCDMODで、OCDブレーク中、SVMODFからRETIしたとき、MONMODSTPを落とさないようにする。
//			if (dec_NMIS_enable)			monmdstp_pre <= 1'b0 ;
                        if (dec_NMIS_enable && !(ocdmod && svmodf))     monmdstp_pre <= 1'b0 ;
//
			else if (!monmdstp && data_hazard_flg)	monmdstp_pre <= 1'b0 ;
// for Eva Ver1.52 monmdstpはICEのSoftBreakでは立てない
//			else if (monmdstp || dec_pc_set_dbg)	monmdstp_pre <= 1'b1 ;
                        else if ((monmdstp || dec_pc_set_dbg) && ocdmod)        monmdstp_pre <= 1'b1 ;
// for Eva Ver1.52 modmdはICEのHardBreakでは立てない
			else					monmdstp_pre <= (intack_internal & intdbg) | hazard_dbgintack ;
//
		end
	end

// OCDステップ実行用モニターモード信号。
	assign monmdstp = monmdstp_pre ;

// for EVA

        reg             svmod_pre, svmodf_pre, svmodi_pre;

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)                                      svmod_pre <= 1'b0 ;
                else if (cpuen) begin
                        if (pa_st2 && nmien_block && !(fchiram && pc_wait_flg))         svmod_pre <= 1'b0 ;
                        else if (!svmod && data_hazard_flg)     svmod_pre <= 1'b0 ;
                        else if (svmod)                         svmod_pre <= 1'b1 ;
                        else if (svmod_pre)                     svmod_pre <= 1'b1 ;
                        // Ver1.51
                        //else if (dec_pc_set_dbg)              svmod_pre <= 1'b1 ;
                        else if (dec_pc_set_dbg && !ocdmod)     svmod_pre <= 1'b1 ;
                        else                                    svmod_pre <= svintack | hazard_svintack ;
                end
        end

        assign svmod = svmod_pre ;

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)                              svmodf_pre <= 1'b0 ;
                else if (cpuen) begin
                        if (!svmodf && data_hazard_flg) svmodf_pre <= 1'b0 ;
                        // Ver1.51
                        //else if (svintack || hazard_svintack || dec_pc_set_dbg)       svmodf_pre <= 1'b1 ;
                        else if (svintack || hazard_svintack || (dec_pc_set_dbg && !ocdmod))    svmodf_pre <= 1'b1 ;
                        // SVMODFがRETIでのみ立ち下がる
                        else if (dec_NMIS_enable)       svmodf_pre <= 1'b0 ;
                        else                            svmodf_pre <= svmodf ;
                end
        end

        // SVMODFがソフトブレーク時に１クロック早く立ち上がる。
        // Ver1.51
        //assign svmodf = svmodf_pre | (dec_pc_set_dbg & ~data_hazard_flg) ;
        assign svmodf = svmodf_pre | ((dec_pc_set_dbg & !ocdmod) & ~data_hazard_flg) ;

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)              svmodi_pre <= 1'b0 ;
                else if (cpuen) begin
                        if (data_hazard_flg)    svmodi_pre <= svmodi_pre ;
                        else                    svmodi_pre <= sviack ;
                end
        end

        // SPとメモリはSVMODよりも１クロック早くSVリソースに切り替える
        // Ver1.51
        //assign svmodi = (svmodi_pre | dec_pc_set_dbg) & ~data_hazard_flg ;
        assign svmodi = (svmodi_pre | (dec_pc_set_dbg & !ocdmod)) & ~data_hazard_flg ;
//

// SOFTBREAKでモニタモードに入った事を示す１クロック幅の信号。
// デバッグ割り込みによるブレークと区別するために用いる。
// ハザード発生時は１クロック遅れて立ち上がる。
/*------------------------------------------------------------------------------*/
/* Ver2.0  intclk_onでゲーティング						*/
/*------------------------------------------------------------------------------*/
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)				softbrk <= 1'b0 ;
		else if (cpuen & intclk_on) begin
			if (softbrk)			softbrk <= 1'b0 ;
			else				softbrk <= dec_pc_set_dbg & ~data_hazard_flg ;
		end
	end

/*------------------------------------------------------------------------------*/
/* ＤＭＡ受け付けフラグ								*/
/*------------------------------------------------------------------------------*/
/*   ＤＭＡ要求信号を判定し、ＤＭＡ受け付けフラグを生成する。			*/
/*------------------------------------------------------------------------------*/

// PREFIX命令実行時に１となりDMA受付を保留する。
	assign dma_suspend = (ID_stage0 == 8'h11) & ~(fchiram_skp | romrd_skp) ;

// DMA受け付け可能状態で１となる。
// HALT命令以外の命令実行途中でなければDMA受け付け可能。
	assign dopen = ((pa_st3 | pa_st2) & (dec_clear_stage | hltst) & ~pc_wait_flg &
			~(pc_jump_en | pa_data_maw | pa_data_buf | pa_data_mlt1 | pa_data_cyc1 | intack_internal)) & ~dma_suspend ;

// for EVA

        reg             alt1, alt2_pre, alt2;

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)              alt1i <= 1'b0 ;
                else if (cpuen) begin
                        if (pa_st2)     alt1i <= 1'b0 ;
                        else            alt1i <= dec_alt1 ;
                end
        end

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)                                      alt1 <= 1'b0 ;
                else if (cpuen) begin
                        if (pa_st2)                             alt1 <= alt1i ;
                        else if (stage_adr != 2'b00)            alt1 <= alt1 ;
                        else if (pa_data_pre)                   alt1 <= alt1 ;
                        else                                    alt1 <= alt1i ;
                end
        end

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)              alt2_pre <= 1'b0 ;
                else if (cpuen) begin
                                        alt2_pre <= dec_alt2 ;
                end
        end

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)              alt2 <= 1'b0 ;
                else if (cpuen) begin
                                        alt2 <= alt2_pre ;
                end
        end
//

/*------------------------------------------------------------------------------*/
/* Ver3.0  アドレスバスのゲーティング回路追加					*/
/*         MF2まではOCDマクロで実施していたが、ゲーティング後のアドレスを	*/
/*         使用するマクロを新規追加のためCPU内で一括して実施する。		*/
/*------------------------------------------------------------------------------*/

	assign	gatead = gatead1 | gatead2 | gatead3 ;

	assign	monpc[19] = gatead & pc[19];
	assign	monpc[18] = gatead & pc[18];
	assign	monpc[17] = gatead & pc[17];
	assign	monpc[16] = gatead & pc[16];
	assign	monpc[15] = gatead & pc[15];
	assign	monpc[14] = gatead & pc[14];
	assign	monpc[13] = gatead & pc[13];
	assign	monpc[12] = gatead & pc[12];
	assign	monpc[11] = gatead & pc[11];
	assign	monpc[10] = gatead & pc[10];
	assign	monpc[9] = gatead & pc[9];
	assign	monpc[8] = gatead & pc[8];
	assign	monpc[7] = gatead & pc[7];
	assign	monpc[6] = gatead & pc[6];
	assign	monpc[5] = gatead & pc[5];
	assign	monpc[4] = gatead & pc[4];
	assign	monpc[3] = gatead & pc[3];
	assign	monpc[2] = gatead & pc[2];
	assign	monpc[1] = gatead & pc[1];
	assign	monpc[0] = gatead & pc[0];

	assign	monma[15] = gatead & ma[15];
	assign	monma[14] = gatead & ma[14];
	assign	monma[13] = gatead & ma[13];
	assign	monma[12] = gatead & ma[12];
	assign	monma[11] = gatead & ma[11];
	assign	monma[10] = gatead & ma[10];
	assign	monma[9] = gatead & ma[9];
	assign	monma[8] = gatead & ma[8];
	assign	monma[7] = gatead & ma[7];
	assign	monma[6] = gatead & ma[6];
	assign	monma[5] = gatead & ma[5];
	assign	monma[4] = gatead & ma[4];
	assign	monma[3] = gatead & ma[3];
	assign	monma[2] = gatead & ma[2];
	assign	monma[1] = gatead & ma[1];
	assign	monma[0] = gatead & ma[0];

	assign	monmdr[15] = gatead & imdr[15];
	assign	monmdr[14] = gatead & imdr[14];
	assign	monmdr[13] = gatead & imdr[13];
	assign	monmdr[12] = gatead & imdr[12];
	assign	monmdr[11] = gatead & imdr[11];
	assign	monmdr[10] = gatead & imdr[10];
	assign	monmdr[9] = gatead & imdr[9];
	assign	monmdr[8] = gatead & imdr[8];
	assign	monmdr[7] = gatead & imdr[7];
	assign	monmdr[6] = gatead & imdr[6];
	assign	monmdr[5] = gatead & imdr[5];
	assign	monmdr[4] = gatead & imdr[4];
	assign	monmdr[3] = gatead & imdr[3];
	assign	monmdr[2] = gatead & imdr[2];
	assign	monmdr[1] = gatead & imdr[1];
	assign	monmdr[0] = gatead & imdr[0];

	assign	monmdw[15] = gatead & mdw[15];
	assign	monmdw[14] = gatead & mdw[14];
	assign	monmdw[13] = gatead & mdw[13];
	assign	monmdw[12] = gatead & mdw[12];
	assign	monmdw[11] = gatead & mdw[11];
	assign	monmdw[10] = gatead & mdw[10];
	assign	monmdw[9] = gatead & mdw[9];
	assign	monmdw[8] = gatead & mdw[8];
	assign	monmdw[7] = gatead & mdw[7];
	assign	monmdw[6] = gatead & mdw[6];
	assign	monmdw[5] = gatead & mdw[5];
	assign	monmdw[4] = gatead & mdw[4];
	assign	monmdw[3] = gatead & mdw[3];
	assign	monmdw[2] = gatead & mdw[2];
	assign	monmdw[1] = gatead & mdw[1];
	assign	monmdw[0] = gatead & mdw[0];

endmodule

/********************************************************************************/
/* K0R EVA ALU Block                                                           	*/
/*                                                          Made K.Tanaka       */
/********************************************************************************/
/* Ver1.00  New                                                                 */
/* Ver1.50  Add mem_access                            2007.05.30 K.Tanaka       */
/********************************************************************************/
module QLK0RCPUEVA0V3_ALU(
	imdr, pselcpu, pselbcd, slreg, vpa, pid, mdw, ma_pre, maw1, biten, pc, pc_inc, wdop, wdwr,
	pa_st2, pa_data_buf, pa_data_mem, pa_data_spen,
	slflash, slmirr, pc_set_brk, pc_set_dbg,
	ID_stage0, MEM_stage0, MEM_stage1,
	cpuwr, cpuwr_reg, cpurd, stage_cut, A, X, B, C, D, E, H, L, CS, ES, PSW, MAA, BCDADJ,
	A_bank0, X_bank0, B_bank0, C_bank0, D_bank0, E_bank0, H_bank0, L_bank0,
	A_bank1, X_bank1, B_bank1, C_bank1, D_bank1, E_bank1, H_bank1, L_bank1,
	A_bank2, X_bank2, B_bank2, C_bank2, D_bank2, E_bank2, H_bank2, L_bank2,
	A_bank3, X_bank3, B_bank3, C_bank3, D_bank3, E_bank3, H_bank3, L_bank3,
	A_access, X_access, B_access, C_access,
	D_access, E_access, H_access, L_access,
	INT_access, skp_block,
	intblock, PSW_block, SP_enable, CS_enable, stage_cut_br,
	buf2, buf1, buf0, SP, sp_inc, dmard, dmawr, dmawdop, waitdma,
	ivack, ivack_pre, intisp, fchiram, fchiram_skp, romrd_skp, pc_wait_flg, reg_wait,
	data_hazard_flg, data_hazard, sp_hazard,
	dec_alu_input10, dec_alu_input20,
	dec_alu_add, dec_alu_sub, dec_alu_and, dec_alu_or, dec_alu_exor,
	dec_alu_andbit, dec_alu_orbit, dec_alu_exorbit,
	dec_alu_ror, dec_alu_rol, dec_alu_shr, dec_alu_shl, dec_alu_sar,
	dec_alu_mulu, dec_alu_carry,
        dec_alu_transin, dec_alu_transout, dec_alu_bitsh, dec_alu_biten, dec_word_access,
	dec_xch_byte, dec_xchw_bc, dec_xchw_de, dec_xchw_hl,
	dec_SP_enable,
	dec_A_enable, dec_X_enable,
	dec_B_enable, dec_C_enable,
	dec_D_enable, dec_E_enable,
	dec_H_enable, dec_L_enable,
	dec_ES_enable, dec_Z_enable, dec_CY_enable, dec_AC_enable,
	dec_IE_enable, dec_ISP_enable, dec_RBS_enable,
	dec_buf0_enable, dec_buf1_enable, dec_buf2_enable,
	dec_cpuwr_enable, dec_cpurd_enable,
	dec_sp_set_enable, dec_sp_inc, dec_sp_dec,
	dec_stage_cut_brtf, dec_stage_cut_ifbr,
	dec_ifbr_not, dec_ifbr_zero, dec_ifbr_ht,
	dec_set_buf_retadr, dec_set_buf_intr,
	dec_skc, dec_sknc, dec_skz, dec_sknz, dec_skh, dec_sknh, dec_movs, dec_cmps,
	dec_ma_enable,
	skpack, skipexe, pswlock, wait_block_brtf, mem_access,
// for EVA
        SP_usr, SP_sv,
        svmod, svmodi,
        alt1, alt2,
        spinc, spdec,
        icecsgregu, icecsgrega, iceifa,
        SP0, icedo,
//
	cpuen, pswen, baseck, resb, scanmode,
	RVEON
	);

	output	[15:0]	mdw;
	output	[7:0]	biten;
	output		wdop, wdwr;
	output		cpuwr, cpuwr_reg, cpurd, stage_cut;
	output	[7:0]	A, X, B, C, D, E, H, L, buf1, buf0;
	output	[7:0]	A_bank0,X_bank0,B_bank0,C_bank0,D_bank0,E_bank0,H_bank0,L_bank0;
	output	[7:0]	A_bank1,X_bank1,B_bank1,C_bank1,D_bank1,E_bank1,H_bank1,L_bank1;
	output	[7:0]	A_bank2,X_bank2,B_bank2,C_bank2,D_bank2,E_bank2,H_bank2,L_bank2;
	output	[7:0]	A_bank3,X_bank3,B_bank3,C_bank3,D_bank3,E_bank3,H_bank3,L_bank3;
	output		A_access,X_access,B_access,C_access;
	output		D_access,E_access,H_access,L_access;
	output		INT_access;
	output	[3:0]	CS, ES, buf2;
	output		MAA;
	output	[14:0]	SP, sp_inc;
	output		skpack, skipexe;
	output	[7:0]	PSW;
	output	[1:0]	BCDADJ;
	output		skp_block;
	output		intblock;
	output		PSW_block;
	output		stage_cut_br;
	output		wait_block_brtf;
	output		mem_access;
	output		RVEON;
// for EVA
        output          spinc, spdec;
        output          SP0;
        output  [31:0]  icedo;
//

	input		SP_enable, CS_enable;
	input		pa_data_buf, pa_data_mem, pa_data_spen;
	input		pa_st2;
	input		slflash;
	input		slreg;
	input		slmirr;
	input	[15:0]	imdr;
	input		pselcpu, pselbcd;
	input	[3:0]	vpa;
	input	[31:0]	pid;
	input	[15:0]	ma_pre;
	input		maw1;
	input	[19:0]	pc, pc_inc;
	input	[7:0]	ID_stage0, MEM_stage0, MEM_stage1;
	input		dmard, dmawr, dmawdop, waitdma;
	input		ivack, ivack_pre;
	input	[1:0]	intisp;
	input		fchiram, fchiram_skp, romrd_skp;
	input		pc_wait_flg, reg_wait;
	input		pc_set_brk, pc_set_dbg;
	input		data_hazard_flg, data_hazard, sp_hazard;
	input	[3:0]	dec_alu_input10;
	input	[3:0]	dec_alu_input20;
	input	[3:0]	dec_alu_transout;
	input		dec_alu_transin;
	input	[4:0]	dec_alu_bitsh;
	input		dec_alu_biten;
	input		dec_alu_add, dec_alu_sub, dec_alu_and, dec_alu_or, dec_alu_exor;
	input		dec_alu_andbit, dec_alu_orbit, dec_alu_exorbit;
	input		dec_alu_ror, dec_alu_rol, dec_alu_shr, dec_alu_shl, dec_alu_sar;
	input		dec_alu_mulu, dec_alu_carry;
	input		dec_word_access;
	input		dec_xch_byte, dec_xchw_bc, dec_xchw_de, dec_xchw_hl;
	input		dec_SP_enable;
	input		dec_A_enable, dec_X_enable;
	input		dec_B_enable, dec_C_enable;
	input		dec_D_enable, dec_E_enable;
	input		dec_H_enable, dec_L_enable;
	input		dec_ES_enable, dec_Z_enable, dec_CY_enable, dec_AC_enable;
	input		dec_IE_enable, dec_ISP_enable, dec_RBS_enable;
	input		dec_buf0_enable, dec_buf1_enable, dec_buf2_enable;
	input		dec_cpuwr_enable, dec_cpurd_enable;
	input		dec_sp_set_enable, dec_sp_inc, dec_sp_dec;
	input		dec_stage_cut_brtf, dec_stage_cut_ifbr;
	input		dec_ifbr_not, dec_ifbr_zero, dec_ifbr_ht;
	input		dec_set_buf_retadr, dec_set_buf_intr;
	input		dec_skc, dec_sknc, dec_skz, dec_sknz, dec_skh, dec_sknh;
	input		dec_movs, dec_cmps;
	input		dec_ma_enable;
	input		pswlock;
	input		cpuen, pswen, baseck, resb;
	input		scanmode;

// for EVA
        input           svmod, svmodi;
        input           alt1, alt2;
        input           icecsgregu, icecsgrega;
        input   [2:0]   iceifa;
//

	wire	[15:0]	mdw_pre, mdw_dma;
	wire	[14:0]	sp_inc;
	wire	[15:0]	bufr;
	wire	[7:0]	PSW;
	wire	[15:0]	bitshout, exeout, muluout, aluout, aluoutpsw;
	wire		acout, cyout ,cyout1, cyout2;
	wire		PSW_enable, PSW_block_pre;
	wire		bank0, bank1, bank2, bank3;
	wire		bank_correspond;
	wire		A_access,X_access,B_access,C_access;
	wire		D_access,E_access,H_access,L_access;
	wire		wdop_pre;
	wire		sp_sfr_en;
	wire	[1:0]	bcdadj_flg;
	wire		bcdadj_low;
	wire	[1:0]	BCDADJ;
	wire	[7:0]	A_groupA,X_groupA,B_groupA,C_groupA,D_groupA,E_groupA,H_groupA,L_groupA;
	wire	[7:0]	A_groupB,X_groupB,B_groupB,C_groupB,D_groupB,E_groupB,H_groupB,L_groupB;
	wire	[7:0]	A_groupC,X_groupC,B_groupC,C_groupC,D_groupC,E_groupC,H_groupC,L_groupC;
	wire	[7:0]	MEM_stage0_groupA, MEM_stage1_groupA;
	wire	[15:0]	imdr_groupA, imdr_groupB, bufr_groupA, bufr_groupB;
	wire		cpuwr_reg;

	reg	[7:0]	biten;
// for EVA
//	reg	[14:0]	SP, sp_pre;
	reg	[14:0]	sp_pre;
//
	reg	[7:0]	A,X,B,C,D,E,H,L,buf0,buf1;
	reg	[7:0]	A_bank0,X_bank0,B_bank0,C_bank0,D_bank0,E_bank0,H_bank0,L_bank0;
	reg	[7:0]	A_bank1,X_bank1,B_bank1,C_bank1,D_bank1,E_bank1,H_bank1,L_bank1;
	reg	[7:0]	A_bank2,X_bank2,B_bank2,C_bank2,D_bank2,E_bank2,H_bank2,L_bank2;
	reg	[7:0]	A_bank3,X_bank3,B_bank3,C_bank3,D_bank3,E_bank3,H_bank3,L_bank3;
// for EVA
//	reg	[3:0]	CS,ES,buf2;
	reg	[3:0]	buf2;
//
	reg		MAA;
	reg	[1:0]	ISP;
	reg		Z,AC,CY,IE;
	reg	[1:0]	RBS;
	reg	[7:0]	aluin10, aluin11, aluin20, aluin21;
	reg	[7:0]	bitshin10, bitshin20, bitshin21;
	reg	[15:0]	transout, transin;
	reg		mem_access ;
	reg		cpuwr_pre, cpurd_pre;
	reg		fchiram_cpurd;
	reg		stage_cut, stage_cut_ifbr, stage_cut_brtf, stage_cut_alu;
	reg		wait_block_brtf;
	reg		ifbr_not, ifbr_zero, ifbr_ht;
	reg		skpack, skip_c, skip_nc, skip_z, skip_nz, skip_h, skip_nh;
	reg		intblock;
	reg		prefix_skp;
	reg	[15:0]	rdata;
	reg		PSW_block;
	reg		isp_hazard ;
	reg		sp_sfr_msk ;
	reg		RVEON;

/*------------------------------------------------------------------------------*/
/* ＡＬＵ入力１									*/
/*------------------------------------------------------------------------------*/
/*   ＡＬＵ入力１を選択する。							*/
/*------------------------------------------------------------------------------*/

// 通常MDRバスのデータをALUに入力するが、FLASHのデータリードの場合は、
// 保持バッファに格納されたPIDバスのデータを読み出す。
/*------------------------------------------------------------------------------*/
/* Ver2.0  bufr(imdr)の経路を必要な時だけ出力する。				*/
/*------------------------------------------------------------------------------*/
/* Ver3.0  ディレイによるヒゲ防止の対策を見直す(CPUV1.5と等価に戻す)		*/
/*------------------------------------------------------------------------------*/
	assign bufr = (pa_data_mem) ? {buf1, buf0} : imdr ;
	assign bufr_groupA = (pa_data_mem) ? {buf1, buf0} : imdr ;
	assign bufr_groupB = (pa_data_mem) ? {buf1, buf0} : imdr ;
//	assign bufr_groupA = (pa_data_mem) ? {buf1, buf0} : imdr_groupA ;
//	assign bufr_groupB = (pa_data_mem) ? {buf1, buf0} : imdr_groupB ;

// ALU入力１の下位８ビットを選択する。
/*------------------------------------------------------------------------------*/
/* Ver2.0  汎用レジスタ、bufrを必要な時だけ開く_groupA,B,Cに変更		*/
/*------------------------------------------------------------------------------*/
	always @(dec_alu_input10 or vpa or A_groupB or X_groupB or B_groupB or C_groupB or D_groupB or
		E_groupB or H_groupB or L_groupB or CY or buf0 or SP or bufr_groupB) begin
		casex ({dec_alu_input10,vpa[0]})
			({4'h1,1'bx}) : aluin10 = 8'h01 ;
			({4'h3,1'bx}) : aluin10 = A_groupB ;
			({4'h4,1'bx}) : aluin10 = X_groupB ;
			({4'h5,1'bx}) : aluin10 = B_groupB ;
			({4'h6,1'bx}) : aluin10 = C_groupB ;
			({4'h7,1'bx}) : aluin10 = D_groupB ;
			({4'h8,1'bx}) : aluin10 = E_groupB ;
			({4'h9,1'bx}) : aluin10 = H_groupB ;
			({4'ha,1'bx}) : aluin10 = L_groupB ;
			({4'hb,1'bx}) : aluin10 = bufr_groupB[7:0] ;
			({4'hd,1'bx}) : aluin10 = {SP[6:0],1'b0} ;
			({4'he,1'b0}) : aluin10 = bufr_groupB[7:0] ;
			({4'he,1'b1}) : aluin10 = bufr_groupB[15:8] ;
			default : aluin10 = 8'h00 ;
		endcase
	end

// ALU入力１の上位８ビットを選択する。
/*------------------------------------------------------------------------------*/
/* Ver2.0  汎用レジスタ、bufrを必要な時だけ開く_groupA,B,Cに変更		*/
/*------------------------------------------------------------------------------*/
	always @(dec_word_access or dec_alu_input10 or A_groupB or B_groupB or D_groupB or H_groupB or
		buf1 or SP or bufr_groupB) begin
		casex ({dec_word_access,dec_alu_input10})
			({1'b1,4'h4}) : aluin11 = A_groupB ;
			({1'b1,4'h6}) : aluin11 = B_groupB ;
			({1'b1,4'h8}) : aluin11 = D_groupB ;
			({1'b1,4'ha}) : aluin11 = H_groupB ;
			({1'b1,4'hb}) : aluin11 = bufr_groupB[15:8] ;
			({1'b1,4'hd}) : aluin11 = SP[14:7] ;
			({1'b1,4'he}) : aluin11 = bufr_groupB[15:8] ;
			default : aluin11 = 8'h00 ;
		endcase
	end

/*------------------------------------------------------------------------------*/
// Ver2.0　電流削減の為にイネーブル信号で必要な経路のみを開く
/*------------------------------------------------------------------------------*/
/* Ver3.0  電流削減の効果が確認できなかったためVer1.5へ戻す			*/
/*------------------------------------------------------------------------------*/

	assign MEM_stage0_groupA = MEM_stage0 ;
	assign MEM_stage1_groupA = MEM_stage1 ;

//	assign MEM_stage0_groupA = (
//			   dec_alu_input20==4'ha	//aluin20
//			|| dec_alu_input20==4'hb	//aluin20
//			|| dec_alu_bitsh[3]		//biten,bitshin20
//			|| dec_alu_transout==4'ha	//transout[7:0]
//			|| dec_alu_shr			//bitshout
//			|| dec_alu_shl			//bitshout
//			|| dec_alu_sar			//bitshout
//			) ? MEM_stage0 : 8'h00;
//
//	assign MEM_stage1_groupA = (
//			   dec_alu_input20==4'ha	//aluin21
//			|| dec_alu_transout==4'ha	//transout[15:8]
//			) ? MEM_stage1 : 8'h00;

/*------------------------------------------------------------------------------*/
/* ＡＬＵ入力２									*/
/*------------------------------------------------------------------------------*/
/*   ＡＬＵ入力２を選択する。							*/
/*------------------------------------------------------------------------------*/
/* Ver2.0  ALUの分割。＋−＆｜＾専用						*/
/*　　　　汎用レジスタ、bufrを必要な時だけ開く_groupA,B,Cに変更			*/
/*------------------------------------------------------------------------------*/

// ALU入力２の下位８ビットを選択する。
// ADDW/SUBW SP,#byte(dec_alu_input20が5'h0b)の時はワードアクセスでありながら
// 演算に必要なデータはバイトであるため、上位８ビットが０下位８ビットがMEM_stage0
// といった組合せを個別に用意した。
	always @(dec_alu_input20 or vpa or
		A_groupB or X_groupB or B_groupB or C_groupB or D_groupB or E_groupB or H_groupB or L_groupB or
		MEM_stage0_groupA or MEM_stage1_groupA or
		bufr_groupB or buf0 or buf2 or CY or PSW) begin
		casex ({dec_alu_input20,MEM_stage0_groupA[6:4],vpa[0]})
			({4'h1,3'hx,1'bx}) : aluin20 = 8'h01 ;
			({4'h2,3'hx,1'bx}) : aluin20 = A_groupB ;
			({4'h3,3'hx,1'bx}) : aluin20 = X_groupB ;
			({4'h4,3'hx,1'bx}) : aluin20 = B_groupB ;
			({4'h5,3'hx,1'bx}) : aluin20 = C_groupB ;
			({4'h6,3'hx,1'bx}) : aluin20 = D_groupB ;
			({4'h7,3'hx,1'bx}) : aluin20 = E_groupB ;
			({4'h8,3'hx,1'bx}) : aluin20 = H_groupB ;
			({4'h9,3'hx,1'bx}) : aluin20 = L_groupB ;
			({4'ha,3'hx,1'bx}) : aluin20 = MEM_stage0_groupA ;
			({4'hb,3'hx,1'bx}) : aluin20 = MEM_stage0_groupA ;
			({4'hc,3'hx,1'b0}) : aluin20 = bufr_groupB[7:0] ;
			({4'hc,3'hx,1'b1}) : aluin20 = bufr_groupB[15:8] ;
			({4'hd,3'hx,1'bx}) : aluin20 = {4'b0,buf2} ;
			({4'he,3'hx,1'bx}) : aluin20 = buf0 ;
			default : aluin20 = 8'h00 ;
		endcase
	end

// ALU入力２の上位８ビットを選択する。
	always @(dec_word_access or dec_alu_input20 or A_groupB or B_groupB or D_groupB or H_groupB or
		MEM_stage1_groupA or bufr_groupB or buf1 or PSW) begin
		casex ({dec_word_access,dec_alu_input20})
			({1'b1,4'h3}) : aluin21 = A_groupB ;
			({1'b1,4'h5}) : aluin21 = B_groupB ;
			({1'b1,4'h7}) : aluin21 = D_groupB ;
			({1'b1,4'h9}) : aluin21 = H_groupB ;
			({1'b1,4'ha}) : aluin21 = MEM_stage1_groupA ;
			({1'b1,4'hc}) : aluin21 = bufr_groupB[15:8] ;
			({1'b1,4'hd}) : aluin21 = PSW ;
			({1'b1,4'he}) : aluin21 = buf1 ;
			default : aluin21 = 8'h00 ;
		endcase
	end

/*------------------------------------------------------------------------------*/
/* ＢＩＴＥＮ信号								*/
/*------------------------------------------------------------------------------*/
/*   ビット操作命令での有効ビットを指定する。					*/
/*   dec_alu_input20 が 0x10,0x11,0x12,0x13,0x14,0x15 の時はビットアクセス	*/
/*------------------------------------------------------------------------------*/
/* Ver2.0  dec_alu_bitsh が "8,9,c,d,e,f,18,19,1c,1d" の時はビットアクセス      */
/*　　　　MEM_stage0を必要な時だけ開く_groupA,B,Cに変更				*/
/*------------------------------------------------------------------------------*/

// ビット操作命令でない場合は全ビットに１を立てる。
	always @(dec_alu_biten or MEM_stage0) begin
		if (dec_alu_biten == 1'b1) begin
			casex (MEM_stage0[6:4])
				3'h1 : biten = 8'b0000_0010 ;
				3'h2 : biten = 8'b0000_0100 ;
				3'h3 : biten = 8'b0000_1000 ;
				3'h4 : biten = 8'b0001_0000 ;
				3'h5 : biten = 8'b0010_0000 ;
				3'h6 : biten = 8'b0100_0000 ;
				3'h7 : biten = 8'b1000_0000 ;
				default : biten = 8'b0000_0001 ;
			endcase
		end
		else biten = 8'b1111_1111 ;
	end

/*------------------------------------------------------------------------------*/
/* ＡＬＵ演算									*/
/*------------------------------------------------------------------------------*/
/*   ＡＬＵ演算の種類を選択する。						*/
/*------------------------------------------------------------------------------*/
/* Ver2.0  MEM_stage0を必要な時だけ開く_groupA,B,Cに変更			*/
/*------------------------------------------------------------------------------*/

// 演算を実行するタイミングパスとそれ以外のパスを区別する為に階層化する。
	QLK0RCPUEVA0V3_EXE exe (.aluin10(aluin10), .aluin11(aluin11), .aluin20(aluin20), .aluin21(aluin21), .CY(CY),
			     .dec_alu_add(dec_alu_add), .dec_alu_sub(dec_alu_sub), .dec_alu_and(dec_alu_and), 
			     .dec_alu_or(dec_alu_or), .dec_alu_exor(dec_alu_exor), 
			     .dec_alu_carry(dec_alu_carry), .dec_word_access(dec_word_access),
			     .exeout(exeout), .acout(acout), .cyout(cyout1) );

/*------------------------------------------------------------------------------*/
/* Ver2.0  ALUの分割。乗算器専用						*/
/*------------------------------------------------------------------------------*/

	assign muluout = (dec_alu_mulu) ? (A_groupB * X_groupB) : 16'h0000;

/*------------------------------------------------------------------------------*/
/* Ver2.0  ALUの分割。転送のメモリアクセス出力専用				*/
/*------------------------------------------------------------------------------*/

	always @(dec_alu_transout or vpa or A_groupA or X_groupA or B_groupA or C_groupA or D_groupA or
		E_groupA or H_groupA or L_groupA or MEM_stage0_groupA or buf0 or buf2) begin
		casex ({dec_alu_transout,vpa[0]})
			({4'h1,1'bx}) : transout[7:0] = 8'h01 ;
			({4'h2,1'bx}) : transout[7:0] = A_groupA ;
			({4'h3,1'bx}) : transout[7:0] = X_groupA ;
			({4'h4,1'bx}) : transout[7:0] = B_groupA ;
			({4'h5,1'bx}) : transout[7:0] = C_groupA ;
			({4'h6,1'bx}) : transout[7:0] = D_groupA ;
			({4'h7,1'bx}) : transout[7:0] = E_groupA ;
			({4'h8,1'bx}) : transout[7:0] = H_groupA ;
			({4'h9,1'bx}) : transout[7:0] = L_groupA ;
			({4'ha,1'bx}) : transout[7:0] = MEM_stage0_groupA ;
			({4'hd,1'bx}) : transout[7:0] = {4'b0,buf2} ;
			({4'he,1'bx}) : transout[7:0] = buf0 ;
			default : transout[7:0] = 8'h00 ;
		endcase
	end
	always @(dec_word_access or dec_alu_transout or A_groupA or B_groupA or D_groupA or H_groupA or
		MEM_stage1_groupA or PSW or buf1) begin
		casex ({dec_word_access,dec_alu_transout})
			({1'b1,4'h3}) : transout[15:8] = A_groupA ;
			({1'b1,4'h5}) : transout[15:8] = B_groupA ;
			({1'b1,4'h7}) : transout[15:8] = D_groupA ;
			({1'b1,4'h9}) : transout[15:8] = H_groupA ;
			({1'b1,4'ha}) : transout[15:8] = MEM_stage1_groupA ;
			({1'b1,4'hd}) : transout[15:8] = PSW ;
			({1'b1,4'he}) : transout[15:8] = buf1 ;
			({1'b1,4'hf}) : transout[15:8] = PSW ;
			default : transout[15:8] = 8'h00 ;
		endcase
	end

/*------------------------------------------------------------------------------*/
/* Ver2.0  ALUの分割。転送のメモリからの入力専用				*/
/*------------------------------------------------------------------------------*/

	always @(dec_alu_transin or vpa or bufr_groupA) begin
		casex ({dec_alu_transin,vpa[0]})
			({1'b1,1'b0}) : transin[7:0] = bufr_groupA[7:0] ;
			({1'b1,1'b1}) : transin[7:0] = bufr_groupA[15:8] ;
			default : transin[7:0] = 8'h00 ;
		endcase
	end
	always @(dec_word_access or dec_alu_transin or bufr_groupA) begin
		casex ({dec_word_access,dec_alu_transin})
			({1'b1,1'b1}) : transin[15:8] = bufr_groupA[15:8] ;
			default : transin[15:8] = 8'h00 ;
		endcase
	end

/*------------------------------------------------------------------------------*/
/* Ver2.0  ALUの分割。シフト・ビット命令専用					*/
/*------------------------------------------------------------------------------*/

// ALU入力1の下位８ビットを選択する。

        always @(dec_alu_bitsh or vpa or A_groupB or bufr_groupB or CY) begin
                casex ({dec_alu_bitsh, vpa[0]})
                        ({5'b1100x,1'bx}) : bitshin10 = 8'h01 ;
                        ({5'b1110x,1'bx}) : bitshin10 = A_groupB ;
                        ({5'b0110x,1'b0}) : bitshin10 = bufr_groupB[7:0] ;
                        ({5'b0110x,1'b1}) : bitshin10 = bufr_groupB[15:8] ;
                        ({5'b0100x,1'bx}) : bitshin10 = {7'h00,CY} ;
                        ({5'b10001,1'bx}) : bitshin10 = {7'h00,CY} ;
                        default : bitshin10 = 8'h00 ;
                endcase
        end

// ALU入力２の下位８ビットを選択する。
        always @(dec_alu_bitsh or vpa or A_groupB or X_groupB or B_groupB or C_groupB or
                MEM_stage0_groupA or bufr_groupB or CY) begin
                casex ({dec_alu_bitsh, MEM_stage0_groupA[6:4], vpa[0]})
                        ({5'bx0001,3'hx,1'bx}) : bitshin20 = 8'hff ;			// 0x01, 0x11
                        ({5'b00010,3'hx,1'bx}) : bitshin20 = A_groupB ;			// 0x02
                        ({5'b00011,3'hx,1'bx}) : bitshin20 = X_groupB ;			// 0x03
                        ({5'b00100,3'hx,1'bx}) : bitshin20 = B_groupB ;			// 0x04
                        ({5'b00101,3'hx,1'bx}) : bitshin20 = C_groupB ;			// 0x05
                        ({5'bx1000,3'h0,1'b0}) : bitshin20 = {7'b0,bufr_groupB[0]} ;	// 0x08, 0x18
                        ({5'bx1000,3'h1,1'b0}) : bitshin20 = {7'b0,bufr_groupB[1]} ;	// 0x08, 0x18
                        ({5'bx1000,3'h2,1'b0}) : bitshin20 = {7'b0,bufr_groupB[2]} ;	// 0x08, 0x18
                        ({5'bx1000,3'h3,1'b0}) : bitshin20 = {7'b0,bufr_groupB[3]} ;	// 0x08, 0x18
                        ({5'bx1000,3'h4,1'b0}) : bitshin20 = {7'b0,bufr_groupB[4]} ;	// 0x08, 0x18
                        ({5'bx1000,3'h5,1'b0}) : bitshin20 = {7'b0,bufr_groupB[5]} ;	// 0x08, 0x18
                        ({5'bx1000,3'h6,1'b0}) : bitshin20 = {7'b0,bufr_groupB[6]} ;	// 0x08, 0x18
                        ({5'bx1000,3'h7,1'b0}) : bitshin20 = {7'b0,bufr_groupB[7]} ;	// 0x08, 0x18
                        ({5'bx1000,3'h0,1'b1}) : bitshin20 = {7'b0,bufr_groupB[8]} ;	// 0x08, 0x18
                        ({5'bx1000,3'h1,1'b1}) : bitshin20 = {7'b0,bufr_groupB[9]} ;	// 0x08, 0x18
                        ({5'bx1000,3'h2,1'b1}) : bitshin20 = {7'b0,bufr_groupB[10]} ;	// 0x08, 0x18
                        ({5'bx1000,3'h3,1'b1}) : bitshin20 = {7'b0,bufr_groupB[11]} ;	// 0x08, 0x18
                        ({5'bx1000,3'h4,1'b1}) : bitshin20 = {7'b0,bufr_groupB[12]} ;	// 0x08, 0x18
                        ({5'bx1000,3'h5,1'b1}) : bitshin20 = {7'b0,bufr_groupB[13]} ;	// 0x08, 0x18
                        ({5'bx1000,3'h6,1'b1}) : bitshin20 = {7'b0,bufr_groupB[14]} ;	// 0x08, 0x18
                        ({5'bx1000,3'h7,1'b1}) : bitshin20 = {7'b0,bufr_groupB[15]} ;	// 0x08, 0x18
                        ({5'bx1001,3'h0,1'bx}) : bitshin20 = {7'b0,A_groupB[0]} ;	// 0x09, 0x19
                        ({5'bx1001,3'h1,1'bx}) : bitshin20 = {7'b0,A_groupB[1]} ;	// 0x09, 0x19
                        ({5'bx1001,3'h2,1'bx}) : bitshin20 = {7'b0,A_groupB[2]} ;	// 0x09, 0x19
                        ({5'bx1001,3'h3,1'bx}) : bitshin20 = {7'b0,A_groupB[3]} ;	// 0x09, 0x19
                        ({5'bx1001,3'h4,1'bx}) : bitshin20 = {7'b0,A_groupB[4]} ;	// 0x09, 0x19
                        ({5'bx1001,3'h5,1'bx}) : bitshin20 = {7'b0,A_groupB[5]} ;	// 0x09, 0x19
                        ({5'bx1001,3'h6,1'bx}) : bitshin20 = {7'b0,A_groupB[6]} ;	// 0x09, 0x19
                        ({5'bx1001,3'h7,1'bx}) : bitshin20 = {7'b0,A_groupB[7]} ;	// 0x09, 0x19
                        ({5'b01110,3'h0,1'b0}) : bitshin20 = {bufr_groupB[7:1],CY} ;	// 0x0e
                        ({5'b01110,3'h1,1'b0}) : bitshin20 = {bufr_groupB[7:2],CY,bufr_groupB[0]} ;	// 0x0e
                        ({5'b01110,3'h2,1'b0}) : bitshin20 = {bufr_groupB[7:3],CY,bufr_groupB[1:0]} ;	// 0x0e
                        ({5'b01110,3'h3,1'b0}) : bitshin20 = {bufr_groupB[7:4],CY,bufr_groupB[2:0]} ;	// 0x0e
                        ({5'b01110,3'h4,1'b0}) : bitshin20 = {bufr_groupB[7:5],CY,bufr_groupB[3:0]} ;	// 0x0e
                        ({5'b01110,3'h5,1'b0}) : bitshin20 = {bufr_groupB[7:6],CY,bufr_groupB[4:0]} ;	// 0x0e
                        ({5'b01110,3'h6,1'b0}) : bitshin20 = {bufr_groupB[7],CY,bufr_groupB[5:0]} ;	// 0x0e
                        ({5'b01110,3'h7,1'b0}) : bitshin20 = {CY,bufr_groupB[6:0]} ;	// 0x0e
                        ({5'b01110,3'h0,1'b1}) : bitshin20 = {bufr_groupB[15:9],CY} ;	// 0x0e
                        ({5'b01110,3'h1,1'b1}) : bitshin20 = {bufr_groupB[15:10],CY,bufr_groupB[8]} ;	// 0x0e
                        ({5'b01110,3'h2,1'b1}) : bitshin20 = {bufr_groupB[15:11],CY,bufr_groupB[9:8]} ;	// 0x0e
                        ({5'b01110,3'h3,1'b1}) : bitshin20 = {bufr_groupB[15:12],CY,bufr_groupB[10:8]} ;// 0x0e
                        ({5'b01110,3'h4,1'b1}) : bitshin20 = {bufr_groupB[15:13],CY,bufr_groupB[11:8]} ;// 0x0e
                        ({5'b01110,3'h5,1'b1}) : bitshin20 = {bufr_groupB[15:14],CY,bufr_groupB[12:8]} ;// 0x0e
                        ({5'b01110,3'h6,1'b1}) : bitshin20 = {bufr_groupB[15],CY,bufr_groupB[13:8]} ;	// 0x0e
                        ({5'b01110,3'h7,1'b1}) : bitshin20 = {CY,bufr_groupB[14:8]} ;	// 0x0e
                        ({5'bx1101,3'h0,1'bx}) : bitshin20 = 8'h01 ;			// 0x0d, 0x1d
                        ({5'bx1101,3'h1,1'bx}) : bitshin20 = 8'h02 ;			// 0x0d, 0x1d
                        ({5'bx1101,3'h2,1'bx}) : bitshin20 = 8'h04 ;			// 0x0d, 0x1d
                        ({5'bx1101,3'h3,1'bx}) : bitshin20 = 8'h08 ;			// 0x0d, 0x1d
                        ({5'bx1101,3'h4,1'bx}) : bitshin20 = 8'h10 ;			// 0x0d, 0x1d
                        ({5'bx1101,3'h5,1'bx}) : bitshin20 = 8'h20 ;			// 0x0d, 0x1d
                        ({5'bx1101,3'h6,1'bx}) : bitshin20 = 8'h40 ;			// 0x0d, 0x1d
                        ({5'bx1101,3'h7,1'bx}) : bitshin20 = 8'h80 ;			// 0x0d, 0x1d
                        ({5'bx1100,3'h0,1'bx}) : bitshin20 = 8'hfe ;			// 0x0c, 0x1c
                        ({5'bx1100,3'h1,1'bx}) : bitshin20 = 8'hfd ;			// 0x0c, 0x1c
                        ({5'bx1100,3'h2,1'bx}) : bitshin20 = 8'hfb ;			// 0x0c, 0x1c
                        ({5'bx1100,3'h3,1'bx}) : bitshin20 = 8'hf7 ;			// 0x0c, 0x1c
                        ({5'bx1100,3'h4,1'bx}) : bitshin20 = 8'hef ;			// 0x0c, 0x1c
                        ({5'bx1100,3'h5,1'bx}) : bitshin20 = 8'hdf ;			// 0x0c, 0x1c
                        ({5'bx1100,3'h6,1'bx}) : bitshin20 = 8'hbf ;			// 0x0c, 0x1c
                        ({5'bx1100,3'h7,1'bx}) : bitshin20 = 8'h7f ;			// 0x0c, 0x1c
                        ({5'b01111,3'h0,1'bx}) : bitshin20 = {A_groupB[7:1],CY} ;		// 0x0f
                        ({5'b01111,3'h1,1'bx}) : bitshin20 = {A_groupB[7:2],CY,A_groupB[0]} ;	// 0x0f
                        ({5'b01111,3'h2,1'bx}) : bitshin20 = {A_groupB[7:3],CY,A_groupB[1:0]} ;	// 0x0f
                        ({5'b01111,3'h3,1'bx}) : bitshin20 = {A_groupB[7:4],CY,A_groupB[2:0]} ;	// 0x0f
                        ({5'b01111,3'h4,1'bx}) : bitshin20 = {A_groupB[7:5],CY,A_groupB[3:0]} ;	// 0x0f
                        ({5'b01111,3'h5,1'bx}) : bitshin20 = {A_groupB[7:6],CY,A_groupB[4:0]} ;	// 0x0f
                        ({5'b01111,3'h6,1'bx}) : bitshin20 = {A_groupB[7],CY,A_groupB[5:0]} ;	// 0x0f
                        ({5'b01111,3'h7,1'bx}) : bitshin20 = {CY,A_groupB[6:0]} ;		// 0x0f
                        default : bitshin20 = 8'h00 ;
                endcase
        end

// ALU入力２の上位８ビットを選択する。
        always @(dec_word_access or dec_alu_bitsh or A_groupB or B_groupB ) begin
                casex ({dec_word_access,dec_alu_bitsh })
                        ({1'b1,5'h03}) : bitshin21 = A_groupB ;
                        ({1'b1,5'h05}) : bitshin21 = B_groupB ;
                        default : bitshin21 = 8'h00 ;
                endcase
        end

/*------------------------------------------------------------------------------*/
/* ＡＬＵ演算2                                                                  */
/*------------------------------------------------------------------------------*/

// 演算を実行するタイミングパスとそれ以外のパスを区別する為に階層化する。
        QLK0RCPUEVA0V3_EXE2 exe2 (.bitshin10(bitshin10), .bitshin20(bitshin20), .bitshin21(bitshin21), .CY(CY),
                               .dec_alu_andbit(dec_alu_andbit), .dec_alu_orbit(dec_alu_orbit), 
		  	       .dec_alu_exorbit(dec_alu_exorbit), .dec_alu_ror(dec_alu_ror),
                               .dec_alu_rol(dec_alu_rol), .dec_alu_shr(dec_alu_shr), .dec_alu_shl(dec_alu_shl),
                               .dec_alu_sar(dec_alu_sar), .dec_alu_carry(dec_alu_carry),
                               .MEM_stage0h(MEM_stage0_groupA[7:4]), .dec_word_access(dec_word_access),
                               .bitshout(bitshout), .cyout(cyout2) );

/*------------------------------------------------------------------------------*/
/* Ver2.0　ALUの演算結果							*/
/*------------------------------------------------------------------------------*/
/*   aluoutpsw:PSWの演算に使用する。			 			*/
/*   aluout   :演算結果に使用する。			 			*/
/*------------------------------------------------------------------------------*/

	assign aluout = exeout | transout | transin | muluout | bitshout ;
	assign aluoutpsw = exeout | bitshout ;
	assign cyout  = cyout1 | cyout2 ;

/*------------------------------------------------------------------------------*/
/* ゼロフラグレジスタ Ｚ							*/
/*------------------------------------------------------------------------------*/
/*   ＡＬＵ出力が０の時セットされる。						*/
/*   ＰＳＷに含まれる。								*/
/*------------------------------------------------------------------------------*/
/* Ver2.0　aluoutをaluoutpswに変更						*/
/*　　　　aluoutpswに変更した際にdec_movsの時はaluoutpswにデータがのってこない	*/
/*　　　　為、直接Xレジスタの値で判定する。					*/
/*------------------------------------------------------------------------------*/

// 内部ウェイト発生時は保持される。
// デコーダからPSWが選択された場合ALU出力が入り、直接メモリアクセスがあった場合MDWが入る。
// INT競合回避による外部ウェイトではPSWはウェイトしない。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) Z <= 1'b0 ;
		else if (cpuen || pswen) begin
			if (reg_wait || pswlock) Z <= Z ;
			else if (PSW_enable) Z <= aluoutpsw[14] ;
			else if (dec_Z_enable) begin
				if      (dec_word_access && aluoutpsw == 16'h0000) Z <= 1'b1 ;
				else if (!dec_word_access && aluoutpsw[7:0] == 8'h00) Z <= 1'b1 ;
				else Z <= 1'b0 ;
			end
			else if (dec_movs) begin
				if (X_groupB == 8'h00) Z <= 1'b1 ;
				else Z <= 1'b0 ;
			end
			else if (pselcpu && cpuwr) begin
				casex (vpa)
					4'ha : Z <= mdw_pre[6] ;
					default	: Z <= Z ;
				endcase
			end
		end
	end

/*------------------------------------------------------------------------------*/
/* キャリーフラグレジスタ ＣＹ							*/
/*------------------------------------------------------------------------------*/
/*   ＡＬＵの演算でキャリーが発生した場合セットされる。				*/
/*   ＰＳＷに含まれる。								*/
/*   dec_alu_input20 が 0x10,0x11,0x12,0x13,0x14,0x15 の時はビットアクセス	*/
/*------------------------------------------------------------------------------*/
/* Ver2.0 aluoutをaluoutpswに変更						*/
/*　　　　汎用レジスタを必要な時だけ開く_groupA,B,Cに変更			*/
/*　　　　dec_alu_bitsh = 0x08,0x09,0x01,0x11 && dec_CY_enable = 1		*/
/*　　　　						-> CY = aluoutpsw[0]	*/
/*------------------------------------------------------------------------------*/

// 内部ウェイト発生時は保持される。
// デコーダからPSWが選択された場合ALU出力が入り、直接メモリアクセスがあった場合MDWが入る。
// INT競合回避による外部ウェイトではPSWはウェイトしない。
// ADDC/SUBC命令で、ハザードが発生した場合、不正な演算結果がCYに入らない用に、data_hazard信号で保持する。
// cyoutを取り込む時、BCDADJレジスタが選択されていれば、CYとのORを取る。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) CY <= 1'b0 ;
		else if (cpuen || pswen) begin
			if (reg_wait || data_hazard || pswlock) CY <= CY ;
			else if (PSW_enable) CY <= aluoutpsw[8] ;
			else if (dec_movs) CY <= (A_groupB == 8'h00) | (X_groupB == 8'h00) ;
			else if (dec_CY_enable) begin
				if ((dec_alu_bitsh == 5'h01)|(dec_alu_bitsh == 5'h08)|(dec_alu_bitsh == 5'h09)|(dec_alu_bitsh == 5'h11)) CY <= aluoutpsw[0] ;
				else if (dec_cmps) CY <= (aluoutpsw[7:0] != 8'h00) | (A_groupB == 8'h00) | (aluin10 == 8'h00) ;
				else CY <= cyout | (CY & pselbcd) ;
			end
			else if (pselcpu && cpuwr) begin
				casex (vpa)
					4'ha : CY <= mdw_pre[0] ;
					default	: CY <= CY ;
				endcase
			end
		end
	end

/*------------------------------------------------------------------------------*/
/* 補助キャリーフラグレジスタ ＡＣ						*/
/*------------------------------------------------------------------------------*/
/*   ＡＬＵ演算で補助キャリーが発生した場合セットされる。			*/
/*   ＰＳＷに含まれる。								*/
/*------------------------------------------------------------------------------*/
/* Ver2.0 aluoutをaluoutpswに変更						*/
/*------------------------------------------------------------------------------*/

// 内部ウェイト発生時は保持される。
// デコーダからPSWが選択された場合ALU出力が入り、直接メモリアクセスがあった場合MDWが入る。
// INT競合回避による外部ウェイトではPSWはウェイトしない。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) AC <= 1'b0 ;
		else if (cpuen || pswen) begin
			if (reg_wait || pswlock) AC <= AC ;
			else if (PSW_enable) AC <= aluoutpsw[12] ;
			else if (dec_AC_enable) AC <= acout ;
			else if (pselcpu && cpuwr) begin
				casex (vpa)
					4'ha : AC <= mdw_pre[4] ;
					default	: AC <= AC ;
				endcase
			end
		end
	end

/*------------------------------------------------------------------------------*/
/* 割り込み許可フラグレジスタ ＩＥ						*/
/*------------------------------------------------------------------------------*/
/*   割り込み受け付けを判定する。						*/
/*   ＰＳＷに含まれる。								*/
/*------------------------------------------------------------------------------*/
/* Ver2.0 aluoutをaluoutpswに変更						*/
/*------------------------------------------------------------------------------*/

// 内部ウェイト発生時は保持される。
// デコーダからPSWが選択された場合ALU出力が入り、直接メモリアクセスがあった場合MDWが入る。
// INT競合回避による外部ウェイトではPSWはウェイトしない。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) IE <= 1'b0 ;
		else if (cpuen || pswen) begin
			if (reg_wait || pswlock) IE <= IE ;
			else if (PSW_enable) IE <= aluoutpsw[15] ;
			else if (dec_IE_enable) IE <= aluoutpsw[0] ;
			else if (pc_set_brk | pc_set_dbg) IE <= 1'b0 ;
			else if (pselcpu && cpuwr) begin
				casex (vpa)
					4'ha : IE <= mdw_pre[7] ;
					default	: IE <= IE ;
				endcase
			end
		end
	end

/*------------------------------------------------------------------------------*/
/* レジスタバンク選択フラグレジスタ ＲＢＳ					*/
/*------------------------------------------------------------------------------*/
/*   レジスタバンクを示す。							*/
/*   ＰＳＷに含まれる。                                                         */
/*------------------------------------------------------------------------------*/
/* Ver2.0 aluoutをaluoutpswに変更						*/
/*------------------------------------------------------------------------------*/

// 内部ウェイト発生時は保持される。
// デコーダからPSWが選択された場合ALU出力が入り、直接メモリアクセスがあった場合MDWが入る。
// SEL命令はオペコード中にバンクが埋め込まれているので、
// 実行時はALUを通してMEMステージのデータが入る。
// INT競合回避による外部ウェイトではPSWはウェイトしない。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) RBS <= 2'b0 ;
		else if (cpuen || pswen) begin
			if (reg_wait || pswlock) RBS <= RBS ;
			else if (PSW_enable) RBS <= {aluoutpsw[13],aluoutpsw[11]} ;
			else if (dec_RBS_enable) begin
				if (dec_alu_input20 == 4'ha) RBS <= aluoutpsw[5:4] ;
				else RBS <= {aluoutpsw[5],aluoutpsw[3]} ;
			end
			else if (pselcpu && cpuwr) begin
				casex (vpa)
					4'ha : RBS <= {mdw_pre[5],mdw_pre[3]} ;
					default	: RBS <= RBS ;
				endcase
			end
		end
	end

/*------------------------------------------------------------------------------*/
/* 割り込み優先順位フラグレジスタ ＩＳＰ					*/
/*------------------------------------------------------------------------------*/
/*   割り込みの優先順位を示す。							*/
/*   ＰＳＷに含まれる。								*/
/*------------------------------------------------------------------------------*/

// 割り込み実行時にハザードが発生した場合に１となる。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) isp_hazard <= 1'b0 ;
		else if (cpuen) begin
			if (data_hazard && ivack) isp_hazard <= 1'b1 ;
			else isp_hazard <= 1'b0 ;
		end
	end

// 内部ウェイト発生時と割り込み実行時のハザードで保持される。
// 割り込み発生時は通常ivack_preでISPを更新するが、
// 割り込み実行時にハザードが発生した場合はisp_hazardで更新する。
// INT競合回避による外部ウェイトではPSWはウェイトしない。
/*------------------------------------------------------------------------------*/
/* Ver2.0 aluoutをaluoutpswに変更						*/
/*------------------------------------------------------------------------------*/

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) ISP <= 2'b11 ;
		else if (cpuen || pswen) begin
			if (reg_wait || (data_hazard && ivack) || pswlock) ISP <= ISP ;
			else if (PSW_enable) ISP <= {aluoutpsw[10],aluoutpsw[9]} ;
			else if (ivack_pre || isp_hazard) ISP <= intisp ;
			else if (dec_ISP_enable) ISP <= aluoutpsw[2:1] ;
			else if (pselcpu && cpuwr) begin
				casex (vpa)
					4'ha : ISP <= mdw_pre[2:1] ;
					default	: ISP <= ISP ;
				endcase
			end
		end
	end

/*------------------------------------------------------------------------------*/
/* プログラムステータスワード ＰＳＷ						*/
/*------------------------------------------------------------------------------*/
/*   ＩＥ、Ｚ、ＲＢＳ１、ＡＣ、ＲＢＳ０、ＩＳＰ、ＣＹで構成される。		*/
/*------------------------------------------------------------------------------*/

// プログラムステータスワード
	assign PSW = {IE,Z,RBS[1],AC,RBS[0],ISP,CY} ;

// PSW選択信号。デコーダからPSWが選択された場合１となる。
	assign PSW_enable = dec_IE_enable & dec_Z_enable & dec_RBS_enable & dec_AC_enable & dec_ISP_enable & dec_CY_enable ;

// PSWにアクセスした時に１となる。INTマクロのIF/MKレジスタへのアクセスと合わせて、
// 外部ウェイト信号となる。
	assign INT_access = dec_IE_enable | PSW_enable ;

// PSWへのメモリアクセスを伴う条件分岐命令が実行された場合１となる。
	assign PSW_block_pre = pselcpu & (vpa == 4'ha) & dec_stage_cut_brtf ;

// 割り込み保留要因。PSWへのメモリアクセスを伴う条件分岐命令が実行された場合１となる。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) PSW_block <= 1'b0 ;
		else if (cpuen) begin
			if (reg_wait)	PSW_block <= PSW_block ;
			else		PSW_block <= PSW_block_pre ;
		end
	end

// 割り込み保留要因。PSWを操作した場合１となる。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) intblock <= 1'b0 ;
		else if (cpuen) begin
			if (reg_wait)	intblock <= intblock ;
			else		intblock <= PSW_enable ;
		end
	end

/*------------------------------------------------------------------------------*/
/* Ver3.0									*/
/* セルフ中割込み受付制御レジスタ RVEON						*/
/*------------------------------------------------------------------------------*/
	always @(posedge baseck or negedge resb) begin
		if (!resb) 	RVEON <= 1'b0 ;
		else if (cpuen) begin
			if (reg_wait)	RVEON <= RVEON ;
			else if (pselbcd & cpuwr) begin
				casex ({vpa}) 
					(4'hF) : RVEON <= mdw_pre[8] ;
					default : RVEON <= RVEON ;
				endcase
			end
		end
	end
/*------------------------------------------------------------------------------*/
/* 汎用レジスタ									*/
/*------------------------------------------------------------------------------*/
/*   １バイトのＡ、Ｘ、Ｂ、Ｃ、Ｄ、Ｅ、Ｈ、Ｌレジスタ×４バンクで構成される。	*/
/*------------------------------------------------------------------------------*/

// for EVA

        reg     [31:0]  icedo;
        reg     [7:0]   A_sv, X_sv, B_sv, C_sv, D_sv, E_sv, H_sv, L_sv;

        always @(icecsgregu or icecsgrega or iceifa or
                 A_sv or X_sv or B_sv or C_sv or D_sv or E_sv or H_sv or L_sv or
                 A_bank0 or X_bank0 or B_bank0 or C_bank0 or D_bank0 or E_bank0 or H_bank0 or L_bank0 or
                 A_bank1 or X_bank1 or B_bank1 or C_bank1 or D_bank1 or E_bank1 or H_bank1 or L_bank1 or
                 A_bank2 or X_bank2 or B_bank2 or C_bank2 or D_bank2 or E_bank2 or H_bank2 or L_bank2 or
                 A_bank3 or X_bank3 or B_bank3 or C_bank3 or D_bank3 or E_bank3 or H_bank3 or L_bank3 ) begin
                casex ({icecsgregu,icecsgrega,iceifa})
                        5'b10_111 : icedo = {H_bank0,L_bank0,D_bank0,E_bank0} ;
                        5'b10_110 : icedo = {B_bank0,C_bank0,A_bank0,X_bank0} ;
                        5'b10_101 : icedo = {H_bank1,L_bank1,D_bank1,E_bank1} ;
                        5'b10_100 : icedo = {B_bank1,C_bank1,A_bank1,X_bank1} ;
                        5'b10_011 : icedo = {H_bank2,L_bank2,D_bank2,E_bank2} ;
                        5'b10_010 : icedo = {B_bank2,C_bank2,A_bank2,X_bank2} ;
                        5'b10_001 : icedo = {H_bank3,L_bank3,D_bank3,E_bank3} ;
                        5'b10_000 : icedo = {B_bank3,C_bank3,A_bank3,X_bank3} ;
                        5'b01_xx1 : icedo = {H_sv,L_sv,D_sv,E_sv} ;
                        5'b01_xx0 : icedo = {B_sv,C_sv,A_sv,X_sv} ;
                        5'b00_xxx : icedo = 32'b0 ;
                        default : icedo = 32'b0 ;
                endcase
        end

        wire sel_svmod_reg = svmod & ~alt2 ;
//

// RBSの値に応じて該当するバンク信号が１となる。
	assign bank0 = (RBS == 2'h0) ;
	assign bank1 = (RBS == 2'h1) ;
	assign bank2 = (RBS == 2'h2) ;
	assign bank3 = (RBS == 2'h3) ;

// RBSの値に応じて各レジスタのバンクを選択する。
	always @(RBS or
// for EVA
                 sel_svmod_reg or A_sv or X_sv or B_sv or C_sv or D_sv or E_sv or H_sv or L_sv or
//
		 A_bank0 or X_bank0 or B_bank0 or C_bank0 or D_bank0 or E_bank0 or H_bank0 or L_bank0 or
		 A_bank1 or X_bank1 or B_bank1 or C_bank1 or D_bank1 or E_bank1 or H_bank1 or L_bank1 or
		 A_bank2 or X_bank2 or B_bank2 or C_bank2 or D_bank2 or E_bank2 or H_bank2 or L_bank2 or
		 A_bank3 or X_bank3 or B_bank3 or C_bank3 or D_bank3 or E_bank3 or H_bank3 or L_bank3 ) begin
// for EVA
                if (sel_svmod_reg) begin
                                {A,X,B,C,D,E,H,L} = {A_sv,X_sv,B_sv,C_sv,D_sv,E_sv,H_sv,L_sv} ;
                end
                else begin
//
		case (RBS)
			2'b00 : {A,X,B,C,D,E,H,L} = {A_bank0,X_bank0,B_bank0,C_bank0,D_bank0,E_bank0,H_bank0,L_bank0} ;
			2'b01 : {A,X,B,C,D,E,H,L} = {A_bank1,X_bank1,B_bank1,C_bank1,D_bank1,E_bank1,H_bank1,L_bank1} ;
			2'b10 : {A,X,B,C,D,E,H,L} = {A_bank2,X_bank2,B_bank2,C_bank2,D_bank2,E_bank2,H_bank2,L_bank2} ;
			2'b11 : {A,X,B,C,D,E,H,L} = {A_bank3,X_bank3,B_bank3,C_bank3,D_bank3,E_bank3,H_bank3,L_bank3} ;
		endcase
// for EVA
		end
//
	end

/*------------------------------------------------------------------------------*/
/* Ver2.0 電流削減の為にイネーブル信号で必要な経路のみを開く			*/
/*------------------------------------------------------------------------------*/
/* Ver3.0 電流削減の効果が確認できなかったためVer1.5へ戻す			*/
/*------------------------------------------------------------------------------*/

	assign A_groupA = A;
	assign A_groupB = A;
	assign A_groupC = A;
	assign X_groupA = X;
	assign X_groupB = X;
	assign X_groupC = X;
	assign B_groupA = B;
	assign B_groupB = B;
	assign B_groupC = B;
	assign C_groupA = C;
	assign C_groupB = C;
	assign C_groupC = C;
	assign D_groupA = D;
	assign D_groupB = D;
	assign D_groupC = D;
	assign E_groupA = E;
	assign E_groupB = E;
	assign E_groupC = E;
	assign H_groupA = H;
	assign H_groupB = H;
	assign H_groupC = H;
	assign L_groupA = L;
	assign L_groupB = L;
	assign L_groupC = L;
//	assign imdr_groupA = imdr;
	assign imdr_groupB = imdr;

//	assign A_groupA = (dec_alu_transout==4'h2		//transout[7:0]
//			|| dec_alu_transout==4'h3		//transout[15:8]
//			) ? A : 8'h00;
//	assign A_groupB = (dec_alu_input10==4'h3		//aluin10
//			|| dec_alu_input10==4'h4		//aluin11
//			|| dec_alu_input20==4'h2		//aluin20
//			|| dec_alu_input20==4'h3		//aluin21
//			|| dec_alu_mulu				//muluout
//			|| dec_alu_bitsh==5'h1c			//bitshin10
//			|| dec_alu_bitsh==5'h1d			//bitshin10
//			|| dec_alu_bitsh==5'h02			//bitshin20
//			|| dec_alu_bitsh==5'h09			//bitshin20
//			|| dec_alu_bitsh==5'h19			//bitshin20
//			|| dec_alu_bitsh==5'h0f			//bitshin20
//			|| dec_alu_bitsh==5'h03			//bitshin21
//			|| dec_movs				//Z
//			|| dec_cmps				//CY
//			) ? A : 8'h00;
//	assign A_groupC = (dec_xch_byte				//XBCDEHLのBANK0-3
//			|| dec_xchw_bc				//BのBANK0-3
//			|| dec_xchw_de				//DのBANK0-3
//			|| dec_xchw_hl				//HのBANK0-3
//			) ? A : 8'h00;
//
//	assign X_groupA = (dec_alu_transout==4'h3		//transout[7:0]
//			) ? X : 8'h00;
//	assign X_groupB = (dec_alu_transout==4'h3		//transout[7:0]
//			|| dec_alu_input10==4'h4		//aluin10
//			|| dec_alu_input20==4'h3		//aluin20
//			|| dec_alu_mulu				//muluout
//			|| dec_alu_bitsh==5'h03			//bitshin20
//			|| dec_movs				//Z
//			) ? X : 8'h00;
//	assign X_groupC = (dec_xchw_bc				//BのBANK0-3
//			|| dec_xchw_de				//DのBANK0-3
//			|| dec_xchw_hl				//HのBANK0-3
//			) ? X : 8'h00;
//
//	assign B_groupA = (dec_alu_transout==4'h4		//transout[7:0]
//			|| dec_alu_transout==4'h5		//transout[15:8]
//			) ? B : 8'h00;
//	assign B_groupB = (dec_alu_input10==4'h5		//aluin10
//			|| dec_alu_input10==4'h6		//aluin11
//			|| dec_alu_input20==4'h4		//aluin20
//			|| dec_alu_input20==4'h5		//aluin21
//			|| dec_alu_bitsh==5'h04			//bitshin20
//			|| dec_alu_bitsh==5'h05			//bitshin21
//			) ? B : 8'h00;
//	assign B_groupC = (dec_xchw_bc				//AのBANK0-3
//			) ? B : 8'h00;
//
//	assign C_groupA = (dec_alu_transout==4'h5		//transout[7:0]
//			) ? C : 8'h00;
//	assign C_groupB = (dec_alu_input10==4'h6		//aluin10
//			|| dec_alu_input20==4'h5		//aluin20
//			|| dec_alu_bitsh==5'h05			//bitshin20
//			) ? C : 8'h00;
//	assign C_groupC = (dec_xchw_bc				//XのBANK0-3
//			) ? C : 8'h00;
//
//	assign D_groupA = (dec_alu_transout==4'h6		//transout[7:0]
//			|| dec_alu_transout==4'h7		//transout[15:8]
//			) ? D : 8'h00;
//	assign D_groupB = (dec_alu_input10==4'h7		//aluin10
//			|| dec_alu_input10==4'h8		//aluin11
//			|| dec_alu_input20==4'h6		//aluin20
//			|| dec_alu_input20==4'h7		//aluin21
//			) ? D : 8'h00;
//	assign D_groupC = (dec_xchw_de				//AのBANK0-3
//			) ? D : 8'h00;
//
//	assign E_groupA = (dec_alu_transout==4'h7		//transout[7:0]
//			) ? E : 8'h00;
//	assign E_groupB = (dec_alu_input10==4'h8		//aluin10
//			|| dec_alu_input20==4'h7		//aluin20
//			) ? E : 8'h00;
//	assign E_groupC = (dec_xchw_de				//AのBANK0-3
//			) ? E : 8'h00;
//
//	assign H_groupA = (dec_alu_transout==4'h8		//transout[7:0]
//			|| dec_alu_transout==4'h9		//transout[15:8]
//			) ? H : 8'h00;
//	assign H_groupB = (dec_alu_input10==4'h9		//aluin10
//			|| dec_alu_input10==4'ha		//aluin11
//			|| dec_alu_input20==4'h8		//aluin20
//			|| dec_alu_input20==4'h9		//aluin21
//			) ? H : 8'h00;
//	assign H_groupC = (dec_xchw_hl				//AのBANK0-3
//			) ? H : 8'h00;
//
//	assign L_groupA = (dec_alu_transout==4'h9		//transout[7:0]
//			) ? L : 8'h00;
//	assign L_groupB = (dec_alu_input10==4'ha		//aluin10
//			|| dec_alu_input20==4'h9		//aluin20
//			) ? L : 8'h00;
//	assign L_groupC = (dec_xchw_hl				//AのBANK0-3
//			) ? L : 8'h00;
//
//	assign imdr_groupA = (dec_alu_transin			//transin[15:0]
//			) ? imdr : 16'h0000;
//
//	assign imdr_groupB = (dmard				//buf0, buf1
//			|| dec_alu_input10==4'hb		//aluin10, aluin11
//			|| dec_alu_input10==4'he		//aluin10, aluin11
//			|| dec_alu_input20==4'hc		//aluin20, aluin21
//			|| dec_alu_bitsh==5'h0c			//bitshin10
//			|| dec_alu_bitsh==5'h0d			//bitshin10
//			|| dec_alu_bitsh==5'h08			//bitshin20
//			|| dec_alu_bitsh==5'h18			//bitshin20
//			|| dec_alu_bitsh==5'h0e			//bitshin20
//			) ? imdr : 16'h0000;

/*------------------------------------------------------------------------------*/
// 選択しているバンクとアドレス指定したレジスタのバンクが一致している場合１となる。
/*------------------------------------------------------------------------------*/
/* Ver2.0  アドレスをvpaからma_preに変更。SLFLASHの高速化の為。			*/
/*　　　　vpaにはDMAのアドレスが絡んでおり、DMAで汎用レジスタへの転送は禁止	*/
/*------------------------------------------------------------------------------*/
	assign bank_correspond = (bank0 & (ma_pre[4:3] == 2'b11)) | (bank1 & (ma_pre[4:3] == 2'b10)) |
				 (bank2 & (ma_pre[4:3] == 2'b01)) | (bank3 & (ma_pre[4:3] == 2'b00)) ;

// 各レジスタへのライトアクセスで１となる。ハザードの検出で用いる。
/*------------------------------------------------------------------------------*/
/* Ver2.0  アドレスをvpaからma_preに変更。SLFLASHの高速化の為。			*/
/*　　　　cpuwrをcpuwr_regに変更。wdopをdec_word_accessに変更。			*/
/*------------------------------------------------------------------------------*/
	assign A_access = dec_A_enable | (slreg & cpuwr_reg & bank_correspond & ((ma_pre[2:0] == 3'b001) | ({dec_word_access,ma_pre[2:0]} == 4'b1000))) ;
	assign X_access = dec_X_enable | (slreg & cpuwr_reg & bank_correspond & ( ma_pre[2:0] == 3'b000)) ;
	assign B_access = dec_B_enable | (slreg & cpuwr_reg & bank_correspond & ((ma_pre[2:0] == 3'b011) | ({dec_word_access,ma_pre[2:0]} == 4'b1010))) ;
	assign C_access = dec_C_enable | (slreg & cpuwr_reg & bank_correspond & ( ma_pre[2:0] == 3'b010)) ;
	assign D_access = dec_D_enable | (slreg & cpuwr_reg & bank_correspond & ((ma_pre[2:0] == 3'b101) | ({dec_word_access,ma_pre[2:0]} == 4'b1100))) ;
	assign E_access = dec_E_enable | (slreg & cpuwr_reg & bank_correspond & ( ma_pre[2:0] == 3'b100)) ;
	assign H_access = dec_H_enable | (slreg & cpuwr_reg & bank_correspond & ((ma_pre[2:0] == 3'b111) | ({dec_word_access,ma_pre[2:0]} == 4'b1110))) ;
	assign L_access = dec_L_enable | (slreg & cpuwr_reg & bank_correspond & ( ma_pre[2:0] == 3'b110)) ;

/*------------------------------------------------------------------------------*/
/* Ver2.0  アドレスをvpaからma_preに変更。cpuwrをcpuwr_regに変更。		*/
/*　　　　汎用レジスタを_groupCに変更						*/
/*------------------------------------------------------------------------------*/
// レジスタバンク０
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) A_bank0 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait || data_hazard) A_bank0 <= A_bank0 ;
			else if (dec_A_enable & bank0) begin
				if (dec_word_access) begin
					if (dec_xchw_hl)	A_bank0 <= H_groupC ;
					else if (dec_xchw_de)	A_bank0 <= D_groupC ;
					else if (dec_xchw_bc)	A_bank0 <= B_groupC ;
					else			A_bank0 <= aluout[15:8] ;
				end
				else if (dec_xch_byte && cpuwr_reg) A_bank0 <= buf0 ;
				else				A_bank0 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0],dec_word_access})
					({1'b1,4'h9,1'bx}) : A_bank0 <= mdw_pre[15:8] ;
					({1'b1,4'h8,1'b1}) : A_bank0 <= mdw_pre[15:8] ;
					default	: A_bank0 <= A_bank0 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) X_bank0 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait || data_hazard) X_bank0 <= X_bank0 ;
			else if (dec_X_enable & bank0) begin
				if (dec_xchw_hl)	X_bank0 <= L_groupC ;
				else if (dec_xchw_de)	X_bank0 <= E_groupC ;
				else if (dec_xchw_bc)	X_bank0 <= C_groupC ;
				else if (dec_xch_byte)	X_bank0 <= A_groupC ;
				else			X_bank0 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0]})
					({1'b1,4'h8}) : X_bank0 <= mdw_pre[7:0] ;
					default	: X_bank0 <= X_bank0 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) B_bank0 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) B_bank0 <= B_bank0 ;
			else if (dec_B_enable & bank0) begin
				if (dec_word_access) begin
					if (dec_xchw_bc)	B_bank0 <= A_groupC ;
					else			B_bank0 <= aluout[15:8] ;
				end
				else begin
					if (dec_xch_byte)	B_bank0 <= A_groupC ;
					else			B_bank0 <= aluout[7:0] ;
				end
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0],dec_word_access})
					({1'b1,4'hb,1'bx}) : B_bank0 <= mdw_pre[15:8] ;
					({1'b1,4'ha,1'b1}) : B_bank0 <= mdw_pre[15:8] ;
					default	: B_bank0 <= B_bank0 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) C_bank0 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) C_bank0 <= C_bank0 ;
			else if (dec_C_enable & bank0) begin
				if (dec_xchw_bc)	C_bank0 <= X_groupC ;
				else if (dec_xch_byte)	C_bank0 <= A_groupC ;
				else			C_bank0 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0]})
					({1'b1,4'ha}) : C_bank0 <= mdw_pre[7:0] ;
					default	: C_bank0 <= C_bank0 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) D_bank0 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) D_bank0 <= D_bank0 ;
			else if (dec_D_enable & bank0) begin
				if (dec_word_access) begin
					if (dec_xchw_de)	D_bank0 <= A_groupC ;
					else			D_bank0 <= aluout[15:8] ;
				end
				else begin
					if (dec_xch_byte)	D_bank0 <= A_groupC ;
					else			D_bank0 <= aluout[7:0] ;
				end
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0],dec_word_access})
					({1'b1,4'hd,1'bx}) : D_bank0 <= mdw_pre[15:8] ;
					({1'b1,4'hc,1'b1}) : D_bank0 <= mdw_pre[15:8] ;
					default	: D_bank0 <= D_bank0 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) E_bank0 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) E_bank0 <= E_bank0 ;
			else if (dec_E_enable & bank0) begin
				if (dec_xchw_de)	E_bank0 <= X_groupC ;
				else if (dec_xch_byte)	E_bank0 <= A_groupC ;
				else			E_bank0 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0]})
					({1'b1,4'hc}) : E_bank0 <= mdw_pre[7:0] ;
					default	: E_bank0 <= E_bank0 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) H_bank0 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) H_bank0 <= H_bank0 ;
			else if (dec_H_enable & bank0) begin
				if (dec_word_access) begin
					if (dec_xchw_hl)	H_bank0 <= A_groupC ;
					else			H_bank0 <= aluout[15:8] ;
				end
				else begin
					if (dec_xch_byte)	H_bank0 <= A_groupC ;
					else			H_bank0 <= aluout[7:0] ;
				end
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0],dec_word_access})
					({1'b1,4'hf,1'bx}) : H_bank0 <= mdw_pre[15:8] ;
					({1'b1,4'he,1'b1}) : H_bank0 <= mdw_pre[15:8] ;
					default	: H_bank0 <= H_bank0 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) L_bank0 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) L_bank0 <= L_bank0 ;
			else if (dec_L_enable & bank0) begin
				if (dec_xchw_hl)	L_bank0 <= X_groupC ;
				else if (dec_xch_byte)	L_bank0 <= A_groupC ;
				else			L_bank0 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0]})
					({1'b1,4'he}) : L_bank0 <= mdw_pre[7:0] ;
					default	: L_bank0 <= L_bank0 ;
				endcase
			end
		end
	end

// レジスタバンク１
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) A_bank1 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait || data_hazard) A_bank1 <= A_bank1 ;
			else if (dec_A_enable & bank1) begin
				if (dec_word_access) begin
					if (dec_xchw_hl)	A_bank1 <= H_groupC ;
					else if (dec_xchw_de)	A_bank1 <= D_groupC ;
					else if (dec_xchw_bc)	A_bank1 <= B_groupC ;
					else			A_bank1 <= aluout[15:8] ;
				end
				else if (dec_xch_byte && cpuwr_reg) A_bank1 <= buf0 ;
				else				A_bank1 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0],dec_word_access})
					({1'b1,4'h1,1'bx}) : A_bank1 <= mdw_pre[15:8] ;
					({1'b1,4'h0,1'b1}) : A_bank1 <= mdw_pre[15:8] ;
					default	: A_bank1 <= A_bank1 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) X_bank1 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait || data_hazard) X_bank1 <= X_bank1 ;
			else if (dec_X_enable & bank1) begin
				if (dec_xchw_hl)	X_bank1 <= L_groupC ;
				else if (dec_xchw_de)	X_bank1 <= E_groupC ;
				else if (dec_xchw_bc)	X_bank1 <= C_groupC ;
				else if (dec_xch_byte)	X_bank1 <= A_groupC ;
				else			X_bank1 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0]})
					({1'b1,4'h0}) : X_bank1 <= mdw_pre[7:0] ;
					default	: X_bank1 <= X_bank1 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) B_bank1 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) B_bank1 <= B_bank1 ;
			else if (dec_B_enable & bank1) begin
				if (dec_word_access) begin
					if (dec_xchw_bc)	B_bank1 <= A_groupC ;
					else			B_bank1 <= aluout[15:8] ;
				end
				else begin
					if (dec_xch_byte)	B_bank1 <= A_groupC ;
					else			B_bank1 <= aluout[7:0] ;
				end
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0],dec_word_access})
					({1'b1,4'h3,1'bx}) : B_bank1 <= mdw_pre[15:8] ;
					({1'b1,4'h2,1'b1}) : B_bank1 <= mdw_pre[15:8] ;
					default	: B_bank1 <= B_bank1 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) C_bank1 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) C_bank1 <= C_bank1 ;
			else if (dec_C_enable & bank1) begin
				if (dec_xchw_bc)	C_bank1 <= X_groupC ;
				else if (dec_xch_byte)	C_bank1 <= A_groupC ;
				else			C_bank1 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0]})
					({1'b1,4'h2}) : C_bank1 <= mdw_pre[7:0] ;
					default	: C_bank1 <= C_bank1 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) D_bank1 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) D_bank1 <= D_bank1 ;
			else if (dec_D_enable & bank1) begin
				if (dec_word_access) begin
					if (dec_xchw_de)	D_bank1 <= A_groupC ;
					else			D_bank1 <= aluout[15:8] ;
				end
				else begin
					if (dec_xch_byte)	D_bank1 <= A_groupC ;
					else			D_bank1 <= aluout[7:0] ;
				end
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0],dec_word_access})
					({1'b1,4'h5,1'bx}) : D_bank1 <= mdw_pre[15:8] ;
					({1'b1,4'h4,1'b1}) : D_bank1 <= mdw_pre[15:8] ;
					default	: D_bank1 <= D_bank1 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) E_bank1 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) E_bank1 <= E_bank1 ;
			else if (dec_E_enable & bank1) begin
				if (dec_xchw_de)	E_bank1 <= X_groupC ;
				else if (dec_xch_byte)	E_bank1 <= A_groupC ;
				else			E_bank1 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0]})
					({1'b1,4'h4}) : E_bank1 <= mdw_pre[7:0] ;
					default	: E_bank1 <= E_bank1 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) H_bank1 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) H_bank1 <= H_bank1 ;
			else if (dec_H_enable & bank1) begin
				if (dec_word_access) begin
					if (dec_xchw_hl)	H_bank1 <= A_groupC ;
					else			H_bank1 <= aluout[15:8] ;
				end
				else begin
					if (dec_xch_byte)	H_bank1 <= A_groupC ;
					else			H_bank1 <= aluout[7:0] ;
				end
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0],dec_word_access})
					({1'b1,4'h7,1'bx}) : H_bank1 <= mdw_pre[15:8] ;
					({1'b1,4'h6,1'b1}) : H_bank1 <= mdw_pre[15:8] ;
					default	: H_bank1 <= H_bank1 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) L_bank1 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) L_bank1 <= L_bank1 ;
			else if (dec_L_enable & bank1) begin
				if (dec_xchw_hl)	L_bank1 <= X_groupC ;
				else if (dec_xch_byte)	L_bank1 <= A_groupC ;
				else			L_bank1 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0]})
					({1'b1,4'h6}) : L_bank1 <= mdw_pre[7:0] ;
					default	: L_bank1 <= L_bank1 ;
				endcase
			end
		end
	end

// レジスタバンク２
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) A_bank2 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait || data_hazard) A_bank2 <= A_bank2 ;
			else if (dec_A_enable & bank2) begin
				if (dec_word_access) begin
					if (dec_xchw_hl)	A_bank2 <= H_groupC ;
					else if (dec_xchw_de)	A_bank2 <= D_groupC ;
					else if (dec_xchw_bc)	A_bank2 <= B_groupC ;
					else			A_bank2 <= aluout[15:8] ;
				end
				else if (dec_xch_byte && cpuwr_reg) A_bank2 <= buf0 ;
				else				A_bank2 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0],dec_word_access})
					({1'b0,4'h9,1'bx}) : A_bank2 <= mdw_pre[15:8] ;
					({1'b0,4'h8,1'b1}) : A_bank2 <= mdw_pre[15:8] ;
					default	: A_bank2 <= A_bank2 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) X_bank2 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait || data_hazard) X_bank2 <= X_bank2 ;
			else if (dec_X_enable & bank2) begin
				if (dec_xchw_hl)	X_bank2 <= L_groupC ;
				else if (dec_xchw_de)	X_bank2 <= E_groupC ;
				else if (dec_xchw_bc)	X_bank2 <= C_groupC ;
				else if (dec_xch_byte)	X_bank2 <= A_groupC ;
				else			X_bank2 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0]})
					({1'b0,4'h8}) : X_bank2 <= mdw_pre[7:0] ;
					default	: X_bank2 <= X_bank2 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) B_bank2 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) B_bank2 <= B_bank2 ;
			else if (dec_B_enable & bank2) begin
				if (dec_word_access) begin
					if (dec_xchw_bc)	B_bank2 <= A_groupC ;
					else			B_bank2 <= aluout[15:8] ;
				end
				else begin
					if (dec_xch_byte)	B_bank2 <= A_groupC ;
					else			B_bank2 <= aluout[7:0] ;
				end
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0],dec_word_access})
					({1'b0,4'hb,1'bx}) : B_bank2 <= mdw_pre[15:8] ;
					({1'b0,4'ha,1'b1}) : B_bank2 <= mdw_pre[15:8] ;
					default	: B_bank2 <= B_bank2 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) C_bank2 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) C_bank2 <= C_bank2 ;
			else if (dec_C_enable & bank2) begin
				if (dec_xchw_bc)	C_bank2 <= X_groupC ;
				else if (dec_xch_byte)	C_bank2 <= A_groupC ;
				else			C_bank2 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0]})
					({1'b0,4'ha}) : C_bank2 <= mdw_pre[7:0] ;
					default	: C_bank2 <= C_bank2 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) D_bank2 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) D_bank2 <= D_bank2 ;
			else if (dec_D_enable & bank2) begin
				if (dec_word_access) begin
					if (dec_xchw_de)	D_bank2 <= A_groupC ;
					else			D_bank2 <= aluout[15:8] ;
				end
				else begin
					if (dec_xch_byte)	D_bank2 <= A_groupC ;
					else			D_bank2 <= aluout[7:0] ;
				end
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0],dec_word_access})
					({1'b0,4'hd,1'bx}) : D_bank2 <= mdw_pre[15:8] ;
					({1'b0,4'hc,1'b1}) : D_bank2 <= mdw_pre[15:8] ;
					default	: D_bank2 <= D_bank2 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) E_bank2 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) E_bank2 <= E_bank2 ;
			else if (dec_E_enable & bank2) begin
				if (dec_xchw_de)	E_bank2 <= X_groupC ;
				else if (dec_xch_byte)	E_bank2 <= A_groupC ;
				else			E_bank2 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0]})
					({1'b0,4'hc}) : E_bank2 <= mdw_pre[7:0] ;
					default	: E_bank2 <= E_bank2 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) H_bank2 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) H_bank2 <= H_bank2 ;
			else if (dec_H_enable & bank2) begin
				if (dec_word_access) begin
					if (dec_xchw_hl)	H_bank2 <= A_groupC ;
					else			H_bank2 <= aluout[15:8] ;
				end
				else begin
					if (dec_xch_byte)	H_bank2 <= A_groupC ;
					else			H_bank2 <= aluout[7:0] ;
				end
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0],dec_word_access})
					({1'b0,4'hf,1'bx}) : H_bank2 <= mdw_pre[15:8] ;
					({1'b0,4'he,1'b1}) : H_bank2 <= mdw_pre[15:8] ;
					default	: H_bank2 <= H_bank2 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) L_bank2 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) L_bank2 <= L_bank2 ;
			else if (dec_L_enable & bank2) begin
				if (dec_xchw_hl)	L_bank2 <= X_groupC ;
				else if (dec_xch_byte)	L_bank2 <= A_groupC ;
				else			L_bank2 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0]})
					({1'b0,4'he}) : L_bank2 <= mdw_pre[7:0] ;
					default	: L_bank2 <= L_bank2 ;
				endcase
			end
		end
	end

// レジスタバンク３
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) A_bank3 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait || data_hazard) A_bank3 <= A_bank3 ;
			else if (dec_A_enable & bank3) begin
				if (dec_word_access) begin
					if (dec_xchw_hl)	A_bank3 <= H_groupC ;
					else if (dec_xchw_de)	A_bank3 <= D_groupC ;
					else if (dec_xchw_bc)	A_bank3 <= B_groupC ;
					else			A_bank3 <= aluout[15:8] ;
				end
				else if (dec_xch_byte && cpuwr_reg) A_bank3 <= buf0 ;
				else				A_bank3 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0],dec_word_access})
					({1'b0,4'h1,1'bx}) : A_bank3 <= mdw_pre[15:8] ;
					({1'b0,4'h0,1'b1}) : A_bank3 <= mdw_pre[15:8] ;
					default	: A_bank3 <= A_bank3 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) X_bank3 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait || data_hazard) X_bank3 <= X_bank3 ;
			else if (dec_X_enable & bank3) begin
				if (dec_xchw_hl)	X_bank3 <= L_groupC ;
				else if (dec_xchw_de)	X_bank3 <= E_groupC ;
				else if (dec_xchw_bc)	X_bank3 <= C_groupC ;
				else if (dec_xch_byte)	X_bank3 <= A_groupC ;
				else			X_bank3 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0]})
					({1'b0,4'h0}) : X_bank3 <= mdw_pre[7:0] ;
					default	: X_bank3 <= X_bank3 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) B_bank3 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) B_bank3 <= B_bank3 ;
			else if (dec_B_enable & bank3) begin
				if (dec_word_access) begin
					if (dec_xchw_bc)	B_bank3 <= A_groupC ;
					else			B_bank3 <= aluout[15:8] ;
				end
				else begin
					if (dec_xch_byte)	B_bank3 <= A_groupC ;
					else			B_bank3 <= aluout[7:0] ;
				end
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0],dec_word_access})
					({1'b0,4'h3,1'bx}) : B_bank3 <= mdw_pre[15:8] ;
					({1'b0,4'h2,1'b1}) : B_bank3 <= mdw_pre[15:8] ;
					default	: B_bank3 <= B_bank3 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) C_bank3 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) C_bank3 <= C_bank3 ;
			else if (dec_C_enable & bank3) begin
				if (dec_xchw_bc)	C_bank3 <= X_groupC ;
				else if (dec_xch_byte)	C_bank3 <= A_groupC ;
				else			C_bank3 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0]})
					({1'b0,4'h2}) : C_bank3 <= mdw_pre[7:0] ;
					default	: C_bank3 <= C_bank3 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) D_bank3 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) D_bank3 <= D_bank3 ;
			else if (dec_D_enable & bank3) begin
				if (dec_word_access) begin
					if (dec_xchw_de)	D_bank3 <= A_groupC ;
					else			D_bank3 <= aluout[15:8] ;
				end
				else begin
					if (dec_xch_byte)	D_bank3 <= A_groupC ;
					else			D_bank3 <= aluout[7:0] ;
				end
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0],dec_word_access})
					({1'b0,4'h5,1'bx}) : D_bank3 <= mdw_pre[15:8] ;
					({1'b0,4'h4,1'b1}) : D_bank3 <= mdw_pre[15:8] ;
					default	: D_bank3 <= D_bank3 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) E_bank3 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) E_bank3 <= E_bank3 ;
			else if (dec_E_enable & bank3) begin
				if (dec_xchw_de)	E_bank3 <= X_groupC ;
				else if (dec_xch_byte)	E_bank3 <= A_groupC ;
				else			E_bank3 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0]})
					({1'b0,4'h4}) : E_bank3 <= mdw_pre[7:0] ;
					default	: E_bank3 <= E_bank3 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) H_bank3 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) H_bank3 <= H_bank3 ;
			else if (dec_H_enable & bank3) begin
				if (dec_word_access) begin
					if (dec_xchw_hl)	H_bank3 <= A_groupC ;
					else			H_bank3 <= aluout[15:8] ;
				end
				else begin
					if (dec_xch_byte)	H_bank3 <= A_groupC ;
					else			H_bank3 <= aluout[7:0] ;
				end
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0],dec_word_access})
					({1'b0,4'h7,1'bx}) : H_bank3 <= mdw_pre[15:8] ;
					({1'b0,4'h6,1'b1}) : H_bank3 <= mdw_pre[15:8] ;
					default	: H_bank3 <= H_bank3 ;
				endcase
			end
		end
	end

	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) L_bank3 <= 8'h00 ;
// for EVA
//		else if (cpuen) begin
                else if (cpuen & ~sel_svmod_reg) begin
//
			if (reg_wait) L_bank3 <= L_bank3 ;
			else if (dec_L_enable & bank3) begin
				if (dec_xchw_hl)	L_bank3 <= X_groupC ;
				else if (dec_xch_byte)	L_bank3 <= A_groupC ;
				else			L_bank3 <= aluout[7:0] ;
			end
			else if (slreg && cpuwr_reg) begin
				casex ({ma_pre[4:0]})
					({1'b0,4'h6}) : L_bank3 <= mdw_pre[7:0] ;
					default	: L_bank3 <= L_bank3 ;
				endcase
			end
		end
	end

// for EVA
// for SVMODE

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb) A_sv <= 8'h00 ;
                else if (cpuen & sel_svmod_reg) begin
                        if (reg_wait || data_hazard) A_sv <= A ;
                        else if (dec_A_enable) begin
                                if (dec_word_access) begin
                                        if (dec_xchw_hl)        A_sv <= H ;
                                        else if (dec_xchw_de)   A_sv <= D ;
                                        else if (dec_xchw_bc)   A_sv <= B ;
                                        else                    A_sv <= aluout[15:8] ;
                                end
                                else if (dec_xch_byte && cpuwr) A_sv <= buf0 ;
                                else                            A_sv <= aluout[7:0] ;
                        end
                end
        end

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb) X_sv <= 8'h00 ;
                else if (cpuen & sel_svmod_reg) begin
                        if (reg_wait || data_hazard) X_sv <= X ;
                        else if (dec_X_enable) begin
                                if (dec_xchw_hl)        X_sv <= L ;
                                else if (dec_xchw_de)   X_sv <= E ;
                                else if (dec_xchw_bc)   X_sv <= C ;
                                else if (dec_xch_byte)  X_sv <= A ;
                                else                    X_sv <= aluout[7:0] ;
                        end     
                end
        end

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb) B_sv <= 8'h00 ;
                else if (cpuen & sel_svmod_reg) begin
                        if (reg_wait) B_sv <= B ;
                        else if (dec_B_enable) begin
                                if (dec_word_access) begin
                                        if (dec_xchw_bc)        B_sv <= A ;
                                        else                    B_sv <= aluout[15:8] ;
                                end
                                else begin
                                        if (dec_xch_byte)       B_sv <= A ;
                                        else                    B_sv <= aluout[7:0] ;
                                end
                        end
                end
        end

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb) C_sv <= 8'h00 ;
                else if (cpuen & sel_svmod_reg) begin
                        if (reg_wait) C_sv <= C ;
                        else if (dec_C_enable) begin
                                if (dec_xchw_bc)        C_sv <= X ;
                                else if (dec_xch_byte)  C_sv <= A ;
                                else                    C_sv <= aluout[7:0] ;
                        end
                end
        end

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb) D_sv <= 8'h00 ;
                else if (cpuen & sel_svmod_reg) begin
                        if (reg_wait) D_sv <= D ;
                        else if (dec_D_enable) begin
                                if (dec_word_access) begin
                                        if (dec_xchw_de)        D_sv <= A ;
                                        else                    D_sv <= aluout[15:8] ;
                                end
                                else begin
                                        if (dec_xch_byte)       D_sv <= A ;
                                        else                    D_sv <= aluout[7:0] ;
                                end
                        end
                end
        end

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb) E_sv <= 8'h00 ;
                else if (cpuen & sel_svmod_reg) begin
                        if (reg_wait) E_sv <= E ;
                        else if (dec_E_enable) begin
                                if (dec_xchw_de)        E_sv <= X ;
                                else if (dec_xch_byte)  E_sv <= A ;
                                else                    E_sv <= aluout[7:0] ;
                        end
                end
        end

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb) H_sv <= 8'h00 ;
                else if (cpuen & sel_svmod_reg) begin
                        if (reg_wait) H_sv <= H ;
                        else if (dec_H_enable) begin
                                if (dec_word_access) begin
                                        if (dec_xchw_hl)        H_sv <= A ;
                                        else                    H_sv <= aluout[15:8] ;
                                end
                                else begin
                                        if (dec_xch_byte)       H_sv <= A ;
                                        else                    H_sv <= aluout[7:0] ;
                                end
                        end
                end
        end

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb) L_sv <= 8'h00 ;
                else if (cpuen & sel_svmod_reg) begin
                        if (reg_wait) L_sv <= L ;
                        else if (dec_L_enable) begin
                                if (dec_xchw_hl)        L_sv <= X ;
                                else if (dec_xch_byte)  L_sv <= A ;
                                else                    L_sv <= aluout[7:0] ;
                        end
                end
        end
//

/*------------------------------------------------------------------------------*/
/* データ保持バッファ								*/
/*------------------------------------------------------------------------------*/
/*   ＸＣＨ命令、スタック動作、割り込み発生時等にデータを保持する。		*/
/*------------------------------------------------------------------------------*/

// maの下位１ビットmaw1で読み出すPIDのデータを選択する。
/*------------------------------------------------------------------------------*/
/* Ver2.0  Flash読み出ししていない時はrdataを０に固定。				*/
/*------------------------------------------------------------------------------*/
	always @(maw1 or pid or pa_data_buf) begin
		if (maw1)	rdata = pid[31:16] ;
		else		rdata = pid[15:0] ;
//		if (pa_data_buf) begin
//			if (maw1)	rdata = pid[31:16] ;
//			else		rdata = pid[15:0] ;
//		end
//		else rdata = 8'h00;
	end

// データ保持バッファ下位８ビット
// XCH命令、スタック動作、割り込み発生時、FLASHリードアクセス時、DMA転送時に
// buf0レジスタに入るデータを選択する。
/*------------------------------------------------------------------------------*/
/* Ver2.0  bufrを必要な時だけ開く_groupBに変更					*/
/*------------------------------------------------------------------------------*/
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) buf0 <= 8'h00 ;
		else if (cpuen || waitdma) begin
			if (dmard && vpa[0])			buf0 <= imdr_groupB[15:8] ;
			else if (dmard && !vpa[0])		buf0 <= imdr_groupB[7:0] ;
			else if (reg_wait && !pa_data_buf)	buf0 <= buf0 ;
			else if (dec_buf0_enable || dmard || dec_set_buf_retadr || dec_set_buf_intr || pa_data_buf) begin
				if (dec_set_buf_retadr)		buf0 <= pc_inc[7:0] ;
				else if (dec_set_buf_intr)	buf0 <= pc[7:0] ;
				else if (pa_data_buf)		buf0 <= rdata[7:0] ;
				else				buf0 <= aluout[7:0] ;
			end
		end
	end

// データ保持バッファ上位８ビット
// XCH命令、スタック動作、割り込み発生時、FLASHリードアクセス時、DMA転送時に
// buf1レジスタに入るデータを選択する。
/*------------------------------------------------------------------------------*/
/* Ver2.0  bufrを必要な時だけ開く_groupBに変更					*/
/*------------------------------------------------------------------------------*/
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) buf1 <= 8'h00 ;
		else if (cpuen || waitdma) begin
			if (dmard && vpa[0])			buf1 <= imdr_groupB[7:0] ;
			else if (dmard && !vpa[0])		buf1 <= imdr_groupB[15:8] ;
			else if (reg_wait && !pa_data_buf)	buf1 <= buf1 ;
			else if (dec_buf1_enable || dmard || dec_set_buf_retadr || dec_set_buf_intr || pa_data_buf) begin
				if (dec_set_buf_retadr)		buf1 <= pc_inc[15:8] ;
				else if (dec_set_buf_intr)	buf1 <= pc[15:8] ;
				else if (pa_data_buf)		buf1 <= rdata[15:8] ;
				else				buf1 <= aluout[15:8] ;
			end
		end
	end

// セグメント保持バッファ
// XCH命令、スタック動作、割り込み発生時にbuf2レジスタに入るデータを選択する。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) buf2 <= 4'h0 ;
		else if (cpuen) begin
			if (reg_wait) buf2 <= buf2 ;
			else if (dec_buf2_enable || dec_set_buf_retadr || dec_set_buf_intr) begin
				if (dec_set_buf_retadr)		buf2 <= pc_inc[19:16] ;
				else if (dec_set_buf_intr)	buf2 <= pc[19:16] ;
				else				buf2 <= aluout[3:0] ;
			end
		end
	end

/*------------------------------------------------------------------------------*/
/* スタックポインタ								*/
/*------------------------------------------------------------------------------*/
/*   スタックされたデータのアドレスを示す。					*/
/*------------------------------------------------------------------------------*/

// デコーダからの制御信号によりSPをデクリメントするかインクリメントするかを選択。
	always @(SP or dec_sp_dec or dec_sp_inc) begin
		if (dec_sp_dec)		sp_pre = SP + 15'h7fff ;
		else if (dec_sp_inc)	sp_pre = SP + 15'h0001 ;
		else			sp_pre = SP ;
	end

// スタック動作時のメモリアドレス。
// 割り込み発生時、現在のSP値とデクリメント後のSP値をメモリアドレスとして出力する。
	assign sp_inc = (dec_sp_dec) ? sp_pre : SP ;

// for EVA

        reg             spinc, spdec;

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb) begin
                        spinc <= 1'b0 ;
                        spdec <= 1'b0 ;
                        end
                else if (cpuen) begin
                        if (reg_wait) begin
                                spinc <= spinc ;
                                spdec <= spdec ;
                        end
                        else if (data_hazard_flg) begin
                                spinc <= spinc ;
                                spdec <= spdec ;
                        end
                        else begin
                                spinc <= dec_sp_inc ;
                                spdec <= dec_sp_dec ;
                        end
                end
        end
//

// スタックポインタ。FLASHフェッチ以外で内部ウェイトが発生した時、
// RAMフェッチ以外でハザード以外の内部ウェイトが発生した場合、
// 内部ウェイト発生時以外で命令の実行状態に移行する時、RAMフェッチ中にFLASH空間をアクセスした場合保持される。
// 言い替えると、スタック動作中にウェイトが発生した場合はSPが書き変わってはいけない。
// ただし、FLASHのデータアクセス直後に分岐する場合は、例外としてSPが書き変わる事を許す。
// reg_waitによるウェイトは基本的にはFLASHフェッチ中は無効となるが、SP書き換えと競合した場合は、有効にする。
// IDステージの保持条件が、MEMステージの更新を妨げてない様にpc_wait_flgに関係する条件は、SPアクセス信号でマスクする。
// for EVA
////	//synopsys async_set_reset "resb"
////	always @(posedge baseck or negedge resb) begin
////		if (!resb)					SP <= 15'h7e00 ;
////		else if (cpuen) begin
////			if ((reg_wait && !((slflash & ~SP_enable) || pa_data_spen || sp_hazard)) ||
////			    (((!fchiram && (!data_hazard_flg && pc_wait_flg)) || (pa_st2 && !pc_wait_flg) ||
////			     (fchiram && (slflash || (slmirr && dec_sp_inc)) && pc_wait_flg)) && !SP_enable))	SP <= SP ;
////			else if (dec_SP_enable)						SP <= aluout[15:1] ;
////			else if (pselcpu && cpuwr && (vpa[3:1] == 3'b100)) begin
////				casex ({vpa[0],wdop})
////					({1'b0,1'b0}) : SP <= {SP[14:7],mdw_pre[7:1]} ;
////					({1'b0,1'b1}) : SP <= mdw_pre[15:1] ;
////					({1'b1,1'bx}) : SP <= {mdw_pre[15:8],SP[6:0]} ;
////					// cannot reach DEFAULT brunch
////					// default	: SP <= SP ;
////				endcase
////			end
////			else if (dec_sp_set_enable && (!data_hazard_flg || fchiram))	SP <= sp_pre ;
////		end
////	end
// for EVA

        assign SP0 = 1'b0 ;

        output  [14:0]  SP_usr, SP_sv;
        reg     [14:0]  SP_usr, SP_sv;

        wire svmod_sp = (svmod | svmodi) & ~(alt1) ;

        assign SP = (svmod_sp) ? SP_sv : SP_usr ;

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)                                      SP_usr <= 15'h7e00 ;
                else if (cpuen & ~svmod_sp) begin
                        if ((reg_wait && !((slflash & !SP_enable) || pa_data_spen || sp_hazard)) ||
                            (((!fchiram && (!data_hazard_flg && pc_wait_flg)) || (pa_st2 && !pc_wait_flg) ||
                             (fchiram && (slflash || (slmirr && dec_sp_inc)) && pc_wait_flg)) && !SP_enable))   SP_usr <= SP ;
                        else if (dec_SP_enable)                                         SP_usr <= aluout[15:1] ;
                        else if (pselcpu && cpuwr && (vpa[3:1] == 3'b100)) begin
                                casex ({vpa[0],wdop})
                                        ({1'b0,1'b0}) : SP_usr <= {SP[14:7],mdw_pre[7:1]} ;
                                        ({1'b0,1'b1}) : SP_usr <= mdw_pre[15:1] ;
                                        ({1'b1,1'bx}) : SP_usr <= {mdw_pre[15:8],SP[6:0]} ;
                                // cannot reach DEFAULT brunch
                                // default      : SP_usr <= SP ;
                                endcase
                        end
                        else if (dec_sp_set_enable && (!data_hazard_flg || fchiram))    SP_usr <= sp_pre ;
                end
        end

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)                                      SP_sv <= 15'h7f00 ;
                else if (cpuen & svmod_sp) begin
                        if ((reg_wait && !((slflash & !SP_enable) || pa_data_spen || sp_hazard)) ||
                            (((!fchiram && (!data_hazard_flg && pc_wait_flg)) || (pa_st2 && !pc_wait_flg) ||
                             (fchiram && (slflash || (slmirr && dec_sp_inc)) && pc_wait_flg)) && !SP_enable))   SP_sv <= SP ;
                        else if (dec_SP_enable)                                         SP_sv <= aluout[15:1] ;
                        else if (pselcpu && cpuwr && (vpa[3:1] == 3'b100)) begin
                                casex ({vpa[0],wdop})
                                        ({1'b0,1'b0}) : SP_sv <= {SP[14:7],mdw_pre[7:1]} ;
                                        ({1'b0,1'b1}) : SP_sv <= mdw_pre[15:1] ;
                                        ({1'b1,1'bx}) : SP_sv <= {mdw_pre[15:8],SP[6:0]} ;
                                        // cannot reach DEFAULT brunch
                                        // default      : SP_sv <= SP ;
                                endcase
                        end
                        else if (dec_sp_set_enable && (!data_hazard_flg || fchiram))    SP_sv <= sp_pre ;
                end
        end
//

// SPへのアクセスを表す信号。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) sp_sfr_msk <= 1'b0 ;
		else if (cpuen) begin
			if (reg_wait) begin
				sp_sfr_msk <= sp_sfr_msk ;
			end
			else begin
				sp_sfr_msk <= dec_sp_set_enable & ((sp_inc[14:7] == 8'hff) | (sp_inc[14:10] == {4'h0,1'b0}) |
								   (sp_inc[14:9] == {4'h0,2'b10}) |
								   ({sp_inc[14:7],sp_inc[6:4]} == {8'hfe,3'h7})) ;
			end
		end
	end

// SPにアクセスするタイミングで、SPがSFR空間を指した場合１となる。
	assign sp_sfr_en = sp_sfr_msk ;

/*------------------------------------------------------------------------------*/
/* メモリへのライトデータ							*/
/*------------------------------------------------------------------------------*/
/*   データメモリへのライトデータを生成する。					*/
/*------------------------------------------------------------------------------*/

// ワードアクセス信号。ワードアクセスがある場合とRAMフェッチ中は１。
// RAMフェッチ中にRAMデータアクセスが発生した場合は立ち下がる。
// DMA転送時はdmawdopが選択される。
	assign wdop_pre = dec_word_access | (~(cpuwr | fchiram_cpurd | pa_data_mem) & fchiram) ;
	assign wdop = (waitdma) ? dmawdop : wdop_pre ;

// ワードデータのライトアクセスで１となる。RAMアクセス専用信号。
	assign wdwr = wdop & cpuwr ;

// メモリライトデータ。ワードアクセスの場合はALU出力。
// バイトアクセスの場合はメモリアドレスの最下位ビットでALU出力をどちらに出すか選択する。
// DMA転送中はデータ保持バッファが選択される。
/*------------------------------------------------------------------------------*/
/* Ver2.0  MDWへの出力は専用で新設したtransoutを出力する。			*/
/*------------------------------------------------------------------------------*/
	assign mdw_pre = (wdop_pre) ? transout : (vpa[0]) ? {transout[7:0],8'h00} : {8'h00,transout[7:0]} ;
	assign mdw_dma = (dmawdop) ? {buf1,buf0} : (vpa[0]) ? {buf0,8'h00} : {8'h00,buf0} ;

	assign mdw = (dmawr) ? mdw_dma : mdw_pre ;

/*------------------------------------------------------------------------------*/
/* 拡張データセグメントレジスタ ＥＳ						*/
/*------------------------------------------------------------------------------*/
/*   命令メモリへリードアクセス時に用いる。					*/
/*------------------------------------------------------------------------------*/

// メモリアドレスに付加してFLASH空間等にデータアクセスできるようにする。
// for EVA
////	//synopsys async_set_reset "resb"
////	always @(posedge baseck or negedge resb) begin
////		if (!resb)		ES <= 4'hf ;
////		else if (cpuen) begin
////			if (reg_wait)	ES <= ES ;
////			else if (dec_ES_enable)	ES <= aluout[3:0] ;
////			else if (pselcpu && cpuwr) begin
////				casex ({vpa,wdop})
////					({4'hc,1'b1}) : ES <= mdw_pre[11:8] ;
////					({4'hd,1'bx}) : ES <= mdw_pre[11:8] ;
////					default	: ES <= ES ;
////				endcase
////			end
////		end
////	end
// for EVA

        reg     [3:0]   ES_usr, ES_sv;

        assign ES = (sel_svmod_reg) ? ES_sv : ES_usr ;

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)              ES_usr <= 4'hf ;
                else if (cpuen && !sel_svmod_reg) begin
                        if (reg_wait)   ES_usr <= ES ;
                        else if (dec_ES_enable) ES_usr <= aluout[3:0] ;
                        else if (pselcpu && cpuwr) begin
                                casex ({vpa,wdop})
                                        ({4'hc,1'b1}) : ES_usr <= mdw_pre[11:8] ;
                                        ({4'hd,1'bx}) : ES_usr <= mdw_pre[11:8] ;
                                        default : ES_usr <= ES ;
                                endcase
                        end
                end
        end

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)              ES_sv <= 4'hf ;
                else if (cpuen && sel_svmod_reg) begin
                        if (reg_wait)   ES_sv <= ES ;
                        else if (dec_ES_enable) ES_sv <= aluout[3:0] ;
                        else if (pselcpu && cpuwr) begin
                                casex ({vpa,wdop})
                                        ({4'hc,1'b1}) : ES_sv <= mdw_pre[11:8] ;
                                        ({4'hd,1'bx}) : ES_sv <= mdw_pre[11:8] ;
                                        default : ES_sv <= ES ;
                                endcase
                        end
                end
        end
//

/*------------------------------------------------------------------------------*/
/* コードセグメントレジスタ ＣＳ						*/
/*------------------------------------------------------------------------------*/
/*   データメモリへのフェッチアクセス時に用いる。				*/
/*------------------------------------------------------------------------------*/
/* Ver2.0  CSへの書き込みはCS_enableを使用して書き込む				*/
/*------------------------------------------------------------------------------*/

// プログラムアドレスに付加してRAM空間にフェッチアクセスできる様になる。
// for EVA
////	//synopsys async_set_reset "resb"
////	always @(posedge baseck or negedge resb) begin
////		if (!resb)		CS <= 4'h0 ;
////		else if (cpuen) begin
////			if (reg_wait)	CS <= CS ;
////			else if (CS_enable) CS <= mdw_pre[3:0] ;
////		end
////	end
// for EVA

        reg     [3:0]   CS_usr, CS_sv;

        assign CS = (sel_svmod_reg) ? CS_sv : CS_usr ;

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)              CS_usr <= 4'h0 ;
                else if (cpuen && !sel_svmod_reg) begin
                        if (reg_wait)   CS_usr <= CS ;
			else if (CS_enable) CS_usr <= mdw_pre[3:0] ;
                end
        end

        //synopsys async_set_reset "resb"
        always @(posedge baseck or negedge resb) begin
                if (!resb)              CS_sv <= 4'h0 ;
                else if (cpuen && sel_svmod_reg) begin
                        if (reg_wait)   CS_sv <= CS ;
			else if (CS_enable) CS_sv <= mdw_pre[3:0] ;
                end
        end
//

/*------------------------------------------------------------------------------*/
/* プロセッサモードコントロールレジスタ ＰＭＣ					*/
/*------------------------------------------------------------------------------*/
/*   ＲＡＭ空間へミラーするフラッシュメモリ空間を選択する。			*/
/*------------------------------------------------------------------------------*/

// MAAが０なら00000H〜0FFFFHをF0000H〜FFFFFHへミラーする。
// MAAが１なら10000H〜1FFFFHをF0000H〜FFFFFHへミラーする。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)
			MAA <= 1'b0;
		else if (cpuen) begin
			if (reg_wait)	MAA <= MAA ;
			else if (pselcpu && cpuwr) begin
				casex (vpa)
					4'he : MAA <= mdw_pre[0] ;
					default	: MAA <= MAA ;
				endcase
			end
		end
	end

/*------------------------------------------------------------------------------*/
/* リード／ライトイネーブル信号							*/
/*------------------------------------------------------------------------------*/
/*   データメモリ及びＳＦＲ空間へのリード／ライトイネーブル信号を生成する。	*/
/*------------------------------------------------------------------------------*/

// データアクセスを示す信号。RAMへのフェッチアクセスと区別する為に使用する。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)		mem_access <= 1'b0 ;
		else if (cpuen) begin
					mem_access <= dec_cpuwr_enable | dec_cpurd_enable ;
		end
	end

// デコーダからのリード／ライト信号を受けるレジスタ。
// ハザード発生時とBTCLR条件不成立時、二重アクセスを防ぐためcpuwr_preとcpurd_preは０になる。
// RAMフェッチ中は命令先読み状態のとき、cpuwr_preは０となり、逆に命令先読み状態でcpurd_preは１となる。
// またRAMフェッチ中のcpurd_preはライトアクセス時には０となる。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) begin
			cpuwr_pre <= 1'b0 ;
			cpurd_pre <= 1'b0 ;
		end
		else if (cpuen) begin
// 分岐条件不成立時に、リード／ライトストローブを立ち下げるのは、
// メモリアクセスをともなう分岐命令のみ。
			if (data_hazard_flg || (stage_cut && dec_ma_enable)) begin
				cpuwr_pre <= 1'b0 ;
				cpurd_pre <= 1'b0 ;
			end
			else if (fchiram) begin
				cpuwr_pre <= dec_cpuwr_enable & ~pa_st2 ;
				cpurd_pre <= dec_cpurd_enable | ~dec_cpuwr_enable | pa_st2 ;
			end
			else begin
				cpuwr_pre <= dec_cpuwr_enable ;
				cpurd_pre <= dec_cpurd_enable ;
			end
		end
	end

// メモリへのライト／リードストローブ信号。
// DMA転送中はdmawr／dmardがそれぞれ選択される。
	assign cpuwr_reg = ~sp_sfr_en & cpuwr_pre;
	assign cpuwr = (waitdma) ? dmawr : ~sp_sfr_en & cpuwr_pre ;
	assign cpurd = (waitdma) ? dmard : cpurd_pre ;

// RAMフェッチ中にメモリへのリードアクセスが発生した場合１となる。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)			fchiram_cpurd <= 1'b0 ;
		else if (cpuen) begin
			if (fchiram)		fchiram_cpurd <= dec_cpurd_enable ;
			else			fchiram_cpurd <= 1'b0 ;
		end
	end

/*------------------------------------------------------------------------------*/
/* 条件判定信号									*/
/*------------------------------------------------------------------------------*/
/*   条件分岐命令実行時に条件判定を行なう。					*/
/*------------------------------------------------------------------------------*/

// CまたはZによる分岐条件判定信号。
// 内部ウェイトでHIGH幅を１クロック引き延ばす。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) 		stage_cut_ifbr <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg)	stage_cut_ifbr <= stage_cut_ifbr ;
			else			stage_cut_ifbr <= dec_stage_cut_ifbr ;
		end
	end

// 分岐条件判定信号。内部ウェイトでHIGH幅を１クロック引き延ばす。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) 		stage_cut_brtf <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg)	stage_cut_brtf <= stage_cut_brtf ;
			else			stage_cut_brtf <= dec_stage_cut_brtf ;
		end
	end

// 分岐命令によるPSWアクセスでのウェイトをこの信号で抑える。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) 		wait_block_brtf <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg)	wait_block_brtf <= wait_block_brtf ;
			else			wait_block_brtf <= stage_cut_brtf ;
		end
	end

// 条件分岐命令実行時に１となる。
	assign stage_cut_br = stage_cut_ifbr | stage_cut_brtf ;

// RAMフェッチ中の条件判定は１クロック遅れるので、判定結果を保持しておく。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) 		stage_cut_alu <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg)	stage_cut_alu <= stage_cut_alu ;
			else if (fchiram)	stage_cut_alu <= ~buf0[0] ;
			else			stage_cut_alu <= ~aluout[0] ;
		end
	end

// 判定条件がZ判定の場合ifbr_zeroが１C判定の場合０となる。
// また、判定条件が負判定の場合ifbr_notが１、正判定の場合０となる。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) begin
				ifbr_not <= 1'b0 ;
				ifbr_zero <= 1'b0 ;
				ifbr_ht <= 1'b0 ;
		end
		else if (cpuen) begin
			if (pc_wait_flg) begin
				ifbr_not <= ifbr_not ;
				ifbr_zero <= ifbr_zero ;
				ifbr_ht <= ifbr_ht ;
			end
			else begin
				ifbr_not <= dec_ifbr_not ;
				ifbr_zero <= dec_ifbr_zero ;
				ifbr_ht <= dec_ifbr_ht ;
			end
		end
	end

// 分岐条件が不成立の場合１となり、分岐命令の実行を強制的に終了する。
// BRT/F/TCLR時はスピードの問題で、判定ビットを保持バッファに格納しておく。
	always @(fchiram or stage_cut_ifbr or stage_cut_brtf or ifbr_not or ifbr_zero or ifbr_ht or
		 stage_cut_alu or CY or Z or buf0) begin
		if (stage_cut_ifbr) begin
			casex ({ifbr_not,ifbr_zero,ifbr_ht})
				3'b000	: stage_cut = ~CY ;
				3'b100	: stage_cut = CY ;
				3'b010	: stage_cut = ~Z ;
				3'b110	: stage_cut = Z ;
				3'b001	: stage_cut = (Z | CY) ;
				3'b101	: stage_cut = ~(Z | CY) ;
				default	: stage_cut = 1'b0 ;
			endcase
		end
		else if (stage_cut_brtf) begin
			if (fchiram)		stage_cut = stage_cut_alu ;
			else			stage_cut = ~buf0[0] ;
		end
		else				stage_cut = 1'b0 ;
	end

/*------------------------------------------------------------------------------*/
/* スキップフラグ								*/
/*------------------------------------------------------------------------------*/
/*   スキップフラグを生成する。							*/
/*------------------------------------------------------------------------------*/

// SKIP命令実行時に割り込み要求を保留するための信号。
	assign skp_block = dec_skc | dec_sknc | dec_skz | dec_sknz | dec_skh | dec_sknh ;

// スキップ判定信号。スキップ命令の判定条件を制御する。
// 内部ウェイト発生時または先読み状態では保持される。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) begin
			skip_c  <= 1'b0 ;
			skip_nc <= 1'b0 ;
			skip_z  <= 1'b0 ;
			skip_nz <= 1'b0 ;
			skip_h  <= 1'b0 ;
			skip_nh <= 1'b0 ;
		end
		else if (cpuen) begin
			if (pc_wait_flg || pa_st2) begin
				skip_c  <= skip_c ;
				skip_nc <= skip_nc ;
				skip_z  <= skip_z ;
				skip_nz <= skip_nz ;
				skip_h  <= skip_h ;
				skip_nh <= skip_nh ;
			end
			else begin
				skip_c  <= dec_skc ;
				skip_nc <= dec_sknc ;
				skip_z  <= dec_skz ;
				skip_nz <= dec_sknz ;
				skip_h  <= dec_skh ;
				skip_nh <= dec_sknh ;
			end
		end
	end

// スキップ対象命令がPREFIX命令だった場合はskpackを２命令分発行する。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) 			prefix_skp <= 1'b0 ;
		else if (cpuen) begin
			if (pc_wait_flg)	prefix_skp <= prefix_skp ;
			else if (skpack && !(fchiram_skp || romrd_skp) && (ID_stage0 == 8'h11))
						prefix_skp <= 1'b1 ;
			else			prefix_skp <= 1'b0 ;
		end
	end

// スキップ実行フラグ。スキップ条件を選択し、デコーダにskpackを渡す。
// FLASHフェッチ中にFLASHへのデータアクセスが発生した場合と、
// RAMフェッチ中にRAMアクセスが発生した場合、不要な命令の実行を防ぐためこの信号を用いる。
	always @(skip_c or skip_nc or skip_z or skip_nz or skip_h or skip_nh or
		 CY or Z or prefix_skp or fchiram_skp or romrd_skp) begin
		if (skip_c)				skpack = CY ;
		else if (skip_nc)			skpack = ~CY ;
		else if (skip_z)			skpack = Z ;
		else if (skip_nz)			skpack = ~Z ;
		else if (skip_h)			skpack = ~(CY | Z) ;
		else if (skip_nh)			skpack = (CY | Z) ;
		else if (prefix_skp)			skpack = 1'b1 ;
		else if (fchiram_skp || romrd_skp)	skpack = 1'b1 ;
		else					skpack = 1'b0 ;
	end

// スキップ条件が成立し、対象命令がスキップされた事を表す信号。
	assign skipexe = skpack & ~fchiram_skp & ~romrd_skp ;

/*------------------------------------------------------------------------------*/
/* ＢＣＤ補正									*/
/*------------------------------------------------------------------------------*/
/*   ＢＣＤ補正データ、キャリー補正データを生成する。				*/
/*------------------------------------------------------------------------------*/

// 演算結果の下位４ビットで補正が必要な場合１となる。
	assign	bcdadj_low = A[3] & (A[2] | A[1]) ;

// 演算結果から補正が必要な場合は、１となる。
	assign	bcdadj_flg[0] = AC | bcdadj_low ;
	assign	bcdadj_flg[1] = CY | (A[7] & (A[6] | A[5] | (A[4] & bcdadj_low))) ;

// BCDADJレジスタの読みだし値は、Aレジスタを補正した値。
	assign	BCDADJ = bcdadj_flg ;

endmodule


/*------------------------------------------------------------------------------*/
/* 算術論理演算ユニット								*/
/*------------------------------------------------------------------------------*/
/*   算術論理演算を実行する。							*/
/*------------------------------------------------------------------------------*/
/* Ver2.0  ビット命令、シフト命令を全て削除。					*/
/*------------------------------------------------------------------------------*/
module QLK0RCPUEVA0V3_EXE(
		aluin10, aluin11, aluin20, aluin21, CY,
		dec_alu_add, dec_alu_sub, dec_alu_and, dec_alu_or, dec_alu_exor,
		dec_alu_carry, dec_word_access,
		exeout, acout, cyout
		);

	input	[7:0]	aluin10, aluin11, aluin20, aluin21;
	input		dec_alu_add, dec_alu_sub, dec_alu_and, dec_alu_or, dec_alu_exor;
	input		dec_alu_carry, dec_word_access;
	input		CY;

	output	[15:0]	exeout;
	output		acout, cyout;

	reg	[15:0]	exeout;
	reg		acout, cyout;
	reg		cy_byte, cy_word;

// ALUの機能を選択し、演算を実行する。
// サイズ縮小のため、全ての命令がこの部分を通過する。
	always @(aluin10 or aluin11 or aluin20 or aluin21 or CY or
		 dec_alu_add or dec_alu_sub or dec_alu_and or dec_alu_or or dec_alu_exor or
		 dec_alu_carry or dec_word_access) begin
		if (dec_alu_add) begin //ADD
			{acout,   exeout[3:0]}  = {1'b0,aluin10[3:0]} + {1'b0,aluin20[3:0]} + (CY & dec_alu_carry) ;
			{cy_byte, exeout[7:4]}  = {1'b0,aluin10[7:4]} + {1'b0,aluin20[7:4]} + acout ;
			{cy_word, exeout[15:8]} = {1'b0,aluin11} + {1'b0,aluin21} + cy_byte ;
			if (dec_word_access) cyout = cy_word ;
			else cyout = cy_byte ;
		end
		else if (dec_alu_sub) begin //SUB
			{acout,   exeout[3:0]}  = {1'b0,aluin10[3:0]} - {1'b0,aluin20[3:0]} - (CY & dec_alu_carry) ;
			{cy_byte, exeout[7:4]}  = {1'b0,aluin10[7:4]} - {1'b0,aluin20[7:4]} - acout ;
			{cy_word, exeout[15:8]} = {1'b0,aluin11} - {1'b0,aluin21} - cy_byte ;
			if (dec_word_access) cyout = cy_word ;
			else cyout = cy_byte ;
		end
		else if (dec_alu_and) begin //AND
			exeout[15:8] = 8'h00 ;
			exeout[7:0] = aluin10 & aluin20 ;
			acout = 1'b0 ;
			cyout = 1'b0 ;
		end
		else if (dec_alu_or) begin //OR
			exeout[15:8] = 8'h00 ;
			exeout[7:0] = aluin10 | aluin20 ;
			acout = 1'b0 ;
			cyout = 1'b0 ;
		end
		else if (dec_alu_exor) begin //EXOR
			exeout[15:8] = 8'h00 ;
			exeout[7:0] = aluin10 ^ aluin20 ;
			acout = 1'b0 ;
			cyout = 1'b0 ;
		end
		else begin  //MOV
			exeout = {aluin21,aluin20} ;
			acout = 1'b0 ;
			cyout = 1'b0 ;
		end
	end

endmodule

/*------------------------------------------------------------------------------*/
/* 算術論理演算ユニット                                                         */
/*------------------------------------------------------------------------------*/
/* Ver2.0  算術論理演算を実行する。						*/
/*------------------------------------------------------------------------------*/
module QLK0RCPUEVA0V3_EXE2(
                bitshin10, bitshin20, bitshin21, CY,
                dec_alu_andbit, dec_alu_orbit, dec_alu_exorbit,
                dec_alu_ror, dec_alu_rol, dec_alu_shr, dec_alu_shl, dec_alu_sar,
                dec_alu_carry, MEM_stage0h, dec_word_access,
                bitshout, cyout
                );

        input   [7:0]   bitshin10, bitshin20, bitshin21;
        input   [3:0]   MEM_stage0h;
        input           dec_alu_andbit, dec_alu_orbit, dec_alu_exorbit;
        input           dec_alu_ror, dec_alu_rol, dec_alu_shr, dec_alu_shl, dec_alu_sar;
        input           dec_alu_carry, dec_word_access;
        input           CY;

        output  [15:0]  bitshout;
        output          cyout;

        reg     [15:0]  bitshout;
        reg             cyout;
        reg             cy_byte, cy_word;

// ALUの機能を選択し、演算を実行する。
// サイズ縮小のため、全ての命令がこの部分を通過する。
// シフト命令はオペコード中にシフト幅が埋め込まれているので、MEMステージレジスタのデータを読み込む。
        always @(bitshin10 or bitshin20 or bitshin21 or CY or
                 dec_alu_andbit or dec_alu_orbit or dec_alu_exorbit or
                 dec_alu_ror or dec_alu_rol or dec_alu_shr or dec_alu_shl or dec_alu_sar or
                 dec_alu_carry or MEM_stage0h or dec_word_access) begin
                if (dec_alu_andbit) begin //AND1,CLR1
                        bitshout[15:8] = 8'h00 ;
                        bitshout[7:0] = bitshin10 & bitshin20 ;
                        cyout = 1'b0 ;
                end
                else if (dec_alu_orbit) begin //OR1,SET1
                        bitshout[15:8] = 8'h00 ;
                        bitshout[7:0] = bitshin10 | bitshin20 ;
                        cyout = 1'b0 ;
                end
                else if (dec_alu_exorbit) begin //EXOR1,NOT1
                        bitshout[15:8] = 8'h00 ;
                        bitshout[7:0] = bitshin10 ^ bitshin20 ;
                        cyout = 1'b0 ;
                end
                else if (dec_alu_ror) begin //ROR
                        bitshout[15:8] = 8'h00 ;
                        bitshout[7]   = (dec_alu_carry) ? CY : bitshin20[0] ;
                        bitshout[6:0] = bitshin20[7:1] ;
                        cyout = bitshin20[0] ;
                end
                else if (dec_alu_rol) begin //ROL
                        if (dec_word_access) begin
                                bitshout[15:1] = {bitshin21[6:0],bitshin20[7:0]} ;
                                bitshout[0] = (dec_alu_carry) ? CY : bitshin21[7] ;
                                cyout = bitshin21[7] ;
                        end
                        else begin
                                bitshout[15:8] = 8'h00 ;
                                bitshout[0]   = (dec_alu_carry) ? CY : bitshin20[7] ;
                                bitshout[7:1] = bitshin20[6:0] ;
                                cyout = bitshin20[7] ;
                        end
                end
                else if (dec_alu_shr) begin //SHR
                        casex ({MEM_stage0h,dec_word_access})
                                ({4'h1,1'b0}) : {bitshout,cyout} = {8'h00,1'b0,bitshin20[7:1],bitshin20[0]} ;
                                ({4'h2,1'b0}) : {bitshout,cyout} = {8'h00,2'b0,bitshin20[7:2],bitshin20[1]} ;
                                ({4'h3,1'b0}) : {bitshout,cyout} = {8'h00,3'b0,bitshin20[7:3],bitshin20[2]} ;
                                ({4'h4,1'b0}) : {bitshout,cyout} = {8'h00,4'b0,bitshin20[7:4],bitshin20[3]} ;
                                ({4'h5,1'b0}) : {bitshout,cyout} = {8'h00,5'b0,bitshin20[7:5],bitshin20[4]} ;
                                ({4'h6,1'b0}) : {bitshout,cyout} = {8'h00,6'b0,bitshin20[7:6],bitshin20[5]} ;
                                ({4'h7,1'b0}) : {bitshout,cyout} = {8'h00,7'b0,bitshin20[7],bitshin20[6]} ;
                                ({4'h0,1'b1}) : {bitshout,cyout} = { bitshin21[7:0],bitshin20[7:0],1'b0} ;
                                ({4'h1,1'b1}) : {bitshout,cyout} = { 1'b0,bitshin21[7:0],bitshin20[7:1],bitshin20[0]} ;
                                ({4'h2,1'b1}) : {bitshout,cyout} = { 2'b0,bitshin21[7:0],bitshin20[7:2],bitshin20[1]} ;
                                ({4'h3,1'b1}) : {bitshout,cyout} = { 3'b0,bitshin21[7:0],bitshin20[7:3],bitshin20[2]} ;
                                ({4'h4,1'b1}) : {bitshout,cyout} = { 4'b0,bitshin21[7:0],bitshin20[7:4],bitshin20[3]} ;
                                ({4'h5,1'b1}) : {bitshout,cyout} = { 5'b0,bitshin21[7:0],bitshin20[7:5],bitshin20[4]} ;
                                ({4'h6,1'b1}) : {bitshout,cyout} = { 6'b0,bitshin21[7:0],bitshin20[7:6],bitshin20[5]} ;
                                ({4'h7,1'b1}) : {bitshout,cyout} = { 7'b0,bitshin21[7:0],bitshin20[7],bitshin20[6]} ;
                                ({4'h8,1'b1}) : {bitshout,cyout} = { 8'b0,bitshin21[7:0],bitshin20[7]} ;
                                ({4'h9,1'b1}) : {bitshout,cyout} = { 9'b0,bitshin21[7:1],bitshin21[0]} ;
                                ({4'ha,1'b1}) : {bitshout,cyout} = {10'b0,bitshin21[7:2],bitshin21[1]} ;
                                ({4'hb,1'b1}) : {bitshout,cyout} = {11'b0,bitshin21[7:3],bitshin21[2]} ;
                                ({4'hc,1'b1}) : {bitshout,cyout} = {12'b0,bitshin21[7:4],bitshin21[3]} ;
                                ({4'hd,1'b1}) : {bitshout,cyout} = {13'b0,bitshin21[7:5],bitshin21[4]} ;
                                ({4'he,1'b1}) : {bitshout,cyout} = {14'b0,bitshin21[7:6],bitshin21[5]} ;
                                ({4'hf,1'b1}) : {bitshout,cyout} = {15'b0,bitshin21[7],bitshin21[6]} ;
                                default : {bitshout,cyout} = {8'h00,bitshin20,1'b0} ;
                        endcase
                end
                else if (dec_alu_shl) begin //SHL
                        casex ({MEM_stage0h,dec_word_access})
                                ({4'h1,1'b0}) : {bitshout,cyout} = {8'h00,bitshin20[6:0],1'b0,bitshin20[7]} ;
                                ({4'h2,1'b0}) : {bitshout,cyout} = {8'h00,bitshin20[5:0],2'b0,bitshin20[6]} ;
                                ({4'h3,1'b0}) : {bitshout,cyout} = {8'h00,bitshin20[4:0],3'b0,bitshin20[5]} ;
                                ({4'h4,1'b0}) : {bitshout,cyout} = {8'h00,bitshin20[3:0],4'b0,bitshin20[4]} ;
                                ({4'h5,1'b0}) : {bitshout,cyout} = {8'h00,bitshin20[2:0],5'b0,bitshin20[3]} ;
                                ({4'h6,1'b0}) : {bitshout,cyout} = {8'h00,bitshin20[1:0],6'b0,bitshin20[2]} ;
                                ({4'h7,1'b0}) : {bitshout,cyout} = {8'h00,bitshin20[0],7'b0,bitshin20[1]} ;
                                ({4'h0,1'b1}) : {bitshout,cyout} = {bitshin21[7:0],bitshin20[7:0],1'b0} ;
                                ({4'h1,1'b1}) : {bitshout,cyout} = {bitshin21[6:0],bitshin20[7:0],1'b0,bitshin21[7]} ;
                                ({4'h2,1'b1}) : {bitshout,cyout} = {bitshin21[5:0],bitshin20[7:0],2'b0,bitshin21[6]} ;
                                ({4'h3,1'b1}) : {bitshout,cyout} = {bitshin21[4:0],bitshin20[7:0],3'b0,bitshin21[5]} ;
                                ({4'h4,1'b1}) : {bitshout,cyout} = {bitshin21[3:0],bitshin20[7:0],4'b0,bitshin21[4]} ;
                                ({4'h5,1'b1}) : {bitshout,cyout} = {bitshin21[2:0],bitshin20[7:0],5'b0,bitshin21[3]} ;
                                ({4'h6,1'b1}) : {bitshout,cyout} = {bitshin21[1:0],bitshin20[7:0],6'b0,bitshin21[2]} ;
                                ({4'h7,1'b1}) : {bitshout,cyout} = {bitshin21[0],bitshin20[7:0],7'b0,bitshin21[1]} ;
                                ({4'h8,1'b1}) : {bitshout,cyout} = {bitshin20[7:0], 8'b0,bitshin21[0]} ;
                                ({4'h9,1'b1}) : {bitshout,cyout} = {bitshin20[6:0], 9'b0,bitshin20[7]} ;
                                ({4'ha,1'b1}) : {bitshout,cyout} = {bitshin20[5:0],10'b0,bitshin20[6]} ;
                                ({4'hb,1'b1}) : {bitshout,cyout} = {bitshin20[4:0],11'b0,bitshin20[5]} ;
                                ({4'hc,1'b1}) : {bitshout,cyout} = {bitshin20[3:0],12'b0,bitshin20[4]} ;
                                ({4'hd,1'b1}) : {bitshout,cyout} = {bitshin20[2:0],13'b0,bitshin20[3]} ;
                                ({4'he,1'b1}) : {bitshout,cyout} = {bitshin20[1:0],14'b0,bitshin20[2]} ;
                                ({4'hf,1'b1}) : {bitshout,cyout} = {bitshin20[0],15'b0,bitshin20[1]} ;
                                default : {bitshout,cyout} = {8'h00,bitshin20,1'b0} ;
                        endcase
                end
                else if (dec_alu_sar) begin //SAR
                        casex ({MEM_stage0h,dec_word_access})
                                ({4'h1,1'b0}) : {bitshout,cyout} = {8'h00,bitshin20[7],bitshin20[7:1],bitshin20[0]} ;
                                ({4'h2,1'b0}) : {bitshout,cyout} = {8'h00,{2{bitshin20[7]}},bitshin20[7:2],bitshin20[1]} ;
                                ({4'h3,1'b0}) : {bitshout,cyout} = {8'h00,{3{bitshin20[7]}},bitshin20[7:3],bitshin20[2]} ;
                                ({4'h4,1'b0}) : {bitshout,cyout} = {8'h00,{4{bitshin20[7]}},bitshin20[7:4],bitshin20[3]} ;
                                ({4'h5,1'b0}) : {bitshout,cyout} = {8'h00,{5{bitshin20[7]}},bitshin20[7:5],bitshin20[4]} ;
                                ({4'h6,1'b0}) : {bitshout,cyout} = {8'h00,{6{bitshin20[7]}},bitshin20[7:6],bitshin20[5]} ;
                                ({4'h7,1'b0}) : {bitshout,cyout} = {8'h00,{7{bitshin20[7]}},bitshin20[7],bitshin20[6]} ;
                                ({4'h0,1'b1}) : {bitshout,cyout} = {bitshin21[7:0],bitshin20[7:0],1'b0} ;
                                ({4'h1,1'b1}) : {bitshout,cyout} = {bitshin21[7],bitshin21[7:0],bitshin20[7:1],bitshin20[0]} ;
                                ({4'h2,1'b1}) : {bitshout,cyout} = {{ 2{bitshin21[7]}},bitshin21[7:0],bitshin20[7:2],bitshin20[1]} ;
                                ({4'h3,1'b1}) : {bitshout,cyout} = {{ 3{bitshin21[7]}},bitshin21[7:0],bitshin20[7:3],bitshin20[2]} ;
                                ({4'h4,1'b1}) : {bitshout,cyout} = {{ 4{bitshin21[7]}},bitshin21[7:0],bitshin20[7:4],bitshin20[3]} ;
                                ({4'h5,1'b1}) : {bitshout,cyout} = {{ 5{bitshin21[7]}},bitshin21[7:0],bitshin20[7:5],bitshin20[4]} ;
                                ({4'h6,1'b1}) : {bitshout,cyout} = {{ 6{bitshin21[7]}},bitshin21[7:0],bitshin20[7:6],bitshin20[5]} ;
                                ({4'h7,1'b1}) : {bitshout,cyout} = {{ 7{bitshin21[7]}},bitshin21[7:0],bitshin20[7],bitshin20[6]} ;
                                ({4'h8,1'b1}) : {bitshout,cyout} = {{ 8{bitshin21[7]}},bitshin21[7:0],bitshin20[7]} ;
                                ({4'h9,1'b1}) : {bitshout,cyout} = {{ 9{bitshin21[7]}},bitshin21[7:1],bitshin21[0]} ;
                                ({4'ha,1'b1}) : {bitshout,cyout} = {{10{bitshin21[7]}},bitshin21[7:2],bitshin21[1]} ;
                                ({4'hb,1'b1}) : {bitshout,cyout} = {{11{bitshin21[7]}},bitshin21[7:3],bitshin21[2]} ;
                                ({4'hc,1'b1}) : {bitshout,cyout} = {{12{bitshin21[7]}},bitshin21[7:4],bitshin21[3]} ;
                                ({4'hd,1'b1}) : {bitshout,cyout} = {{13{bitshin21[7]}},bitshin21[7:5],bitshin21[4]} ;
                                ({4'he,1'b1}) : {bitshout,cyout} = {{14{bitshin21[7]}},bitshin21[7:6],bitshin21[5]} ;
                                ({4'hf,1'b1}) : {bitshout,cyout} = {{15{bitshin21[7]}},bitshin21[7],bitshin21[6]} ;
                                default : {bitshout,cyout} = {8'h00,bitshin20,1'b0} ;
                        endcase
                end
//              else if (dec_alu_mulu) begin //MULU teg3
//                      bitshout = bitshin10 * bitshin20 ;
//                      acout = 1'b0 ;
//                      cyout = 1'b0 ;
//              end
                else begin  //MOV
                        bitshout = {bitshin21,bitshin20} ;
                        cyout = 1'b0 ;
                end
        end

endmodule

/********************************************************************************/
/* K0R EVA CLK Block                                                           	*/
/*                                                          Made K.Tanaka       */
/********************************************************************************/
/* Ver1.00  New                                                                 */
/* Ver1.50  Add stbst                                 2007.07.02 K.Tanaka       */
/********************************************************************************/
module QLK0RCPUEVA0V3_CLK(
	mdr, imdr, pselcpu, pselbcd, slreg, rga, vpa,
	dec_set_buf_retadr, dec_set_buf_intr,
	dec_halt, dec_stop, stben, pc_wait_flg, stby_wait_flg, cpurd, wdop,
	intdbg, intnmi, intrq3, intrq2, intrq1, intrq0,
	SP, PSW, CS, ES, MAA, BCDADJ,
	A_bank0, X_bank0, B_bank0, C_bank0, D_bank0, E_bank0, H_bank0, L_bank0,
	A_bank1, X_bank1, B_bank1, C_bank1, D_bank1, E_bank1, H_bank1, L_bank1,
	A_bank2, X_bank2, B_bank2, C_bank2, D_bank2, E_bank2, H_bank2, L_bank2,
	A_bank3, X_bank3, B_bank3, C_bank3, D_bank3, E_bank3, H_bank3, L_bank3,
	INT_wait, wait2ndsfr, sl2ndwait_pre, waitdma, waitint, dmarq, dopen, dmaack,
	waitfl, waitmod, waitexm, dmaen, dmawait, ocdwait, pswlock,
	exmmsk, flmask, hltst, stpst, stbst,
// for EVA
        SP_usr, SP_sv, svmod, alt1,
        svi,
        waitfl2, icewaitmem,
        cpumask,
//
	cpustart, cpuen, pswen, baseck, resb, scanmode,
	sldfwait_pre, waitdflash,
	RVEON, crchlten
	);

	output	[15:0]	imdr;
	output		cpuen, pswen;
	output		pswlock;
	output		waitint, waitdma;
	output		dmawait, dmaack;
	output		ocdwait;
	output		stben;
	output		exmmsk;
	output		flmask;
	output		hltst, stpst;
	output		stbst;		// add v1.50 2007.07.02 K.Tanaka

// for EVA
        output          cpumask;
//

	input	[15:0]	mdr;
	input		pselcpu, pselbcd;
	input		slreg;
	input		rga;
	input	[3:0]	vpa;
	input		dec_set_buf_retadr, dec_set_buf_intr;
	input		dec_halt, dec_stop;
	input		pc_wait_flg, stby_wait_flg;
	input		cpurd, wdop;
	input	[14:0]	SP;
	input	[7:0]	PSW;
	input	[3:0]	CS, ES;
	input		MAA;
	input	[1:0]	BCDADJ;
	input	[7:0]	A_bank0,X_bank0,B_bank0,C_bank0,D_bank0,E_bank0,H_bank0,L_bank0;
	input	[7:0]	A_bank1,X_bank1,B_bank1,C_bank1,D_bank1,E_bank1,H_bank1,L_bank1;
	input	[7:0]	A_bank2,X_bank2,B_bank2,C_bank2,D_bank2,E_bank2,H_bank2,L_bank2;
	input	[7:0]	A_bank3,X_bank3,B_bank3,C_bank3,D_bank3,E_bank3,H_bank3,L_bank3;
	input		intdbg, intnmi, intrq3, intrq2, intrq1, intrq0;
	input		INT_wait, wait2ndsfr, sl2ndwait_pre;
	input		waitfl, waitmod, waitexm;
	input		dmarq, dopen;
	input		dmaen;
	input		cpustart;
	input		baseck, resb;
	input		scanmode;
	input		sldfwait_pre;
	input		waitdflash;
	input		RVEON;
	input		crchlten;
// for EVA
        input   [14:0]  SP_usr, SP_sv;
        input           svmod;
        input           alt1;
        input           svi;
        input           waitfl2, icewaitmem;
//

	wire		stby, stben;
	wire		cpuen_pre;
	wire		flmask_pre;
	wire		waitdma;

// for EVA
        wire    [14:0]  SP_rd;
//

	reg	[15:0]	cpumdr;
	reg	[1:0]	wait_cnt;
	reg		waitint;
	reg		dmaack_pre;
	reg		DMA_read, DMA_write;

/*------------------------------------------------------------------------------*/
/* ＣＰＵイネーブル								*/
/*------------------------------------------------------------------------------*/
/*   ＨＡＬＴ、ＳＴＯＰ命令実行時と外部ウェイト発生時にクロックを停止させる。	*/
/*------------------------------------------------------------------------------*/

// CPU外部ウェイトで、CPU内でウェイト幅をカウントする場合のカウンタ。
// INT命令とINTマクロのSFR、PSWへの書き込み競合を回避するウェイトでカウントアップ。
// DMA転送中、または外部ウェイト中はカウントアップしてはいけない。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb) begin
			wait_cnt <= 2'h0 ;
		end
		else if (waitdma || waitexm || wait2ndsfr || waitdflash || waitfl || waitmod) begin
			wait_cnt <= wait_cnt ;
		end
		else if (waitint) begin
			wait_cnt <= wait_cnt + 2'h1 ;
		end
		else begin
			wait_cnt <= 2'h0 ;
		end
	end

// 外部割り込みWAITINT。２クロックウェイトなので、
// ウェイトカウント２で立ち下がる。
	always @(INT_wait or wait_cnt) begin
		if (INT_wait)
			if (wait_cnt == 2'h2)	waitint = 1'b0 ;
			else			waitint = 1'b1 ;
		else				waitint = 1'b0 ;
	end

// dmarqを受け付けた場合に立ち上がる。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)			dmaack_pre <= 1'b0 ;
		else if (dmaen) begin
			if (dmawait)		dmaack_pre <= dmaack_pre ;
			else if (dmaack_pre)	dmaack_pre <= 1'b0 ;
			else			dmaack_pre <= dopen & dmarq ;
		end
	end

// CALLなどIDステージで保持バッファを使用する命令、命令によるWAIT
// ノンマスカブル割り込み要求発生でDMAACKをマスクする。
// for EVA
//	assign dmaack = dmaack_pre & ~(dec_set_buf_retadr | dec_set_buf_intr) & ~waitint & ~sl2ndwait_pre & ~(intdbg | intnmi) ;
	assign dmaack = dmaack_pre & ~(dec_set_buf_retadr | dec_set_buf_intr) & ~waitint & ~sl2ndwait_pre & ~sldfwait_pre & ~(intdbg | intnmi | svi) ;
//

// DMAのリードサイクルを表す信号。
// DMA受け付け時に１となる。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)		DMA_read <= 1'b0 ;
		else if (dmaen) begin
			if (dmawait)	DMA_read <= DMA_read ;
			else		DMA_read <= dmaack ;
		end
	end

// DMAのライトサイクルを表す信号。
// DMA転送中のウェイト信号を１クロック延ばす。
	//synopsys async_set_reset "resb"
	always @(posedge baseck or negedge resb) begin
		if (!resb)		DMA_write <= 1'b0 ;
		else if (dmaen) begin
			if (dmawait)	DMA_write <= DMA_write ;
			else		DMA_write <= DMA_read ;
		end
	end

// DMA転送中のウェイト信号。
	assign waitdma = DMA_read | DMA_write ;

// DMA転送中はslexm信号をマスクしバスサイクルの発行を待たせる為の信号。
// 割り込み制御レジスタのライトアクセスによるウェイトでもslexmをマスクする。
	assign exmmsk = DMA_read | (DMA_write & dmawait) | waitint ;

// WAITINT発生時、PSWだけを動かす信号。
	assign pswen = waitint & (wait_cnt == 2'b00) & ~waitdma ;

// PSWアクセスのウェイトにおいて、PSWの更新は最初の１クロックのみ。
// それ以外の期間はこの信号で保持する。
	assign pswlock = wait_cnt[1] | wait_cnt[0] ;

// 割り込み要求がある場合１となる。この時、スタンバイ状態には入らない。
// for EVA
//	assign stben = intdbg | intnmi | intrq3 | intrq2 | intrq1 | intrq0 ;
        assign stben = intdbg | intnmi | intrq3 | intrq2 | intrq1 | intrq0 | crchlten | svi ;
//

// HALT/STOP命令が実行されたとき１となる。
	assign stbst = dec_halt | dec_stop ;

// HALT命令STOP命令実行時に１となる。割り込み要求がある場合は０。
// RAMフェッチ中の命令フェッチ期間(pc_wait_flg)にHALT/STOPに入れない。
/*------------------------------------------------------------------------------*/
/* Ver2.0  SLFLASHのスピードアップの為、pc_wait_flgを変更する。			*/
/*　　　　元々、RAMフェッチでHALTで止まった際に、止まる場所がRAMフェッチ中に	*/
/*　　　　停止したため、HALT中にDMA転送できない問題からpc_wait_flgが入った。	*/
/*　　　　しかし、pc_wait_flgに絡む全ての条件が必要ではないため、		*/
/*　　　　stby_wait_flgの条件にした。						*/
/*------------------------------------------------------------------------------*/
//	assign stby = (dec_halt | dec_stop) & ~stben & ~pc_wait_flg ;
	assign stby = (dec_halt | dec_stop) & ~stben & ~stby_wait_flg ;

// CPU停止中にFLASH選択信号をマスクする為の信号。
// for EVA
//	assign flmask_pre = stby | waitfl | waitmod | waitexm | wait2ndsfr | waitint | waitdma ;
//	assign flmask_pre = stby | (waitfl | waitfl2 ) | waitmod | waitexm | wait2ndsfr | waitint | waitdma ;
	assign flmask_pre = stby | (waitfl | waitfl2 ) | waitmod | waitexm | wait2ndsfr | waitdflash | waitint | waitdma ;

//
	assign flmask = ~flmask_pre & cpustart ;

// スタンバイ状態と外部ウェイトの時１となる。
// for EVA
//	assign cpuen_pre = flmask_pre ;
        assign cpuen_pre = flmask_pre | icewaitmem ;
//

// CPUイネーブル信号。０のときCPUは停止する。
	assign cpuen = ~cpuen_pre & cpustart ;

// DMA用のウェイト信号。
// for EVA
//	assign dmawait = waitexm | wait2ndsfr | waitfl | waitmod ;
//	assign dmawait = waitexm | wait2ndsfr | waitfl | waitmod | icewaitmem ;
	assign dmawait = waitexm | wait2ndsfr | waitdflash | waitfl | waitmod | icewaitmem ;
//

// OCD用のウェイト信号。
	assign ocdwait = waitexm | wait2ndsfr | waitdflash ;

// RAMフェッチ中の命令フェッチ期間(pc_wait_flg)にHALT/STOPに入れない。
	assign hltst = ~pc_wait_flg & dec_halt ;
	assign stpst = ~pc_wait_flg & dec_stop ;

/*------------------------------------------------------------------------------*/
/* リードバス									*/
/*------------------------------------------------------------------------------*/
/*   ＣＰＵ内ＳＦＲのリードバスとＲＡＭのリードバスとの論理和。			*/
/*------------------------------------------------------------------------------*/

// CPUの内部リードバス。CPUのSFRリードバスとメモリリードバスのOR。
	assign imdr = mdr | cpumdr ;

// for EVA
        assign cpumask = pselcpu & ((vpa == 4'h8) | (vpa == 4'h9) | (vpa == 4'ha) | (vpa == 4'hc) | (vpa == 4'hd)) ;
//

// for EVA
        assign SP_rd = (svmod & ~alt1) ? SP_sv : SP_usr ;
//

// CPUのSFR、レジスタバンクのリードデータ。
// for EVA
//	always @(pselcpu or cpurd or wdop or vpa or SP or PSW or CS or ES or MAA or
        always @(pselcpu or cpurd or wdop or vpa or SP_rd or PSW or CS or ES or MAA or
//
		 pselbcd or BCDADJ or slreg or rga or waitdma or
		 A_bank0 or X_bank0 or B_bank0 or C_bank0 or D_bank0 or E_bank0 or H_bank0 or L_bank0 or
		 A_bank1 or X_bank1 or B_bank1 or C_bank1 or D_bank1 or E_bank1 or H_bank1 or L_bank1 or
		 A_bank2 or X_bank2 or B_bank2 or C_bank2 or D_bank2 or E_bank2 or H_bank2 or L_bank2 or
		 A_bank3 or X_bank3 or B_bank3 or C_bank3 or D_bank3 or E_bank3 or H_bank3 or L_bank3 or
		RVEON ) begin
		if (waitdma) begin
			cpumdr = 16'h0000 ;
		end
		else if (pselcpu && cpurd) begin
			casex ({vpa,wdop})
// for EVA
//				({4'h8,1'b0}) : cpumdr = {8'h00,SP[6:0],1'b0} ;
//				({4'h8,1'b1}) : cpumdr = {SP,1'b0} ;
//				({4'h9,1'bx}) : cpumdr = {SP[14:7],8'h00} ;
                                ({4'h8,1'b0}) : cpumdr = {8'h00,SP_rd[6:0],1'b0} ;
                                ({4'h8,1'b1}) : cpumdr = {SP_rd,1'b0} ;
                                ({4'h9,1'bx}) : cpumdr = {SP_rd[14:7],8'h00} ;
//
				({4'ha,1'bx}) : cpumdr = {8'h00,PSW} ;
				({4'hc,1'b0}) : cpumdr = {12'h000,CS} ;
				({4'hc,1'b1}) : cpumdr = {4'h0,ES,4'h0,CS} ;
				({4'hd,1'bx}) : cpumdr = {4'h0,ES,8'h00} ;
				({4'he,1'bx}) : cpumdr = {15'b0,MAA} ;
				default : cpumdr = 16'h0000 ;
			endcase
		end
		else if (pselbcd && cpurd) begin
			casex ({vpa[0],wdop})
//				({1'b1,1'bx}) : cpumdr = {8'h00,8'h00} ;
//				({1'b0,1'b1}) : cpumdr = {8'h00,1'b0,BCDADJ[1],BCDADJ[1],1'b0,1'b0,BCDADJ[0],BCDADJ[0],1'b0} ;
				({1'b1,1'bx}) : cpumdr = {7'b0000_000,RVEON,8'h00} ;
				({1'b0,1'b0}) : cpumdr = {8'h00,1'b0,BCDADJ[1],BCDADJ[1],1'b0,1'b0,BCDADJ[0],BCDADJ[0],1'b0} ;
				({1'b0,1'b1}) : cpumdr = {7'b0000_000,RVEON,1'b0,BCDADJ[1],BCDADJ[1],1'b0,1'b0,BCDADJ[0],BCDADJ[0],1'b0} ;
				// cannot reach DEFAULT brunch
				// default : cpumdr = 16'h0000 ;
			endcase
		end
		else if (slreg && cpurd) begin
			casex ({rga,vpa,wdop})
				// ＡＸレジスタ バンク０
				({1'b1,4'h9,1'bx}) : cpumdr = {A_bank0,8'h00  } ;
				({1'b1,4'h8,1'b0}) : cpumdr = {8'h00,  X_bank0} ;
				({1'b1,4'h8,1'b1}) : cpumdr = {A_bank0,X_bank0} ;
				// ＢＣレジスタ バンク０
				({1'b1,4'hb,1'bx}) : cpumdr = {B_bank0,8'h00  } ;
				({1'b1,4'ha,1'b0}) : cpumdr = {8'h00,  C_bank0} ;
				({1'b1,4'ha,1'b1}) : cpumdr = {B_bank0,C_bank0} ;
				// ＤＥレジスタ バンク０
				({1'b1,4'hd,1'bx}) : cpumdr = {D_bank0,8'h00  } ;
				({1'b1,4'hc,1'b0}) : cpumdr = {8'h00,  E_bank0} ;
				({1'b1,4'hc,1'b1}) : cpumdr = {D_bank0,E_bank0} ;
				// ＨＬレジスタ バンク０
				({1'b1,4'hf,1'bx}) : cpumdr = {H_bank0,8'h00  } ;
				({1'b1,4'he,1'b0}) : cpumdr = {8'h00,  L_bank0} ;
				({1'b1,4'he,1'b1}) : cpumdr = {H_bank0,L_bank0} ;
				// ＡＸレジスタ バンク１
				({1'b1,4'h1,1'bx}) : cpumdr = {A_bank1,8'h00  } ;
				({1'b1,4'h0,1'b0}) : cpumdr = {8'h00,  X_bank1} ;
				({1'b1,4'h0,1'b1}) : cpumdr = {A_bank1,X_bank1} ;
				// ＢＣレジスタ バンク１
				({1'b1,4'h3,1'bx}) : cpumdr = {B_bank1,8'h00  } ;
				({1'b1,4'h2,1'b0}) : cpumdr = {8'h00,  C_bank1} ;
				({1'b1,4'h2,1'b1}) : cpumdr = {B_bank1,C_bank1} ;
				// ＤＥレジスタ バンク１
				({1'b1,4'h5,1'bx}) : cpumdr = {D_bank1,8'h00  } ;
				({1'b1,4'h4,1'b0}) : cpumdr = {8'h00,  E_bank1} ;
				({1'b1,4'h4,1'b1}) : cpumdr = {D_bank1,E_bank1} ;
				// ＨＬレジスタ バンク１
				({1'b1,4'h7,1'bx}) : cpumdr = {H_bank1,8'h00  } ;
				({1'b1,4'h6,1'b0}) : cpumdr = {8'h00,  L_bank1} ;
				({1'b1,4'h6,1'b1}) : cpumdr = {H_bank1,L_bank1} ;
				// ＡＸレジスタ バンク２
				({1'b0,4'h9,1'bx}) : cpumdr = {A_bank2,8'h00  } ;
				({1'b0,4'h8,1'b0}) : cpumdr = {8'h00,  X_bank2} ;
				({1'b0,4'h8,1'b1}) : cpumdr = {A_bank2,X_bank2} ;
				// ＢＣレジスタ バンク２
				({1'b0,4'hb,1'bx}) : cpumdr = {B_bank2,8'h00  } ;
				({1'b0,4'ha,1'b0}) : cpumdr = {8'h00,  C_bank2} ;
				({1'b0,4'ha,1'b1}) : cpumdr = {B_bank2,C_bank2} ;
				// ＤＥレジスタ バンク２
				({1'b0,4'hd,1'bx}) : cpumdr = {D_bank2,8'h00  } ;
				({1'b0,4'hc,1'b0}) : cpumdr = {8'h00,  E_bank2} ;
				({1'b0,4'hc,1'b1}) : cpumdr = {D_bank2,E_bank2} ;
				// ＨＬレジスタ バンク２
				({1'b0,4'hf,1'bx}) : cpumdr = {H_bank2,8'h00  } ;
				({1'b0,4'he,1'b0}) : cpumdr = {8'h00,  L_bank2} ;
				({1'b0,4'he,1'b1}) : cpumdr = {H_bank2,L_bank2} ;
				// ＡＸレジスタ バンク３
				({1'b0,4'h1,1'bx}) : cpumdr = {A_bank3,8'h00  } ;
				({1'b0,4'h0,1'b0}) : cpumdr = {8'h00,  X_bank3} ;
				({1'b0,4'h0,1'b1}) : cpumdr = {A_bank3,X_bank3} ;
				// ＢＣレジスタ バンク３
				({1'b0,4'h3,1'bx}) : cpumdr = {B_bank3,8'h00  } ;
				({1'b0,4'h2,1'b0}) : cpumdr = {8'h00,  C_bank3} ;
				({1'b0,4'h2,1'b1}) : cpumdr = {B_bank3,C_bank3} ;
				// ＤＥレジスタ バンク３
				({1'b0,4'h5,1'bx}) : cpumdr = {D_bank3,8'h00  } ;
				({1'b0,4'h4,1'b0}) : cpumdr = {8'h00,  E_bank3} ;
				({1'b0,4'h4,1'b1}) : cpumdr = {D_bank3,E_bank3} ;
				// ＨＬレジスタ バンク３
				({1'b0,4'h7,1'bx}) : cpumdr = {H_bank3,8'h00  } ;
				({1'b0,4'h6,1'b0}) : cpumdr = {8'h00,  L_bank3} ;
				({1'b0,4'h6,1'b1}) : cpumdr = {H_bank3,L_bank3} ;
				// cannot reach DEFAULT brunch
				// default : cpumdr = 16'h0000 ;
			endcase
		end
		else cpumdr = 16'h0000 ;
	end

endmodule

/************************************************************************/
/* Module Name : QLK0RCPUEVA0V3_DEC                                        */
/* Author      : K.Kawai                                                */
/* Rev, Date   : 1.0 2006/1/13 11:41:29 generated by make_superk0.c.    */
/************************************************************************/

module QLK0RCPUEVA0V3_DEC(
        ID_stage1, /* ID Code address stage 15-8bit */
        ID_stage0, /* ID Code address stage 7-0bit */
        stage_adr,         /* Address stage machine cycle */
        rstvec,             /* RESET Vector */
        ivack,             /* Interrupt Vector ACK */
        skpack,             /* Skip ACK */
        dec_alu_input10,   /* ALU input1[7:0] */
        dec_alu_input20,   /* ALU input2[7:0] */
        dec_alu_add,    
        dec_alu_sub,    
        dec_alu_and,    
        dec_alu_or,    
        dec_alu_exor,    
        dec_alu_andbit,    
        dec_alu_orbit,    
        dec_alu_exorbit,    
        dec_alu_ror,    
        dec_alu_rol,    
        dec_alu_shr,    
        dec_alu_shl,    
        dec_alu_sar,    
        dec_alu_mulu,    
        dec_alu_carry,    
	dec_alu_transout,  /* trans instruction MOV,XCH,MOVW,XCHW */
	dec_alu_transin,   /* trans instruction MOV,XCH,MOVW,XCHW */
	dec_alu_bitsh,  /* bit,shift instruction ROR, SHR, MOV1, AND1, etc... */
	dec_alu_biten,	/* biten instruction */
        dec_word_access,   /* Word access */
        dec_xch_byte,      /* XCH resister direct input byte */
        dec_xchw_bc,       /* XCHW resister direct input AX<-BC */
        dec_xchw_de,       /* XCHW resister direct input AX<-DE */
        dec_xchw_hl,       /* XCHW resister direct input AX<-HL */
        dec_SP_enable,
        dec_A_enable,
        dec_X_enable,
        dec_B_enable,
        dec_C_enable,
        dec_D_enable,
        dec_E_enable,
        dec_H_enable,
        dec_L_enable,
        dec_ES_enable,
        dec_Z_enable,
        dec_CY_enable,
        dec_AC_enable,
        dec_IE_enable,
        dec_ISP_enable,
        dec_RBS_enable,
        dec_NMIS_enable,
        dec_buf0_enable,
        dec_buf1_enable,
        dec_buf2_enable,
        dec_cpuwr_enable,
        dec_cpurd_enable,
        dec_ma_enable,
        dec_ma_data_sp,
        dec_ma_data_saddr_op1,
        dec_ma_data_saddr_op2,
        dec_ma_data_sfr_op1,
        dec_ma_data_sfr_op2,
        dec_ma_data_op12,
        dec_ma_data_op23,
        dec_ma_data_HL,
        dec_ma_data_HLop1,
        dec_ma_data_HLop2,
        dec_ma_data_HLB,
        dec_ma_data_HLC,
        dec_ma_data_DE,
        dec_ma_data_DEop1,
        dec_ma_data_DEop2,
        dec_ma_data_SPop1,
        dec_ma_data_BCop12,
        dec_ma_data_Bop12,
        dec_ma_data_Cop12,
        dec_sp_set_enable,
        dec_sp_inc,
        dec_sp_dec,
        dec_pc_inc1,
        dec_pc_inc2,
        dec_pc_inc3,
        dec_pc_inc4,
        dec_clear_stage,
        dec_pc_set_enable,
        dec_pc_set_op01,
        dec_pc_set_op12,
        dec_pc_set_op123,
        dec_pc_set_AX,
        dec_pc_set_BC,
        dec_pc_set_DE,
        dec_pc_set_HL,
        dec_pc_set_pc1,
        dec_pc_set_pc2,
        dec_pc_set_pc3,
        dec_pc_set_pc12,
        dec_pc_set_calt,
        dec_pc_set_vec,
        dec_pc_set_brk,
        dec_pc_set_dbg,
        dec_pc_set_ret,
        dec_stage_cut_brtf,
        dec_stage_cut_ifbr,
        dec_ifbr_not,
        dec_ifbr_zero,
        dec_ifbr_ht,
        dec_mem_stage_op2,
        dec_mem_stage_op3,
        dec_mem_stage_op23,
        dec_set_buf_retadr,
        dec_set_buf_intr,
        dec_skc,
        dec_sknc,
        dec_skz,
        dec_sknz,
        dec_skh,
        dec_sknh,
        dec_prefix,
        dec_halt,
        dec_stop,
        dec_movs,
        dec_cmps,
// for EVA
        dec_alt1,
        dec_alt2,
//
        baseck, resb,scanmode,cpuen);
    input [7:0] ID_stage1, ID_stage0;
    input [1:0] stage_adr;
    input       rstvec;
    input       ivack;
    input       skpack;
    input       baseck, resb,scanmode,cpuen;

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　　　アドレスステージのデコーダ出力は、デコーダのバタつきがそのまま出力さ	*/
/*　　　　れる。そのバタつきによる電流を削減する為に、デコーダ出力の頭を	*/
/*　　　　マスクする回路を挿入する。ただし、スピードネックとなるため		*/
/*　　　　(デコーダ出力→SLFLASH)、AMPH=1の時はパスさせる。			*/
/*------------------------------------------------------------------------------*/
/* Ver3.0 ディレイによるヒゲ防止回路の対策を見直す(CPUv1.5と等価に戻す)		*/
/*------------------------------------------------------------------------------*/

//    wire decout_mask, decout_mask_dly;
//    QLK0RCPUEVA0V3_DEC_DLY dec_delay (.out(decout_mask_dly), .in(decout_mask_reg));
//    assign decout_mask = decout_mask_reg ^ (decout_mask_dly & ~scanmode);

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　INC,DEC,INCW,DECW,ADD,ADDC,SUB,SUBC,AND,OR,XORのメモリアクセス演算を	*/
/*　　　２クロック目から１クロック目に変更。					*/
/*　　ビット操作命令、BT,BF,BTCLRを全面削除→dec_alu_bitshへ移動		*/
/*　　ONE命令を全面削除→dec_alu_transoutへ移動					*/
/*　　MULU命令を削除→dec_alu_muluへ移動					*/
/*------------------------------------------------------------------------------*/

    output [3:0] dec_alu_input10;
    reg    [3:0] dec_alu_input10, dec_alu_input10_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_input10_adrstage = 4'h0;
        end else begin
            if(ID_stage0 == 8'h61) begin
                casex ({ID_stage1,stage_adr})  
                    {8'h08,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADD,A,X */
                    {8'h0a,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADD,A,C */
                    {8'h0b,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADD,A,B */
                    {8'h0c,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADD,A,E */
                    {8'h0d,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADD,A,D */
                    {8'h0e,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADD,A,L */
                    {8'h0f,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADD,A,H */
                    {8'h00,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* ADD,X,A */
                    {8'h01,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADD,A,A */
                    {8'h02,2'bxx} : dec_alu_input10_adrstage = 4'h6;  /* ADD,C,A */
                    {8'h03,2'bxx} : dec_alu_input10_adrstage = 4'h5;  /* ADD,B,A */
                    {8'h04,2'bxx} : dec_alu_input10_adrstage = 4'h8;  /* ADD,E,A */
                    {8'h05,2'bxx} : dec_alu_input10_adrstage = 4'h7;  /* ADD,D,A */
                    {8'h06,2'bxx} : dec_alu_input10_adrstage = 4'ha;  /* ADD,L,A */
                    {8'h07,2'bxx} : dec_alu_input10_adrstage = 4'h9;  /* ADD,H,A */
                    {8'h80,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADD,A,[HL+B] */
                    {8'h82,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADD,A,[HL+C] */
                    {8'h18,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,X */
                    {8'h1a,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,C */
                    {8'h1b,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,B */
                    {8'h1c,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,E */
                    {8'h1d,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,D */
                    {8'h1e,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,L */
                    {8'h1f,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,H */
                    {8'h10,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* ADDC,X,A */
                    {8'h11,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,A */
                    {8'h12,2'bxx} : dec_alu_input10_adrstage = 4'h6;  /* ADDC,C,A */
                    {8'h13,2'bxx} : dec_alu_input10_adrstage = 4'h5;  /* ADDC,B,A */
                    {8'h14,2'bxx} : dec_alu_input10_adrstage = 4'h8;  /* ADDC,E,A */
                    {8'h15,2'bxx} : dec_alu_input10_adrstage = 4'h7;  /* ADDC,D,A */
                    {8'h16,2'bxx} : dec_alu_input10_adrstage = 4'ha;  /* ADDC,L,A */
                    {8'h17,2'bxx} : dec_alu_input10_adrstage = 4'h9;  /* ADDC,H,A */
                    {8'h90,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,[HL+B] */
                    {8'h92,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,[HL+C] */
                    {8'h28,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUB,A,X */
                    {8'h2a,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUB,A,C */
                    {8'h2b,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUB,A,B */
                    {8'h2c,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUB,A,E */
                    {8'h2d,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUB,A,D */
                    {8'h2e,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUB,A,L */
                    {8'h2f,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUB,A,H */
                    {8'h20,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* SUB,X,A */
                    {8'h21,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUB,A,A */
                    {8'h22,2'bxx} : dec_alu_input10_adrstage = 4'h6;  /* SUB,C,A */
                    {8'h23,2'bxx} : dec_alu_input10_adrstage = 4'h5;  /* SUB,B,A */
                    {8'h24,2'bxx} : dec_alu_input10_adrstage = 4'h8;  /* SUB,E,A */
                    {8'h25,2'bxx} : dec_alu_input10_adrstage = 4'h7;  /* SUB,D,A */
                    {8'h26,2'bxx} : dec_alu_input10_adrstage = 4'ha;  /* SUB,L,A */
                    {8'h27,2'bxx} : dec_alu_input10_adrstage = 4'h9;  /* SUB,H,A */
                    {8'ha0,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUB,A,[HL+B] */
                    {8'ha2,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUB,A,[HL+C] */
                    {8'h38,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,X */
                    {8'h3a,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,C */
                    {8'h3b,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,B */
                    {8'h3c,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,E */
                    {8'h3d,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,D */
                    {8'h3e,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,L */
                    {8'h3f,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,H */
                    {8'h30,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* SUBC,X,A */
                    {8'h31,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,A */
                    {8'h32,2'bxx} : dec_alu_input10_adrstage = 4'h6;  /* SUBC,C,A */
                    {8'h33,2'bxx} : dec_alu_input10_adrstage = 4'h5;  /* SUBC,B,A */
                    {8'h34,2'bxx} : dec_alu_input10_adrstage = 4'h8;  /* SUBC,E,A */
                    {8'h35,2'bxx} : dec_alu_input10_adrstage = 4'h7;  /* SUBC,D,A */
                    {8'h36,2'bxx} : dec_alu_input10_adrstage = 4'ha;  /* SUBC,L,A */
                    {8'h37,2'bxx} : dec_alu_input10_adrstage = 4'h9;  /* SUBC,H,A */
                    {8'hb0,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,[HL+B] */
                    {8'hb2,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,[HL+C] */
                    {8'h58,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* AND,A,X */
                    {8'h5a,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* AND,A,C */
                    {8'h5b,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* AND,A,B */
                    {8'h5c,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* AND,A,E */
                    {8'h5d,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* AND,A,D */
                    {8'h5e,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* AND,A,L */
                    {8'h5f,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* AND,A,H */
                    {8'h50,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* AND,X,A */
                    {8'h51,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* AND,A,A */
                    {8'h52,2'bxx} : dec_alu_input10_adrstage = 4'h6;  /* AND,C,A */
                    {8'h53,2'bxx} : dec_alu_input10_adrstage = 4'h5;  /* AND,B,A */
                    {8'h54,2'bxx} : dec_alu_input10_adrstage = 4'h8;  /* AND,E,A */
                    {8'h55,2'bxx} : dec_alu_input10_adrstage = 4'h7;  /* AND,D,A */
                    {8'h56,2'bxx} : dec_alu_input10_adrstage = 4'ha;  /* AND,L,A */
                    {8'h57,2'bxx} : dec_alu_input10_adrstage = 4'h9;  /* AND,H,A */
                    {8'hd0,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* AND,A,[HL+B] */
                    {8'hd2,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* AND,A,[HL+C] */
                    {8'h68,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* OR,A,X */
                    {8'h6a,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* OR,A,C */
                    {8'h6b,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* OR,A,B */
                    {8'h6c,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* OR,A,E */
                    {8'h6d,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* OR,A,D */
                    {8'h6e,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* OR,A,L */
                    {8'h6f,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* OR,A,H */
                    {8'h60,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* OR,X,A */
                    {8'h61,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* OR,A,A */
                    {8'h62,2'bxx} : dec_alu_input10_adrstage = 4'h6;  /* OR,C,A */
                    {8'h63,2'bxx} : dec_alu_input10_adrstage = 4'h5;  /* OR,B,A */
                    {8'h64,2'bxx} : dec_alu_input10_adrstage = 4'h8;  /* OR,E,A */
                    {8'h65,2'bxx} : dec_alu_input10_adrstage = 4'h7;  /* OR,D,A */
                    {8'h66,2'bxx} : dec_alu_input10_adrstage = 4'ha;  /* OR,L,A */
                    {8'h67,2'bxx} : dec_alu_input10_adrstage = 4'h9;  /* OR,H,A */
                    {8'he0,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* OR,A,[HL+B] */
                    {8'he2,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* OR,A,[HL+C] */
                    {8'h78,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* XOR,A,X */
                    {8'h7a,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* XOR,A,C */
                    {8'h7b,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* XOR,A,B */
                    {8'h7c,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* XOR,A,E */
                    {8'h7d,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* XOR,A,D */
                    {8'h7e,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* XOR,A,L */
                    {8'h7f,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* XOR,A,H */
                    {8'h70,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* XOR,X,A */
                    {8'h71,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* XOR,A,A */
                    {8'h72,2'bxx} : dec_alu_input10_adrstage = 4'h6;  /* XOR,C,A */
                    {8'h73,2'bxx} : dec_alu_input10_adrstage = 4'h5;  /* XOR,B,A */
                    {8'h74,2'bxx} : dec_alu_input10_adrstage = 4'h8;  /* XOR,E,A */
                    {8'h75,2'bxx} : dec_alu_input10_adrstage = 4'h7;  /* XOR,D,A */
                    {8'h76,2'bxx} : dec_alu_input10_adrstage = 4'ha;  /* XOR,L,A */
                    {8'h77,2'bxx} : dec_alu_input10_adrstage = 4'h9;  /* XOR,H,A */
                    {8'hf0,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* XOR,A,[HL+B] */
                    {8'hf2,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* XOR,A,[HL+C] */
                    {8'h48,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* CMP,A,X */
                    {8'h4a,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* CMP,A,C */
                    {8'h4b,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* CMP,A,B */
                    {8'h4c,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* CMP,A,E */
                    {8'h4d,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* CMP,A,D */
                    {8'h4e,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* CMP,A,L */
                    {8'h4f,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* CMP,A,H */
                    {8'h40,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* CMP,X,A */
                    {8'h41,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* CMP,A,A */
                    {8'h42,2'bxx} : dec_alu_input10_adrstage = 4'h6;  /* CMP,C,A */
                    {8'h43,2'bxx} : dec_alu_input10_adrstage = 4'h5;  /* CMP,B,A */
                    {8'h44,2'bxx} : dec_alu_input10_adrstage = 4'h8;  /* CMP,E,A */
                    {8'h45,2'bxx} : dec_alu_input10_adrstage = 4'h7;  /* CMP,D,A */
                    {8'h46,2'bxx} : dec_alu_input10_adrstage = 4'ha;  /* CMP,L,A */
                    {8'h47,2'bxx} : dec_alu_input10_adrstage = 4'h9;  /* CMP,H,A */
                    {8'hc0,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* CMP,A,[HL+B] */
                    {8'hc2,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* CMP,A,[HL+C] */
                    {8'hde,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* CMPS,X,[HL+byte] */
                    {8'h09,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* ADDW,AX,[HL+byte] */
                    {8'h29,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* SUBW,AX,[HL+byte] */
                    {8'h49,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* CMPW,AX,[HL+byte] */
                    {8'h59,2'bx0} : dec_alu_input10_adrstage = 4'hb;  /* INC,,[HL+byte] */
                    {8'h69,2'bx0} : dec_alu_input10_adrstage = 4'hb;  /* DEC,,[HL+byte] */
                    {8'h79,2'bx0} : dec_alu_input10_adrstage = 4'hb;  /* INCW,,[HL+byte] */
                    {8'h89,2'bx0} : dec_alu_input10_adrstage = 4'hb;  /* DECW,,[HL+byte] */
                    {8'h19,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,A */
                    {8'h39,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,A */
                    {8'hd1,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* AND,A,[HL+B] */
                    {8'he1,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* OR,A,[HL+B] */
                    {8'hf1,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* XOR,A,[HL+B] */
                    {8'h83,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADD,A,[HL+C] */
                    {8'h93,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,[HL+C] */
                    {8'ha3,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUB,A,[HL+C] */
                    {8'hb3,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,[HL+C] */
                    default : dec_alu_input10_adrstage = 4'h0;
                endcase
            end else if(ID_stage0 == 8'h71) begin
                    dec_alu_input10_adrstage = 4'h0;
            end else if(ID_stage0 == 8'h31) begin
                    dec_alu_input10_adrstage = 4'h0;
            end else begin
                casex ({ID_stage0,stage_adr})  
                    {8'h0c,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADD,A,#byte */
                    {8'h0a,2'bx0} : dec_alu_input10_adrstage = 4'he;  /* ADD,saddr,#byte */
                    {8'h0b,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADD,A,saddr */
                    {8'h0f,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADD,A,!addr16 */
                    {8'h0d,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADD,A,[HL] */
                    {8'h0e,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADD,A,[HL+byte] */
                    {8'h1c,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,#byte */
                    {8'h1a,2'bx0} : dec_alu_input10_adrstage = 4'he;  /* ADDC,saddr,#byte */
                    {8'h1b,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,saddr */
                    {8'h1f,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,!addr16 */
                    {8'h1d,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,[HL] */
                    {8'h1e,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* ADDC,A,[HL+byte] */
                    {8'h2c,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUB,A,#byte */
                    {8'h2a,2'bx0} : dec_alu_input10_adrstage = 4'he;  /* SUB,saddr,#byte */
                    {8'h2b,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUB,A,saddr */
                    {8'h2f,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUB,A,!addr16 */
                    {8'h2d,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUB,A,[HL] */
                    {8'h2e,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUB,A,[HL+byte] */
                    {8'h3c,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,#byte */
                    {8'h3a,2'bx0} : dec_alu_input10_adrstage = 4'he;  /* SUBC,saddr,#byte */
                    {8'h3b,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,saddr */
                    {8'h3f,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,!addr16 */
                    {8'h3d,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,[HL] */
                    {8'h3e,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* SUBC,A,[HL+byte] */
                    {8'h5c,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* AND,A,#byte */
                    {8'h5a,2'bx0} : dec_alu_input10_adrstage = 4'he;  /* AND,saddr,#byte */
                    {8'h5b,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* AND,A,saddr */
                    {8'h5f,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* AND,A,!addr16 */
                    {8'h5d,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* AND,A,[HL] */
                    {8'h5e,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* AND,A,[HL+byte] */
                    {8'h6c,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* OR,A,#byte */
                    {8'h6a,2'bx0} : dec_alu_input10_adrstage = 4'he;  /* OR,saddr,#byte */
                    {8'h6b,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* OR,A,saddr */
                    {8'h6f,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* OR,A,!addr16 */
                    {8'h6d,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* OR,A,[HL] */
                    {8'h6e,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* OR,A,[HL+byte] */
                    {8'h7c,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* XOR,A,#byte */
                    {8'h7a,2'bx0} : dec_alu_input10_adrstage = 4'he;  /* XOR,saddr,#byte */
                    {8'h7b,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* XOR,A,saddr */
                    {8'h7f,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* XOR,A,!addr16 */
                    {8'h7d,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* XOR,A,[HL] */
                    {8'h7e,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* XOR,A,[HL+byte] */
                    {8'h4c,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* CMP,A,#byte */
                    {8'h4a,2'bxx} : dec_alu_input10_adrstage = 4'he;  /* CMP,saddr,#byte */
                    {8'h40,2'bxx} : dec_alu_input10_adrstage = 4'he;  /* CMP,!addr16,#byte */
                    {8'h4b,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* CMP,A,saddr */
                    {8'h4f,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* CMP,A,!addr16 */
                    {8'h4d,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* CMP,A,[HL] */
                    {8'h4e,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* CMP,A,[HL+byte] */
                    {8'hd1,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* CMP0,,A */
                    {8'hd0,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* CMP0,,X */
                    {8'hd3,2'bxx} : dec_alu_input10_adrstage = 4'h5;  /* CMP0,,B */
                    {8'hd2,2'bxx} : dec_alu_input10_adrstage = 4'h6;  /* CMP0,,C */
                    {8'hd4,2'bxx} : dec_alu_input10_adrstage = 4'he;  /* CMP0,,saddr */
                    {8'hd5,2'bxx} : dec_alu_input10_adrstage = 4'he;  /* CMP0,,!addr16 */
                    {8'h04,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* ADDW,AX,#word */
                    {8'h01,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* ADDW,AX,AX */
                    {8'h03,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* ADDW,AX,BC */
                    {8'h05,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* ADDW,AX,DE */
                    {8'h07,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* ADDW,AX,HL */
                    {8'h06,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* ADDW,AX,saddrp */
                    {8'h02,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* ADDW,AX,!addr16 */
                    {8'h24,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* SUBW,AX,#word */
                    {8'h21,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* SUBW,AX,AX */
                    {8'h23,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* SUBW,AX,BC */
                    {8'h25,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* SUBW,AX,DE */
                    {8'h27,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* SUBW,AX,HL */
                    {8'h26,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* SUBW,AX,saddrp */
                    {8'h22,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* SUBW,AX,!addr16 */
                    {8'h44,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* CMPW,AX,#word */
                    {8'h43,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* CMPW,AX,BC */
                    {8'h45,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* CMPW,AX,DE */
                    {8'h47,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* CMPW,AX,HL */
                    {8'h46,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* CMPW,AX,saddrp */
                    {8'h42,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* CMPW,AX,!addr16 */
                    {8'h80,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* INC,,X */
                    {8'h81,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* INC,,A */
                    {8'h82,2'bxx} : dec_alu_input10_adrstage = 4'h6;  /* INC,,C */
                    {8'h83,2'bxx} : dec_alu_input10_adrstage = 4'h5;  /* INC,,B */
                    {8'h84,2'bxx} : dec_alu_input10_adrstage = 4'h8;  /* INC,,E */
                    {8'h85,2'bxx} : dec_alu_input10_adrstage = 4'h7;  /* INC,,D */
                    {8'h86,2'bxx} : dec_alu_input10_adrstage = 4'ha;  /* INC,,L */
                    {8'h87,2'bxx} : dec_alu_input10_adrstage = 4'h9;  /* INC,,H */
                    {8'ha4,2'bx0} : dec_alu_input10_adrstage = 4'he;  /* INC,,saddr */
                    {8'ha0,2'bx0} : dec_alu_input10_adrstage = 4'he;  /* INC,,!addr16 */
                    {8'h90,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* DEC,,X */
                    {8'h91,2'bxx} : dec_alu_input10_adrstage = 4'h3;  /* DEC,,A */
                    {8'h92,2'bxx} : dec_alu_input10_adrstage = 4'h6;  /* DEC,,C */
                    {8'h93,2'bxx} : dec_alu_input10_adrstage = 4'h5;  /* DEC,,B */
                    {8'h94,2'bxx} : dec_alu_input10_adrstage = 4'h8;  /* DEC,,E */
                    {8'h95,2'bxx} : dec_alu_input10_adrstage = 4'h7;  /* DEC,,D */
                    {8'h96,2'bxx} : dec_alu_input10_adrstage = 4'ha;  /* DEC,,L */
                    {8'h97,2'bxx} : dec_alu_input10_adrstage = 4'h9;  /* DEC,,H */
                    {8'hb4,2'bx0} : dec_alu_input10_adrstage = 4'he;  /* DEC,,saddr */
                    {8'hb0,2'bx0} : dec_alu_input10_adrstage = 4'he;  /* DEC,,!addr16 */
                    {8'ha1,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* INCW,,AX */
                    {8'ha3,2'bxx} : dec_alu_input10_adrstage = 4'h6;  /* INCW,,BC */
                    {8'ha5,2'bxx} : dec_alu_input10_adrstage = 4'h8;  /* INCW,,DE */
                    {8'ha7,2'bxx} : dec_alu_input10_adrstage = 4'ha;  /* INCW,,HL */
                    {8'ha6,2'bx0} : dec_alu_input10_adrstage = 4'hb;  /* INCW,,saddrp */
                    {8'ha2,2'bx0} : dec_alu_input10_adrstage = 4'hb;  /* INCW,,!addr16 */
                    {8'hb1,2'bxx} : dec_alu_input10_adrstage = 4'h4;  /* DECW,,AX */
                    {8'hb3,2'bxx} : dec_alu_input10_adrstage = 4'h6;  /* DECW,,BC */
                    {8'hb5,2'bxx} : dec_alu_input10_adrstage = 4'h8;  /* DECW,,DE */
                    {8'hb7,2'bxx} : dec_alu_input10_adrstage = 4'ha;  /* DECW,,HL */
                    {8'hb6,2'bx0} : dec_alu_input10_adrstage = 4'he;  /* DECW,,saddrp */
                    {8'hb2,2'bx0} : dec_alu_input10_adrstage = 4'he;  /* DECW,,!addr16 */
                    {8'h10,2'bxx} : dec_alu_input10_adrstage = 4'hd;  /* ADDW,SP,#byte */
                    {8'h20,2'bxx} : dec_alu_input10_adrstage = 4'hd;  /* SUBW,SP,#byte */
                    default : dec_alu_input10_adrstage = 4'h0;
                endcase
            end
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_input10 <= 4'h0;
        else if(cpuen) dec_alu_input10 <= dec_alu_input10_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　MOV,MOVS,MOVW,XCH,XCHW命令を全面削除→dec_alu_transin,			*/
/*							dec_alu_trans_outへ移動	*/
/*    ROR,ROL,RORC,ROLC,ROLWCを全面削除→dec_alu_bitshへ移動			*/
/*　　CALL,CALLT,BRK,SOFT,PUSHを全面削除→dec_alu_transoutへ移動		*/
/*　　ビット操作命令、BT,BF,BTCLRを全面削除→dec_alu_bitshへ移動		*/
/*　　SHR,SHRW,SHL,SHLW,SAR,SARWを全面削除→dec_alu_bitshへ移動			*/
/*　　MULU命令を削除→dec_alu_muluへ移動					*/
/*　　条件が減ったため、5bit→4bitに変更					*/
/*------------------------------------------------------------------------------*/

    output [3:0] dec_alu_input20;
    reg    [3:0] dec_alu_input20, dec_alu_input20_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_input20_adrstage = 4'h0;
        end else begin
            if(ID_stage0 == 8'h61) begin
                casex ({ID_stage1,stage_adr})  
                    {8'h08,2'bxx} : dec_alu_input20_adrstage = 4'h3;  /* ADD,A,X */
                    {8'h0a,2'bxx} : dec_alu_input20_adrstage = 4'h5;  /* ADD,A,C */
                    {8'h0b,2'bxx} : dec_alu_input20_adrstage = 4'h4;  /* ADD,A,B */
                    {8'h0c,2'bxx} : dec_alu_input20_adrstage = 4'h7;  /* ADD,A,E */
                    {8'h0d,2'bxx} : dec_alu_input20_adrstage = 4'h6;  /* ADD,A,D */
                    {8'h0e,2'bxx} : dec_alu_input20_adrstage = 4'h9;  /* ADD,A,L */
                    {8'h0f,2'bxx} : dec_alu_input20_adrstage = 4'h8;  /* ADD,A,H */
                    {8'h00,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADD,X,A */
                    {8'h01,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADD,A,A */
                    {8'h02,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADD,C,A */
                    {8'h03,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADD,B,A */
                    {8'h04,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADD,E,A */
                    {8'h05,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADD,D,A */
                    {8'h06,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADD,L,A */
                    {8'h07,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADD,H,A */
                    {8'h80,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADD,A,[HL+B] */
                    {8'h82,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADD,A,[HL+C] */
                    {8'h18,2'bxx} : dec_alu_input20_adrstage = 4'h3;  /* ADDC,A,X */
                    {8'h1a,2'bxx} : dec_alu_input20_adrstage = 4'h5;  /* ADDC,A,C */
                    {8'h1b,2'bxx} : dec_alu_input20_adrstage = 4'h4;  /* ADDC,A,B */
                    {8'h1c,2'bxx} : dec_alu_input20_adrstage = 4'h7;  /* ADDC,A,E */
                    {8'h1d,2'bxx} : dec_alu_input20_adrstage = 4'h6;  /* ADDC,A,D */
                    {8'h1e,2'bxx} : dec_alu_input20_adrstage = 4'h9;  /* ADDC,A,L */
                    {8'h1f,2'bxx} : dec_alu_input20_adrstage = 4'h8;  /* ADDC,A,H */
                    {8'h10,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADDC,X,A */
                    {8'h11,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADDC,A,A */
                    {8'h12,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADDC,C,A */
                    {8'h13,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADDC,B,A */
                    {8'h14,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADDC,E,A */
                    {8'h15,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADDC,D,A */
                    {8'h16,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADDC,L,A */
                    {8'h17,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADDC,H,A */
                    {8'h90,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADDC,A,[HL+B] */
                    {8'h92,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADDC,A,[HL+C] */
                    {8'h28,2'bxx} : dec_alu_input20_adrstage = 4'h3;  /* SUB,A,X */
                    {8'h2a,2'bxx} : dec_alu_input20_adrstage = 4'h5;  /* SUB,A,C */
                    {8'h2b,2'bxx} : dec_alu_input20_adrstage = 4'h4;  /* SUB,A,B */
                    {8'h2c,2'bxx} : dec_alu_input20_adrstage = 4'h7;  /* SUB,A,E */
                    {8'h2d,2'bxx} : dec_alu_input20_adrstage = 4'h6;  /* SUB,A,D */
                    {8'h2e,2'bxx} : dec_alu_input20_adrstage = 4'h9;  /* SUB,A,L */
                    {8'h2f,2'bxx} : dec_alu_input20_adrstage = 4'h8;  /* SUB,A,H */
                    {8'h20,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUB,X,A */
                    {8'h21,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUB,A,A */
                    {8'h22,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUB,C,A */
                    {8'h23,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUB,B,A */
                    {8'h24,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUB,E,A */
                    {8'h25,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUB,D,A */
                    {8'h26,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUB,L,A */
                    {8'h27,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUB,H,A */
                    {8'ha0,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUB,A,[HL+B] */
                    {8'ha2,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUB,A,[HL+C] */
                    {8'h38,2'bxx} : dec_alu_input20_adrstage = 4'h3;  /* SUBC,A,X */
                    {8'h3a,2'bxx} : dec_alu_input20_adrstage = 4'h5;  /* SUBC,A,C */
                    {8'h3b,2'bxx} : dec_alu_input20_adrstage = 4'h4;  /* SUBC,A,B */
                    {8'h3c,2'bxx} : dec_alu_input20_adrstage = 4'h7;  /* SUBC,A,E */
                    {8'h3d,2'bxx} : dec_alu_input20_adrstage = 4'h6;  /* SUBC,A,D */
                    {8'h3e,2'bxx} : dec_alu_input20_adrstage = 4'h9;  /* SUBC,A,L */
                    {8'h3f,2'bxx} : dec_alu_input20_adrstage = 4'h8;  /* SUBC,A,H */
                    {8'h30,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUBC,X,A */
                    {8'h31,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUBC,A,A */
                    {8'h32,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUBC,C,A */
                    {8'h33,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUBC,B,A */
                    {8'h34,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUBC,E,A */
                    {8'h35,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUBC,D,A */
                    {8'h36,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUBC,L,A */
                    {8'h37,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUBC,H,A */
                    {8'hb0,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUBC,A,[HL+B] */
                    {8'hb2,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUBC,A,[HL+C] */
                    {8'h58,2'bxx} : dec_alu_input20_adrstage = 4'h3;  /* AND,A,X */
                    {8'h5a,2'bxx} : dec_alu_input20_adrstage = 4'h5;  /* AND,A,C */
                    {8'h5b,2'bxx} : dec_alu_input20_adrstage = 4'h4;  /* AND,A,B */
                    {8'h5c,2'bxx} : dec_alu_input20_adrstage = 4'h7;  /* AND,A,E */
                    {8'h5d,2'bxx} : dec_alu_input20_adrstage = 4'h6;  /* AND,A,D */
                    {8'h5e,2'bxx} : dec_alu_input20_adrstage = 4'h9;  /* AND,A,L */
                    {8'h5f,2'bxx} : dec_alu_input20_adrstage = 4'h8;  /* AND,A,H */
                    {8'h50,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* AND,X,A */
                    {8'h51,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* AND,A,A */
                    {8'h52,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* AND,C,A */
                    {8'h53,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* AND,B,A */
                    {8'h54,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* AND,E,A */
                    {8'h55,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* AND,D,A */
                    {8'h56,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* AND,L,A */
                    {8'h57,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* AND,H,A */
                    {8'hd0,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* AND,A,[HL+B] */
                    {8'hd2,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* AND,A,[HL+C] */
                    {8'h68,2'bxx} : dec_alu_input20_adrstage = 4'h3;  /* OR,A,X */
                    {8'h6a,2'bxx} : dec_alu_input20_adrstage = 4'h5;  /* OR,A,C */
                    {8'h6b,2'bxx} : dec_alu_input20_adrstage = 4'h4;  /* OR,A,B */
                    {8'h6c,2'bxx} : dec_alu_input20_adrstage = 4'h7;  /* OR,A,E */
                    {8'h6d,2'bxx} : dec_alu_input20_adrstage = 4'h6;  /* OR,A,D */
                    {8'h6e,2'bxx} : dec_alu_input20_adrstage = 4'h9;  /* OR,A,L */
                    {8'h6f,2'bxx} : dec_alu_input20_adrstage = 4'h8;  /* OR,A,H */
                    {8'h60,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* OR,X,A */
                    {8'h61,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* OR,A,A */
                    {8'h62,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* OR,C,A */
                    {8'h63,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* OR,B,A */
                    {8'h64,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* OR,E,A */
                    {8'h65,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* OR,D,A */
                    {8'h66,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* OR,L,A */
                    {8'h67,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* OR,H,A */
                    {8'he0,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* OR,A,[HL+B] */
                    {8'he2,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* OR,A,[HL+C] */
                    {8'h78,2'bxx} : dec_alu_input20_adrstage = 4'h3;  /* XOR,A,X */
                    {8'h7a,2'bxx} : dec_alu_input20_adrstage = 4'h5;  /* XOR,A,C */
                    {8'h7b,2'bxx} : dec_alu_input20_adrstage = 4'h4;  /* XOR,A,B */
                    {8'h7c,2'bxx} : dec_alu_input20_adrstage = 4'h7;  /* XOR,A,E */
                    {8'h7d,2'bxx} : dec_alu_input20_adrstage = 4'h6;  /* XOR,A,D */
                    {8'h7e,2'bxx} : dec_alu_input20_adrstage = 4'h9;  /* XOR,A,L */
                    {8'h7f,2'bxx} : dec_alu_input20_adrstage = 4'h8;  /* XOR,A,H */
                    {8'h70,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* XOR,X,A */
                    {8'h71,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* XOR,A,A */
                    {8'h72,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* XOR,C,A */
                    {8'h73,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* XOR,B,A */
                    {8'h74,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* XOR,E,A */
                    {8'h75,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* XOR,D,A */
                    {8'h76,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* XOR,L,A */
                    {8'h77,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* XOR,H,A */
                    {8'hf0,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* XOR,A,[HL+B] */
                    {8'hf2,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* XOR,A,[HL+C] */
                    {8'h48,2'bxx} : dec_alu_input20_adrstage = 4'h3;  /* CMP,A,X */
                    {8'h4a,2'bxx} : dec_alu_input20_adrstage = 4'h5;  /* CMP,A,C */
                    {8'h4b,2'bxx} : dec_alu_input20_adrstage = 4'h4;  /* CMP,A,B */
                    {8'h4c,2'bxx} : dec_alu_input20_adrstage = 4'h7;  /* CMP,A,E */
                    {8'h4d,2'bxx} : dec_alu_input20_adrstage = 4'h6;  /* CMP,A,D */
                    {8'h4e,2'bxx} : dec_alu_input20_adrstage = 4'h9;  /* CMP,A,L */
                    {8'h4f,2'bxx} : dec_alu_input20_adrstage = 4'h8;  /* CMP,A,H */
                    {8'h40,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* CMP,X,A */
                    {8'h41,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* CMP,A,A */
                    {8'h42,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* CMP,C,A */
                    {8'h43,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* CMP,B,A */
                    {8'h44,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* CMP,E,A */
                    {8'h45,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* CMP,D,A */
                    {8'h46,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* CMP,L,A */
                    {8'h47,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* CMP,H,A */
                    {8'hc0,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* CMP,A,[HL+B] */
                    {8'hc2,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* CMP,A,[HL+C] */
                    {8'hde,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* CMPS,X,[HL+byte] */
                    {8'h09,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADDW,AX,[HL+byte] */
                    {8'h29,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUBW,AX,[HL+byte] */
                    {8'h49,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* CMPW,AX,[HL+byte] */
                    {8'h59,2'bx0} : dec_alu_input20_adrstage = 4'h1;  /* INC,,[HL+byte] */
                    {8'h69,2'bx0} : dec_alu_input20_adrstage = 4'h1;  /* DEC,,[HL+byte] */
                    {8'h79,2'bx0} : dec_alu_input20_adrstage = 4'h1;  /* INCW,,[HL+byte] */
                    {8'h89,2'bx0} : dec_alu_input20_adrstage = 4'h1;  /* DECW,,[HL+byte] */
                    {8'hec,2'b00} : dec_alu_input20_adrstage = 4'hc;  /* RETB,, */
                    {8'hec,2'b01} : dec_alu_input20_adrstage = 4'hc;  /* RETB,, */
                    {8'hfc,2'b00} : dec_alu_input20_adrstage = 4'hc;  /* RETI,, */
                    {8'hfc,2'b01} : dec_alu_input20_adrstage = 4'hc;  /* RETI,, */
                    {8'hcd,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* POP,,PSW */
                    {8'hcf,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* SEL,,RB0 */
                    {8'hdf,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* SEL,,RB1 */
                    {8'hef,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* SEL,,RB2 */
                    {8'hff,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* SEL,,RB3 */
                    {8'h19,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* ADDC,A,A */
                    {8'h39,2'bxx} : dec_alu_input20_adrstage = 4'h2;  /* SUBC,A,A */
                    {8'hd1,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* AND,A,[HL+B] */
                    {8'he1,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* OR,A,[HL+B] */
                    {8'hf1,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* XOR,A,[HL+B] */
                    {8'h83,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADD,A,[HL+C] */
                    {8'h93,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADDC,A,[HL+C] */
                    {8'ha3,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUB,A,[HL+C] */
                    {8'hb3,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUBC,A,[HL+C] */
                    default : dec_alu_input20_adrstage = 4'h0;
                endcase
            end else if(ID_stage0 == 8'h71) begin
                    dec_alu_input20_adrstage = 4'h0;
            end else if(ID_stage0 == 8'h31) begin
                    dec_alu_input20_adrstage = 4'h0;
            end else begin
                casex ({ID_stage0,stage_adr})  
                    {8'h0c,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* ADD,A,#byte */
                    {8'h0a,2'bx0} : dec_alu_input20_adrstage = 4'ha;  /* ADD,saddr,#byte */
                    {8'h0b,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADD,A,saddr */
                    {8'h0f,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADD,A,!addr16 */
                    {8'h0d,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADD,A,[HL] */
                    {8'h0e,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADD,A,[HL+byte] */
                    {8'h1c,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* ADDC,A,#byte */
                    {8'h1a,2'bx0} : dec_alu_input20_adrstage = 4'ha;  /* ADDC,saddr,#byte */
                    {8'h1b,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADDC,A,saddr */
                    {8'h1f,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADDC,A,!addr16 */
                    {8'h1d,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADDC,A,[HL] */
                    {8'h1e,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADDC,A,[HL+byte] */
                    {8'h2c,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* SUB,A,#byte */
                    {8'h2a,2'bx0} : dec_alu_input20_adrstage = 4'ha;  /* SUB,saddr,#byte */
                    {8'h2b,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUB,A,saddr */
                    {8'h2f,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUB,A,!addr16 */
                    {8'h2d,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUB,A,[HL] */
                    {8'h2e,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUB,A,[HL+byte] */
                    {8'h3c,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* SUBC,A,#byte */
                    {8'h3a,2'bx0} : dec_alu_input20_adrstage = 4'ha;  /* SUBC,saddr,#byte */
                    {8'h3b,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUBC,A,saddr */
                    {8'h3f,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUBC,A,!addr16 */
                    {8'h3d,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUBC,A,[HL] */
                    {8'h3e,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUBC,A,[HL+byte] */
                    {8'h5c,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* AND,A,#byte */
                    {8'h5a,2'bx0} : dec_alu_input20_adrstage = 4'ha;  /* AND,saddr,#byte */
                    {8'h5b,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* AND,A,saddr */
                    {8'h5f,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* AND,A,!addr16 */
                    {8'h5d,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* AND,A,[HL] */
                    {8'h5e,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* AND,A,[HL+byte] */
                    {8'h6c,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* OR,A,#byte */
                    {8'h6a,2'bx0} : dec_alu_input20_adrstage = 4'ha;  /* OR,saddr,#byte */
                    {8'h6b,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* OR,A,saddr */
                    {8'h6f,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* OR,A,!addr16 */
                    {8'h6d,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* OR,A,[HL] */
                    {8'h6e,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* OR,A,[HL+byte] */
                    {8'h7c,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* XOR,A,#byte */
                    {8'h7a,2'bx0} : dec_alu_input20_adrstage = 4'ha;  /* XOR,saddr,#byte */
                    {8'h7b,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* XOR,A,saddr */
                    {8'h7f,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* XOR,A,!addr16 */
                    {8'h7d,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* XOR,A,[HL] */
                    {8'h7e,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* XOR,A,[HL+byte] */
                    {8'h4c,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* CMP,A,#byte */
                    {8'h4a,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* CMP,saddr,#byte */
                    {8'h40,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* CMP,!addr16,#byte */
                    {8'h4b,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* CMP,A,saddr */
                    {8'h4f,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* CMP,A,!addr16 */
                    {8'h4d,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* CMP,A,[HL] */
                    {8'h4e,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* CMP,A,[HL+byte] */
                    {8'h04,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* ADDW,AX,#word */
                    {8'h01,2'bxx} : dec_alu_input20_adrstage = 4'h3;  /* ADDW,AX,AX */
                    {8'h03,2'bxx} : dec_alu_input20_adrstage = 4'h5;  /* ADDW,AX,BC */
                    {8'h05,2'bxx} : dec_alu_input20_adrstage = 4'h7;  /* ADDW,AX,DE */
                    {8'h07,2'bxx} : dec_alu_input20_adrstage = 4'h9;  /* ADDW,AX,HL */
                    {8'h06,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADDW,AX,saddrp */
                    {8'h02,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* ADDW,AX,!addr16 */
                    {8'h24,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* SUBW,AX,#word */
                    {8'h21,2'bxx} : dec_alu_input20_adrstage = 4'h3;  /* SUBW,AX,AX */
                    {8'h23,2'bxx} : dec_alu_input20_adrstage = 4'h5;  /* SUBW,AX,BC */
                    {8'h25,2'bxx} : dec_alu_input20_adrstage = 4'h7;  /* SUBW,AX,DE */
                    {8'h27,2'bxx} : dec_alu_input20_adrstage = 4'h9;  /* SUBW,AX,HL */
                    {8'h26,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUBW,AX,saddrp */
                    {8'h22,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* SUBW,AX,!addr16 */
                    {8'h44,2'bxx} : dec_alu_input20_adrstage = 4'ha;  /* CMPW,AX,#word */
                    {8'h43,2'bxx} : dec_alu_input20_adrstage = 4'h5;  /* CMPW,AX,BC */
                    {8'h45,2'bxx} : dec_alu_input20_adrstage = 4'h7;  /* CMPW,AX,DE */
                    {8'h47,2'bxx} : dec_alu_input20_adrstage = 4'h9;  /* CMPW,AX,HL */
                    {8'h46,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* CMPW,AX,saddrp */
                    {8'h42,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* CMPW,AX,!addr16 */
                    {8'h80,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* INC,,X */
                    {8'h81,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* INC,,A */
                    {8'h82,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* INC,,C */
                    {8'h83,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* INC,,B */
                    {8'h84,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* INC,,E */
                    {8'h85,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* INC,,D */
                    {8'h86,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* INC,,L */
                    {8'h87,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* INC,,H */
                    {8'ha4,2'bx0} : dec_alu_input20_adrstage = 4'h1;  /* INC,,saddr */
                    {8'ha0,2'bx0} : dec_alu_input20_adrstage = 4'h1;  /* INC,,!addr16 */
                    {8'h90,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* DEC,,X */
                    {8'h91,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* DEC,,A */
                    {8'h92,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* DEC,,C */
                    {8'h93,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* DEC,,B */
                    {8'h94,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* DEC,,E */
                    {8'h95,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* DEC,,D */
                    {8'h96,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* DEC,,L */
                    {8'h97,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* DEC,,H */
                    {8'hb4,2'bx0} : dec_alu_input20_adrstage = 4'h1;  /* DEC,,saddr */
                    {8'hb0,2'bx0} : dec_alu_input20_adrstage = 4'h1;  /* DEC,,!addr16 */
                    {8'ha1,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* INCW,,AX */
                    {8'ha3,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* INCW,,BC */
                    {8'ha5,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* INCW,,DE */
                    {8'ha7,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* INCW,,HL */
                    {8'ha6,2'bx0} : dec_alu_input20_adrstage = 4'h1;  /* INCW,,saddrp */
                    {8'ha2,2'bx0} : dec_alu_input20_adrstage = 4'h1;  /* INCW,,!addr16 */
                    {8'hb1,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* DECW,,AX */
                    {8'hb3,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* DECW,,BC */
                    {8'hb5,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* DECW,,DE */
                    {8'hb7,2'bxx} : dec_alu_input20_adrstage = 4'h1;  /* DECW,,HL */
                    {8'hb6,2'bx0} : dec_alu_input20_adrstage = 4'h1;  /* DECW,,saddrp */
                    {8'hb2,2'bx0} : dec_alu_input20_adrstage = 4'h1;  /* DECW,,!addr16 */
                    {8'hd7,2'b00} : dec_alu_input20_adrstage = 4'hc;  /* RET,, */
                    {8'hd7,2'b01} : dec_alu_input20_adrstage = 4'hc;  /* RET,, */
                    {8'hc0,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* POP,,AX */
                    {8'hc2,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* POP,,BC */
                    {8'hc4,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* POP,,DE */
                    {8'hc6,2'bxx} : dec_alu_input20_adrstage = 4'hc;  /* POP,,HL */
                    {8'h10,2'bxx} : dec_alu_input20_adrstage = 4'hb;  /* ADDW,SP,#byte */
                    {8'h20,2'bxx} : dec_alu_input20_adrstage = 4'hb;  /* SUBW,SP,#byte */
                    default : dec_alu_input20_adrstage = 4'h0;
                endcase
            end
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_input20 <= 4'h0;
        else if(cpuen) dec_alu_input20 <= dec_alu_input20_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　INC,INCW,ADD,ADDCのメモリアクセス演算を２クロック目から１クロック目に変更	*/
/*------------------------------------------------------------------------------*/

    output dec_alu_add;
    reg    dec_alu_add, dec_alu_add_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_add_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h0c,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,A,#byte */
                {8'h0a,8'hxx,2'bx0} : dec_alu_add_adrstage = 1'b1;  /* ADD,saddr,#byte */
                {8'h61,8'h08,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,A,X */
                {8'h61,8'h0a,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,A,C */
                {8'h61,8'h0b,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,A,B */
                {8'h61,8'h0c,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,A,E */
                {8'h61,8'h0d,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,A,D */
                {8'h61,8'h0e,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,A,L */
                {8'h61,8'h0f,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,A,H */
                {8'h61,8'h00,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,X,A */
                {8'h61,8'h01,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,A,A */
                {8'h61,8'h02,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,C,A */
                {8'h61,8'h03,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,B,A */
                {8'h61,8'h04,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,E,A */
                {8'h61,8'h05,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,D,A */
                {8'h61,8'h06,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,L,A */
                {8'h61,8'h07,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,H,A */
                {8'h0b,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,A,saddr */
                {8'h0f,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,A,!addr16 */
                {8'h0d,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,A,[HL] */
                {8'h0e,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,A,[HL+byte] */
                {8'h61,8'h80,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,A,[HL+B] */
                {8'h61,8'h82,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,A,[HL+C] */
                {8'h1c,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,#byte */
                {8'h1a,8'hxx,2'bx0} : dec_alu_add_adrstage = 1'b1;  /* ADDC,saddr,#byte */
                {8'h61,8'h18,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,X */
                {8'h61,8'h1a,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,C */
                {8'h61,8'h1b,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,B */
                {8'h61,8'h1c,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,E */
                {8'h61,8'h1d,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,D */
                {8'h61,8'h1e,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,L */
                {8'h61,8'h1f,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,H */
                {8'h61,8'h10,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,X,A */
                {8'h61,8'h11,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,A */
                {8'h61,8'h12,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,C,A */
                {8'h61,8'h13,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,B,A */
                {8'h61,8'h14,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,E,A */
                {8'h61,8'h15,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,D,A */
                {8'h61,8'h16,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,L,A */
                {8'h61,8'h17,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,H,A */
                {8'h1b,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,saddr */
                {8'h1f,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,!addr16 */
                {8'h1d,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,[HL] */
                {8'h1e,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,[HL+byte] */
                {8'h61,8'h90,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,[HL+B] */
                {8'h61,8'h92,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h04,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDW,AX,#word */
                {8'h01,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDW,AX,AX */
                {8'h03,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDW,AX,BC */
                {8'h05,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDW,AX,DE */
                {8'h07,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDW,AX,HL */
                {8'h06,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDW,AX,saddrp */
                {8'h02,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDW,AX,!addr16 */
                {8'h61,8'h09,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDW,AX,[HL+byte] */
                {8'h80,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* INC,,X */
                {8'h81,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* INC,,A */
                {8'h82,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* INC,,C */
                {8'h83,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* INC,,B */
                {8'h84,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* INC,,E */
                {8'h85,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* INC,,D */
                {8'h86,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* INC,,L */
                {8'h87,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* INC,,H */
                {8'ha4,8'hxx,2'bx0} : dec_alu_add_adrstage = 1'b1;  /* INC,,saddr */
                {8'ha0,8'hxx,2'bx0} : dec_alu_add_adrstage = 1'b1;  /* INC,,!addr16 */
                {8'h61,8'h59,2'bx0} : dec_alu_add_adrstage = 1'b1;  /* INC,,[HL+byte] */
                {8'ha1,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* INCW,,AX */
                {8'ha3,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* INCW,,BC */
                {8'ha5,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* INCW,,DE */
                {8'ha7,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* INCW,,HL */
                {8'ha6,8'hxx,2'bx0} : dec_alu_add_adrstage = 1'b1;  /* INCW,,saddrp */
                {8'ha2,8'hxx,2'bx0} : dec_alu_add_adrstage = 1'b1;  /* INCW,,!addr16 */
                {8'h61,8'h79,2'bx0} : dec_alu_add_adrstage = 1'b1;  /* INCW,,[HL+byte] */
                {8'h10,8'hxx,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDW,SP,#byte */
                {8'h61,8'h19,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,A */
                {8'h61,8'h83,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADD,A,[HL+C] */
                {8'h61,8'h93,2'bxx} : dec_alu_add_adrstage = 1'b1;  /* ADDC,A,[HL+C] */
                default : dec_alu_add_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_add <= 1'b0;
        else if(cpuen) dec_alu_add <= dec_alu_add_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　DEC,DECW,SUB,SUBCのメモリアクセス演算を２クロック目から１クロック目に変更	*/
/*------------------------------------------------------------------------------*/

    output dec_alu_sub;
    reg    dec_alu_sub, dec_alu_sub_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_sub_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h2c,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,A,#byte */
                {8'h2a,8'hxx,2'bx0} : dec_alu_sub_adrstage = 1'b1;  /* SUB,saddr,#byte */
                {8'h61,8'h28,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,A,X */
                {8'h61,8'h2a,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,A,C */
                {8'h61,8'h2b,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,A,B */
                {8'h61,8'h2c,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,A,E */
                {8'h61,8'h2d,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,A,D */
                {8'h61,8'h2e,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,A,L */
                {8'h61,8'h2f,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,A,H */
                {8'h61,8'h20,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,X,A */
                {8'h61,8'h21,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,A,A */
                {8'h61,8'h22,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,C,A */
                {8'h61,8'h23,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,B,A */
                {8'h61,8'h24,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,E,A */
                {8'h61,8'h25,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,D,A */
                {8'h61,8'h26,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,L,A */
                {8'h61,8'h27,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,H,A */
                {8'h2b,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,A,saddr */
                {8'h2f,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,A,!addr16 */
                {8'h2d,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,A,[HL] */
                {8'h2e,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,A,[HL+byte] */
                {8'h61,8'ha0,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,A,[HL+B] */
                {8'h61,8'ha2,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,A,[HL+C] */
                {8'h3c,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,#byte */
                {8'h3a,8'hxx,2'bx0} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,saddr,#byte */
                {8'h61,8'h38,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,X */
                {8'h61,8'h3a,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,C */
                {8'h61,8'h3b,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,B */
                {8'h61,8'h3c,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,E */
                {8'h61,8'h3d,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,D */
                {8'h61,8'h3e,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,L */
                {8'h61,8'h3f,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,H */
                {8'h61,8'h30,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,X,A */
                {8'h61,8'h31,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,A */
                {8'h61,8'h32,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,C,A */
                {8'h61,8'h33,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,B,A */
                {8'h61,8'h34,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,E,A */
                {8'h61,8'h35,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,D,A */
                {8'h61,8'h36,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,L,A */
                {8'h61,8'h37,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,H,A */
                {8'h3b,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,saddr */
                {8'h3f,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,!addr16 */
                {8'h3d,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,[HL] */
                {8'h3e,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,[HL+byte] */
                {8'h61,8'hb0,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,[HL+B] */
                {8'h61,8'hb2,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,[HL+C] */
                {8'h4c,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,A,#byte */
                {8'h4a,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,saddr,#byte */
                {8'h40,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,!addr16,#byte */
                {8'h61,8'h48,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,A,X */
                {8'h61,8'h4a,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,A,C */
                {8'h61,8'h4b,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,A,B */
                {8'h61,8'h4c,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,A,E */
                {8'h61,8'h4d,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,A,D */
                {8'h61,8'h4e,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,A,L */
                {8'h61,8'h4f,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,A,H */
                {8'h61,8'h40,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,X,A */
                {8'h61,8'h41,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,A,A */
                {8'h61,8'h42,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,C,A */
                {8'h61,8'h43,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,B,A */
                {8'h61,8'h44,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,E,A */
                {8'h61,8'h45,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,D,A */
                {8'h61,8'h46,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,L,A */
                {8'h61,8'h47,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,H,A */
                {8'h4b,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,A,saddr */
                {8'h4f,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,A,!addr16 */
                {8'h4d,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,A,[HL] */
                {8'h4e,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,A,[HL+byte] */
                {8'h61,8'hc0,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,A,[HL+B] */
                {8'h61,8'hc2,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP,A,[HL+C] */
                {8'h61,8'hde,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMPS,X,[HL+byte] */
                {8'hd1,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP0,,A */
                {8'hd0,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP0,,X */
                {8'hd3,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP0,,B */
                {8'hd2,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP0,,C */
                {8'hd4,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP0,,saddr */
                {8'hd5,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMP0,,!addr16 */
                {8'h24,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBW,AX,#word */
                {8'h21,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBW,AX,AX */
                {8'h23,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBW,AX,BC */
                {8'h25,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBW,AX,DE */
                {8'h27,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBW,AX,HL */
                {8'h26,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBW,AX,saddrp */
                {8'h22,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBW,AX,!addr16 */
                {8'h61,8'h29,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBW,AX,[HL+byte] */
                {8'h44,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMPW,AX,#word */
                {8'h43,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMPW,AX,BC */
                {8'h45,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMPW,AX,DE */
                {8'h47,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMPW,AX,HL */
                {8'h46,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMPW,AX,saddrp */
                {8'h42,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMPW,AX,!addr16 */
                {8'h61,8'h49,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* CMPW,AX,[HL+byte] */
                {8'h90,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* DEC,,X */
                {8'h91,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* DEC,,A */
                {8'h92,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* DEC,,C */
                {8'h93,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* DEC,,B */
                {8'h94,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* DEC,,E */
                {8'h95,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* DEC,,D */
                {8'h96,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* DEC,,L */
                {8'h97,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* DEC,,H */
                {8'hb4,8'hxx,2'bx0} : dec_alu_sub_adrstage = 1'b1;  /* DEC,,saddr */
                {8'hb0,8'hxx,2'bx0} : dec_alu_sub_adrstage = 1'b1;  /* DEC,,!addr16 */
                {8'h61,8'h69,2'bx0} : dec_alu_sub_adrstage = 1'b1;  /* DEC,,[HL+byte] */
                {8'hb1,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* DECW,,AX */
                {8'hb3,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* DECW,,BC */
                {8'hb5,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* DECW,,DE */
                {8'hb7,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* DECW,,HL */
                {8'hb6,8'hxx,2'bx0} : dec_alu_sub_adrstage = 1'b1;  /* DECW,,saddrp */
                {8'hb2,8'hxx,2'bx0} : dec_alu_sub_adrstage = 1'b1;  /* DECW,,!addr16 */
                {8'h61,8'h89,2'bx0} : dec_alu_sub_adrstage = 1'b1;  /* DECW,,[HL+byte] */
                {8'h20,8'hxx,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBW,SP,#byte */
                {8'h61,8'h39,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,A */
                {8'h61,8'ha3,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUB,A,[HL+C] */
                {8'h61,8'hb3,2'bxx} : dec_alu_sub_adrstage = 1'b1;  /* SUBC,A,[HL+C] */
                default : dec_alu_sub_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_sub <= 1'b0;
        else if(cpuen) dec_alu_sub <= dec_alu_sub_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　ANDのメモリアクセス演算を２クロック目から１クロック目に変更		*/
/*　　AND1,CLR1,BTCLRを全面削除→dec_alu_andbitへ移動				*/
/*------------------------------------------------------------------------------*/

    output dec_alu_and;
    reg    dec_alu_and, dec_alu_and_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_and_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h5c,8'hxx,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,A,#byte */
                {8'h5a,8'hxx,2'bx0} : dec_alu_and_adrstage = 1'b1;  /* AND,saddr,#byte */
                {8'h61,8'h58,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,A,X */
                {8'h61,8'h5a,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,A,C */
                {8'h61,8'h5b,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,A,B */
                {8'h61,8'h5c,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,A,E */
                {8'h61,8'h5d,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,A,D */
                {8'h61,8'h5e,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,A,L */
                {8'h61,8'h5f,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,A,H */
                {8'h61,8'h50,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,X,A */
                {8'h61,8'h51,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,A,A */
                {8'h61,8'h52,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,C,A */
                {8'h61,8'h53,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,B,A */
                {8'h61,8'h54,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,E,A */
                {8'h61,8'h55,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,D,A */
                {8'h61,8'h56,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,L,A */
                {8'h61,8'h57,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,H,A */
                {8'h5b,8'hxx,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,A,saddr */
                {8'h5f,8'hxx,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,A,!addr16 */
                {8'h5d,8'hxx,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,A,[HL] */
                {8'h5e,8'hxx,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,A,[HL+byte] */
                {8'h61,8'hd0,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,A,[HL+B] */
                {8'h61,8'hd2,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,A,[HL+C] */
                {8'h61,8'hd1,2'bxx} : dec_alu_and_adrstage = 1'b1;  /* AND,A,[HL+B] */
                default : dec_alu_and_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_and <= 1'b0;
        else if(cpuen) dec_alu_and <= dec_alu_and_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　ビット操作命令(AND1,CLR1,BTCLR)を専用化					*/
/*------------------------------------------------------------------------------*/

    output dec_alu_andbit;
    reg    dec_alu_andbit, dec_alu_andbit_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_andbit_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h71,8'h05,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,saddr.0 */
                {8'h71,8'h15,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,saddr.1 */
                {8'h71,8'h25,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,saddr.2 */
                {8'h71,8'h35,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,saddr.3 */
                {8'h71,8'h45,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,saddr.4 */
                {8'h71,8'h55,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,saddr.5 */
                {8'h71,8'h65,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,saddr.6 */
                {8'h71,8'h75,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,saddr.7 */
                {8'h71,8'h0d,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,sfr.0 */
                {8'h71,8'h1d,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,sfr.1 */
                {8'h71,8'h2d,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,sfr.2 */
                {8'h71,8'h3d,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,sfr.3 */
                {8'h71,8'h4d,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,sfr.4 */
                {8'h71,8'h5d,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,sfr.5 */
                {8'h71,8'h6d,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,sfr.6 */
                {8'h71,8'h7d,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,sfr.7 */
                {8'h71,8'h8d,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,A.0 */
                {8'h71,8'h9d,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,A.1 */
                {8'h71,8'had,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,A.2 */
                {8'h71,8'hbd,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,A.3 */
                {8'h71,8'hcd,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,A.4 */
                {8'h71,8'hdd,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,A.5 */
                {8'h71,8'hed,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,A.6 */
                {8'h71,8'hfd,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,A.7 */
                {8'h71,8'h85,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,[HL].0 */
                {8'h71,8'h95,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,[HL].1 */
                {8'h71,8'ha5,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,[HL].2 */
                {8'h71,8'hb5,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,[HL].3 */
                {8'h71,8'hc5,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,[HL].4 */
                {8'h71,8'hd5,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,[HL].5 */
                {8'h71,8'he5,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,[HL].6 */
                {8'h71,8'hf5,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* AND1,CY,[HL].7 */
                {8'h71,8'h03,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,saddr.0 */
                {8'h71,8'h13,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,saddr.1 */
                {8'h71,8'h23,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,saddr.2 */
                {8'h71,8'h33,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,saddr.3 */
                {8'h71,8'h43,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,saddr.4 */
                {8'h71,8'h53,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,saddr.5 */
                {8'h71,8'h63,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,saddr.6 */
                {8'h71,8'h73,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,saddr.7 */
                {8'h71,8'h0b,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,sfr.0 */
                {8'h71,8'h1b,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,sfr.1 */
                {8'h71,8'h2b,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,sfr.2 */
                {8'h71,8'h3b,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,sfr.3 */
                {8'h71,8'h4b,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,sfr.4 */
                {8'h71,8'h5b,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,sfr.5 */
                {8'h71,8'h6b,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,sfr.6 */
                {8'h71,8'h7b,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,sfr.7 */
                {8'h71,8'h8b,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,A.0 */
                {8'h71,8'h9b,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,A.1 */
                {8'h71,8'hab,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,A.2 */
                {8'h71,8'hbb,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,A.3 */
                {8'h71,8'hcb,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,A.4 */
                {8'h71,8'hdb,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,A.5 */
                {8'h71,8'heb,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,A.6 */
                {8'h71,8'hfb,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,A.7 */
                {8'h71,8'h08,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,!addr16.0 */
                {8'h71,8'h18,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,!addr16.1 */
                {8'h71,8'h28,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,!addr16.2 */
                {8'h71,8'h38,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,!addr16.3 */
                {8'h71,8'h48,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,!addr16.4 */
                {8'h71,8'h58,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,!addr16.5 */
                {8'h71,8'h68,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,!addr16.6 */
                {8'h71,8'h78,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,!addr16.7 */
                {8'h71,8'h83,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,[HL].0 */
                {8'h71,8'h93,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,[HL].1 */
                {8'h71,8'ha3,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,[HL].2 */
                {8'h71,8'hb3,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,[HL].3 */
                {8'h71,8'hc3,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,[HL].4 */
                {8'h71,8'hd3,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,[HL].5 */
                {8'h71,8'he3,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,[HL].6 */
                {8'h71,8'hf3,2'bx0} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,[HL].7 */
                {8'h71,8'h88,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,CY */
                {8'h71,8'h98,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,CY */
                {8'h71,8'ha8,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,CY */
                {8'h71,8'hb8,2'bxx} : dec_alu_andbit_adrstage = 1'b1;  /* CLR1,,CY */
                {8'h31,8'h00,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                {8'h31,8'h10,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                {8'h31,8'h20,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                {8'h31,8'h30,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                {8'h31,8'h40,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                {8'h31,8'h50,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                {8'h31,8'h60,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                {8'h31,8'h70,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                {8'h31,8'h80,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                {8'h31,8'h90,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                {8'h31,8'ha0,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                {8'h31,8'hb0,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                {8'h31,8'hc0,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                {8'h31,8'hd0,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                {8'h31,8'he0,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                {8'h31,8'hf0,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                {8'h31,8'h01,2'b10} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,A.0,$addr8 */
                {8'h31,8'h11,2'b10} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,A.1,$addr8 */
                {8'h31,8'h21,2'b10} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,A.2,$addr8 */
                {8'h31,8'h31,2'b10} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,A.3,$addr8 */
                {8'h31,8'h41,2'b10} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,A.4,$addr8 */
                {8'h31,8'h51,2'b10} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,A.5,$addr8 */
                {8'h31,8'h61,2'b10} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,A.6,$addr8 */
                {8'h31,8'h71,2'b10} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,A.7,$addr8 */
                {8'h31,8'h81,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                {8'h31,8'h91,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                {8'h31,8'ha1,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                {8'h31,8'hb1,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                {8'h31,8'hc1,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                {8'h31,8'hd1,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                {8'h31,8'he1,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                {8'h31,8'hf1,2'b01} : dec_alu_andbit_adrstage = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                default : dec_alu_andbit_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_andbit <= 1'b0;
        else if(cpuen) dec_alu_andbit <= dec_alu_andbit_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　ORのメモリアクセス演算を２クロック目から１クロック目に変更		*/
/*　　OR1,SET1を全面削除→dec_alu_orbitへ移動					*/
/*　　ONEB,ONEWを全面削除→dec_alu_transoutへ移動				*/
/*------------------------------------------------------------------------------*/

    output dec_alu_or;
    reg    dec_alu_or, dec_alu_or_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_or_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h6c,8'hxx,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,A,#byte */
                {8'h6a,8'hxx,2'bx0} : dec_alu_or_adrstage = 1'b1;  /* OR,saddr,#byte */
                {8'h61,8'h68,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,A,X */
                {8'h61,8'h6a,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,A,C */
                {8'h61,8'h6b,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,A,B */
                {8'h61,8'h6c,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,A,E */
                {8'h61,8'h6d,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,A,D */
                {8'h61,8'h6e,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,A,L */
                {8'h61,8'h6f,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,A,H */
                {8'h61,8'h60,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,X,A */
                {8'h61,8'h61,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,A,A */
                {8'h61,8'h62,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,C,A */
                {8'h61,8'h63,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,B,A */
                {8'h61,8'h64,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,E,A */
                {8'h61,8'h65,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,D,A */
                {8'h61,8'h66,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,L,A */
                {8'h61,8'h67,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,H,A */
                {8'h6b,8'hxx,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,A,saddr */
                {8'h6f,8'hxx,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,A,!addr16 */
                {8'h6d,8'hxx,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,A,[HL] */
                {8'h6e,8'hxx,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,A,[HL+byte] */
                {8'h61,8'he0,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,A,[HL+B] */
                {8'h61,8'he2,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,A,[HL+C] */
                {8'h61,8'he1,2'bxx} : dec_alu_or_adrstage = 1'b1;  /* OR,A,[HL+B] */
                default : dec_alu_or_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_or <= 1'b0;
        else if(cpuen) dec_alu_or <= dec_alu_or_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　ビット操作命令(OR1,SET1)を専用化						*/
/*------------------------------------------------------------------------------*/

    output dec_alu_orbit;
    reg    dec_alu_orbit, dec_alu_orbit_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_orbit_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h71,8'h06,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,saddr.0 */
                {8'h71,8'h16,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,saddr.1 */
                {8'h71,8'h26,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,saddr.2 */
                {8'h71,8'h36,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,saddr.3 */
                {8'h71,8'h46,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,saddr.4 */
                {8'h71,8'h56,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,saddr.5 */
                {8'h71,8'h66,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,saddr.6 */
                {8'h71,8'h76,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,saddr.7 */
                {8'h71,8'h0e,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,sfr.0 */
                {8'h71,8'h1e,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,sfr.1 */
                {8'h71,8'h2e,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,sfr.2 */
                {8'h71,8'h3e,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,sfr.3 */
                {8'h71,8'h4e,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,sfr.4 */
                {8'h71,8'h5e,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,sfr.5 */
                {8'h71,8'h6e,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,sfr.6 */
                {8'h71,8'h7e,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,sfr.7 */
                {8'h71,8'h8e,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,A.0 */
                {8'h71,8'h9e,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,A.1 */
                {8'h71,8'hae,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,A.2 */
                {8'h71,8'hbe,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,A.3 */
                {8'h71,8'hce,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,A.4 */
                {8'h71,8'hde,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,A.5 */
                {8'h71,8'hee,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,A.6 */
                {8'h71,8'hfe,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,A.7 */
                {8'h71,8'h86,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,[HL].0 */
                {8'h71,8'h96,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,[HL].1 */
                {8'h71,8'ha6,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,[HL].2 */
                {8'h71,8'hb6,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,[HL].3 */
                {8'h71,8'hc6,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,[HL].4 */
                {8'h71,8'hd6,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,[HL].5 */
                {8'h71,8'he6,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,[HL].6 */
                {8'h71,8'hf6,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* OR1,CY,[HL].7 */
                {8'h71,8'h02,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,saddr.0 */
                {8'h71,8'h12,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,saddr.1 */
                {8'h71,8'h22,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,saddr.2 */
                {8'h71,8'h32,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,saddr.3 */
                {8'h71,8'h42,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,saddr.4 */
                {8'h71,8'h52,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,saddr.5 */
                {8'h71,8'h62,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,saddr.6 */
                {8'h71,8'h72,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,saddr.7 */
                {8'h71,8'h0a,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,sfr.0 */
                {8'h71,8'h1a,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,sfr.1 */
                {8'h71,8'h2a,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,sfr.2 */
                {8'h71,8'h3a,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,sfr.3 */
                {8'h71,8'h4a,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,sfr.4 */
                {8'h71,8'h5a,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,sfr.5 */
                {8'h71,8'h6a,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,sfr.6 */
                {8'h71,8'h7a,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,sfr.7 */
                {8'h71,8'h8a,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,A.0 */
                {8'h71,8'h9a,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,A.1 */
                {8'h71,8'haa,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,A.2 */
                {8'h71,8'hba,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,A.3 */
                {8'h71,8'hca,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,A.4 */
                {8'h71,8'hda,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,A.5 */
                {8'h71,8'hea,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,A.6 */
                {8'h71,8'hfa,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,A.7 */
                {8'h71,8'h00,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,!addr16.0 */
                {8'h71,8'h10,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,!addr16.1 */
                {8'h71,8'h20,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,!addr16.2 */
                {8'h71,8'h30,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,!addr16.3 */
                {8'h71,8'h40,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,!addr16.4 */
                {8'h71,8'h50,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,!addr16.5 */
                {8'h71,8'h60,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,!addr16.6 */
                {8'h71,8'h70,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,!addr16.7 */
                {8'h71,8'h82,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,[HL].0 */
                {8'h71,8'h92,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,[HL].1 */
                {8'h71,8'ha2,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,[HL].2 */
                {8'h71,8'hb2,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,[HL].3 */
                {8'h71,8'hc2,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,[HL].4 */
                {8'h71,8'hd2,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,[HL].5 */
                {8'h71,8'he2,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,[HL].6 */
                {8'h71,8'hf2,2'bx0} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,[HL].7 */
                {8'h71,8'h80,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,CY */
                {8'h71,8'h90,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,CY */
                {8'h71,8'ha0,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,CY */
                {8'h71,8'hb0,2'bxx} : dec_alu_orbit_adrstage = 1'b1;  /* SET1,,CY */
                default : dec_alu_orbit_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_orbit <= 1'b0;
        else if(cpuen) dec_alu_orbit <= dec_alu_orbit_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　XORのメモリアクセス演算を２クロック目から１クロック目に変更		*/
/*　　XOR1,BF,NOT1を全面削除→dec_alu_andbitへ移動				*/
/*------------------------------------------------------------------------------*/

    output dec_alu_exor;
    reg    dec_alu_exor, dec_alu_exor_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_exor_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h7c,8'hxx,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,A,#byte */
                {8'h7a,8'hxx,2'bx0} : dec_alu_exor_adrstage = 1'b1;  /* XOR,saddr,#byte */
                {8'h61,8'h78,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,A,X */
                {8'h61,8'h7a,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,A,C */
                {8'h61,8'h7b,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,A,B */
                {8'h61,8'h7c,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,A,E */
                {8'h61,8'h7d,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,A,D */
                {8'h61,8'h7e,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,A,L */
                {8'h61,8'h7f,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,A,H */
                {8'h61,8'h70,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,X,A */
                {8'h61,8'h71,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,A,A */
                {8'h61,8'h72,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,C,A */
                {8'h61,8'h73,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,B,A */
                {8'h61,8'h74,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,E,A */
                {8'h61,8'h75,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,D,A */
                {8'h61,8'h76,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,L,A */
                {8'h61,8'h77,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,H,A */
                {8'h7b,8'hxx,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,A,saddr */
                {8'h7f,8'hxx,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,A,!addr16 */
                {8'h7d,8'hxx,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,A,[HL] */
                {8'h7e,8'hxx,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,A,[HL+byte] */
                {8'h61,8'hf0,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,A,[HL+B] */
                {8'h61,8'hf2,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,A,[HL+C] */
                {8'h61,8'hf1,2'bxx} : dec_alu_exor_adrstage = 1'b1;  /* XOR,A,[HL+B] */
                default : dec_alu_exor_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_exor <= 1'b0;
        else if(cpuen) dec_alu_exor <= dec_alu_exor_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　ビット操作命令(XOR1,BF,NOT1)を専用化					*/
/*------------------------------------------------------------------------------*/

    output dec_alu_exorbit;
    reg    dec_alu_exorbit, dec_alu_exorbit_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_exorbit_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h71,8'h07,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,saddr.0 */
                {8'h71,8'h17,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,saddr.1 */
                {8'h71,8'h27,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,saddr.2 */
                {8'h71,8'h37,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,saddr.3 */
                {8'h71,8'h47,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,saddr.4 */
                {8'h71,8'h57,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,saddr.5 */
                {8'h71,8'h67,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,saddr.6 */
                {8'h71,8'h77,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,saddr.7 */
                {8'h71,8'h0f,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,sfr.0 */
                {8'h71,8'h1f,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,sfr.1 */
                {8'h71,8'h2f,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,sfr.2 */
                {8'h71,8'h3f,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,sfr.3 */
                {8'h71,8'h4f,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,sfr.4 */
                {8'h71,8'h5f,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,sfr.5 */
                {8'h71,8'h6f,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,sfr.6 */
                {8'h71,8'h7f,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,sfr.7 */
                {8'h71,8'h8f,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,A.0 */
                {8'h71,8'h9f,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,A.1 */
                {8'h71,8'haf,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,A.2 */
                {8'h71,8'hbf,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,A.3 */
                {8'h71,8'hcf,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,A.4 */
                {8'h71,8'hdf,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,A.5 */
                {8'h71,8'hef,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,A.6 */
                {8'h71,8'hff,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,A.7 */
                {8'h71,8'h87,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,[HL].0 */
                {8'h71,8'h97,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,[HL].1 */
                {8'h71,8'ha7,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,[HL].2 */
                {8'h71,8'hb7,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,[HL].3 */
                {8'h71,8'hc7,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,[HL].4 */
                {8'h71,8'hd7,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,[HL].5 */
                {8'h71,8'he7,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,[HL].6 */
                {8'h71,8'hf7,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* XOR1,CY,[HL].7 */
                {8'h71,8'hc0,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* NOT1,,CY */
                {8'h71,8'hd0,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* NOT1,,CY */
                {8'h71,8'he0,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* NOT1,,CY */
                {8'h71,8'hf0,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* NOT1,,CY */
                {8'h71,8'hc8,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* NOT1,,CY */
                {8'h71,8'hd8,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* NOT1,,CY */
                {8'h71,8'he8,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* NOT1,,CY */
                {8'h71,8'hf8,2'bxx} : dec_alu_exorbit_adrstage = 1'b1;  /* NOT1,,CY */
                {8'h31,8'h04,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,saddr.0,$addr8 */
                {8'h31,8'h14,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,saddr.1,$addr8 */
                {8'h31,8'h24,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,saddr.2,$addr8 */
                {8'h31,8'h34,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,saddr.3,$addr8 */
                {8'h31,8'h44,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,saddr.4,$addr8 */
                {8'h31,8'h54,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,saddr.5,$addr8 */
                {8'h31,8'h64,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,saddr.6,$addr8 */
                {8'h31,8'h74,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,saddr.7,$addr8 */
                {8'h31,8'h84,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,sfr.0,$addr8 */
                {8'h31,8'h94,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,sfr.1,$addr8 */
                {8'h31,8'ha4,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,sfr.2,$addr8 */
                {8'h31,8'hb4,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,sfr.3,$addr8 */
                {8'h31,8'hc4,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,sfr.4,$addr8 */
                {8'h31,8'hd4,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,sfr.5,$addr8 */
                {8'h31,8'he4,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,sfr.6,$addr8 */
                {8'h31,8'hf4,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,sfr.7,$addr8 */
                {8'h31,8'h05,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,A.0,$addr8 */
                {8'h31,8'h15,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,A.1,$addr8 */
                {8'h31,8'h25,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,A.2,$addr8 */
                {8'h31,8'h35,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,A.3,$addr8 */
                {8'h31,8'h45,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,A.4,$addr8 */
                {8'h31,8'h55,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,A.5,$addr8 */
                {8'h31,8'h65,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,A.6,$addr8 */
                {8'h31,8'h75,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,A.7,$addr8 */
                {8'h31,8'h85,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,[HL].0,$addr8 */
                {8'h31,8'h95,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,[HL].1,$addr8 */
                {8'h31,8'ha5,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,[HL].2,$addr8 */
                {8'h31,8'hb5,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,[HL].3,$addr8 */
                {8'h31,8'hc5,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,[HL].4,$addr8 */
                {8'h31,8'hd5,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,[HL].5,$addr8 */
                {8'h31,8'he5,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,[HL].6,$addr8 */
                {8'h31,8'hf5,2'b00} : dec_alu_exorbit_adrstage = 1'b1;  /* BF,[HL].7,$addr8 */
                default : dec_alu_exorbit_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_exorbit <= 1'b0;
        else if(cpuen) dec_alu_exorbit <= dec_alu_exorbit_adrstage;
    end

    output dec_alu_ror;
    reg    dec_alu_ror, dec_alu_ror_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_ror_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hdb,2'bxx} : dec_alu_ror_adrstage = 1'b1;  /* ROR,A,1 */
                {8'h61,8'hfb,2'bxx} : dec_alu_ror_adrstage = 1'b1;  /* RORC,A,1 */
                default : dec_alu_ror_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_ror <= 1'b0;
        else if(cpuen) dec_alu_ror <= dec_alu_ror_adrstage;
    end
    output dec_alu_rol;
    reg    dec_alu_rol, dec_alu_rol_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_rol_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'heb,2'bxx} : dec_alu_rol_adrstage = 1'b1;  /* ROL,A,1 */
                {8'h61,8'hdc,2'bxx} : dec_alu_rol_adrstage = 1'b1;  /* ROLC,A,1 */
                {8'h61,8'hee,2'bxx} : dec_alu_rol_adrstage = 1'b1;  /* ROLWC,AX,1 */
                {8'h61,8'hfe,2'bxx} : dec_alu_rol_adrstage = 1'b1;  /* ROLWC,BC,1 */
                default : dec_alu_rol_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_rol <= 1'b0;
        else if(cpuen) dec_alu_rol <= dec_alu_rol_adrstage;
    end
    output dec_alu_shr;
    reg    dec_alu_shr, dec_alu_shr_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_shr_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h31,8'h0a,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHR,A,0 */
                {8'h31,8'h1a,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHR,A,1 */
                {8'h31,8'h2a,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHR,A,2 */
                {8'h31,8'h3a,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHR,A,3 */
                {8'h31,8'h4a,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHR,A,4 */
                {8'h31,8'h5a,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHR,A,5 */
                {8'h31,8'h6a,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHR,A,6 */
                {8'h31,8'h7a,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHR,A,7 */
                {8'h31,8'h0e,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHRW,AX,0 */
                {8'h31,8'h1e,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHRW,AX,1 */
                {8'h31,8'h2e,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHRW,AX,2 */
                {8'h31,8'h3e,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHRW,AX,3 */
                {8'h31,8'h4e,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHRW,AX,4 */
                {8'h31,8'h5e,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHRW,AX,5 */
                {8'h31,8'h6e,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHRW,AX,6 */
                {8'h31,8'h7e,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHRW,AX,7 */
                {8'h31,8'h8e,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHRW,AX,8 */
                {8'h31,8'h9e,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHRW,AX,9 */
                {8'h31,8'hae,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHRW,AX,10 */
                {8'h31,8'hbe,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHRW,AX,11 */
                {8'h31,8'hce,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHRW,AX,12 */
                {8'h31,8'hde,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHRW,AX,13 */
                {8'h31,8'hee,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHRW,AX,14 */
                {8'h31,8'hfe,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHRW,AX,15 */
                {8'h31,8'h8a,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHR,A,0 */
                {8'h31,8'h9a,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHR,A,1 */
                {8'h31,8'haa,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHR,A,2 */
                {8'h31,8'hba,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHR,A,3 */
                {8'h31,8'hca,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHR,A,4 */
                {8'h31,8'hda,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHR,A,5 */
                {8'h31,8'hea,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHR,A,6 */
                {8'h31,8'hfa,2'bxx} : dec_alu_shr_adrstage = 1'b1;  /* SHR,A,7 */
                default : dec_alu_shr_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_shr <= 1'b0;
        else if(cpuen) dec_alu_shr <= dec_alu_shr_adrstage;
    end
    output dec_alu_shl;
    reg    dec_alu_shl, dec_alu_shl_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_shl_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h31,8'h09,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,A,0 */
                {8'h31,8'h19,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,A,1 */
                {8'h31,8'h29,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,A,2 */
                {8'h31,8'h39,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,A,3 */
                {8'h31,8'h49,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,A,4 */
                {8'h31,8'h59,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,A,5 */
                {8'h31,8'h69,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,A,6 */
                {8'h31,8'h79,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,A,7 */
                {8'h31,8'h08,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,B,0 */
                {8'h31,8'h18,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,B,1 */
                {8'h31,8'h28,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,B,2 */
                {8'h31,8'h38,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,B,3 */
                {8'h31,8'h48,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,B,4 */
                {8'h31,8'h58,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,B,5 */
                {8'h31,8'h68,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,B,6 */
                {8'h31,8'h78,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,B,7 */
                {8'h31,8'h07,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,C,0 */
                {8'h31,8'h17,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,C,1 */
                {8'h31,8'h27,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,C,2 */
                {8'h31,8'h37,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,C,3 */
                {8'h31,8'h47,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,C,4 */
                {8'h31,8'h57,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,C,5 */
                {8'h31,8'h67,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,C,6 */
                {8'h31,8'h77,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,C,7 */
                {8'h31,8'h0d,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,AX,0 */
                {8'h31,8'h1d,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,AX,1 */
                {8'h31,8'h2d,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,AX,2 */
                {8'h31,8'h3d,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,AX,3 */
                {8'h31,8'h4d,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,AX,4 */
                {8'h31,8'h5d,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,AX,5 */
                {8'h31,8'h6d,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,AX,6 */
                {8'h31,8'h7d,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,AX,7 */
                {8'h31,8'h8d,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,AX,8 */
                {8'h31,8'h9d,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,AX,9 */
                {8'h31,8'had,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,AX,10 */
                {8'h31,8'hbd,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,AX,11 */
                {8'h31,8'hcd,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,AX,12 */
                {8'h31,8'hdd,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,AX,13 */
                {8'h31,8'hed,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,AX,14 */
                {8'h31,8'hfd,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,AX,15 */
                {8'h31,8'h0c,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,BC,0 */
                {8'h31,8'h1c,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,BC,1 */
                {8'h31,8'h2c,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,BC,2 */
                {8'h31,8'h3c,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,BC,3 */
                {8'h31,8'h4c,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,BC,4 */
                {8'h31,8'h5c,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,BC,5 */
                {8'h31,8'h6c,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,BC,6 */
                {8'h31,8'h7c,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,BC,7 */
                {8'h31,8'h8c,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,BC,8 */
                {8'h31,8'h9c,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,BC,9 */
                {8'h31,8'hac,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,BC,10 */
                {8'h31,8'hbc,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,BC,11 */
                {8'h31,8'hcc,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,BC,12 */
                {8'h31,8'hdc,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,BC,13 */
                {8'h31,8'hec,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,BC,14 */
                {8'h31,8'hfc,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHLW,BC,15 */
                {8'h31,8'h89,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,A,0 */
                {8'h31,8'h99,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,A,1 */
                {8'h31,8'ha9,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,A,2 */
                {8'h31,8'hb9,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,A,3 */
                {8'h31,8'hc9,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,A,4 */
                {8'h31,8'hd9,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,A,5 */
                {8'h31,8'he9,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,A,6 */
                {8'h31,8'hf9,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,A,7 */
                {8'h31,8'h88,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,B,0 */
                {8'h31,8'h98,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,B,1 */
                {8'h31,8'ha8,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,B,2 */
                {8'h31,8'hb8,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,B,3 */
                {8'h31,8'hc8,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,B,4 */
                {8'h31,8'hd8,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,B,5 */
                {8'h31,8'he8,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,B,6 */
                {8'h31,8'hf8,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,B,7 */
                {8'h31,8'h87,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,C,0 */
                {8'h31,8'h97,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,C,1 */
                {8'h31,8'ha7,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,C,2 */
                {8'h31,8'hb7,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,C,3 */
                {8'h31,8'hc7,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,C,4 */
                {8'h31,8'hd7,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,C,5 */
                {8'h31,8'he7,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,C,6 */
                {8'h31,8'hf7,2'bxx} : dec_alu_shl_adrstage = 1'b1;  /* SHL,C,7 */
                default : dec_alu_shl_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_shl <= 1'b0;
        else if(cpuen) dec_alu_shl <= dec_alu_shl_adrstage;
    end
    output dec_alu_sar;
    reg    dec_alu_sar, dec_alu_sar_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_sar_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h31,8'h0b,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SAR,A,0 */
                {8'h31,8'h1b,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SAR,A,1 */
                {8'h31,8'h2b,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SAR,A,2 */
                {8'h31,8'h3b,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SAR,A,3 */
                {8'h31,8'h4b,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SAR,A,4 */
                {8'h31,8'h5b,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SAR,A,5 */
                {8'h31,8'h6b,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SAR,A,6 */
                {8'h31,8'h7b,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SAR,A,7 */
                {8'h31,8'h0f,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SARW,AX,0 */
                {8'h31,8'h1f,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SARW,AX,1 */
                {8'h31,8'h2f,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SARW,AX,2 */
                {8'h31,8'h3f,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SARW,AX,3 */
                {8'h31,8'h4f,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SARW,AX,4 */
                {8'h31,8'h5f,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SARW,AX,5 */
                {8'h31,8'h6f,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SARW,AX,6 */
                {8'h31,8'h7f,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SARW,AX,7 */
                {8'h31,8'h8f,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SARW,AX,8 */
                {8'h31,8'h9f,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SARW,AX,9 */
                {8'h31,8'haf,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SARW,AX,10 */
                {8'h31,8'hbf,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SARW,AX,11 */
                {8'h31,8'hcf,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SARW,AX,12 */
                {8'h31,8'hdf,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SARW,AX,13 */
                {8'h31,8'hef,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SARW,AX,14 */
                {8'h31,8'hff,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SARW,AX,15 */
                {8'h31,8'h8b,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SAR,A,0 */
                {8'h31,8'h9b,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SAR,A,1 */
                {8'h31,8'hab,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SAR,A,2 */
                {8'h31,8'hbb,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SAR,A,3 */
                {8'h31,8'hcb,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SAR,A,4 */
                {8'h31,8'hdb,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SAR,A,5 */
                {8'h31,8'heb,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SAR,A,6 */
                {8'h31,8'hfb,2'bxx} : dec_alu_sar_adrstage = 1'b1;  /* SAR,A,7 */
                default : dec_alu_sar_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_sar <= 1'b0;
        else if(cpuen) dec_alu_sar <= dec_alu_sar_adrstage;
    end
    output dec_alu_mulu;
    reg    dec_alu_mulu, dec_alu_mulu_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_mulu_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hd6,8'hxx,2'bxx} : dec_alu_mulu_adrstage = 1'b1;  /* MULU,,X */
                default : dec_alu_mulu_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_mulu <= 1'b0;
        else if(cpuen) dec_alu_mulu <= dec_alu_mulu_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　ADD,ADDCのメモリアクセス演算を２クロック目から１クロック目に変更		*/
/*------------------------------------------------------------------------------*/

    output dec_alu_carry;
    reg    dec_alu_carry, dec_alu_carry_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alu_carry_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h1c,8'hxx,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,#byte */
                {8'h1a,8'hxx,2'bx0} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,saddr,#byte */
                {8'h61,8'h18,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,X */
                {8'h61,8'h1a,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,C */
                {8'h61,8'h1b,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,B */
                {8'h61,8'h1c,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,E */
                {8'h61,8'h1d,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,D */
                {8'h61,8'h1e,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,L */
                {8'h61,8'h1f,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,H */
                {8'h61,8'h10,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,X,A */
                {8'h61,8'h11,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,A */
                {8'h61,8'h12,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,C,A */
                {8'h61,8'h13,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,B,A */
                {8'h61,8'h14,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,E,A */
                {8'h61,8'h15,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,D,A */
                {8'h61,8'h16,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,L,A */
                {8'h61,8'h17,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,H,A */
                {8'h1b,8'hxx,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,saddr */
                {8'h1f,8'hxx,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,!addr16 */
                {8'h1d,8'hxx,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,[HL] */
                {8'h1e,8'hxx,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,[HL+byte] */
                {8'h61,8'h90,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,[HL+B] */
                {8'h61,8'h92,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h3c,8'hxx,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,#byte */
                {8'h3a,8'hxx,2'bx0} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,saddr,#byte */
                {8'h61,8'h38,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,X */
                {8'h61,8'h3a,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,C */
                {8'h61,8'h3b,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,B */
                {8'h61,8'h3c,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,E */
                {8'h61,8'h3d,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,D */
                {8'h61,8'h3e,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,L */
                {8'h61,8'h3f,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,H */
                {8'h61,8'h30,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,X,A */
                {8'h61,8'h31,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,A */
                {8'h61,8'h32,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,C,A */
                {8'h61,8'h33,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,B,A */
                {8'h61,8'h34,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,E,A */
                {8'h61,8'h35,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,D,A */
                {8'h61,8'h36,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,L,A */
                {8'h61,8'h37,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,H,A */
                {8'h3b,8'hxx,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,saddr */
                {8'h3f,8'hxx,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,!addr16 */
                {8'h3d,8'hxx,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,[HL] */
                {8'h3e,8'hxx,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,[HL+byte] */
                {8'h61,8'hb0,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,[HL+B] */
                {8'h61,8'hb2,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,[HL+C] */
                {8'h61,8'hfb,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* RORC,A,1 */
                {8'h61,8'hdc,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ROLC,A,1 */
                {8'h61,8'hee,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ROLWC,AX,1 */
                {8'h61,8'hfe,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ROLWC,BC,1 */
                {8'h61,8'h19,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,A */
                {8'h61,8'h39,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,A */
                {8'h61,8'h91,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,[HL+B] */
                {8'h61,8'hb1,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,[HL+B] */
                {8'h61,8'h93,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h61,8'hb3,2'bxx} : dec_alu_carry_adrstage = 1'b1;  /* SUBC,A,[HL+C] */
                default : dec_alu_carry_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_carry <= 1'b0;
        else if(cpuen) dec_alu_carry <= dec_alu_carry_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　転送命令系を専用化(MDWへ出力+レジスタ)を専用化				*/
/*------------------------------------------------------------------------------*/

    output [3:0] dec_alu_transout;
    reg    [3:0] dec_alu_transout, dec_alu_transout_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1) begin
            dec_alu_transout_adrstage = 4'h0;
        end else if(ivack == 1'b1) begin
            casex ({stage_adr})  
                {2'b00} : dec_alu_transout_adrstage = 4'hd;  /* Interrupt */
                {2'b01} : dec_alu_transout_adrstage = 4'he;  /* Interrupt */
                default : dec_alu_transout_adrstage = 4'h0;
            endcase
        end else if(skpack == 1'b1) begin
            dec_alu_transout_adrstage = 4'h0;
        end else begin
            if(ID_stage0 == 8'h61) begin
                casex ({ID_stage1,stage_adr})  
                    {8'hd9,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,[HL+B],A */
                    {8'hf9,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,[HL+C],A */
                    {8'hce,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* MOVS,[HL+byte],X */
                    {8'h8a,2'bxx} : dec_alu_transout_adrstage = 4'h5;  /* XCH,A,C */
                    {8'h8b,2'bxx} : dec_alu_transout_adrstage = 4'h4;  /* XCH,A,B */
                    {8'h8c,2'bxx} : dec_alu_transout_adrstage = 4'h7;  /* XCH,A,E */
                    {8'h8d,2'bxx} : dec_alu_transout_adrstage = 4'h6;  /* XCH,A,D */
                    {8'h8e,2'bxx} : dec_alu_transout_adrstage = 4'h9;  /* XCH,A,L */
                    {8'h8f,2'bxx} : dec_alu_transout_adrstage = 4'h8;  /* XCH,A,H */
                    {8'ha8,2'bx1} : dec_alu_transout_adrstage = 4'h2;  /* XCH,A,saddr */
                    {8'hab,2'bx1} : dec_alu_transout_adrstage = 4'h2;  /* XCH,A,sfr */
                    {8'haa,2'bx1} : dec_alu_transout_adrstage = 4'h2;  /* XCH,A,!addr16 */
                    {8'hae,2'bx1} : dec_alu_transout_adrstage = 4'h2;  /* XCH,A,[DE] */
                    {8'haf,2'bx1} : dec_alu_transout_adrstage = 4'h2;  /* XCH,A,[DE+byte] */
                    {8'hac,2'bx1} : dec_alu_transout_adrstage = 4'h2;  /* XCH,A,[HL] */
                    {8'had,2'bx1} : dec_alu_transout_adrstage = 4'h2;  /* XCH,A,[HL+byte] */
                    {8'hb9,2'bx1} : dec_alu_transout_adrstage = 4'h2;  /* XCH,A,[HL+B] */
                    {8'ha9,2'bx1} : dec_alu_transout_adrstage = 4'h2;  /* XCH,A,[HL+C] */
                    {8'h88,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* XCH,A,X */
                    {8'h98,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* XCH,A,X */
                    {8'h99,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* XCH,A,X */
                    {8'h9a,2'bxx} : dec_alu_transout_adrstage = 4'h5;  /* XCH,A,C */
                    {8'h9b,2'bxx} : dec_alu_transout_adrstage = 4'h4;  /* XCH,A,B */
                    {8'h9c,2'bxx} : dec_alu_transout_adrstage = 4'h7;  /* XCH,A,E */
                    {8'h9d,2'bxx} : dec_alu_transout_adrstage = 4'h6;  /* XCH,A,D */
                    {8'h9e,2'bxx} : dec_alu_transout_adrstage = 4'h9;  /* XCH,A,L */
                    {8'h9f,2'bxx} : dec_alu_transout_adrstage = 4'h8;  /* XCH,A,H */
                    {8'hbb,2'bx1} : dec_alu_transout_adrstage = 4'h2;  /* XCH,A,sfr */
                    {8'hba,2'bx1} : dec_alu_transout_adrstage = 4'h2;  /* XCH,A,!addr16 */
                    {8'hbe,2'bx1} : dec_alu_transout_adrstage = 4'h2;  /* XCH,A,[DE] */
                    {8'hbf,2'bx1} : dec_alu_transout_adrstage = 4'h2;  /* XCH,A,[DE+byte] */
                    {8'hbc,2'bx1} : dec_alu_transout_adrstage = 4'h2;  /* XCH,A,[HL] */
                    {8'hbd,2'bx1} : dec_alu_transout_adrstage = 4'h2;  /* XCH,A,[HL+byte] */
                    {8'h59,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* INC,,[HL+byte] */
                    {8'h69,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* DEC,,[HL+byte] */
                    {8'h79,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* INCW,,[HL+byte] */
                    {8'h89,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* DECW,,[HL+byte] */
                    {8'hca,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALL,,AX */
                    {8'hca,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALL,,AX */
                    {8'hda,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALL,,BC */
                    {8'hda,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALL,,BC */
                    {8'hea,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALL,,DE */
                    {8'hea,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALL,,DE */
                    {8'hfa,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALL,,HL */
                    {8'hfa,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALL,,HL */
                    {8'h84,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[0080h] */
                    {8'h84,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[0080h] */
                    {8'h94,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[0082h] */
                    {8'h94,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[0082h] */
                    {8'ha4,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[0084h] */
                    {8'ha4,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[0084h] */
                    {8'hb4,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[0086h] */
                    {8'hb4,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[0086h] */
                    {8'hc4,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[0088h] */
                    {8'hc4,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[0088h] */
                    {8'hd4,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[008Ah] */
                    {8'hd4,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[008Ah] */
                    {8'he4,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[008Ch] */
                    {8'he4,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[008Ch] */
                    {8'hf4,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[008Eh] */
                    {8'hf4,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[008Eh] */
                    {8'h85,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[0090h] */
                    {8'h85,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[0090h] */
                    {8'h95,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[0092h] */
                    {8'h95,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[0092h] */
                    {8'ha5,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[0094h] */
                    {8'ha5,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[0094h] */
                    {8'hb5,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[0096h] */
                    {8'hb5,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[0096h] */
                    {8'hc5,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[0098h] */
                    {8'hc5,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[0098h] */
                    {8'hd5,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[009Ah] */
                    {8'hd5,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[009Ah] */
                    {8'he5,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[009Ch] */
                    {8'he5,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[009Ch] */
                    {8'hf5,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[009Eh] */
                    {8'hf5,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[009Eh] */
                    {8'h86,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[00A0h] */
                    {8'h86,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[00A0h] */
                    {8'h96,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[00A2h] */
                    {8'h96,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[00A2h] */
                    {8'ha6,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[00A4h] */
                    {8'ha6,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[00A4h] */
                    {8'hb6,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[00A6h] */
                    {8'hb6,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[00A6h] */
                    {8'hc6,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[00A8h] */
                    {8'hc6,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[00A8h] */
                    {8'hd6,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[00AAh] */
                    {8'hd6,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[00AAh] */
                    {8'he6,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[00ACh] */
                    {8'he6,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[00ACh] */
                    {8'hf6,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[00AEh] */
                    {8'hf6,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[00AEh] */
                    {8'h87,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[00B0h] */
                    {8'h87,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[00B0h] */
                    {8'h97,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[00B2h] */
                    {8'h97,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[00B2h] */
                    {8'ha7,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[00B4h] */
                    {8'ha7,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[00B4h] */
                    {8'hb7,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[00B6h] */
                    {8'hb7,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[00B6h] */
                    {8'hc7,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[00B8h] */
                    {8'hc7,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[00B8h] */
                    {8'hd7,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[00BAh] */
                    {8'hd7,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[00BAh] */
                    {8'he7,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[00BCh] */
                    {8'he7,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[00BCh] */
                    {8'hf7,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALLT,,[00BEh] */
                    {8'hf7,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALLT,,[00BEh] */
                    {8'hcc,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* BRK,, */
                    {8'hcc,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* BRK,, */
                    {8'hdd,2'bxx} : dec_alu_transout_adrstage = 4'hf;  /* PUSH,,PSW */
                    {8'ha1,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* SOFT2,,BREAK */
                    {8'ha1,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SOFT2,,BREAK */
                    {8'hb1,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* SOFT3,,BREAK */
                    {8'hb1,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SOFT3,,BREAK */
                    {8'hc1,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* SOFT4,,BREAK */
                    {8'hc1,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SOFT4,,BREAK */
                    default : dec_alu_transout_adrstage = 4'h0;
                endcase
            end else if(ID_stage0 == 8'h71) begin
                casex ({ID_stage1,stage_adr})  
                    {8'h01,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,saddr.0,CY */
                    {8'h11,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,saddr.1,CY */
                    {8'h21,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,saddr.2,CY */
                    {8'h31,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,saddr.3,CY */
                    {8'h41,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,saddr.4,CY */
                    {8'h51,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,saddr.5,CY */
                    {8'h61,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,saddr.6,CY */
                    {8'h71,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,saddr.7,CY */
                    {8'h09,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,sfr.0,CY */
                    {8'h19,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,sfr.1,CY */
                    {8'h29,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,sfr.2,CY */
                    {8'h39,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,sfr.3,CY */
                    {8'h49,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,sfr.4,CY */
                    {8'h59,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,sfr.5,CY */
                    {8'h69,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,sfr.6,CY */
                    {8'h79,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,sfr.7,CY */
                    {8'h81,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,[HL].0,CY */
                    {8'h91,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,[HL].1,CY */
                    {8'ha1,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,[HL].2,CY */
                    {8'hb1,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,[HL].3,CY */
                    {8'hc1,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,[HL].4,CY */
                    {8'hd1,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,[HL].5,CY */
                    {8'he1,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,[HL].6,CY */
                    {8'hf1,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* MOV1,[HL].7,CY */
                    {8'h02,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,saddr.0 */
                    {8'h12,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,saddr.1 */
                    {8'h22,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,saddr.2 */
                    {8'h32,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,saddr.3 */
                    {8'h42,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,saddr.4 */
                    {8'h52,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,saddr.5 */
                    {8'h62,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,saddr.6 */
                    {8'h72,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,saddr.7 */
                    {8'h0a,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,sfr.0 */
                    {8'h1a,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,sfr.1 */
                    {8'h2a,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,sfr.2 */
                    {8'h3a,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,sfr.3 */
                    {8'h4a,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,sfr.4 */
                    {8'h5a,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,sfr.5 */
                    {8'h6a,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,sfr.6 */
                    {8'h7a,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,sfr.7 */
                    {8'h00,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,!addr16.0 */
                    {8'h10,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,!addr16.1 */
                    {8'h20,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,!addr16.2 */
                    {8'h30,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,!addr16.3 */
                    {8'h40,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,!addr16.4 */
                    {8'h50,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,!addr16.5 */
                    {8'h60,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,!addr16.6 */
                    {8'h70,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,!addr16.7 */
                    {8'h82,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,[HL].0 */
                    {8'h92,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,[HL].1 */
                    {8'ha2,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,[HL].2 */
                    {8'hb2,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,[HL].3 */
                    {8'hc2,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,[HL].4 */
                    {8'hd2,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,[HL].5 */
                    {8'he2,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,[HL].6 */
                    {8'hf2,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SET1,,[HL].7 */
                    {8'h03,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,saddr.0 */
                    {8'h13,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,saddr.1 */
                    {8'h23,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,saddr.2 */
                    {8'h33,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,saddr.3 */
                    {8'h43,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,saddr.4 */
                    {8'h53,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,saddr.5 */
                    {8'h63,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,saddr.6 */
                    {8'h73,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,saddr.7 */
                    {8'h0b,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,sfr.0 */
                    {8'h1b,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,sfr.1 */
                    {8'h2b,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,sfr.2 */
                    {8'h3b,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,sfr.3 */
                    {8'h4b,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,sfr.4 */
                    {8'h5b,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,sfr.5 */
                    {8'h6b,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,sfr.6 */
                    {8'h7b,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,sfr.7 */
                    {8'h08,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,!addr16.0 */
                    {8'h18,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,!addr16.1 */
                    {8'h28,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,!addr16.2 */
                    {8'h38,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,!addr16.3 */
                    {8'h48,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,!addr16.4 */
                    {8'h58,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,!addr16.5 */
                    {8'h68,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,!addr16.6 */
                    {8'h78,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,!addr16.7 */
                    {8'h83,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,[HL].0 */
                    {8'h93,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,[HL].1 */
                    {8'ha3,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,[HL].2 */
                    {8'hb3,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,[HL].3 */
                    {8'hc3,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,[HL].4 */
                    {8'hd3,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,[HL].5 */
                    {8'he3,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,[HL].6 */
                    {8'hf3,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CLR1,,[HL].7 */
                    default : dec_alu_transout_adrstage = 4'h0;
                endcase
            end else if(ID_stage0 == 8'h31) begin
                casex ({ID_stage1,stage_adr})  
                    {8'h00,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,saddr.0,$addr8 */
                    {8'h10,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,saddr.1,$addr8 */
                    {8'h20,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,saddr.2,$addr8 */
                    {8'h30,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,saddr.3,$addr8 */
                    {8'h40,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,saddr.4,$addr8 */
                    {8'h50,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,saddr.5,$addr8 */
                    {8'h60,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,saddr.6,$addr8 */
                    {8'h70,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,saddr.7,$addr8 */
                    {8'h80,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,sfr.0,$addr8 */
                    {8'h90,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,sfr.1,$addr8 */
                    {8'ha0,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,sfr.2,$addr8 */
                    {8'hb0,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,sfr.3,$addr8 */
                    {8'hc0,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,sfr.4,$addr8 */
                    {8'hd0,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,sfr.5,$addr8 */
                    {8'he0,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,sfr.6,$addr8 */
                    {8'hf0,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,sfr.7,$addr8 */
                    {8'h81,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,[HL].0,$addr8 */
                    {8'h91,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,[HL].1,$addr8 */
                    {8'ha1,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,[HL].2,$addr8 */
                    {8'hb1,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,[HL].3,$addr8 */
                    {8'hc1,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,[HL].4,$addr8 */
                    {8'hd1,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,[HL].5,$addr8 */
                    {8'he1,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,[HL].6,$addr8 */
                    {8'hf1,2'b10} : dec_alu_transout_adrstage = 4'he;  /* BTCLR,[HL].7,$addr8 */
                    default : dec_alu_transout_adrstage = 4'h0;
                endcase
            end else begin
                casex ({ID_stage0,stage_adr})  
                    {8'h50,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,X,#byte */
                    {8'h51,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,A,#byte */
                    {8'h52,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,C,#byte */
                    {8'h53,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,B,#byte */
                    {8'h54,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,E,#byte */
                    {8'h55,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,D,#byte */
                    {8'h56,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,L,#byte */
                    {8'h57,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,H,#byte */
                    {8'hcd,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,saddr,#byte */
                    {8'hce,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,sfr,#byte */
                    {8'hcf,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,!addr16,#byte */
                    {8'hca,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,[DE+byte],#byte */
                    {8'hcc,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,[HL+byte],#byte */
                    {8'h60,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* MOV,A,X */
                    {8'h62,2'bxx} : dec_alu_transout_adrstage = 4'h5;  /* MOV,A,C */
                    {8'h63,2'bxx} : dec_alu_transout_adrstage = 4'h4;  /* MOV,A,B */
                    {8'h64,2'bxx} : dec_alu_transout_adrstage = 4'h7;  /* MOV,A,E */
                    {8'h65,2'bxx} : dec_alu_transout_adrstage = 4'h6;  /* MOV,A,D */
                    {8'h66,2'bxx} : dec_alu_transout_adrstage = 4'h9;  /* MOV,A,L */
                    {8'h67,2'bxx} : dec_alu_transout_adrstage = 4'h8;  /* MOV,A,H */
                    {8'h70,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,X,A */
                    {8'h72,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,C,A */
                    {8'h73,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,B,A */
                    {8'h74,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,E,A */
                    {8'h75,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,D,A */
                    {8'h76,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,L,A */
                    {8'h77,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,H,A */
                    {8'h9d,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,saddr,A */
                    {8'h9e,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,sfr,A */
                    {8'h9f,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,!addr16,A */
                    {8'h41,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,ES,#byte */
                    {8'h99,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,[DE],A */
                    {8'h9a,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,[DE+byte],A */
                    {8'h9b,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,[HL],A */
                    {8'h9c,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,[HL+byte],A */
                    {8'h19,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,word[B],#byte */
                    {8'h18,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,word[B],A */
                    {8'h38,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,word[C],#byte */
                    {8'h28,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,word[C],A */
                    {8'h39,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,word[BC],#byte */
                    {8'h48,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,word[BC],A */
                    {8'hc8,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOV,[SP+byte],#byte */
                    {8'h98,2'bxx} : dec_alu_transout_adrstage = 4'h2;  /* MOV,[SP+byte],A */
                    {8'h08,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* XCH,A,X */
                    {8'h30,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOVW,AX,#word */
                    {8'h32,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOVW,BC,#word */
                    {8'h34,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOVW,DE,#word */
                    {8'h36,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOVW,HL,#word */
                    {8'hc9,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOVW,saddrp,#word */
                    {8'hcb,2'bxx} : dec_alu_transout_adrstage = 4'ha;  /* MOVW,sfrp,#word */
                    {8'hbd,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* MOVW,saddrp,AX */
                    {8'hbe,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* MOVW,sfrp,AX */
                    {8'h13,2'bxx} : dec_alu_transout_adrstage = 4'h5;  /* MOVW,AX,BC */
                    {8'h12,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* MOVW,BC,AX */
                    {8'h15,2'bxx} : dec_alu_transout_adrstage = 4'h7;  /* MOVW,AX,DE */
                    {8'h14,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* MOVW,DE,AX */
                    {8'h17,2'bxx} : dec_alu_transout_adrstage = 4'h9;  /* MOVW,AX,HL */
                    {8'h16,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* MOVW,HL,AX */
                    {8'hbf,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* MOVW,!addr16,AX */
                    {8'hb9,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* MOVW,[DE],AX */
                    {8'hba,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* MOVW,[DE+byte],AX */
                    {8'hbb,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* MOVW,[HL],AX */
                    {8'hbc,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* MOVW,[HL+byte],AX */
                    {8'h58,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* MOVW,word[B],AX */
                    {8'h68,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* MOVW,word[C],AX */
                    {8'h78,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* MOVW,word[BC],AX */
                    {8'hb8,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* MOVW,[SP+byte],AX */
                    {8'h33,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* XCHW,AX,BC */
                    {8'h35,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* XCHW,AX,DE */
                    {8'h37,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* XCHW,AX,HL */
                    {8'he1,2'bxx} : dec_alu_transout_adrstage = 4'h1;  /* ONEB,,A */
                    {8'he0,2'bxx} : dec_alu_transout_adrstage = 4'h1;  /* ONEB,,X */
                    {8'he3,2'bxx} : dec_alu_transout_adrstage = 4'h1;  /* ONEB,,B */
                    {8'he2,2'bxx} : dec_alu_transout_adrstage = 4'h1;  /* ONEB,,C */
                    {8'he4,2'bxx} : dec_alu_transout_adrstage = 4'h1;  /* ONEB,,saddr */
                    {8'he5,2'bxx} : dec_alu_transout_adrstage = 4'h1;  /* ONEB,,!addr16 */
                    {8'he6,2'bxx} : dec_alu_transout_adrstage = 4'h1;  /* ONEW,,AX */
                    {8'he7,2'bxx} : dec_alu_transout_adrstage = 4'h1;  /* ONEW,,BC */
                    {8'h0a,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* ADD,saddr,#byte */
                    {8'h1a,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* ADDC,saddr,#byte */
                    {8'h2a,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SUB,saddr,#byte */
                    {8'h3a,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SUBC,saddr,#byte */
                    {8'h5a,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* AND,saddr,#byte */
                    {8'h6a,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* OR,saddr,#byte */
                    {8'h7a,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* XOR,saddr,#byte */
                    {8'ha4,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* INC,,saddr */
                    {8'ha0,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* INC,,!addr16 */
                    {8'hb4,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* DEC,,saddr */
                    {8'hb0,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* DEC,,!addr16 */
                    {8'ha6,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* INCW,,saddrp */
                    {8'ha2,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* INCW,,!addr16 */
                    {8'hb6,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* DECW,,saddrp */
                    {8'hb2,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* DECW,,!addr16 */
                    {8'hfe,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALL,,$!addr16 */
                    {8'hfe,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALL,,$!addr16 */
                    {8'hfd,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALL,,!addr16 */
                    {8'hfd,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALL,,!addr16 */
                    {8'hfc,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* CALL,,!!addr20 */
                    {8'hfc,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* CALL,,!!addr20 */
                    {8'hff,2'bx0} : dec_alu_transout_adrstage = 4'hd;  /* SOFT,,BREAK */
                    {8'hff,2'bx1} : dec_alu_transout_adrstage = 4'he;  /* SOFT,,BREAK */
                    {8'hc1,2'bxx} : dec_alu_transout_adrstage = 4'h3;  /* PUSH,,AX */
                    {8'hc3,2'bxx} : dec_alu_transout_adrstage = 4'h5;  /* PUSH,,BC */
                    {8'hc5,2'bxx} : dec_alu_transout_adrstage = 4'h7;  /* PUSH,,DE */
                    {8'hc7,2'bxx} : dec_alu_transout_adrstage = 4'h9;  /* PUSH,,HL */
                    default : dec_alu_transout_adrstage = 4'h0;
                endcase
            end
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_transout <= 4'h0;
        else if(cpuen) dec_alu_transout <= dec_alu_transout_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　転送命令系を専用化(MDRから入力+レジスタ)を専用化				*/
/*------------------------------------------------------------------------------*/
    output dec_alu_transin;
    reg    dec_alu_transin, dec_alu_transin_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1) begin
            dec_alu_transin_adrstage = 1'b0;
        end else if(ivack == 1'b1) begin
            dec_alu_transin_adrstage = 1'b0;
        end else if(skpack == 1'b1) begin
            dec_alu_transin_adrstage = 1'b0;
        end else begin
            if(ID_stage0 == 8'h61) begin
                casex ({ID_stage1,stage_adr})  
                    {8'hc9,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,A,[HL+B] */
                    {8'he9,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,A,[HL+C] */
                    {8'hb8,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,ES,saddr */
                    {8'ha8,2'bx0} : dec_alu_transin_adrstage = 1'b1;  /* XCH,A,saddr */
                    {8'hab,2'bx0} : dec_alu_transin_adrstage = 1'b1;  /* XCH,A,sfr */
                    {8'haa,2'bx0} : dec_alu_transin_adrstage = 1'b1;  /* XCH,A,!addr16 */
                    {8'hae,2'bx0} : dec_alu_transin_adrstage = 1'b1;  /* XCH,A,[DE] */
                    {8'haf,2'bx0} : dec_alu_transin_adrstage = 1'b1;  /* XCH,A,[DE+byte] */
                    {8'hac,2'bx0} : dec_alu_transin_adrstage = 1'b1;  /* XCH,A,[HL] */
                    {8'had,2'bx0} : dec_alu_transin_adrstage = 1'b1;  /* XCH,A,[HL+byte] */
                    {8'hb9,2'bx0} : dec_alu_transin_adrstage = 1'b1;  /* XCH,A,[HL+B] */
                    {8'ha9,2'bx0} : dec_alu_transin_adrstage = 1'b1;  /* XCH,A,[HL+C] */
                    {8'hbb,2'bx0} : dec_alu_transin_adrstage = 1'b1;  /* XCH,A,sfr */
                    {8'hba,2'bx0} : dec_alu_transin_adrstage = 1'b1;  /* XCH,A,!addr16 */
                    {8'hbe,2'bx0} : dec_alu_transin_adrstage = 1'b1;  /* XCH,A,[DE] */
                    {8'hbf,2'bx0} : dec_alu_transin_adrstage = 1'b1;  /* XCH,A,[DE+byte] */
                    {8'hbc,2'bx0} : dec_alu_transin_adrstage = 1'b1;  /* XCH,A,[HL] */
                    {8'hbd,2'bx0} : dec_alu_transin_adrstage = 1'b1;  /* XCH,A,[HL+byte] */
                    default : dec_alu_transin_adrstage = 1'b0;
                endcase
            end else begin
                casex ({ID_stage0,stage_adr})  
                    {8'h8d,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,A,saddr */
                    {8'h8e,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,A,sfr */
                    {8'h8f,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,A,!addr16 */
                    {8'h89,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,A,[DE] */
                    {8'h8a,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,A,[DE+byte] */
                    {8'h8b,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,A,[HL] */
                    {8'h8c,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,A,[HL+byte] */
                    {8'h09,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,A,word[B] */
                    {8'h29,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,A,word[C] */
                    {8'h49,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,A,word[BC] */
                    {8'h88,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,A,[SP+byte] */
                    {8'he8,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,B,saddr */
                    {8'he9,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,B,!addr16 */
                    {8'hf8,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,C,saddr */
                    {8'hf9,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,C,!addr16 */
                    {8'hd8,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,X,saddr */
                    {8'hd9,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOV,X,!addr16 */
                    {8'had,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,AX,saddrp */
                    {8'hae,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,AX,sfrp */
                    {8'haf,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,AX,!addr16 */
                    {8'ha9,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,AX,[DE] */
                    {8'haa,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,AX,[DE+byte] */
                    {8'hab,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,AX,[HL] */
                    {8'hac,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,AX,[HL+byte] */
                    {8'h59,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,AX,word[B] */
                    {8'h69,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,AX,word[C] */
                    {8'h79,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,AX,word[BC] */
                    {8'ha8,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,AX,[SP+byte] */
                    {8'hda,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,BC,saddrp */
                    {8'hdb,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,BC,!addr16 */
                    {8'hea,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,DE,saddrp */
                    {8'heb,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,DE,!addr16 */
                    {8'hfa,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,HL,saddrp */
                    {8'hfb,2'bxx} : dec_alu_transin_adrstage = 1'b1;  /* MOVW,HL,!addr16 */
                    default : dec_alu_transin_adrstage = 1'b0;
                endcase
            end
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_transin <= 1'b0;
        else if(cpuen) dec_alu_transin <= dec_alu_transin_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　シフト命令系を専用化(MDWへ出力+レジスタ) を専用化				*/
/*------------------------------------------------------------------------------*/

    output [4:0] dec_alu_bitsh ;
    reg    [4:0] dec_alu_bitsh ,dec_alu_bitsh_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1) begin
            dec_alu_bitsh_adrstage = 5'h0;
        end else if(ivack == 1'b1) begin
            dec_alu_bitsh_adrstage = 5'h0;
        end else if(skpack == 1'b1) begin
            dec_alu_bitsh_adrstage = 5'h0;
        end else begin
            if(ID_stage0 == 8'h61) begin                               /* ROR, ROL, RORC, ROLC, ROLWC  */
                casex ({ID_stage1,stage_adr})  
                    {8'hdb,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* ROR,A,1 */
                    {8'heb,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* ROL,A,1 */
                    {8'hfb,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* RORC,A,1 */
                    {8'hdc,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* ROLC,A,1 */
                    {8'hee,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* ROLWC,AX,1 */
                    {8'hfe,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* ROLWC,BC,1 */
                    default : dec_alu_bitsh_adrstage = 5'h0;
                endcase
            end else if(ID_stage0 == 8'h71) begin			/* MOV1, AND1, OR1, XOR1, SET1, CLR1, NOT1 */
                casex ({ID_stage1,stage_adr})  
                    {8'h04,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,saddr.0 */
                    {8'h14,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,saddr.1 */
                    {8'h24,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,saddr.2 */
                    {8'h34,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,saddr.3 */
                    {8'h44,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,saddr.4 */
                    {8'h54,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,saddr.5 */
                    {8'h64,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,saddr.6 */
                    {8'h74,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,saddr.7 */
                    {8'h0c,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,sfr.0 */
                    {8'h1c,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,sfr.1 */
                    {8'h2c,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,sfr.2 */
                    {8'h3c,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,sfr.3 */
                    {8'h4c,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,sfr.4 */
                    {8'h5c,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,sfr.5 */
                    {8'h6c,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,sfr.6 */
                    {8'h7c,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,sfr.7 */
                    {8'h8c,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* MOV1,CY,A.0 */
                    {8'h9c,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* MOV1,CY,A.1 */
                    {8'hac,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* MOV1,CY,A.2 */
                    {8'hbc,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* MOV1,CY,A.3 */
                    {8'hcc,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* MOV1,CY,A.4 */
                    {8'hdc,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* MOV1,CY,A.5 */
                    {8'hec,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* MOV1,CY,A.6 */
                    {8'hfc,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* MOV1,CY,A.7 */
                    {8'h84,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,[HL].0 */
                    {8'h94,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,[HL].1 */
                    {8'ha4,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,[HL].2 */
                    {8'hb4,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,[HL].3 */
                    {8'hc4,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,[HL].4 */
                    {8'hd4,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,[HL].5 */
                    {8'he4,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,[HL].6 */
                    {8'hf4,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* MOV1,CY,[HL].7 */
                    {8'h01,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,saddr.0,CY */
                    {8'h11,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,saddr.1,CY */
                    {8'h21,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,saddr.2,CY */
                    {8'h31,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,saddr.3,CY */
                    {8'h41,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,saddr.4,CY */
                    {8'h51,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,saddr.5,CY */
                    {8'h61,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,saddr.6,CY */
                    {8'h71,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,saddr.7,CY */
                    {8'h09,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,sfr.0,CY */
                    {8'h19,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,sfr.1,CY */
                    {8'h29,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,sfr.2,CY */
                    {8'h39,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,sfr.3,CY */
                    {8'h49,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,sfr.4,CY */
                    {8'h59,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,sfr.5,CY */
                    {8'h69,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,sfr.6,CY */
                    {8'h79,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,sfr.7,CY */
                    {8'h89,2'bxx} : dec_alu_bitsh_adrstage = 5'hf;   /* MOV1,A.0,CY */
                    {8'h99,2'bxx} : dec_alu_bitsh_adrstage = 5'hf;   /* MOV1,A.1,CY */
                    {8'ha9,2'bxx} : dec_alu_bitsh_adrstage = 5'hf;   /* MOV1,A.2,CY */
                    {8'hb9,2'bxx} : dec_alu_bitsh_adrstage = 5'hf;   /* MOV1,A.3,CY */
                    {8'hc9,2'bxx} : dec_alu_bitsh_adrstage = 5'hf;   /* MOV1,A.4,CY */
                    {8'hd9,2'bxx} : dec_alu_bitsh_adrstage = 5'hf;   /* MOV1,A.5,CY */
                    {8'he9,2'bxx} : dec_alu_bitsh_adrstage = 5'hf;   /* MOV1,A.6,CY */
                    {8'hf9,2'bxx} : dec_alu_bitsh_adrstage = 5'hf;   /* MOV1,A.7,CY */
                    {8'h81,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,[HL].0,CY */
                    {8'h91,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,[HL].1,CY */
                    {8'ha1,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,[HL].2,CY */
                    {8'hb1,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,[HL].3,CY */
                    {8'hc1,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,[HL].4,CY */
                    {8'hd1,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,[HL].5,CY */
                    {8'he1,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,[HL].6,CY */
                    {8'hf1,2'bx0} : dec_alu_bitsh_adrstage = 5'he;   /* MOV1,[HL].7,CY */
                    {8'h05,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,saddr.0 */
                    {8'h15,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,saddr.1 */
                    {8'h25,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,saddr.2 */
                    {8'h35,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,saddr.3 */
                    {8'h45,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,saddr.4 */
                    {8'h55,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,saddr.5 */
                    {8'h65,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,saddr.6 */
                    {8'h75,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,saddr.7 */
                    {8'h0d,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,sfr.0 */
                    {8'h1d,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,sfr.1 */
                    {8'h2d,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,sfr.2 */
                    {8'h3d,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,sfr.3 */
                    {8'h4d,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,sfr.4 */
                    {8'h5d,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,sfr.5 */
                    {8'h6d,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,sfr.6 */
                    {8'h7d,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,sfr.7 */
                    {8'h8d,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* AND1,CY,A.0 */
                    {8'h9d,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* AND1,CY,A.1 */
                    {8'had,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* AND1,CY,A.2 */
                    {8'hbd,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* AND1,CY,A.3 */
                    {8'hcd,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* AND1,CY,A.4 */
                    {8'hdd,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* AND1,CY,A.5 */
                    {8'hed,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* AND1,CY,A.6 */
                    {8'hfd,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* AND1,CY,A.7 */
                    {8'h85,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,[HL].0 */
                    {8'h95,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,[HL].1 */
                    {8'ha5,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,[HL].2 */
                    {8'hb5,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,[HL].3 */
                    {8'hc5,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,[HL].4 */
                    {8'hd5,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,[HL].5 */
                    {8'he5,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,[HL].6 */
                    {8'hf5,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* AND1,CY,[HL].7 */
                    {8'h06,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,saddr.0 */
                    {8'h16,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,saddr.1 */
                    {8'h26,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,saddr.2 */
                    {8'h36,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,saddr.3 */
                    {8'h46,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,saddr.4 */
                    {8'h56,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,saddr.5 */
                    {8'h66,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,saddr.6 */
                    {8'h76,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,saddr.7 */
                    {8'h0e,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,sfr.0 */
                    {8'h1e,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,sfr.1 */
                    {8'h2e,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,sfr.2 */
                    {8'h3e,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,sfr.3 */
                    {8'h4e,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,sfr.4 */
                    {8'h5e,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,sfr.5 */
                    {8'h6e,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,sfr.6 */
                    {8'h7e,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,sfr.7 */
                    {8'h8e,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* OR1,CY,A.0 */
                    {8'h9e,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* OR1,CY,A.1 */
                    {8'hae,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* OR1,CY,A.2 */
                    {8'hbe,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* OR1,CY,A.3 */
                    {8'hce,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* OR1,CY,A.4 */
                    {8'hde,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* OR1,CY,A.5 */
                    {8'hee,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* OR1,CY,A.6 */
                    {8'hfe,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* OR1,CY,A.7 */
                    {8'h86,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,[HL].0 */
                    {8'h96,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,[HL].1 */
                    {8'ha6,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,[HL].2 */
                    {8'hb6,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,[HL].3 */
                    {8'hc6,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,[HL].4 */
                    {8'hd6,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,[HL].5 */
                    {8'he6,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,[HL].6 */
                    {8'hf6,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* OR1,CY,[HL].7 */
                    {8'h07,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,saddr.0 */
                    {8'h17,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,saddr.1 */
                    {8'h27,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,saddr.2 */
                    {8'h37,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,saddr.3 */
                    {8'h47,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,saddr.4 */
                    {8'h57,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,saddr.5 */
                    {8'h67,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,saddr.6 */
                    {8'h77,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,saddr.7 */
                    {8'h0f,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,sfr.0 */
                    {8'h1f,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,sfr.1 */
                    {8'h2f,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,sfr.2 */
                    {8'h3f,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,sfr.3 */
                    {8'h4f,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,sfr.4 */
                    {8'h5f,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,sfr.5 */
                    {8'h6f,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,sfr.6 */
                    {8'h7f,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,sfr.7 */
                    {8'h8f,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* XOR1,CY,A.0 */
                    {8'h9f,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* XOR1,CY,A.1 */
                    {8'haf,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* XOR1,CY,A.2 */
                    {8'hbf,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* XOR1,CY,A.3 */
                    {8'hcf,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* XOR1,CY,A.4 */
                    {8'hdf,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* XOR1,CY,A.5 */
                    {8'hef,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* XOR1,CY,A.6 */
                    {8'hff,2'bxx} : dec_alu_bitsh_adrstage = 5'h9;  /* XOR1,CY,A.7 */
                    {8'h87,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,[HL].0 */
                    {8'h97,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,[HL].1 */
                    {8'ha7,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,[HL].2 */
                    {8'hb7,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,[HL].3 */
                    {8'hc7,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,[HL].4 */
                    {8'hd7,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,[HL].5 */
                    {8'he7,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,[HL].6 */
                    {8'hf7,2'bxx} : dec_alu_bitsh_adrstage = 5'h8;  /* XOR1,CY,[HL].7 */
                    {8'h02,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,saddr.0 */
                    {8'h12,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,saddr.1 */
                    {8'h22,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,saddr.2 */
                    {8'h32,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,saddr.3 */
                    {8'h42,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,saddr.4 */
                    {8'h52,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,saddr.5 */
                    {8'h62,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,saddr.6 */
                    {8'h72,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,saddr.7 */
                    {8'h0a,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,sfr.0 */
                    {8'h1a,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,sfr.1 */
                    {8'h2a,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,sfr.2 */
                    {8'h3a,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,sfr.3 */
                    {8'h4a,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,sfr.4 */
                    {8'h5a,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,sfr.5 */
                    {8'h6a,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,sfr.6 */
                    {8'h7a,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,sfr.7 */
                    {8'h8a,2'bxx} : dec_alu_bitsh_adrstage = 5'h1d;  /* SET1,,A.0 */
                    {8'h9a,2'bxx} : dec_alu_bitsh_adrstage = 5'h1d;  /* SET1,,A.1 */
                    {8'haa,2'bxx} : dec_alu_bitsh_adrstage = 5'h1d;  /* SET1,,A.2 */
                    {8'hba,2'bxx} : dec_alu_bitsh_adrstage = 5'h1d;  /* SET1,,A.3 */
                    {8'hca,2'bxx} : dec_alu_bitsh_adrstage = 5'h1d;  /* SET1,,A.4 */
                    {8'hda,2'bxx} : dec_alu_bitsh_adrstage = 5'h1d;  /* SET1,,A.5 */
                    {8'hea,2'bxx} : dec_alu_bitsh_adrstage = 5'h1d;  /* SET1,,A.6 */
                    {8'hfa,2'bxx} : dec_alu_bitsh_adrstage = 5'h1d;  /* SET1,,A.7 */
                    {8'h00,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,!addr16.0 */
                    {8'h10,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,!addr16.1 */
                    {8'h20,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,!addr16.2 */
                    {8'h30,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,!addr16.3 */
                    {8'h40,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,!addr16.4 */
                    {8'h50,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,!addr16.5 */
                    {8'h60,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,!addr16.6 */
                    {8'h70,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,!addr16.7 */
                    {8'h82,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,[HL].0 */
                    {8'h92,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,[HL].1 */
                    {8'ha2,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,[HL].2 */
                    {8'hb2,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,[HL].3 */
                    {8'hc2,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,[HL].4 */
                    {8'hd2,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,[HL].5 */
                    {8'he2,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,[HL].6 */
                    {8'hf2,2'bx0} : dec_alu_bitsh_adrstage = 5'hd;  /* SET1,,[HL].7 */
                    {8'h03,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,saddr.0 */
                    {8'h13,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,saddr.1 */
                    {8'h23,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,saddr.2 */
                    {8'h33,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,saddr.3 */
                    {8'h43,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,saddr.4 */
                    {8'h53,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,saddr.5 */
                    {8'h63,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,saddr.6 */
                    {8'h73,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,saddr.7 */
                    {8'h0b,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,sfr.0 */
                    {8'h1b,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,sfr.1 */
                    {8'h2b,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,sfr.2 */
                    {8'h3b,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,sfr.3 */
                    {8'h4b,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,sfr.4 */
                    {8'h5b,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,sfr.5 */
                    {8'h6b,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,sfr.6 */
                    {8'h7b,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,sfr.7 */
                    {8'h8b,2'bxx} : dec_alu_bitsh_adrstage = 5'h1c;  /* CLR1,,A.0 */
                    {8'h9b,2'bxx} : dec_alu_bitsh_adrstage = 5'h1c;  /* CLR1,,A.1 */
                    {8'hab,2'bxx} : dec_alu_bitsh_adrstage = 5'h1c;  /* CLR1,,A.2 */
                    {8'hbb,2'bxx} : dec_alu_bitsh_adrstage = 5'h1c;  /* CLR1,,A.3 */
                    {8'hcb,2'bxx} : dec_alu_bitsh_adrstage = 5'h1c;  /* CLR1,,A.4 */
                    {8'hdb,2'bxx} : dec_alu_bitsh_adrstage = 5'h1c;  /* CLR1,,A.5 */
                    {8'heb,2'bxx} : dec_alu_bitsh_adrstage = 5'h1c;  /* CLR1,,A.6 */
                    {8'hfb,2'bxx} : dec_alu_bitsh_adrstage = 5'h1c;  /* CLR1,,A.7 */
                    {8'h08,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,!addr16.0 */
                    {8'h18,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,!addr16.1 */
                    {8'h28,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,!addr16.2 */
                    {8'h38,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,!addr16.3 */
                    {8'h48,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,!addr16.4 */
                    {8'h58,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,!addr16.5 */
                    {8'h68,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,!addr16.6 */
                    {8'h78,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,!addr16.7 */
                    {8'h83,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,[HL].0 */
                    {8'h93,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,[HL].1 */
                    {8'ha3,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,[HL].2 */
                    {8'hb3,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,[HL].3 */
                    {8'hc3,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,[HL].4 */
                    {8'hd3,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,[HL].5 */
                    {8'he3,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,[HL].6 */
                    {8'hf3,2'bx0} : dec_alu_bitsh_adrstage = 5'hc;  /* CLR1,,[HL].7 */
                    {8'h80,2'bxx} : dec_alu_bitsh_adrstage = 5'h1;   /* SET1,,CY */
                    {8'h88,2'bxx} : dec_alu_bitsh_adrstage = 5'h1;   /* CLR1,,CY */
                    {8'hc0,2'bxx} : dec_alu_bitsh_adrstage = 5'h11;  /* NOT1,,CY */
                    {8'h90,2'bxx} : dec_alu_bitsh_adrstage = 5'h1;   /* SET1,,CY */
                    {8'ha0,2'bxx} : dec_alu_bitsh_adrstage = 5'h1;   /* SET1,,CY */
                    {8'hb0,2'bxx} : dec_alu_bitsh_adrstage = 5'h1;   /* SET1,,CY */
                    {8'hd0,2'bxx} : dec_alu_bitsh_adrstage = 5'h11;  /* NOT1,,CY */
                    {8'he0,2'bxx} : dec_alu_bitsh_adrstage = 5'h11;  /* NOT1,,CY */
                    {8'hf0,2'bxx} : dec_alu_bitsh_adrstage = 5'h11;  /* NOT1,,CY */
                    {8'h98,2'bxx} : dec_alu_bitsh_adrstage = 5'h1;   /* CLR1,,CY */
                    {8'ha8,2'bxx} : dec_alu_bitsh_adrstage = 5'h1;   /* CLR1,,CY */
                    {8'hb8,2'bxx} : dec_alu_bitsh_adrstage = 5'h1;   /* CLR1,,CY */
                    {8'hc8,2'bxx} : dec_alu_bitsh_adrstage = 5'h11;  /* NOT1,,CY */
                    {8'hd8,2'bxx} : dec_alu_bitsh_adrstage = 5'h11;  /* NOT1,,CY */
                    {8'he8,2'bxx} : dec_alu_bitsh_adrstage = 5'h11;  /* NOT1,,CY */
                    {8'hf8,2'bxx} : dec_alu_bitsh_adrstage = 5'h11;  /* NOT1,,CY */
                     default : dec_alu_bitsh_adrstage = 5'h0;
                endcase
            end else if(ID_stage0 == 8'h31) begin                      /* SHR, SHRW, SHL, SHLW, SAR, SARW, BT, BF, BTCLR */
                casex ({ID_stage1,stage_adr})  
                    {8'h0a,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHR,A,0 */
                    {8'h1a,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHR,A,1 */
                    {8'h2a,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHR,A,2 */
                    {8'h3a,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHR,A,3 */
                    {8'h4a,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHR,A,4 */
                    {8'h5a,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHR,A,5 */
                    {8'h6a,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHR,A,6 */
                    {8'h7a,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHR,A,7 */
                    {8'h0e,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHRW,AX,0 */
                    {8'h1e,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHRW,AX,1 */
                    {8'h2e,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHRW,AX,2 */
                    {8'h3e,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHRW,AX,3 */
                    {8'h4e,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHRW,AX,4 */
                    {8'h5e,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHRW,AX,5 */
                    {8'h6e,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHRW,AX,6 */
                    {8'h7e,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHRW,AX,7 */
                    {8'h8e,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHRW,AX,8 */
                    {8'h9e,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHRW,AX,9 */
                    {8'hae,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHRW,AX,10 */
                    {8'hbe,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHRW,AX,11 */
                    {8'hce,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHRW,AX,12 */
                    {8'hde,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHRW,AX,13 */
                    {8'hee,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHRW,AX,14 */
                    {8'hfe,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHRW,AX,15 */
                    {8'h09,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHL,A,0 */
                    {8'h19,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHL,A,1 */
                    {8'h29,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHL,A,2 */
                    {8'h39,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHL,A,3 */
                    {8'h49,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHL,A,4 */
                    {8'h59,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHL,A,5 */
                    {8'h69,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHL,A,6 */
                    {8'h79,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHL,A,7 */
                    {8'h08,2'bxx} : dec_alu_bitsh_adrstage = 5'h4;  /* SHL,B,0 */
                    {8'h18,2'bxx} : dec_alu_bitsh_adrstage = 5'h4;  /* SHL,B,1 */
                    {8'h28,2'bxx} : dec_alu_bitsh_adrstage = 5'h4;  /* SHL,B,2 */
                    {8'h38,2'bxx} : dec_alu_bitsh_adrstage = 5'h4;  /* SHL,B,3 */
                    {8'h48,2'bxx} : dec_alu_bitsh_adrstage = 5'h4;  /* SHL,B,4 */
                    {8'h58,2'bxx} : dec_alu_bitsh_adrstage = 5'h4;  /* SHL,B,5 */
                    {8'h68,2'bxx} : dec_alu_bitsh_adrstage = 5'h4;  /* SHL,B,6 */
                    {8'h78,2'bxx} : dec_alu_bitsh_adrstage = 5'h4;  /* SHL,B,7 */
                    {8'h07,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHL,C,0 */
                    {8'h17,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHL,C,1 */
                    {8'h27,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHL,C,2 */
                    {8'h37,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHL,C,3 */
                    {8'h47,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHL,C,4 */
                    {8'h57,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHL,C,5 */
                    {8'h67,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHL,C,6 */
                    {8'h77,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHL,C,7 */
                    {8'h0d,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHLW,AX,0 */
                    {8'h1d,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHLW,AX,1 */
                    {8'h2d,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHLW,AX,2 */
                    {8'h3d,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHLW,AX,3 */
                    {8'h4d,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHLW,AX,4 */
                    {8'h5d,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHLW,AX,5 */
                    {8'h6d,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHLW,AX,6 */
                    {8'h7d,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHLW,AX,7 */
                    {8'h8d,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHLW,AX,8 */
                    {8'h9d,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHLW,AX,9 */
                    {8'had,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHLW,AX,10 */
                    {8'hbd,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHLW,AX,11 */
                    {8'hcd,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHLW,AX,12 */
                    {8'hdd,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHLW,AX,13 */
                    {8'hed,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHLW,AX,14 */
                    {8'hfd,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SHLW,AX,15 */
                    {8'h0c,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHLW,BC,0 */
                    {8'h1c,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHLW,BC,1 */
                    {8'h2c,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHLW,BC,2 */
                    {8'h3c,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHLW,BC,3 */
                    {8'h4c,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHLW,BC,4 */
                    {8'h5c,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHLW,BC,5 */
                    {8'h6c,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHLW,BC,6 */
                    {8'h7c,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHLW,BC,7 */
                    {8'h8c,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHLW,BC,8 */
                    {8'h9c,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHLW,BC,9 */
                    {8'hac,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHLW,BC,10 */
                    {8'hbc,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHLW,BC,11 */
                    {8'hcc,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHLW,BC,12 */
                    {8'hdc,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHLW,BC,13 */
                    {8'hec,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHLW,BC,14 */
                    {8'hfc,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHLW,BC,15 */
                    {8'h0b,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SAR,A,0 */
                    {8'h1b,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SAR,A,1 */
                    {8'h2b,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SAR,A,2 */
                    {8'h3b,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SAR,A,3 */
                    {8'h4b,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SAR,A,4 */
                    {8'h5b,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SAR,A,5 */
                    {8'h6b,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SAR,A,6 */
                    {8'h7b,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SAR,A,7 */
                    {8'h0f,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SARW,AX,0 */
                    {8'h1f,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SARW,AX,1 */
                    {8'h2f,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SARW,AX,2 */
                    {8'h3f,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SARW,AX,3 */
                    {8'h4f,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SARW,AX,4 */
                    {8'h5f,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SARW,AX,5 */
                    {8'h6f,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SARW,AX,6 */
                    {8'h7f,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SARW,AX,7 */
                    {8'h8f,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SARW,AX,8 */
                    {8'h9f,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SARW,AX,9 */
                    {8'haf,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SARW,AX,10 */
                    {8'hbf,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SARW,AX,11 */
                    {8'hcf,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SARW,AX,12 */
                    {8'hdf,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SARW,AX,13 */
                    {8'hef,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SARW,AX,14 */
                    {8'hff,2'bxx} : dec_alu_bitsh_adrstage = 5'h3;  /* SARW,AX,15 */
                    {8'h02,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,saddr.0,$addr8 */
                    {8'h12,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,saddr.1,$addr8 */
                    {8'h22,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,saddr.2,$addr8 */
                    {8'h32,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,saddr.3,$addr8 */
                    {8'h42,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,saddr.4,$addr8 */
                    {8'h52,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,saddr.5,$addr8 */
                    {8'h62,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,saddr.6,$addr8 */
                    {8'h72,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,saddr.7,$addr8 */
                    {8'h82,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,sfr.0,$addr8 */
                    {8'h92,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,sfr.1,$addr8 */
                    {8'ha2,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,sfr.2,$addr8 */
                    {8'hb2,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,sfr.3,$addr8 */
                    {8'hc2,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,sfr.4,$addr8 */
                    {8'hd2,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,sfr.5,$addr8 */
                    {8'he2,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,sfr.6,$addr8 */
                    {8'hf2,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,sfr.7,$addr8 */
                    {8'h03,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BT,A.0,$addr8 */
                    {8'h13,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BT,A.1,$addr8 */
                    {8'h23,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BT,A.2,$addr8 */
                    {8'h33,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BT,A.3,$addr8 */
                    {8'h43,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BT,A.4,$addr8 */
                    {8'h53,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BT,A.5,$addr8 */
                    {8'h63,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BT,A.6,$addr8 */
                    {8'h73,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BT,A.7,$addr8 */
                    {8'h83,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,[HL].0,$addr8 */
                    {8'h93,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,[HL].1,$addr8 */
                    {8'ha3,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,[HL].2,$addr8 */
                    {8'hb3,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,[HL].3,$addr8 */
                    {8'hc3,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,[HL].4,$addr8 */
                    {8'hd3,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,[HL].5,$addr8 */
                    {8'he3,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,[HL].6,$addr8 */
                    {8'hf3,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BT,[HL].7,$addr8 */
                    {8'h04,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,saddr.0,$addr8 */
                    {8'h14,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,saddr.1,$addr8 */
                    {8'h24,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,saddr.2,$addr8 */
                    {8'h34,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,saddr.3,$addr8 */
                    {8'h44,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,saddr.4,$addr8 */
                    {8'h54,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,saddr.5,$addr8 */
                    {8'h64,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,saddr.6,$addr8 */
                    {8'h74,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,saddr.7,$addr8 */
                    {8'h84,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,sfr.0,$addr8 */
                    {8'h94,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,sfr.1,$addr8 */
                    {8'ha4,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,sfr.2,$addr8 */
                    {8'hb4,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,sfr.3,$addr8 */
                    {8'hc4,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,sfr.4,$addr8 */
                    {8'hd4,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,sfr.5,$addr8 */
                    {8'he4,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,sfr.6,$addr8 */
                    {8'hf4,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,sfr.7,$addr8 */
                    {8'h05,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BF,A.0,$addr8 */
                    {8'h15,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BF,A.1,$addr8 */
                    {8'h25,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BF,A.2,$addr8 */
                    {8'h35,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BF,A.3,$addr8 */
                    {8'h45,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BF,A.4,$addr8 */
                    {8'h55,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BF,A.5,$addr8 */
                    {8'h65,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BF,A.6,$addr8 */
                    {8'h75,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BF,A.7,$addr8 */
                    {8'h85,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,[HL].0,$addr8 */
                    {8'h95,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,[HL].1,$addr8 */
                    {8'ha5,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,[HL].2,$addr8 */
                    {8'hb5,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,[HL].3,$addr8 */
                    {8'hc5,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,[HL].4,$addr8 */
                    {8'hd5,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,[HL].5,$addr8 */
                    {8'he5,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,[HL].6,$addr8 */
                    {8'hf5,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BF,[HL].7,$addr8 */
                    {8'h00,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,saddr.0,$addr8 */
                    {8'h00,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,saddr.0,$addr8 */
                    {8'h10,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,saddr.1,$addr8 */
                    {8'h10,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,saddr.1,$addr8 */
                    {8'h20,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,saddr.2,$addr8 */
                    {8'h20,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,saddr.2,$addr8 */
                    {8'h30,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,saddr.3,$addr8 */
                    {8'h30,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,saddr.3,$addr8 */
                    {8'h40,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,saddr.4,$addr8 */
                    {8'h40,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,saddr.4,$addr8 */
                    {8'h50,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,saddr.5,$addr8 */
                    {8'h50,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,saddr.5,$addr8 */
                    {8'h60,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,saddr.6,$addr8 */
                    {8'h60,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,saddr.6,$addr8 */
                    {8'h70,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,saddr.7,$addr8 */
                    {8'h70,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,saddr.7,$addr8 */
                    {8'h80,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,sfr.0,$addr8 */
                    {8'h80,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,sfr.0,$addr8 */
                    {8'h90,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,sfr.1,$addr8 */
                    {8'h90,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,sfr.1,$addr8 */
                    {8'ha0,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,sfr.2,$addr8 */
                    {8'ha0,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,sfr.2,$addr8 */
                    {8'hb0,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,sfr.3,$addr8 */
                    {8'hb0,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,sfr.3,$addr8 */
                    {8'hc0,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,sfr.4,$addr8 */
                    {8'hc0,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,sfr.4,$addr8 */
                    {8'hd0,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,sfr.5,$addr8 */
                    {8'hd0,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,sfr.5,$addr8 */
                    {8'he0,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,sfr.6,$addr8 */
                    {8'he0,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,sfr.6,$addr8 */
                    {8'hf0,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,sfr.7,$addr8 */
                    {8'hf0,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,sfr.7,$addr8 */
                    {8'h01,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BTCLR,A.0,$addr8 */
                    {8'h01,2'b10} : dec_alu_bitsh_adrstage = 5'h1c;  /* BTCLR,A.0,$addr8 */
                    {8'h11,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BTCLR,A.1,$addr8 */
                    {8'h11,2'b10} : dec_alu_bitsh_adrstage = 5'h1c;  /* BTCLR,A.1,$addr8 */
                    {8'h21,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BTCLR,A.2,$addr8 */
                    {8'h21,2'b10} : dec_alu_bitsh_adrstage = 5'h1c;  /* BTCLR,A.2,$addr8 */
                    {8'h31,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BTCLR,A.3,$addr8 */
                    {8'h31,2'b10} : dec_alu_bitsh_adrstage = 5'h1c;  /* BTCLR,A.3,$addr8 */
                    {8'h41,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BTCLR,A.4,$addr8 */
                    {8'h41,2'b10} : dec_alu_bitsh_adrstage = 5'h1c;  /* BTCLR,A.4,$addr8 */
                    {8'h51,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BTCLR,A.5,$addr8 */
                    {8'h51,2'b10} : dec_alu_bitsh_adrstage = 5'h1c;  /* BTCLR,A.5,$addr8 */
                    {8'h61,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BTCLR,A.6,$addr8 */
                    {8'h61,2'b10} : dec_alu_bitsh_adrstage = 5'h1c;  /* BTCLR,A.6,$addr8 */
                    {8'h71,2'b00} : dec_alu_bitsh_adrstage = 5'h19;  /* BTCLR,A.7,$addr8 */
                    {8'h71,2'b10} : dec_alu_bitsh_adrstage = 5'h1c;  /* BTCLR,A.7,$addr8 */
                    {8'h81,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,[HL].0,$addr8 */
                    {8'h81,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,[HL].0,$addr8 */
                    {8'h91,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,[HL].1,$addr8 */
                    {8'h91,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,[HL].1,$addr8 */
                    {8'ha1,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,[HL].2,$addr8 */
                    {8'ha1,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,[HL].2,$addr8 */
                    {8'hb1,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,[HL].3,$addr8 */
                    {8'hb1,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,[HL].3,$addr8 */
                    {8'hc1,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,[HL].4,$addr8 */
                    {8'hc1,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,[HL].4,$addr8 */
                    {8'hd1,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,[HL].5,$addr8 */
                    {8'hd1,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,[HL].5,$addr8 */
                    {8'he1,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,[HL].6,$addr8 */
                    {8'he1,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,[HL].6,$addr8 */
                    {8'hf1,2'b00} : dec_alu_bitsh_adrstage = 5'h18;  /* BTCLR,[HL].7,$addr8 */
                    {8'hf1,2'b01} : dec_alu_bitsh_adrstage = 5'hc;  /* BTCLR,[HL].7,$addr8 */
                    {8'h8a,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHR,A,0 */
                    {8'h9a,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHR,A,1 */
                    {8'haa,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHR,A,2 */
                    {8'hba,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHR,A,3 */
                    {8'hca,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHR,A,4 */
                    {8'hda,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHR,A,5 */
                    {8'hea,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHR,A,6 */
                    {8'hfa,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHR,A,7 */
                    {8'h89,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHL,A,0 */
                    {8'h99,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHL,A,1 */
                    {8'ha9,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHL,A,2 */
                    {8'hb9,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHL,A,3 */
                    {8'hc9,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHL,A,4 */
                    {8'hd9,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHL,A,5 */
                    {8'he9,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHL,A,6 */
                    {8'hf9,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SHL,A,7 */
                    {8'h88,2'bxx} : dec_alu_bitsh_adrstage = 5'h4;  /* SHL,B,0 */
                    {8'h98,2'bxx} : dec_alu_bitsh_adrstage = 5'h4;  /* SHL,B,1 */
                    {8'ha8,2'bxx} : dec_alu_bitsh_adrstage = 5'h4;  /* SHL,B,2 */
                    {8'hb8,2'bxx} : dec_alu_bitsh_adrstage = 5'h4;  /* SHL,B,3 */
                    {8'hc8,2'bxx} : dec_alu_bitsh_adrstage = 5'h4;  /* SHL,B,4 */
                    {8'hd8,2'bxx} : dec_alu_bitsh_adrstage = 5'h4;  /* SHL,B,5 */
                    {8'he8,2'bxx} : dec_alu_bitsh_adrstage = 5'h4;  /* SHL,B,6 */
                    {8'hf8,2'bxx} : dec_alu_bitsh_adrstage = 5'h4;  /* SHL,B,7 */
                    {8'h87,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHL,C,0 */
                    {8'h97,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHL,C,1 */
                    {8'ha7,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHL,C,2 */
                    {8'hb7,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHL,C,3 */
                    {8'hc7,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHL,C,4 */
                    {8'hd7,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHL,C,5 */
                    {8'he7,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHL,C,6 */
                    {8'hf7,2'bxx} : dec_alu_bitsh_adrstage = 5'h5;  /* SHL,C,7 */
                    {8'h8b,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SAR,A,0 */
                    {8'h9b,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SAR,A,1 */
                    {8'hab,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SAR,A,2 */
                    {8'hbb,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SAR,A,3 */
                    {8'hcb,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SAR,A,4 */
                    {8'hdb,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SAR,A,5 */
                    {8'heb,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SAR,A,6 */
                    {8'hfb,2'bxx} : dec_alu_bitsh_adrstage = 5'h2;  /* SAR,A,7 */
                    default : dec_alu_bitsh_adrstage = 5'h0;
                endcase
            end else begin
                    dec_alu_bitsh_adrstage = 5'h0;
            end
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_bitsh <= 5'h0;
        else if(cpuen) dec_alu_bitsh <= dec_alu_bitsh_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　BITEN専用のデコーダ出力生成						*/
/*------------------------------------------------------------------------------*/

    output dec_alu_biten ;
    reg    dec_alu_biten ,dec_alu_biten_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1) begin
            dec_alu_biten_adrstage = 1'b0;
        end else if(ivack == 1'b1) begin
            dec_alu_biten_adrstage = 1'b0;
        end else if(skpack == 1'b1) begin
            dec_alu_biten_adrstage = 1'b0;
        end else begin
            if(ID_stage0 == 8'h71) begin			/* MOV1, AND1, OR1, XOR1, SET1, CLR1, NOT1 */
                casex ({ID_stage1,stage_adr})  
                    {8'h01,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,saddr.0,CY */
                    {8'h11,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,saddr.1,CY */
                    {8'h21,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,saddr.2,CY */
                    {8'h31,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,saddr.3,CY */
                    {8'h41,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,saddr.4,CY */
                    {8'h51,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,saddr.5,CY */
                    {8'h61,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,saddr.6,CY */
                    {8'h71,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,saddr.7,CY */
                    {8'h09,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,sfr.0,CY */
                    {8'h19,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,sfr.1,CY */
                    {8'h29,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,sfr.2,CY */
                    {8'h39,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,sfr.3,CY */
                    {8'h49,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,sfr.4,CY */
                    {8'h59,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,sfr.5,CY */
                    {8'h69,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,sfr.6,CY */
                    {8'h79,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,sfr.7,CY */
                    {8'h81,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,[HL].0,CY */
                    {8'h91,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,[HL].1,CY */
                    {8'ha1,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,[HL].2,CY */
                    {8'hb1,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,[HL].3,CY */
                    {8'hc1,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,[HL].4,CY */
                    {8'hd1,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,[HL].5,CY */
                    {8'he1,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,[HL].6,CY */
                    {8'hf1,2'bx1} : dec_alu_biten_adrstage = 1'b1;   /* MOV1,[HL].7,CY */
                    {8'h02,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,saddr.0 */
                    {8'h12,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,saddr.1 */
                    {8'h22,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,saddr.2 */
                    {8'h32,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,saddr.3 */
                    {8'h42,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,saddr.4 */
                    {8'h52,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,saddr.5 */
                    {8'h62,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,saddr.6 */
                    {8'h72,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,saddr.7 */
                    {8'h0a,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,sfr.0 */
                    {8'h1a,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,sfr.1 */
                    {8'h2a,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,sfr.2 */
                    {8'h3a,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,sfr.3 */
                    {8'h4a,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,sfr.4 */
                    {8'h5a,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,sfr.5 */
                    {8'h6a,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,sfr.6 */
                    {8'h7a,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,sfr.7 */
                    {8'h00,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,!addr16.0 */
                    {8'h10,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,!addr16.1 */
                    {8'h20,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,!addr16.2 */
                    {8'h30,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,!addr16.3 */
                    {8'h40,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,!addr16.4 */
                    {8'h50,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,!addr16.5 */
                    {8'h60,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,!addr16.6 */
                    {8'h70,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,!addr16.7 */
                    {8'h82,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,[HL].0 */
                    {8'h92,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,[HL].1 */
                    {8'ha2,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,[HL].2 */
                    {8'hb2,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,[HL].3 */
                    {8'hc2,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,[HL].4 */
                    {8'hd2,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,[HL].5 */
                    {8'he2,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,[HL].6 */
                    {8'hf2,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* SET1,,[HL].7 */
                    {8'h03,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,saddr.0 */
                    {8'h13,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,saddr.1 */
                    {8'h23,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,saddr.2 */
                    {8'h33,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,saddr.3 */
                    {8'h43,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,saddr.4 */
                    {8'h53,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,saddr.5 */
                    {8'h63,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,saddr.6 */
                    {8'h73,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,saddr.7 */
                    {8'h0b,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,sfr.0 */
                    {8'h1b,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,sfr.1 */
                    {8'h2b,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,sfr.2 */
                    {8'h3b,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,sfr.3 */
                    {8'h4b,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,sfr.4 */
                    {8'h5b,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,sfr.5 */
                    {8'h6b,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,sfr.6 */
                    {8'h7b,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,sfr.7 */
                    {8'h08,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,!addr16.0 */
                    {8'h18,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,!addr16.1 */
                    {8'h28,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,!addr16.2 */
                    {8'h38,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,!addr16.3 */
                    {8'h48,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,!addr16.4 */
                    {8'h58,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,!addr16.5 */
                    {8'h68,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,!addr16.6 */
                    {8'h78,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,!addr16.7 */
                    {8'h83,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,[HL].0 */
                    {8'h93,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,[HL].1 */
                    {8'ha3,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,[HL].2 */
                    {8'hb3,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,[HL].3 */
                    {8'hc3,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,[HL].4 */
                    {8'hd3,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,[HL].5 */
                    {8'he3,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,[HL].6 */
                    {8'hf3,2'bx1} : dec_alu_biten_adrstage = 1'b1;  /* CLR1,,[HL].7 */
                     default : dec_alu_biten_adrstage = 1'b0;
                endcase
            end else if(ID_stage0 == 8'h31) begin                      /* SHR, SHRW, SHL, SHLW, SAR, SARW, BT, BF, BTCLR */
                casex ({ID_stage1,stage_adr})  
                    {8'h00,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                    {8'h10,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                    {8'h20,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                    {8'h30,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                    {8'h40,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                    {8'h50,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                    {8'h60,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                    {8'h70,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                    {8'h80,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                    {8'h90,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                    {8'ha0,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                    {8'hb0,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                    {8'hc0,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                    {8'hd0,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                    {8'he0,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                    {8'hf0,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                    {8'h81,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                    {8'h91,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                    {8'ha1,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                    {8'hb1,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                    {8'hc1,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                    {8'hd1,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                    {8'he1,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                    {8'hf1,2'b10} : dec_alu_biten_adrstage = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                    default : dec_alu_biten_adrstage = 1'b0;
                endcase
            end else begin
                    dec_alu_biten_adrstage = 1'b0;
            end
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_alu_biten <= 1'b0;
        else if(cpuen) dec_alu_biten <= dec_alu_biten_adrstage;
    end

    output dec_word_access;
    reg    dec_word_access, dec_word_access_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1) begin
            dec_word_access_adrstage = 1'h0;
        end else if(ivack == 1'b1) begin
            casex ({stage_adr})  
                {2'b00} : dec_word_access_adrstage = 1'b1;  /* Interrupt */
                {2'b01} : dec_word_access_adrstage = 1'b1;  /* Interrupt */
                default : dec_word_access_adrstage = 1'h0;
            endcase
        end else if(skpack == 1'b1) begin
            dec_word_access_adrstage = 1'h0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h30,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,AX,#word */
                {8'h32,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,BC,#word */
                {8'h34,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,DE,#word */
                {8'h36,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,HL,#word */
                {8'hc9,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,saddrp,#word */
                {8'hcb,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,sfrp,#word */
                {8'had,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,AX,saddrp */
                {8'hbd,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,saddrp,AX */
                {8'hae,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,AX,sfrp */
                {8'hbe,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,sfrp,AX */
                {8'h13,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,AX,BC */
                {8'h12,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,BC,AX */
                {8'h15,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,AX,DE */
                {8'h14,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,DE,AX */
                {8'h17,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,AX,HL */
                {8'h16,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,HL,AX */
                {8'haf,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,AX,!addr16 */
                {8'hbf,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,!addr16,AX */
                {8'ha9,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,AX,[DE] */
                {8'haa,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,AX,[DE+byte] */
                {8'hb9,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,[DE],AX */
                {8'hba,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,[DE+byte],AX */
                {8'hab,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,AX,[HL] */
                {8'hac,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,AX,[HL+byte] */
                {8'hbb,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,[HL],AX */
                {8'hbc,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,[HL+byte],AX */
                {8'h59,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,AX,word[B] */
                {8'h58,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,word[B],AX */
                {8'h69,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,AX,word[C] */
                {8'h68,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,word[C],AX */
                {8'h79,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,AX,word[BC] */
                {8'h78,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,word[BC],AX */
                {8'ha8,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,AX,[SP+byte] */
                {8'hb8,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,[SP+byte],AX */
                {8'hda,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,BC,saddrp */
                {8'hdb,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,BC,!addr16 */
                {8'hea,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,DE,saddrp */
                {8'heb,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,DE,!addr16 */
                {8'hfa,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,HL,saddrp */
                {8'hfb,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MOVW,HL,!addr16 */
                {8'h33,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* XCHW,AX,BC */
                {8'h35,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* XCHW,AX,DE */
                {8'h37,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* XCHW,AX,HL */
                {8'he6,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* ONEW,,AX */
                {8'he7,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* ONEW,,BC */
                {8'hf6,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* CLRW,,AX */
                {8'hf7,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* CLRW,,BC */
                {8'h04,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* ADDW,AX,#word */
                {8'h01,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* ADDW,AX,AX */
                {8'h03,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* ADDW,AX,BC */
                {8'h05,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* ADDW,AX,DE */
                {8'h07,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* ADDW,AX,HL */
                {8'h06,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* ADDW,AX,saddrp */
                {8'h02,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* ADDW,AX,!addr16 */
                {8'h61,8'h09,2'bxx} : dec_word_access_adrstage = 1'b1;  /* ADDW,AX,[HL+byte] */
                {8'h24,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SUBW,AX,#word */
                {8'h21,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SUBW,AX,AX */
                {8'h23,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SUBW,AX,BC */
                {8'h25,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SUBW,AX,DE */
                {8'h27,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SUBW,AX,HL */
                {8'h26,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SUBW,AX,saddrp */
                {8'h22,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SUBW,AX,!addr16 */
                {8'h61,8'h29,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SUBW,AX,[HL+byte] */
                {8'h44,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* CMPW,AX,#word */
                {8'h43,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* CMPW,AX,BC */
                {8'h45,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* CMPW,AX,DE */
                {8'h47,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* CMPW,AX,HL */
                {8'h46,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* CMPW,AX,saddrp */
                {8'h42,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* CMPW,AX,!addr16 */
                {8'h61,8'h49,2'bxx} : dec_word_access_adrstage = 1'b1;  /* CMPW,AX,[HL+byte] */
                {8'hd6,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* MULU,,X */
                {8'ha1,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* INCW,,AX */
                {8'ha3,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* INCW,,BC */
                {8'ha5,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* INCW,,DE */
                {8'ha7,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* INCW,,HL */
                {8'ha6,8'hxx,2'bx0} : dec_word_access_adrstage = 1'b1;  /* INCW,,saddrp */
                {8'ha6,8'hxx,2'bx1} : dec_word_access_adrstage = 1'b1;  /* INCW,,saddrp */
                {8'ha2,8'hxx,2'bx0} : dec_word_access_adrstage = 1'b1;  /* INCW,,!addr16 */
                {8'ha2,8'hxx,2'bx1} : dec_word_access_adrstage = 1'b1;  /* INCW,,!addr16 */
                {8'h61,8'h79,2'bx0} : dec_word_access_adrstage = 1'b1;  /* INCW,,[HL+byte] */
                {8'h61,8'h79,2'bx1} : dec_word_access_adrstage = 1'b1;  /* INCW,,[HL+byte] */
                {8'hb1,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* DECW,,AX */
                {8'hb3,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* DECW,,BC */
                {8'hb5,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* DECW,,DE */
                {8'hb7,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* DECW,,HL */
                {8'hb6,8'hxx,2'bx0} : dec_word_access_adrstage = 1'b1;  /* DECW,,saddrp */
                {8'hb6,8'hxx,2'bx1} : dec_word_access_adrstage = 1'b1;  /* DECW,,saddrp */
                {8'hb2,8'hxx,2'bx0} : dec_word_access_adrstage = 1'b1;  /* DECW,,!addr16 */
                {8'hb2,8'hxx,2'bx1} : dec_word_access_adrstage = 1'b1;  /* DECW,,!addr16 */
                {8'h61,8'h89,2'bx0} : dec_word_access_adrstage = 1'b1;  /* DECW,,[HL+byte] */
                {8'h61,8'h89,2'bx1} : dec_word_access_adrstage = 1'b1;  /* DECW,,[HL+byte] */
                {8'h31,8'h0e,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHRW,AX,0 */
                {8'h31,8'h1e,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHRW,AX,1 */
                {8'h31,8'h2e,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHRW,AX,2 */
                {8'h31,8'h3e,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHRW,AX,3 */
                {8'h31,8'h4e,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHRW,AX,4 */
                {8'h31,8'h5e,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHRW,AX,5 */
                {8'h31,8'h6e,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHRW,AX,6 */
                {8'h31,8'h7e,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHRW,AX,7 */
                {8'h31,8'h8e,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHRW,AX,8 */
                {8'h31,8'h9e,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHRW,AX,9 */
                {8'h31,8'hae,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHRW,AX,10 */
                {8'h31,8'hbe,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHRW,AX,11 */
                {8'h31,8'hce,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHRW,AX,12 */
                {8'h31,8'hde,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHRW,AX,13 */
                {8'h31,8'hee,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHRW,AX,14 */
                {8'h31,8'hfe,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHRW,AX,15 */
                {8'h31,8'h0d,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,AX,0 */
                {8'h31,8'h1d,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,AX,1 */
                {8'h31,8'h2d,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,AX,2 */
                {8'h31,8'h3d,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,AX,3 */
                {8'h31,8'h4d,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,AX,4 */
                {8'h31,8'h5d,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,AX,5 */
                {8'h31,8'h6d,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,AX,6 */
                {8'h31,8'h7d,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,AX,7 */
                {8'h31,8'h8d,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,AX,8 */
                {8'h31,8'h9d,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,AX,9 */
                {8'h31,8'had,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,AX,10 */
                {8'h31,8'hbd,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,AX,11 */
                {8'h31,8'hcd,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,AX,12 */
                {8'h31,8'hdd,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,AX,13 */
                {8'h31,8'hed,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,AX,14 */
                {8'h31,8'hfd,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,AX,15 */
                {8'h31,8'h0c,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,BC,0 */
                {8'h31,8'h1c,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,BC,1 */
                {8'h31,8'h2c,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,BC,2 */
                {8'h31,8'h3c,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,BC,3 */
                {8'h31,8'h4c,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,BC,4 */
                {8'h31,8'h5c,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,BC,5 */
                {8'h31,8'h6c,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,BC,6 */
                {8'h31,8'h7c,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,BC,7 */
                {8'h31,8'h8c,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,BC,8 */
                {8'h31,8'h9c,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,BC,9 */
                {8'h31,8'hac,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,BC,10 */
                {8'h31,8'hbc,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,BC,11 */
                {8'h31,8'hcc,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,BC,12 */
                {8'h31,8'hdc,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,BC,13 */
                {8'h31,8'hec,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,BC,14 */
                {8'h31,8'hfc,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SHLW,BC,15 */
                {8'h31,8'h0f,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SARW,AX,0 */
                {8'h31,8'h1f,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SARW,AX,1 */
                {8'h31,8'h2f,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SARW,AX,2 */
                {8'h31,8'h3f,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SARW,AX,3 */
                {8'h31,8'h4f,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SARW,AX,4 */
                {8'h31,8'h5f,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SARW,AX,5 */
                {8'h31,8'h6f,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SARW,AX,6 */
                {8'h31,8'h7f,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SARW,AX,7 */
                {8'h31,8'h8f,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SARW,AX,8 */
                {8'h31,8'h9f,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SARW,AX,9 */
                {8'h31,8'haf,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SARW,AX,10 */
                {8'h31,8'hbf,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SARW,AX,11 */
                {8'h31,8'hcf,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SARW,AX,12 */
                {8'h31,8'hdf,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SARW,AX,13 */
                {8'h31,8'hef,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SARW,AX,14 */
                {8'h31,8'hff,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SARW,AX,15 */
                {8'h61,8'hee,2'bxx} : dec_word_access_adrstage = 1'b1;  /* ROLWC,AX,1 */
                {8'h61,8'hfe,2'bxx} : dec_word_access_adrstage = 1'b1;  /* ROLWC,BC,1 */
                {8'h61,8'hca,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALL,,AX */
                {8'h61,8'hda,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALL,,BC */
                {8'h61,8'hea,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALL,,DE */
                {8'h61,8'hfa,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALL,,HL */
                {8'hfe,8'hxx,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALL,,$!addr16 */
                {8'hfd,8'hxx,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALL,,!addr16 */
                {8'hfc,8'hxx,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALL,,!!addr20 */
                {8'h61,8'h84,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[0080h] */
                {8'h61,8'h94,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[0082h] */
                {8'h61,8'ha4,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[0084h] */
                {8'h61,8'hb4,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[0086h] */
                {8'h61,8'hc4,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[0088h] */
                {8'h61,8'hd4,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[008Ah] */
                {8'h61,8'he4,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[008Ch] */
                {8'h61,8'hf4,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[008Eh] */
                {8'h61,8'h85,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[0090h] */
                {8'h61,8'h95,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[0092h] */
                {8'h61,8'ha5,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[0094h] */
                {8'h61,8'hb5,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[0096h] */
                {8'h61,8'hc5,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[0098h] */
                {8'h61,8'hd5,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[009Ah] */
                {8'h61,8'he5,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[009Ch] */
                {8'h61,8'hf5,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[009Eh] */
                {8'h61,8'h86,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[00A0h] */
                {8'h61,8'h96,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[00A2h] */
                {8'h61,8'ha6,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[00A4h] */
                {8'h61,8'hb6,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[00A6h] */
                {8'h61,8'hc6,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[00A8h] */
                {8'h61,8'hd6,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[00AAh] */
                {8'h61,8'he6,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[00ACh] */
                {8'h61,8'hf6,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[00AEh] */
                {8'h61,8'h87,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[00B0h] */
                {8'h61,8'h97,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[00B2h] */
                {8'h61,8'ha7,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[00B4h] */
                {8'h61,8'hb7,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[00B6h] */
                {8'h61,8'hc7,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[00B8h] */
                {8'h61,8'hd7,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[00BAh] */
                {8'h61,8'he7,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[00BCh] */
                {8'h61,8'hf7,2'bx1} : dec_word_access_adrstage = 1'b1;  /* CALLT,,[00BEh] */
                {8'h61,8'hcc,2'bx0} : dec_word_access_adrstage = 1'b1;  /* BRK,, */
                {8'h61,8'hcc,2'bx1} : dec_word_access_adrstage = 1'b1;  /* BRK,, */
                {8'hd7,8'hxx,2'b00} : dec_word_access_adrstage = 1'b1;  /* RET,, */
                {8'h61,8'hec,2'b00} : dec_word_access_adrstage = 1'b1;  /* RETB,, */
                {8'h61,8'hec,2'b01} : dec_word_access_adrstage = 1'b1;  /* RETB,, */
                {8'h61,8'hfc,2'b00} : dec_word_access_adrstage = 1'b1;  /* RETI,, */
                {8'h61,8'hfc,2'b01} : dec_word_access_adrstage = 1'b1;  /* RETI,, */
                {8'h61,8'hdd,2'bxx} : dec_word_access_adrstage = 1'b1;  /* PUSH,,PSW */
                {8'hc1,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* PUSH,,AX */
                {8'hc3,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* PUSH,,BC */
                {8'hc5,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* PUSH,,DE */
                {8'hc7,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* PUSH,,HL */
                {8'h61,8'hcd,2'bxx} : dec_word_access_adrstage = 1'b1;  /* POP,,PSW */
                {8'hc0,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* POP,,AX */
                {8'hc2,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* POP,,BC */
                {8'hc4,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* POP,,DE */
                {8'hc6,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* POP,,HL */
                {8'h10,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* ADDW,SP,#byte */
                {8'h20,8'hxx,2'bxx} : dec_word_access_adrstage = 1'b1;  /* SUBW,SP,#byte */
                {8'hff,8'hxx,2'bx0} : dec_word_access_adrstage = 1'b1;  /* SOFT,,BREAK */
                {8'hff,8'hxx,2'bx1} : dec_word_access_adrstage = 1'b1;  /* SOFT,,BREAK */
                {8'h61,8'ha1,2'bx0} : dec_word_access_adrstage = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'ha1,2'bx1} : dec_word_access_adrstage = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'hb1,2'bx0} : dec_word_access_adrstage = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hb1,2'bx1} : dec_word_access_adrstage = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hc1,2'bx0} : dec_word_access_adrstage = 1'b1;  /* SOFT4,,BREAK */
                {8'h61,8'hc1,2'bx1} : dec_word_access_adrstage = 1'b1;  /* SOFT4,,BREAK */
                default : dec_word_access_adrstage = 1'h0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_word_access <= 1'b0;
        else if(cpuen) dec_word_access <= dec_word_access_adrstage;
    end
    output dec_xch_byte;
    reg    dec_xch_byte, dec_xch_byte_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_xch_byte_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h08,8'hxx,2'bxx} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,X */
                {8'h61,8'h8a,2'bxx} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,C */
                {8'h61,8'h8b,2'bxx} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,B */
                {8'h61,8'h8c,2'bxx} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,E */
                {8'h61,8'h8d,2'bxx} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,D */
                {8'h61,8'h8e,2'bxx} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,L */
                {8'h61,8'h8f,2'bxx} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,H */
                {8'h61,8'ha8,2'bx1} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,saddr */
                {8'h61,8'hab,2'bx1} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,sfr */
                {8'h61,8'haa,2'bx1} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,!addr16 */
                {8'h61,8'hae,2'bx1} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,[DE] */
                {8'h61,8'haf,2'bx1} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'hac,2'bx1} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,[HL] */
                {8'h61,8'had,2'bx1} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,[HL+byte] */
                {8'h61,8'hb9,2'bx1} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,[HL+B] */
                {8'h61,8'ha9,2'bx1} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,[HL+C] */
                {8'h61,8'h88,2'bxx} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,X */
                {8'h61,8'h98,2'bxx} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,X */
                {8'h61,8'h99,2'bxx} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,X */
                {8'h61,8'h9a,2'bxx} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,C */
                {8'h61,8'h9b,2'bxx} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,B */
                {8'h61,8'h9c,2'bxx} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,E */
                {8'h61,8'h9d,2'bxx} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,D */
                {8'h61,8'h9e,2'bxx} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,L */
                {8'h61,8'h9f,2'bxx} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,H */
                {8'h61,8'hbb,2'bx1} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,sfr */
                {8'h61,8'hba,2'bx1} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,!addr16 */
                {8'h61,8'hbe,2'bx1} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,[DE] */
                {8'h61,8'hbf,2'bx1} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'hbc,2'bx1} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,[HL] */
                {8'h61,8'hbd,2'bx1} : dec_xch_byte_adrstage = 1'b1;  /* XCH,A,[HL+byte] */
                default : dec_xch_byte_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_xch_byte <= 1'b0;
        else if(cpuen) dec_xch_byte <= dec_xch_byte_adrstage;
    end
    output dec_xchw_bc;
    reg    dec_xchw_bc, dec_xchw_bc_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_xchw_bc_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h33,8'hxx,2'bxx} : dec_xchw_bc_adrstage = 1'b1;  /* XCHW,AX,BC */
                default : dec_xchw_bc_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_xchw_bc <= 1'b0;
        else if(cpuen) dec_xchw_bc <= dec_xchw_bc_adrstage;
    end
    output dec_xchw_de;
    reg    dec_xchw_de, dec_xchw_de_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_xchw_de_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h35,8'hxx,2'bxx} : dec_xchw_de_adrstage = 1'b1;  /* XCHW,AX,DE */
                default : dec_xchw_de_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_xchw_de <= 1'b0;
        else if(cpuen) dec_xchw_de <= dec_xchw_de_adrstage;
    end
    output dec_xchw_hl;
    reg    dec_xchw_hl, dec_xchw_hl_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_xchw_hl_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h37,8'hxx,2'bxx} : dec_xchw_hl_adrstage = 1'b1;  /* XCHW,AX,HL */
                default : dec_xchw_hl_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_xchw_hl <= 1'b0;
        else if(cpuen) dec_xchw_hl <= dec_xchw_hl_adrstage;
    end
    output dec_SP_enable;
    reg    dec_SP_enable, dec_SP_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_SP_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h10,8'hxx,2'bxx} : dec_SP_enable_adrstage = 1'b1;  /* ADDW,SP,#byte */
                {8'h20,8'hxx,2'bxx} : dec_SP_enable_adrstage = 1'b1;  /* SUBW,SP,#byte */
                default : dec_SP_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_SP_enable <= 1'b0;
        else if(cpuen) dec_SP_enable <= dec_SP_enable_adrstage;
    end
    output dec_A_enable;
    reg    dec_A_enable, dec_A_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_A_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h51,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,#byte */
                {8'h60,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,X */
                {8'h62,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,C */
                {8'h63,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,B */
                {8'h64,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,E */
                {8'h65,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,D */
                {8'h66,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,L */
                {8'h67,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,H */
                {8'h8d,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,saddr */
                {8'h8e,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,sfr */
                {8'h8f,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,!addr16 */
                {8'h89,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,[DE] */
                {8'h8a,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,[DE+byte] */
                {8'h8b,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,[HL] */
                {8'h8c,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,[HL+byte] */
                {8'h61,8'hc9,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,[HL+B] */
                {8'h61,8'he9,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,[HL+C] */
                {8'h09,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,word[B] */
                {8'h29,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,word[C] */
                {8'h49,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,word[BC] */
                {8'h88,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV,A,[SP+byte] */
                {8'h08,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,X */
                {8'h61,8'h8a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,C */
                {8'h61,8'h8b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,B */
                {8'h61,8'h8c,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,E */
                {8'h61,8'h8d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,D */
                {8'h61,8'h8e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,L */
                {8'h61,8'h8f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,H */
                {8'h61,8'ha8,2'bx1} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,saddr */
                {8'h61,8'hab,2'bx1} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,sfr */
                {8'h61,8'haa,2'bx1} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,!addr16 */
                {8'h61,8'hae,2'bx1} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,[DE] */
                {8'h61,8'haf,2'bx1} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'hac,2'bx1} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,[HL] */
                {8'h61,8'had,2'bx1} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,[HL+byte] */
                {8'h61,8'hb9,2'bx1} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,[HL+B] */
                {8'h61,8'ha9,2'bx1} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,[HL+C] */
                {8'he1,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ONEB,,A */
                {8'hf1,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* CLRB,,A */
                {8'h30,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOVW,AX,#word */
                {8'had,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOVW,AX,saddrp */
                {8'hae,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOVW,AX,sfrp */
                {8'h13,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOVW,AX,BC */
                {8'h15,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOVW,AX,DE */
                {8'h17,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOVW,AX,HL */
                {8'haf,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOVW,AX,!addr16 */
                {8'ha9,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOVW,AX,[DE] */
                {8'haa,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOVW,AX,[DE+byte] */
                {8'hab,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOVW,AX,[HL] */
                {8'hac,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOVW,AX,[HL+byte] */
                {8'h59,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOVW,AX,word[B] */
                {8'h69,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOVW,AX,word[C] */
                {8'h79,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOVW,AX,word[BC] */
                {8'ha8,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOVW,AX,[SP+byte] */
                {8'h33,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCHW,AX,BC */
                {8'h35,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCHW,AX,DE */
                {8'h37,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCHW,AX,HL */
                {8'he6,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ONEW,,AX */
                {8'hf6,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* CLRW,,AX */
                {8'h0c,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADD,A,#byte */
                {8'h61,8'h08,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADD,A,X */
                {8'h61,8'h0a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADD,A,C */
                {8'h61,8'h0b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADD,A,B */
                {8'h61,8'h0c,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADD,A,E */
                {8'h61,8'h0d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADD,A,D */
                {8'h61,8'h0e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADD,A,L */
                {8'h61,8'h0f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADD,A,H */
                {8'h61,8'h01,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADD,A,A */
                {8'h0b,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADD,A,saddr */
                {8'h0f,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADD,A,!addr16 */
                {8'h0d,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADD,A,[HL] */
                {8'h0e,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADD,A,[HL+byte] */
                {8'h61,8'h80,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADD,A,[HL+B] */
                {8'h61,8'h82,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADD,A,[HL+C] */
                {8'h1c,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,#byte */
                {8'h61,8'h18,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,X */
                {8'h61,8'h1a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,C */
                {8'h61,8'h1b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,B */
                {8'h61,8'h1c,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,E */
                {8'h61,8'h1d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,D */
                {8'h61,8'h1e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,L */
                {8'h61,8'h1f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,H */
                {8'h61,8'h11,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,A */
                {8'h1b,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,saddr */
                {8'h1f,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,!addr16 */
                {8'h1d,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,[HL] */
                {8'h1e,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,[HL+byte] */
                {8'h61,8'h90,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,[HL+B] */
                {8'h61,8'h92,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h2c,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUB,A,#byte */
                {8'h61,8'h28,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUB,A,X */
                {8'h61,8'h2a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUB,A,C */
                {8'h61,8'h2b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUB,A,B */
                {8'h61,8'h2c,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUB,A,E */
                {8'h61,8'h2d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUB,A,D */
                {8'h61,8'h2e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUB,A,L */
                {8'h61,8'h2f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUB,A,H */
                {8'h61,8'h21,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUB,A,A */
                {8'h2b,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUB,A,saddr */
                {8'h2f,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUB,A,!addr16 */
                {8'h2d,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUB,A,[HL] */
                {8'h2e,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUB,A,[HL+byte] */
                {8'h61,8'ha0,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUB,A,[HL+B] */
                {8'h61,8'ha2,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUB,A,[HL+C] */
                {8'h3c,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,#byte */
                {8'h61,8'h38,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,X */
                {8'h61,8'h3a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,C */
                {8'h61,8'h3b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,B */
                {8'h61,8'h3c,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,E */
                {8'h61,8'h3d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,D */
                {8'h61,8'h3e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,L */
                {8'h61,8'h3f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,H */
                {8'h61,8'h31,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,A */
                {8'h3b,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,saddr */
                {8'h3f,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,!addr16 */
                {8'h3d,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,[HL] */
                {8'h3e,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,[HL+byte] */
                {8'h61,8'hb0,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,[HL+B] */
                {8'h61,8'hb2,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,[HL+C] */
                {8'h5c,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* AND,A,#byte */
                {8'h61,8'h58,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* AND,A,X */
                {8'h61,8'h5a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* AND,A,C */
                {8'h61,8'h5b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* AND,A,B */
                {8'h61,8'h5c,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* AND,A,E */
                {8'h61,8'h5d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* AND,A,D */
                {8'h61,8'h5e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* AND,A,L */
                {8'h61,8'h5f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* AND,A,H */
                {8'h61,8'h51,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* AND,A,A */
                {8'h5b,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* AND,A,saddr */
                {8'h5f,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* AND,A,!addr16 */
                {8'h5d,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* AND,A,[HL] */
                {8'h5e,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* AND,A,[HL+byte] */
                {8'h61,8'hd0,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* AND,A,[HL+B] */
                {8'h61,8'hd2,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* AND,A,[HL+C] */
                {8'h6c,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* OR,A,#byte */
                {8'h61,8'h68,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* OR,A,X */
                {8'h61,8'h6a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* OR,A,C */
                {8'h61,8'h6b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* OR,A,B */
                {8'h61,8'h6c,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* OR,A,E */
                {8'h61,8'h6d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* OR,A,D */
                {8'h61,8'h6e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* OR,A,L */
                {8'h61,8'h6f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* OR,A,H */
                {8'h61,8'h61,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* OR,A,A */
                {8'h6b,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* OR,A,saddr */
                {8'h6f,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* OR,A,!addr16 */
                {8'h6d,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* OR,A,[HL] */
                {8'h6e,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* OR,A,[HL+byte] */
                {8'h61,8'he0,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* OR,A,[HL+B] */
                {8'h61,8'he2,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* OR,A,[HL+C] */
                {8'h7c,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XOR,A,#byte */
                {8'h61,8'h78,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XOR,A,X */
                {8'h61,8'h7a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XOR,A,C */
                {8'h61,8'h7b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XOR,A,B */
                {8'h61,8'h7c,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XOR,A,E */
                {8'h61,8'h7d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XOR,A,D */
                {8'h61,8'h7e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XOR,A,L */
                {8'h61,8'h7f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XOR,A,H */
                {8'h61,8'h71,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XOR,A,A */
                {8'h7b,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XOR,A,saddr */
                {8'h7f,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XOR,A,!addr16 */
                {8'h7d,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XOR,A,[HL] */
                {8'h7e,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XOR,A,[HL+byte] */
                {8'h61,8'hf0,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XOR,A,[HL+B] */
                {8'h61,8'hf2,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XOR,A,[HL+C] */
                {8'h04,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDW,AX,#word */
                {8'h01,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDW,AX,AX */
                {8'h03,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDW,AX,BC */
                {8'h05,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDW,AX,DE */
                {8'h07,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDW,AX,HL */
                {8'h06,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDW,AX,saddrp */
                {8'h02,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDW,AX,!addr16 */
                {8'h61,8'h09,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDW,AX,[HL+byte] */
                {8'h24,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBW,AX,#word */
                {8'h21,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBW,AX,AX */
                {8'h23,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBW,AX,BC */
                {8'h25,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBW,AX,DE */
                {8'h27,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBW,AX,HL */
                {8'h26,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBW,AX,saddrp */
                {8'h22,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBW,AX,!addr16 */
                {8'h61,8'h29,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBW,AX,[HL+byte] */
                {8'hd6,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MULU,,X */
                {8'h81,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* INC,,A */
                {8'h91,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* DEC,,A */
                {8'ha1,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* INCW,,AX */
                {8'hb1,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* DECW,,AX */
                {8'h31,8'h0a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHR,A,0 */
                {8'h31,8'h1a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHR,A,1 */
                {8'h31,8'h2a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHR,A,2 */
                {8'h31,8'h3a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHR,A,3 */
                {8'h31,8'h4a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHR,A,4 */
                {8'h31,8'h5a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHR,A,5 */
                {8'h31,8'h6a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHR,A,6 */
                {8'h31,8'h7a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHR,A,7 */
                {8'h31,8'h0e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHRW,AX,0 */
                {8'h31,8'h1e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHRW,AX,1 */
                {8'h31,8'h2e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHRW,AX,2 */
                {8'h31,8'h3e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHRW,AX,3 */
                {8'h31,8'h4e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHRW,AX,4 */
                {8'h31,8'h5e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHRW,AX,5 */
                {8'h31,8'h6e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHRW,AX,6 */
                {8'h31,8'h7e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHRW,AX,7 */
                {8'h31,8'h8e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHRW,AX,8 */
                {8'h31,8'h9e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHRW,AX,9 */
                {8'h31,8'hae,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHRW,AX,10 */
                {8'h31,8'hbe,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHRW,AX,11 */
                {8'h31,8'hce,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHRW,AX,12 */
                {8'h31,8'hde,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHRW,AX,13 */
                {8'h31,8'hee,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHRW,AX,14 */
                {8'h31,8'hfe,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHRW,AX,15 */
                {8'h31,8'h09,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHL,A,0 */
                {8'h31,8'h19,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHL,A,1 */
                {8'h31,8'h29,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHL,A,2 */
                {8'h31,8'h39,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHL,A,3 */
                {8'h31,8'h49,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHL,A,4 */
                {8'h31,8'h59,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHL,A,5 */
                {8'h31,8'h69,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHL,A,6 */
                {8'h31,8'h79,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHL,A,7 */
                {8'h31,8'h0d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHLW,AX,0 */
                {8'h31,8'h1d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHLW,AX,1 */
                {8'h31,8'h2d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHLW,AX,2 */
                {8'h31,8'h3d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHLW,AX,3 */
                {8'h31,8'h4d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHLW,AX,4 */
                {8'h31,8'h5d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHLW,AX,5 */
                {8'h31,8'h6d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHLW,AX,6 */
                {8'h31,8'h7d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHLW,AX,7 */
                {8'h31,8'h8d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHLW,AX,8 */
                {8'h31,8'h9d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHLW,AX,9 */
                {8'h31,8'had,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHLW,AX,10 */
                {8'h31,8'hbd,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHLW,AX,11 */
                {8'h31,8'hcd,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHLW,AX,12 */
                {8'h31,8'hdd,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHLW,AX,13 */
                {8'h31,8'hed,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHLW,AX,14 */
                {8'h31,8'hfd,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHLW,AX,15 */
                {8'h31,8'h0b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SAR,A,0 */
                {8'h31,8'h1b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SAR,A,1 */
                {8'h31,8'h2b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SAR,A,2 */
                {8'h31,8'h3b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SAR,A,3 */
                {8'h31,8'h4b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SAR,A,4 */
                {8'h31,8'h5b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SAR,A,5 */
                {8'h31,8'h6b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SAR,A,6 */
                {8'h31,8'h7b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SAR,A,7 */
                {8'h31,8'h0f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SARW,AX,0 */
                {8'h31,8'h1f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SARW,AX,1 */
                {8'h31,8'h2f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SARW,AX,2 */
                {8'h31,8'h3f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SARW,AX,3 */
                {8'h31,8'h4f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SARW,AX,4 */
                {8'h31,8'h5f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SARW,AX,5 */
                {8'h31,8'h6f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SARW,AX,6 */
                {8'h31,8'h7f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SARW,AX,7 */
                {8'h31,8'h8f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SARW,AX,8 */
                {8'h31,8'h9f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SARW,AX,9 */
                {8'h31,8'haf,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SARW,AX,10 */
                {8'h31,8'hbf,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SARW,AX,11 */
                {8'h31,8'hcf,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SARW,AX,12 */
                {8'h31,8'hdf,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SARW,AX,13 */
                {8'h31,8'hef,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SARW,AX,14 */
                {8'h31,8'hff,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SARW,AX,15 */
                {8'h61,8'hdb,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ROR,A,1 */
                {8'h61,8'heb,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ROL,A,1 */
                {8'h61,8'hfb,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* RORC,A,1 */
                {8'h61,8'hdc,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ROLC,A,1 */
                {8'h61,8'hee,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ROLWC,AX,1 */
                {8'h71,8'h89,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV1,A.0,CY */
                {8'h71,8'h99,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV1,A.1,CY */
                {8'h71,8'ha9,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV1,A.2,CY */
                {8'h71,8'hb9,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV1,A.3,CY */
                {8'h71,8'hc9,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV1,A.4,CY */
                {8'h71,8'hd9,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV1,A.5,CY */
                {8'h71,8'he9,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV1,A.6,CY */
                {8'h71,8'hf9,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* MOV1,A.7,CY */
                {8'h71,8'h8a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SET1,,A.0 */
                {8'h71,8'h9a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SET1,,A.1 */
                {8'h71,8'haa,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SET1,,A.2 */
                {8'h71,8'hba,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SET1,,A.3 */
                {8'h71,8'hca,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SET1,,A.4 */
                {8'h71,8'hda,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SET1,,A.5 */
                {8'h71,8'hea,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SET1,,A.6 */
                {8'h71,8'hfa,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SET1,,A.7 */
                {8'h71,8'h8b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* CLR1,,A.0 */
                {8'h71,8'h9b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* CLR1,,A.1 */
                {8'h71,8'hab,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* CLR1,,A.2 */
                {8'h71,8'hbb,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* CLR1,,A.3 */
                {8'h71,8'hcb,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* CLR1,,A.4 */
                {8'h71,8'hdb,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* CLR1,,A.5 */
                {8'h71,8'heb,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* CLR1,,A.6 */
                {8'h71,8'hfb,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* CLR1,,A.7 */
                {8'hc0,8'hxx,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* POP,,AX */
                {8'h31,8'h01,2'b10} : dec_A_enable_adrstage = 1'b1;  /* BTCLR,A.0,$addr8 */
                {8'h31,8'h11,2'b10} : dec_A_enable_adrstage = 1'b1;  /* BTCLR,A.1,$addr8 */
                {8'h31,8'h21,2'b10} : dec_A_enable_adrstage = 1'b1;  /* BTCLR,A.2,$addr8 */
                {8'h31,8'h31,2'b10} : dec_A_enable_adrstage = 1'b1;  /* BTCLR,A.3,$addr8 */
                {8'h31,8'h41,2'b10} : dec_A_enable_adrstage = 1'b1;  /* BTCLR,A.4,$addr8 */
                {8'h31,8'h51,2'b10} : dec_A_enable_adrstage = 1'b1;  /* BTCLR,A.5,$addr8 */
                {8'h31,8'h61,2'b10} : dec_A_enable_adrstage = 1'b1;  /* BTCLR,A.6,$addr8 */
                {8'h31,8'h71,2'b10} : dec_A_enable_adrstage = 1'b1;  /* BTCLR,A.7,$addr8 */
                {8'h61,8'h88,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,X */
                {8'h61,8'h98,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,X */
                {8'h61,8'h99,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,X */
                {8'h61,8'h9a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,C */
                {8'h61,8'h9b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,B */
                {8'h61,8'h9c,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,E */
                {8'h61,8'h9d,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,D */
                {8'h61,8'h9e,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,L */
                {8'h61,8'h9f,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,H */
                {8'h61,8'hbb,2'bx1} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,sfr */
                {8'h61,8'hba,2'bx1} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,!addr16 */
                {8'h61,8'hbe,2'bx1} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,[DE] */
                {8'h61,8'hbf,2'bx1} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'hbc,2'bx1} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,[HL] */
                {8'h61,8'hbd,2'bx1} : dec_A_enable_adrstage = 1'b1;  /* XCH,A,[HL+byte] */
                {8'h61,8'h19,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,A */
                {8'h61,8'h39,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,A */
                {8'h61,8'hd1,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* AND,A,[HL+B] */
                {8'h61,8'he1,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* OR,A,[HL+B] */
                {8'h61,8'hf1,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* XOR,A,[HL+B] */
                {8'h61,8'h83,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADD,A,[HL+C] */
                {8'h61,8'h93,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h61,8'ha3,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUB,A,[HL+C] */
                {8'h61,8'hb3,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SUBC,A,[HL+C] */
                {8'h31,8'h8a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHR,A,0 */
                {8'h31,8'h9a,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHR,A,1 */
                {8'h31,8'haa,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHR,A,2 */
                {8'h31,8'hba,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHR,A,3 */
                {8'h31,8'hca,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHR,A,4 */
                {8'h31,8'hda,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHR,A,5 */
                {8'h31,8'hea,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHR,A,6 */
                {8'h31,8'hfa,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHR,A,7 */
                {8'h31,8'h89,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHL,A,0 */
                {8'h31,8'h99,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHL,A,1 */
                {8'h31,8'ha9,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHL,A,2 */
                {8'h31,8'hb9,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHL,A,3 */
                {8'h31,8'hc9,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHL,A,4 */
                {8'h31,8'hd9,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHL,A,5 */
                {8'h31,8'he9,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHL,A,6 */
                {8'h31,8'hf9,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SHL,A,7 */
                {8'h31,8'h8b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SAR,A,0 */
                {8'h31,8'h9b,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SAR,A,1 */
                {8'h31,8'hab,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SAR,A,2 */
                {8'h31,8'hbb,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SAR,A,3 */
                {8'h31,8'hcb,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SAR,A,4 */
                {8'h31,8'hdb,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SAR,A,5 */
                {8'h31,8'heb,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SAR,A,6 */
                {8'h31,8'hfb,2'bxx} : dec_A_enable_adrstage = 1'b1;  /* SAR,A,7 */
                default : dec_A_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_A_enable <= 1'b0;
        else if(cpuen) dec_A_enable <= dec_A_enable_adrstage;
    end
    output dec_X_enable;
    reg    dec_X_enable, dec_X_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_X_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h50,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOV,X,#byte */
                {8'h70,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOV,X,A */
                {8'hd8,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOV,X,saddr */
                {8'hd9,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOV,X,!addr16 */
                {8'h08,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* XCH,A,X */
                {8'he0,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* ONEB,,X */
                {8'hf0,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* CLRB,,X */
                {8'h30,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOVW,AX,#word */
                {8'had,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOVW,AX,saddrp */
                {8'hae,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOVW,AX,sfrp */
                {8'h13,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOVW,AX,BC */
                {8'h15,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOVW,AX,DE */
                {8'h17,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOVW,AX,HL */
                {8'haf,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOVW,AX,!addr16 */
                {8'ha9,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOVW,AX,[DE] */
                {8'haa,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOVW,AX,[DE+byte] */
                {8'hab,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOVW,AX,[HL] */
                {8'hac,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOVW,AX,[HL+byte] */
                {8'h59,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOVW,AX,word[B] */
                {8'h69,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOVW,AX,word[C] */
                {8'h79,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOVW,AX,word[BC] */
                {8'ha8,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MOVW,AX,[SP+byte] */
                {8'h33,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* XCHW,AX,BC */
                {8'h35,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* XCHW,AX,DE */
                {8'h37,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* XCHW,AX,HL */
                {8'he6,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* ONEW,,AX */
                {8'hf6,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* CLRW,,AX */
                {8'h61,8'h00,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* ADD,X,A */
                {8'h61,8'h10,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* ADDC,X,A */
                {8'h61,8'h20,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SUB,X,A */
                {8'h61,8'h30,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SUBC,X,A */
                {8'h61,8'h50,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* AND,X,A */
                {8'h61,8'h60,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* OR,X,A */
                {8'h61,8'h70,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* XOR,X,A */
                {8'h04,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* ADDW,AX,#word */
                {8'h01,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* ADDW,AX,AX */
                {8'h03,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* ADDW,AX,BC */
                {8'h05,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* ADDW,AX,DE */
                {8'h07,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* ADDW,AX,HL */
                {8'h06,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* ADDW,AX,saddrp */
                {8'h02,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* ADDW,AX,!addr16 */
                {8'h61,8'h09,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* ADDW,AX,[HL+byte] */
                {8'h24,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SUBW,AX,#word */
                {8'h21,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SUBW,AX,AX */
                {8'h23,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SUBW,AX,BC */
                {8'h25,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SUBW,AX,DE */
                {8'h27,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SUBW,AX,HL */
                {8'h26,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SUBW,AX,saddrp */
                {8'h22,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SUBW,AX,!addr16 */
                {8'h61,8'h29,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SUBW,AX,[HL+byte] */
                {8'hd6,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* MULU,,X */
                {8'h80,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* INC,,X */
                {8'h90,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* DEC,,X */
                {8'ha1,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* INCW,,AX */
                {8'hb1,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* DECW,,AX */
                {8'h31,8'h0e,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHRW,AX,0 */
                {8'h31,8'h1e,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHRW,AX,1 */
                {8'h31,8'h2e,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHRW,AX,2 */
                {8'h31,8'h3e,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHRW,AX,3 */
                {8'h31,8'h4e,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHRW,AX,4 */
                {8'h31,8'h5e,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHRW,AX,5 */
                {8'h31,8'h6e,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHRW,AX,6 */
                {8'h31,8'h7e,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHRW,AX,7 */
                {8'h31,8'h8e,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHRW,AX,8 */
                {8'h31,8'h9e,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHRW,AX,9 */
                {8'h31,8'hae,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHRW,AX,10 */
                {8'h31,8'hbe,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHRW,AX,11 */
                {8'h31,8'hce,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHRW,AX,12 */
                {8'h31,8'hde,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHRW,AX,13 */
                {8'h31,8'hee,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHRW,AX,14 */
                {8'h31,8'hfe,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHRW,AX,15 */
                {8'h31,8'h0d,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHLW,AX,0 */
                {8'h31,8'h1d,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHLW,AX,1 */
                {8'h31,8'h2d,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHLW,AX,2 */
                {8'h31,8'h3d,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHLW,AX,3 */
                {8'h31,8'h4d,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHLW,AX,4 */
                {8'h31,8'h5d,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHLW,AX,5 */
                {8'h31,8'h6d,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHLW,AX,6 */
                {8'h31,8'h7d,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHLW,AX,7 */
                {8'h31,8'h8d,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHLW,AX,8 */
                {8'h31,8'h9d,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHLW,AX,9 */
                {8'h31,8'had,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHLW,AX,10 */
                {8'h31,8'hbd,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHLW,AX,11 */
                {8'h31,8'hcd,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHLW,AX,12 */
                {8'h31,8'hdd,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHLW,AX,13 */
                {8'h31,8'hed,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHLW,AX,14 */
                {8'h31,8'hfd,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SHLW,AX,15 */
                {8'h31,8'h0f,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SARW,AX,0 */
                {8'h31,8'h1f,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SARW,AX,1 */
                {8'h31,8'h2f,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SARW,AX,2 */
                {8'h31,8'h3f,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SARW,AX,3 */
                {8'h31,8'h4f,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SARW,AX,4 */
                {8'h31,8'h5f,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SARW,AX,5 */
                {8'h31,8'h6f,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SARW,AX,6 */
                {8'h31,8'h7f,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SARW,AX,7 */
                {8'h31,8'h8f,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SARW,AX,8 */
                {8'h31,8'h9f,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SARW,AX,9 */
                {8'h31,8'haf,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SARW,AX,10 */
                {8'h31,8'hbf,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SARW,AX,11 */
                {8'h31,8'hcf,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SARW,AX,12 */
                {8'h31,8'hdf,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SARW,AX,13 */
                {8'h31,8'hef,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SARW,AX,14 */
                {8'h31,8'hff,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* SARW,AX,15 */
                {8'h61,8'hee,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* ROLWC,AX,1 */
                {8'hc0,8'hxx,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* POP,,AX */
                {8'h61,8'h88,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* XCH,A,X */
                {8'h61,8'h98,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* XCH,A,X */
                {8'h61,8'h99,2'bxx} : dec_X_enable_adrstage = 1'b1;  /* XCH,A,X */
                default : dec_X_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_X_enable <= 1'b0;
        else if(cpuen) dec_X_enable <= dec_X_enable_adrstage;
    end
    output dec_B_enable;
    reg    dec_B_enable, dec_B_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_B_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h53,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* MOV,B,#byte */
                {8'h73,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* MOV,B,A */
                {8'he8,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* MOV,B,saddr */
                {8'he9,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* MOV,B,!addr16 */
                {8'h61,8'h8b,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* XCH,A,B */
                {8'he3,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* ONEB,,B */
                {8'hf3,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* CLRB,,B */
                {8'h32,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* MOVW,BC,#word */
                {8'h12,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* MOVW,BC,AX */
                {8'hda,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* MOVW,BC,saddrp */
                {8'hdb,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* MOVW,BC,!addr16 */
                {8'h33,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* XCHW,AX,BC */
                {8'he7,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* ONEW,,BC */
                {8'hf7,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* CLRW,,BC */
                {8'h61,8'h03,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* ADD,B,A */
                {8'h61,8'h13,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* ADDC,B,A */
                {8'h61,8'h23,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SUB,B,A */
                {8'h61,8'h33,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SUBC,B,A */
                {8'h61,8'h53,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* AND,B,A */
                {8'h61,8'h63,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* OR,B,A */
                {8'h61,8'h73,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* XOR,B,A */
                {8'h83,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* INC,,B */
                {8'h93,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* DEC,,B */
                {8'ha3,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* INCW,,BC */
                {8'hb3,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* DECW,,BC */
                {8'h31,8'h08,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHL,B,0 */
                {8'h31,8'h18,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHL,B,1 */
                {8'h31,8'h28,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHL,B,2 */
                {8'h31,8'h38,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHL,B,3 */
                {8'h31,8'h48,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHL,B,4 */
                {8'h31,8'h58,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHL,B,5 */
                {8'h31,8'h68,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHL,B,6 */
                {8'h31,8'h78,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHL,B,7 */
                {8'h31,8'h0c,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHLW,BC,0 */
                {8'h31,8'h1c,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHLW,BC,1 */
                {8'h31,8'h2c,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHLW,BC,2 */
                {8'h31,8'h3c,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHLW,BC,3 */
                {8'h31,8'h4c,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHLW,BC,4 */
                {8'h31,8'h5c,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHLW,BC,5 */
                {8'h31,8'h6c,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHLW,BC,6 */
                {8'h31,8'h7c,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHLW,BC,7 */
                {8'h31,8'h8c,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHLW,BC,8 */
                {8'h31,8'h9c,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHLW,BC,9 */
                {8'h31,8'hac,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHLW,BC,10 */
                {8'h31,8'hbc,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHLW,BC,11 */
                {8'h31,8'hcc,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHLW,BC,12 */
                {8'h31,8'hdc,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHLW,BC,13 */
                {8'h31,8'hec,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHLW,BC,14 */
                {8'h31,8'hfc,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHLW,BC,15 */
                {8'h61,8'hfe,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* ROLWC,BC,1 */
                {8'hc2,8'hxx,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* POP,,BC */
                {8'h61,8'h9b,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* XCH,A,B */
                {8'h31,8'h88,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHL,B,0 */
                {8'h31,8'h98,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHL,B,1 */
                {8'h31,8'ha8,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHL,B,2 */
                {8'h31,8'hb8,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHL,B,3 */
                {8'h31,8'hc8,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHL,B,4 */
                {8'h31,8'hd8,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHL,B,5 */
                {8'h31,8'he8,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHL,B,6 */
                {8'h31,8'hf8,2'bxx} : dec_B_enable_adrstage = 1'b1;  /* SHL,B,7 */
                default : dec_B_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_B_enable <= 1'b0;
        else if(cpuen) dec_B_enable <= dec_B_enable_adrstage;
    end
    output dec_C_enable;
    reg    dec_C_enable, dec_C_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_C_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h52,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* MOV,C,#byte */
                {8'h72,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* MOV,C,A */
                {8'hf8,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* MOV,C,saddr */
                {8'hf9,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* MOV,C,!addr16 */
                {8'h61,8'h8a,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* XCH,A,C */
                {8'he2,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* ONEB,,C */
                {8'hf2,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* CLRB,,C */
                {8'h32,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* MOVW,BC,#word */
                {8'h12,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* MOVW,BC,AX */
                {8'hda,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* MOVW,BC,saddrp */
                {8'hdb,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* MOVW,BC,!addr16 */
                {8'h33,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* XCHW,AX,BC */
                {8'he7,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* ONEW,,BC */
                {8'hf7,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* CLRW,,BC */
                {8'h61,8'h02,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* ADD,C,A */
                {8'h61,8'h12,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* ADDC,C,A */
                {8'h61,8'h22,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SUB,C,A */
                {8'h61,8'h32,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SUBC,C,A */
                {8'h61,8'h52,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* AND,C,A */
                {8'h61,8'h62,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* OR,C,A */
                {8'h61,8'h72,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* XOR,C,A */
                {8'h82,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* INC,,C */
                {8'h92,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* DEC,,C */
                {8'ha3,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* INCW,,BC */
                {8'hb3,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* DECW,,BC */
                {8'h31,8'h07,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHL,C,0 */
                {8'h31,8'h17,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHL,C,1 */
                {8'h31,8'h27,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHL,C,2 */
                {8'h31,8'h37,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHL,C,3 */
                {8'h31,8'h47,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHL,C,4 */
                {8'h31,8'h57,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHL,C,5 */
                {8'h31,8'h67,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHL,C,6 */
                {8'h31,8'h77,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHL,C,7 */
                {8'h31,8'h0c,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHLW,BC,0 */
                {8'h31,8'h1c,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHLW,BC,1 */
                {8'h31,8'h2c,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHLW,BC,2 */
                {8'h31,8'h3c,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHLW,BC,3 */
                {8'h31,8'h4c,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHLW,BC,4 */
                {8'h31,8'h5c,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHLW,BC,5 */
                {8'h31,8'h6c,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHLW,BC,6 */
                {8'h31,8'h7c,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHLW,BC,7 */
                {8'h31,8'h8c,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHLW,BC,8 */
                {8'h31,8'h9c,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHLW,BC,9 */
                {8'h31,8'hac,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHLW,BC,10 */
                {8'h31,8'hbc,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHLW,BC,11 */
                {8'h31,8'hcc,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHLW,BC,12 */
                {8'h31,8'hdc,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHLW,BC,13 */
                {8'h31,8'hec,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHLW,BC,14 */
                {8'h31,8'hfc,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHLW,BC,15 */
                {8'h61,8'hfe,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* ROLWC,BC,1 */
                {8'hc2,8'hxx,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* POP,,BC */
                {8'h61,8'h9a,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* XCH,A,C */
                {8'h31,8'h87,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHL,C,0 */
                {8'h31,8'h97,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHL,C,1 */
                {8'h31,8'ha7,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHL,C,2 */
                {8'h31,8'hb7,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHL,C,3 */
                {8'h31,8'hc7,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHL,C,4 */
                {8'h31,8'hd7,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHL,C,5 */
                {8'h31,8'he7,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHL,C,6 */
                {8'h31,8'hf7,2'bxx} : dec_C_enable_adrstage = 1'b1;  /* SHL,C,7 */
                default : dec_C_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_C_enable <= 1'b0;
        else if(cpuen) dec_C_enable <= dec_C_enable_adrstage;
    end
    output dec_D_enable;
    reg    dec_D_enable, dec_D_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_D_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h55,8'hxx,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* MOV,D,#byte */
                {8'h75,8'hxx,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* MOV,D,A */
                {8'h61,8'h8d,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* XCH,A,D */
                {8'h34,8'hxx,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* MOVW,DE,#word */
                {8'h14,8'hxx,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* MOVW,DE,AX */
                {8'hea,8'hxx,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* MOVW,DE,saddrp */
                {8'heb,8'hxx,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* MOVW,DE,!addr16 */
                {8'h35,8'hxx,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* XCHW,AX,DE */
                {8'h61,8'h05,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* ADD,D,A */
                {8'h61,8'h15,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* ADDC,D,A */
                {8'h61,8'h25,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* SUB,D,A */
                {8'h61,8'h35,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* SUBC,D,A */
                {8'h61,8'h55,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* AND,D,A */
                {8'h61,8'h65,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* OR,D,A */
                {8'h61,8'h75,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* XOR,D,A */
                {8'h85,8'hxx,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* INC,,D */
                {8'h95,8'hxx,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* DEC,,D */
                {8'ha5,8'hxx,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* INCW,,DE */
                {8'hb5,8'hxx,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* DECW,,DE */
                {8'hc4,8'hxx,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* POP,,DE */
                {8'h61,8'h9d,2'bxx} : dec_D_enable_adrstage = 1'b1;  /* XCH,A,D */
                default : dec_D_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_D_enable <= 1'b0;
        else if(cpuen) dec_D_enable <= dec_D_enable_adrstage;
    end
    output dec_E_enable;
    reg    dec_E_enable, dec_E_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_E_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h54,8'hxx,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* MOV,E,#byte */
                {8'h74,8'hxx,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* MOV,E,A */
                {8'h61,8'h8c,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* XCH,A,E */
                {8'h34,8'hxx,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* MOVW,DE,#word */
                {8'h14,8'hxx,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* MOVW,DE,AX */
                {8'hea,8'hxx,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* MOVW,DE,saddrp */
                {8'heb,8'hxx,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* MOVW,DE,!addr16 */
                {8'h35,8'hxx,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* XCHW,AX,DE */
                {8'h61,8'h04,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* ADD,E,A */
                {8'h61,8'h14,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* ADDC,E,A */
                {8'h61,8'h24,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* SUB,E,A */
                {8'h61,8'h34,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* SUBC,E,A */
                {8'h61,8'h54,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* AND,E,A */
                {8'h61,8'h64,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* OR,E,A */
                {8'h61,8'h74,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* XOR,E,A */
                {8'h84,8'hxx,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* INC,,E */
                {8'h94,8'hxx,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* DEC,,E */
                {8'ha5,8'hxx,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* INCW,,DE */
                {8'hb5,8'hxx,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* DECW,,DE */
                {8'hc4,8'hxx,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* POP,,DE */
                {8'h61,8'h9c,2'bxx} : dec_E_enable_adrstage = 1'b1;  /* XCH,A,E */
                default : dec_E_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_E_enable <= 1'b0;
        else if(cpuen) dec_E_enable <= dec_E_enable_adrstage;
    end
    output dec_H_enable;
    reg    dec_H_enable, dec_H_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_H_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h57,8'hxx,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* MOV,H,#byte */
                {8'h77,8'hxx,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* MOV,H,A */
                {8'h61,8'h8f,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* XCH,A,H */
                {8'h36,8'hxx,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* MOVW,HL,#word */
                {8'h16,8'hxx,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* MOVW,HL,AX */
                {8'hfa,8'hxx,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* MOVW,HL,saddrp */
                {8'hfb,8'hxx,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* MOVW,HL,!addr16 */
                {8'h37,8'hxx,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* XCHW,AX,HL */
                {8'h61,8'h07,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* ADD,H,A */
                {8'h61,8'h17,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* ADDC,H,A */
                {8'h61,8'h27,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* SUB,H,A */
                {8'h61,8'h37,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* SUBC,H,A */
                {8'h61,8'h57,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* AND,H,A */
                {8'h61,8'h67,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* OR,H,A */
                {8'h61,8'h77,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* XOR,H,A */
                {8'h87,8'hxx,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* INC,,H */
                {8'h97,8'hxx,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* DEC,,H */
                {8'ha7,8'hxx,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* INCW,,HL */
                {8'hb7,8'hxx,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* DECW,,HL */
                {8'hc6,8'hxx,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* POP,,HL */
                {8'h61,8'h9f,2'bxx} : dec_H_enable_adrstage = 1'b1;  /* XCH,A,H */
                default : dec_H_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_H_enable <= 1'b0;
        else if(cpuen) dec_H_enable <= dec_H_enable_adrstage;
    end
    output dec_L_enable;
    reg    dec_L_enable, dec_L_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_L_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h56,8'hxx,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* MOV,L,#byte */
                {8'h76,8'hxx,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* MOV,L,A */
                {8'h61,8'h8e,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* XCH,A,L */
                {8'h36,8'hxx,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* MOVW,HL,#word */
                {8'h16,8'hxx,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* MOVW,HL,AX */
                {8'hfa,8'hxx,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* MOVW,HL,saddrp */
                {8'hfb,8'hxx,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* MOVW,HL,!addr16 */
                {8'h37,8'hxx,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* XCHW,AX,HL */
                {8'h61,8'h06,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* ADD,L,A */
                {8'h61,8'h16,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* ADDC,L,A */
                {8'h61,8'h26,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* SUB,L,A */
                {8'h61,8'h36,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* SUBC,L,A */
                {8'h61,8'h56,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* AND,L,A */
                {8'h61,8'h66,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* OR,L,A */
                {8'h61,8'h76,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* XOR,L,A */
                {8'h86,8'hxx,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* INC,,L */
                {8'h96,8'hxx,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* DEC,,L */
                {8'ha7,8'hxx,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* INCW,,HL */
                {8'hb7,8'hxx,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* DECW,,HL */
                {8'hc6,8'hxx,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* POP,,HL */
                {8'h61,8'h9e,2'bxx} : dec_L_enable_adrstage = 1'b1;  /* XCH,A,L */
                default : dec_L_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_L_enable <= 1'b0;
        else if(cpuen) dec_L_enable <= dec_L_enable_adrstage;
    end
    output dec_ES_enable;
    reg    dec_ES_enable, dec_ES_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_ES_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h41,8'hxx,2'bxx} : dec_ES_enable_adrstage = 1'b1;  /* MOV,ES,#byte */
                {8'h61,8'hb8,2'bxx} : dec_ES_enable_adrstage = 1'b1;  /* MOV,ES,saddr */
                default : dec_ES_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_ES_enable <= 1'b0;
        else if(cpuen) dec_ES_enable <= dec_ES_enable_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　ADD,ADDC,SUB,SUBC,AND,OR,XOR,INC,DECの					*/
/*　　　　　　メモリアクセス演算を２クロック目から１クロック目に変更		*/
/*------------------------------------------------------------------------------*/

    output dec_Z_enable;
    reg    dec_Z_enable, dec_Z_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_Z_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h0c,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,A,#byte */
                {8'h0a,8'hxx,2'bx0} : dec_Z_enable_adrstage = 1'b1;  /* ADD,saddr,#byte */
                {8'h61,8'h08,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,A,X */
                {8'h61,8'h0a,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,A,C */
                {8'h61,8'h0b,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,A,B */
                {8'h61,8'h0c,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,A,E */
                {8'h61,8'h0d,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,A,D */
                {8'h61,8'h0e,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,A,L */
                {8'h61,8'h0f,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,A,H */
                {8'h61,8'h00,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,X,A */
                {8'h61,8'h01,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,A,A */
                {8'h61,8'h02,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,C,A */
                {8'h61,8'h03,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,B,A */
                {8'h61,8'h04,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,E,A */
                {8'h61,8'h05,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,D,A */
                {8'h61,8'h06,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,L,A */
                {8'h61,8'h07,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,H,A */
                {8'h0b,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,A,saddr */
                {8'h0f,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,A,!addr16 */
                {8'h0d,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,A,[HL] */
                {8'h0e,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,A,[HL+byte] */
                {8'h61,8'h80,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,A,[HL+B] */
                {8'h61,8'h82,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,A,[HL+C] */
                {8'h1c,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,#byte */
                {8'h1a,8'hxx,2'bx0} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,saddr,#byte */
                {8'h61,8'h18,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,X */
                {8'h61,8'h1a,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,C */
                {8'h61,8'h1b,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,B */
                {8'h61,8'h1c,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,E */
                {8'h61,8'h1d,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,D */
                {8'h61,8'h1e,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,L */
                {8'h61,8'h1f,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,H */
                {8'h61,8'h10,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,X,A */
                {8'h61,8'h11,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,A */
                {8'h61,8'h12,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,C,A */
                {8'h61,8'h13,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,B,A */
                {8'h61,8'h14,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,E,A */
                {8'h61,8'h15,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,D,A */
                {8'h61,8'h16,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,L,A */
                {8'h61,8'h17,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,H,A */
                {8'h1b,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,saddr */
                {8'h1f,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,!addr16 */
                {8'h1d,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,[HL] */
                {8'h1e,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,[HL+byte] */
                {8'h61,8'h90,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,[HL+B] */
                {8'h61,8'h92,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h2c,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,A,#byte */
                {8'h2a,8'hxx,2'bx0} : dec_Z_enable_adrstage = 1'b1;  /* SUB,saddr,#byte */
                {8'h61,8'h28,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,A,X */
                {8'h61,8'h2a,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,A,C */
                {8'h61,8'h2b,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,A,B */
                {8'h61,8'h2c,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,A,E */
                {8'h61,8'h2d,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,A,D */
                {8'h61,8'h2e,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,A,L */
                {8'h61,8'h2f,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,A,H */
                {8'h61,8'h20,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,X,A */
                {8'h61,8'h21,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,A,A */
                {8'h61,8'h22,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,C,A */
                {8'h61,8'h23,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,B,A */
                {8'h61,8'h24,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,E,A */
                {8'h61,8'h25,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,D,A */
                {8'h61,8'h26,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,L,A */
                {8'h61,8'h27,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,H,A */
                {8'h2b,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,A,saddr */
                {8'h2f,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,A,!addr16 */
                {8'h2d,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,A,[HL] */
                {8'h2e,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,A,[HL+byte] */
                {8'h61,8'ha0,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,A,[HL+B] */
                {8'h61,8'ha2,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,A,[HL+C] */
                {8'h3c,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,#byte */
                {8'h3a,8'hxx,2'bx0} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,saddr,#byte */
                {8'h61,8'h38,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,X */
                {8'h61,8'h3a,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,C */
                {8'h61,8'h3b,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,B */
                {8'h61,8'h3c,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,E */
                {8'h61,8'h3d,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,D */
                {8'h61,8'h3e,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,L */
                {8'h61,8'h3f,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,H */
                {8'h61,8'h30,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,X,A */
                {8'h61,8'h31,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,A */
                {8'h61,8'h32,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,C,A */
                {8'h61,8'h33,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,B,A */
                {8'h61,8'h34,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,E,A */
                {8'h61,8'h35,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,D,A */
                {8'h61,8'h36,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,L,A */
                {8'h61,8'h37,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,H,A */
                {8'h3b,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,saddr */
                {8'h3f,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,!addr16 */
                {8'h3d,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,[HL] */
                {8'h3e,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,[HL+byte] */
                {8'h61,8'hb0,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,[HL+B] */
                {8'h61,8'hb2,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,[HL+C] */
                {8'h5c,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,A,#byte */
                {8'h5a,8'hxx,2'bx0} : dec_Z_enable_adrstage = 1'b1;  /* AND,saddr,#byte */
                {8'h61,8'h58,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,A,X */
                {8'h61,8'h5a,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,A,C */
                {8'h61,8'h5b,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,A,B */
                {8'h61,8'h5c,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,A,E */
                {8'h61,8'h5d,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,A,D */
                {8'h61,8'h5e,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,A,L */
                {8'h61,8'h5f,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,A,H */
                {8'h61,8'h50,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,X,A */
                {8'h61,8'h51,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,A,A */
                {8'h61,8'h52,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,C,A */
                {8'h61,8'h53,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,B,A */
                {8'h61,8'h54,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,E,A */
                {8'h61,8'h55,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,D,A */
                {8'h61,8'h56,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,L,A */
                {8'h61,8'h57,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,H,A */
                {8'h5b,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,A,saddr */
                {8'h5f,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,A,!addr16 */
                {8'h5d,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,A,[HL] */
                {8'h5e,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,A,[HL+byte] */
                {8'h61,8'hd0,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,A,[HL+B] */
                {8'h61,8'hd2,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,A,[HL+C] */
                {8'h6c,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,A,#byte */
                {8'h6a,8'hxx,2'bx0} : dec_Z_enable_adrstage = 1'b1;  /* OR,saddr,#byte */
                {8'h61,8'h68,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,A,X */
                {8'h61,8'h6a,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,A,C */
                {8'h61,8'h6b,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,A,B */
                {8'h61,8'h6c,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,A,E */
                {8'h61,8'h6d,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,A,D */
                {8'h61,8'h6e,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,A,L */
                {8'h61,8'h6f,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,A,H */
                {8'h61,8'h60,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,X,A */
                {8'h61,8'h61,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,A,A */
                {8'h61,8'h62,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,C,A */
                {8'h61,8'h63,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,B,A */
                {8'h61,8'h64,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,E,A */
                {8'h61,8'h65,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,D,A */
                {8'h61,8'h66,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,L,A */
                {8'h61,8'h67,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,H,A */
                {8'h6b,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,A,saddr */
                {8'h6f,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,A,!addr16 */
                {8'h6d,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,A,[HL] */
                {8'h6e,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,A,[HL+byte] */
                {8'h61,8'he0,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,A,[HL+B] */
                {8'h61,8'he2,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,A,[HL+C] */
                {8'h7c,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,A,#byte */
                {8'h7a,8'hxx,2'bx0} : dec_Z_enable_adrstage = 1'b1;  /* XOR,saddr,#byte */
                {8'h61,8'h78,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,A,X */
                {8'h61,8'h7a,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,A,C */
                {8'h61,8'h7b,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,A,B */
                {8'h61,8'h7c,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,A,E */
                {8'h61,8'h7d,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,A,D */
                {8'h61,8'h7e,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,A,L */
                {8'h61,8'h7f,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,A,H */
                {8'h61,8'h70,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,X,A */
                {8'h61,8'h71,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,A,A */
                {8'h61,8'h72,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,C,A */
                {8'h61,8'h73,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,B,A */
                {8'h61,8'h74,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,E,A */
                {8'h61,8'h75,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,D,A */
                {8'h61,8'h76,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,L,A */
                {8'h61,8'h77,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,H,A */
                {8'h7b,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,A,saddr */
                {8'h7f,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,A,!addr16 */
                {8'h7d,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,A,[HL] */
                {8'h7e,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,A,[HL+byte] */
                {8'h61,8'hf0,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,A,[HL+B] */
                {8'h61,8'hf2,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,A,[HL+C] */
                {8'h4c,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,A,#byte */
                {8'h4a,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,saddr,#byte */
                {8'h40,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,!addr16,#byte */
                {8'h61,8'h48,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,A,X */
                {8'h61,8'h4a,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,A,C */
                {8'h61,8'h4b,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,A,B */
                {8'h61,8'h4c,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,A,E */
                {8'h61,8'h4d,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,A,D */
                {8'h61,8'h4e,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,A,L */
                {8'h61,8'h4f,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,A,H */
                {8'h61,8'h40,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,X,A */
                {8'h61,8'h41,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,A,A */
                {8'h61,8'h42,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,C,A */
                {8'h61,8'h43,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,B,A */
                {8'h61,8'h44,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,E,A */
                {8'h61,8'h45,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,D,A */
                {8'h61,8'h46,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,L,A */
                {8'h61,8'h47,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,H,A */
                {8'h4b,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,A,saddr */
                {8'h4f,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,A,!addr16 */
                {8'h4d,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,A,[HL] */
                {8'h4e,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,A,[HL+byte] */
                {8'h61,8'hc0,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,A,[HL+B] */
                {8'h61,8'hc2,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP,A,[HL+C] */
                {8'h61,8'hde,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMPS,X,[HL+byte] */
                {8'hd1,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP0,,A */
                {8'hd0,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP0,,X */
                {8'hd3,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP0,,B */
                {8'hd2,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP0,,C */
                {8'hd4,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP0,,saddr */
                {8'hd5,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMP0,,!addr16 */
                {8'h04,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDW,AX,#word */
                {8'h01,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDW,AX,AX */
                {8'h03,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDW,AX,BC */
                {8'h05,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDW,AX,DE */
                {8'h07,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDW,AX,HL */
                {8'h06,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDW,AX,saddrp */
                {8'h02,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDW,AX,!addr16 */
                {8'h61,8'h09,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDW,AX,[HL+byte] */
                {8'h24,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBW,AX,#word */
                {8'h21,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBW,AX,AX */
                {8'h23,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBW,AX,BC */
                {8'h25,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBW,AX,DE */
                {8'h27,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBW,AX,HL */
                {8'h26,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBW,AX,saddrp */
                {8'h22,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBW,AX,!addr16 */
                {8'h61,8'h29,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBW,AX,[HL+byte] */
                {8'h44,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMPW,AX,#word */
                {8'h43,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMPW,AX,BC */
                {8'h45,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMPW,AX,DE */
                {8'h47,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMPW,AX,HL */
                {8'h46,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMPW,AX,saddrp */
                {8'h42,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMPW,AX,!addr16 */
                {8'h61,8'h49,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* CMPW,AX,[HL+byte] */
                {8'h80,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* INC,,X */
                {8'h81,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* INC,,A */
                {8'h82,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* INC,,C */
                {8'h83,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* INC,,B */
                {8'h84,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* INC,,E */
                {8'h85,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* INC,,D */
                {8'h86,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* INC,,L */
                {8'h87,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* INC,,H */
                {8'ha4,8'hxx,2'bx0} : dec_Z_enable_adrstage = 1'b1;  /* INC,,saddr */
                {8'ha0,8'hxx,2'bx0} : dec_Z_enable_adrstage = 1'b1;  /* INC,,!addr16 */
                {8'h61,8'h59,2'bx0} : dec_Z_enable_adrstage = 1'b1;  /* INC,,[HL+byte] */
                {8'h90,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* DEC,,X */
                {8'h91,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* DEC,,A */
                {8'h92,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* DEC,,C */
                {8'h93,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* DEC,,B */
                {8'h94,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* DEC,,E */
                {8'h95,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* DEC,,D */
                {8'h96,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* DEC,,L */
                {8'h97,8'hxx,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* DEC,,H */
                {8'hb4,8'hxx,2'bx0} : dec_Z_enable_adrstage = 1'b1;  /* DEC,,saddr */
                {8'hb0,8'hxx,2'bx0} : dec_Z_enable_adrstage = 1'b1;  /* DEC,,!addr16 */
                {8'h61,8'h69,2'bx0} : dec_Z_enable_adrstage = 1'b1;  /* DEC,,[HL+byte] */
                {8'h61,8'hec,2'b01} : dec_Z_enable_adrstage = 1'b1;  /* RETB,, */
                {8'h61,8'hfc,2'b01} : dec_Z_enable_adrstage = 1'b1;  /* RETI,, */
                {8'h61,8'hcd,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* POP,,PSW */
                {8'h61,8'h19,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,A */
                {8'h61,8'h39,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,A */
                {8'h61,8'hd1,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* AND,A,[HL+B] */
                {8'h61,8'he1,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* OR,A,[HL+B] */
                {8'h61,8'hf1,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* XOR,A,[HL+B] */
                {8'h61,8'h83,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADD,A,[HL+C] */
                {8'h61,8'h93,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h61,8'ha3,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUB,A,[HL+C] */
                {8'h61,8'hb3,2'bxx} : dec_Z_enable_adrstage = 1'b1;  /* SUBC,A,[HL+C] */
                default : dec_Z_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_Z_enable <= 1'b0;
        else if(cpuen) dec_Z_enable <= dec_Z_enable_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　ADD,ADDC,SUB,SUBCの							*/
/*　　　　　　メモリアクセス演算を２クロック目から１クロック目に変更		*/
/*------------------------------------------------------------------------------*/

    output dec_CY_enable;
    reg    dec_CY_enable, dec_CY_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_CY_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h0c,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,A,#byte */
                {8'h0a,8'hxx,2'bx0} : dec_CY_enable_adrstage = 1'b1;  /* ADD,saddr,#byte */
                {8'h61,8'h08,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,A,X */
                {8'h61,8'h0a,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,A,C */
                {8'h61,8'h0b,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,A,B */
                {8'h61,8'h0c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,A,E */
                {8'h61,8'h0d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,A,D */
                {8'h61,8'h0e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,A,L */
                {8'h61,8'h0f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,A,H */
                {8'h61,8'h00,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,X,A */
                {8'h61,8'h01,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,A,A */
                {8'h61,8'h02,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,C,A */
                {8'h61,8'h03,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,B,A */
                {8'h61,8'h04,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,E,A */
                {8'h61,8'h05,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,D,A */
                {8'h61,8'h06,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,L,A */
                {8'h61,8'h07,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,H,A */
                {8'h0b,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,A,saddr */
                {8'h0f,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,A,!addr16 */
                {8'h0d,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,A,[HL] */
                {8'h0e,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,A,[HL+byte] */
                {8'h61,8'h80,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,A,[HL+B] */
                {8'h61,8'h82,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,A,[HL+C] */
                {8'h1c,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,#byte */
                {8'h1a,8'hxx,2'bx0} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,saddr,#byte */
                {8'h61,8'h18,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,X */
                {8'h61,8'h1a,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,C */
                {8'h61,8'h1b,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,B */
                {8'h61,8'h1c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,E */
                {8'h61,8'h1d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,D */
                {8'h61,8'h1e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,L */
                {8'h61,8'h1f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,H */
                {8'h61,8'h10,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,X,A */
                {8'h61,8'h11,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,A */
                {8'h61,8'h12,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,C,A */
                {8'h61,8'h13,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,B,A */
                {8'h61,8'h14,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,E,A */
                {8'h61,8'h15,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,D,A */
                {8'h61,8'h16,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,L,A */
                {8'h61,8'h17,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,H,A */
                {8'h1b,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,saddr */
                {8'h1f,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,!addr16 */
                {8'h1d,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,[HL] */
                {8'h1e,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,[HL+byte] */
                {8'h61,8'h90,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,[HL+B] */
                {8'h61,8'h92,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h2c,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,A,#byte */
                {8'h2a,8'hxx,2'bx0} : dec_CY_enable_adrstage = 1'b1;  /* SUB,saddr,#byte */
                {8'h61,8'h28,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,A,X */
                {8'h61,8'h2a,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,A,C */
                {8'h61,8'h2b,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,A,B */
                {8'h61,8'h2c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,A,E */
                {8'h61,8'h2d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,A,D */
                {8'h61,8'h2e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,A,L */
                {8'h61,8'h2f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,A,H */
                {8'h61,8'h20,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,X,A */
                {8'h61,8'h21,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,A,A */
                {8'h61,8'h22,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,C,A */
                {8'h61,8'h23,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,B,A */
                {8'h61,8'h24,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,E,A */
                {8'h61,8'h25,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,D,A */
                {8'h61,8'h26,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,L,A */
                {8'h61,8'h27,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,H,A */
                {8'h2b,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,A,saddr */
                {8'h2f,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,A,!addr16 */
                {8'h2d,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,A,[HL] */
                {8'h2e,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,A,[HL+byte] */
                {8'h61,8'ha0,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,A,[HL+B] */
                {8'h61,8'ha2,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,A,[HL+C] */
                {8'h3c,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,#byte */
                {8'h3a,8'hxx,2'bx0} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,saddr,#byte */
                {8'h61,8'h38,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,X */
                {8'h61,8'h3a,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,C */
                {8'h61,8'h3b,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,B */
                {8'h61,8'h3c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,E */
                {8'h61,8'h3d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,D */
                {8'h61,8'h3e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,L */
                {8'h61,8'h3f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,H */
                {8'h61,8'h30,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,X,A */
                {8'h61,8'h31,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,A */
                {8'h61,8'h32,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,C,A */
                {8'h61,8'h33,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,B,A */
                {8'h61,8'h34,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,E,A */
                {8'h61,8'h35,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,D,A */
                {8'h61,8'h36,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,L,A */
                {8'h61,8'h37,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,H,A */
                {8'h3b,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,saddr */
                {8'h3f,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,!addr16 */
                {8'h3d,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,[HL] */
                {8'h3e,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,[HL+byte] */
                {8'h61,8'hb0,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,[HL+B] */
                {8'h61,8'hb2,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,[HL+C] */
                {8'h4c,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,A,#byte */
                {8'h4a,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,saddr,#byte */
                {8'h40,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,!addr16,#byte */
                {8'h61,8'h48,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,A,X */
                {8'h61,8'h4a,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,A,C */
                {8'h61,8'h4b,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,A,B */
                {8'h61,8'h4c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,A,E */
                {8'h61,8'h4d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,A,D */
                {8'h61,8'h4e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,A,L */
                {8'h61,8'h4f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,A,H */
                {8'h61,8'h40,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,X,A */
                {8'h61,8'h41,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,A,A */
                {8'h61,8'h42,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,C,A */
                {8'h61,8'h43,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,B,A */
                {8'h61,8'h44,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,E,A */
                {8'h61,8'h45,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,D,A */
                {8'h61,8'h46,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,L,A */
                {8'h61,8'h47,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,H,A */
                {8'h4b,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,A,saddr */
                {8'h4f,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,A,!addr16 */
                {8'h4d,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,A,[HL] */
                {8'h4e,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,A,[HL+byte] */
                {8'h61,8'hc0,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,A,[HL+B] */
                {8'h61,8'hc2,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP,A,[HL+C] */
                {8'h61,8'hde,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMPS,X,[HL+byte] */
                {8'hd1,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP0,,A */
                {8'hd0,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP0,,X */
                {8'hd3,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP0,,B */
                {8'hd2,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP0,,C */
                {8'hd4,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP0,,saddr */
                {8'hd5,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMP0,,!addr16 */
                {8'h04,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDW,AX,#word */
                {8'h01,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDW,AX,AX */
                {8'h03,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDW,AX,BC */
                {8'h05,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDW,AX,DE */
                {8'h07,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDW,AX,HL */
                {8'h06,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDW,AX,saddrp */
                {8'h02,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDW,AX,!addr16 */
                {8'h61,8'h09,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDW,AX,[HL+byte] */
                {8'h24,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBW,AX,#word */
                {8'h21,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBW,AX,AX */
                {8'h23,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBW,AX,BC */
                {8'h25,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBW,AX,DE */
                {8'h27,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBW,AX,HL */
                {8'h26,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBW,AX,saddrp */
                {8'h22,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBW,AX,!addr16 */
                {8'h61,8'h29,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBW,AX,[HL+byte] */
                {8'h44,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMPW,AX,#word */
                {8'h43,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMPW,AX,BC */
                {8'h45,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMPW,AX,DE */
                {8'h47,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMPW,AX,HL */
                {8'h46,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMPW,AX,saddrp */
                {8'h42,8'hxx,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMPW,AX,!addr16 */
                {8'h61,8'h49,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CMPW,AX,[HL+byte] */
                {8'h31,8'h0a,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHR,A,0 */
                {8'h31,8'h1a,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHR,A,1 */
                {8'h31,8'h2a,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHR,A,2 */
                {8'h31,8'h3a,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHR,A,3 */
                {8'h31,8'h4a,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHR,A,4 */
                {8'h31,8'h5a,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHR,A,5 */
                {8'h31,8'h6a,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHR,A,6 */
                {8'h31,8'h7a,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHR,A,7 */
                {8'h31,8'h0e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHRW,AX,0 */
                {8'h31,8'h1e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHRW,AX,1 */
                {8'h31,8'h2e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHRW,AX,2 */
                {8'h31,8'h3e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHRW,AX,3 */
                {8'h31,8'h4e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHRW,AX,4 */
                {8'h31,8'h5e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHRW,AX,5 */
                {8'h31,8'h6e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHRW,AX,6 */
                {8'h31,8'h7e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHRW,AX,7 */
                {8'h31,8'h8e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHRW,AX,8 */
                {8'h31,8'h9e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHRW,AX,9 */
                {8'h31,8'hae,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHRW,AX,10 */
                {8'h31,8'hbe,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHRW,AX,11 */
                {8'h31,8'hce,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHRW,AX,12 */
                {8'h31,8'hde,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHRW,AX,13 */
                {8'h31,8'hee,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHRW,AX,14 */
                {8'h31,8'hfe,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHRW,AX,15 */
                {8'h31,8'h09,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,A,0 */
                {8'h31,8'h19,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,A,1 */
                {8'h31,8'h29,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,A,2 */
                {8'h31,8'h39,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,A,3 */
                {8'h31,8'h49,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,A,4 */
                {8'h31,8'h59,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,A,5 */
                {8'h31,8'h69,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,A,6 */
                {8'h31,8'h79,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,A,7 */
                {8'h31,8'h08,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,B,0 */
                {8'h31,8'h18,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,B,1 */
                {8'h31,8'h28,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,B,2 */
                {8'h31,8'h38,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,B,3 */
                {8'h31,8'h48,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,B,4 */
                {8'h31,8'h58,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,B,5 */
                {8'h31,8'h68,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,B,6 */
                {8'h31,8'h78,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,B,7 */
                {8'h31,8'h07,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,C,0 */
                {8'h31,8'h17,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,C,1 */
                {8'h31,8'h27,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,C,2 */
                {8'h31,8'h37,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,C,3 */
                {8'h31,8'h47,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,C,4 */
                {8'h31,8'h57,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,C,5 */
                {8'h31,8'h67,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,C,6 */
                {8'h31,8'h77,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,C,7 */
                {8'h31,8'h0d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,AX,0 */
                {8'h31,8'h1d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,AX,1 */
                {8'h31,8'h2d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,AX,2 */
                {8'h31,8'h3d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,AX,3 */
                {8'h31,8'h4d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,AX,4 */
                {8'h31,8'h5d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,AX,5 */
                {8'h31,8'h6d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,AX,6 */
                {8'h31,8'h7d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,AX,7 */
                {8'h31,8'h8d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,AX,8 */
                {8'h31,8'h9d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,AX,9 */
                {8'h31,8'had,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,AX,10 */
                {8'h31,8'hbd,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,AX,11 */
                {8'h31,8'hcd,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,AX,12 */
                {8'h31,8'hdd,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,AX,13 */
                {8'h31,8'hed,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,AX,14 */
                {8'h31,8'hfd,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,AX,15 */
                {8'h31,8'h0c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,BC,0 */
                {8'h31,8'h1c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,BC,1 */
                {8'h31,8'h2c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,BC,2 */
                {8'h31,8'h3c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,BC,3 */
                {8'h31,8'h4c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,BC,4 */
                {8'h31,8'h5c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,BC,5 */
                {8'h31,8'h6c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,BC,6 */
                {8'h31,8'h7c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,BC,7 */
                {8'h31,8'h8c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,BC,8 */
                {8'h31,8'h9c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,BC,9 */
                {8'h31,8'hac,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,BC,10 */
                {8'h31,8'hbc,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,BC,11 */
                {8'h31,8'hcc,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,BC,12 */
                {8'h31,8'hdc,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,BC,13 */
                {8'h31,8'hec,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,BC,14 */
                {8'h31,8'hfc,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHLW,BC,15 */
                {8'h31,8'h0b,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SAR,A,0 */
                {8'h31,8'h1b,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SAR,A,1 */
                {8'h31,8'h2b,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SAR,A,2 */
                {8'h31,8'h3b,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SAR,A,3 */
                {8'h31,8'h4b,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SAR,A,4 */
                {8'h31,8'h5b,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SAR,A,5 */
                {8'h31,8'h6b,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SAR,A,6 */
                {8'h31,8'h7b,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SAR,A,7 */
                {8'h31,8'h0f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SARW,AX,0 */
                {8'h31,8'h1f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SARW,AX,1 */
                {8'h31,8'h2f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SARW,AX,2 */
                {8'h31,8'h3f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SARW,AX,3 */
                {8'h31,8'h4f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SARW,AX,4 */
                {8'h31,8'h5f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SARW,AX,5 */
                {8'h31,8'h6f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SARW,AX,6 */
                {8'h31,8'h7f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SARW,AX,7 */
                {8'h31,8'h8f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SARW,AX,8 */
                {8'h31,8'h9f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SARW,AX,9 */
                {8'h31,8'haf,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SARW,AX,10 */
                {8'h31,8'hbf,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SARW,AX,11 */
                {8'h31,8'hcf,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SARW,AX,12 */
                {8'h31,8'hdf,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SARW,AX,13 */
                {8'h31,8'hef,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SARW,AX,14 */
                {8'h31,8'hff,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SARW,AX,15 */
                {8'h61,8'hdb,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ROR,A,1 */
                {8'h61,8'heb,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ROL,A,1 */
                {8'h61,8'hfb,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* RORC,A,1 */
                {8'h61,8'hdc,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ROLC,A,1 */
                {8'h61,8'hee,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ROLWC,AX,1 */
                {8'h61,8'hfe,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ROLWC,BC,1 */
                {8'h71,8'h04,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,saddr.0 */
                {8'h71,8'h14,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,saddr.1 */
                {8'h71,8'h24,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,saddr.2 */
                {8'h71,8'h34,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,saddr.3 */
                {8'h71,8'h44,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,saddr.4 */
                {8'h71,8'h54,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,saddr.5 */
                {8'h71,8'h64,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,saddr.6 */
                {8'h71,8'h74,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,saddr.7 */
                {8'h71,8'h0c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,sfr.0 */
                {8'h71,8'h1c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,sfr.1 */
                {8'h71,8'h2c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,sfr.2 */
                {8'h71,8'h3c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,sfr.3 */
                {8'h71,8'h4c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,sfr.4 */
                {8'h71,8'h5c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,sfr.5 */
                {8'h71,8'h6c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,sfr.6 */
                {8'h71,8'h7c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,sfr.7 */
                {8'h71,8'h8c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,A.0 */
                {8'h71,8'h9c,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,A.1 */
                {8'h71,8'hac,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,A.2 */
                {8'h71,8'hbc,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,A.3 */
                {8'h71,8'hcc,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,A.4 */
                {8'h71,8'hdc,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,A.5 */
                {8'h71,8'hec,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,A.6 */
                {8'h71,8'hfc,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,A.7 */
                {8'h71,8'h84,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,[HL].0 */
                {8'h71,8'h94,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,[HL].1 */
                {8'h71,8'ha4,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,[HL].2 */
                {8'h71,8'hb4,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,[HL].3 */
                {8'h71,8'hc4,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,[HL].4 */
                {8'h71,8'hd4,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,[HL].5 */
                {8'h71,8'he4,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,[HL].6 */
                {8'h71,8'hf4,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* MOV1,CY,[HL].7 */
                {8'h71,8'h05,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,saddr.0 */
                {8'h71,8'h15,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,saddr.1 */
                {8'h71,8'h25,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,saddr.2 */
                {8'h71,8'h35,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,saddr.3 */
                {8'h71,8'h45,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,saddr.4 */
                {8'h71,8'h55,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,saddr.5 */
                {8'h71,8'h65,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,saddr.6 */
                {8'h71,8'h75,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,saddr.7 */
                {8'h71,8'h0d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,sfr.0 */
                {8'h71,8'h1d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,sfr.1 */
                {8'h71,8'h2d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,sfr.2 */
                {8'h71,8'h3d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,sfr.3 */
                {8'h71,8'h4d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,sfr.4 */
                {8'h71,8'h5d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,sfr.5 */
                {8'h71,8'h6d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,sfr.6 */
                {8'h71,8'h7d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,sfr.7 */
                {8'h71,8'h8d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,A.0 */
                {8'h71,8'h9d,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,A.1 */
                {8'h71,8'had,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,A.2 */
                {8'h71,8'hbd,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,A.3 */
                {8'h71,8'hcd,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,A.4 */
                {8'h71,8'hdd,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,A.5 */
                {8'h71,8'hed,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,A.6 */
                {8'h71,8'hfd,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,A.7 */
                {8'h71,8'h85,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,[HL].0 */
                {8'h71,8'h95,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,[HL].1 */
                {8'h71,8'ha5,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,[HL].2 */
                {8'h71,8'hb5,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,[HL].3 */
                {8'h71,8'hc5,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,[HL].4 */
                {8'h71,8'hd5,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,[HL].5 */
                {8'h71,8'he5,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,[HL].6 */
                {8'h71,8'hf5,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* AND1,CY,[HL].7 */
                {8'h71,8'h06,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,saddr.0 */
                {8'h71,8'h16,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,saddr.1 */
                {8'h71,8'h26,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,saddr.2 */
                {8'h71,8'h36,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,saddr.3 */
                {8'h71,8'h46,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,saddr.4 */
                {8'h71,8'h56,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,saddr.5 */
                {8'h71,8'h66,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,saddr.6 */
                {8'h71,8'h76,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,saddr.7 */
                {8'h71,8'h0e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,sfr.0 */
                {8'h71,8'h1e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,sfr.1 */
                {8'h71,8'h2e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,sfr.2 */
                {8'h71,8'h3e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,sfr.3 */
                {8'h71,8'h4e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,sfr.4 */
                {8'h71,8'h5e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,sfr.5 */
                {8'h71,8'h6e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,sfr.6 */
                {8'h71,8'h7e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,sfr.7 */
                {8'h71,8'h8e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,A.0 */
                {8'h71,8'h9e,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,A.1 */
                {8'h71,8'hae,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,A.2 */
                {8'h71,8'hbe,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,A.3 */
                {8'h71,8'hce,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,A.4 */
                {8'h71,8'hde,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,A.5 */
                {8'h71,8'hee,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,A.6 */
                {8'h71,8'hfe,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,A.7 */
                {8'h71,8'h86,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,[HL].0 */
                {8'h71,8'h96,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,[HL].1 */
                {8'h71,8'ha6,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,[HL].2 */
                {8'h71,8'hb6,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,[HL].3 */
                {8'h71,8'hc6,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,[HL].4 */
                {8'h71,8'hd6,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,[HL].5 */
                {8'h71,8'he6,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,[HL].6 */
                {8'h71,8'hf6,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* OR1,CY,[HL].7 */
                {8'h71,8'h07,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,saddr.0 */
                {8'h71,8'h17,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,saddr.1 */
                {8'h71,8'h27,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,saddr.2 */
                {8'h71,8'h37,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,saddr.3 */
                {8'h71,8'h47,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,saddr.4 */
                {8'h71,8'h57,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,saddr.5 */
                {8'h71,8'h67,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,saddr.6 */
                {8'h71,8'h77,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,saddr.7 */
                {8'h71,8'h0f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,sfr.0 */
                {8'h71,8'h1f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,sfr.1 */
                {8'h71,8'h2f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,sfr.2 */
                {8'h71,8'h3f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,sfr.3 */
                {8'h71,8'h4f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,sfr.4 */
                {8'h71,8'h5f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,sfr.5 */
                {8'h71,8'h6f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,sfr.6 */
                {8'h71,8'h7f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,sfr.7 */
                {8'h71,8'h8f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,A.0 */
                {8'h71,8'h9f,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,A.1 */
                {8'h71,8'haf,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,A.2 */
                {8'h71,8'hbf,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,A.3 */
                {8'h71,8'hcf,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,A.4 */
                {8'h71,8'hdf,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,A.5 */
                {8'h71,8'hef,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,A.6 */
                {8'h71,8'hff,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,A.7 */
                {8'h71,8'h87,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,[HL].0 */
                {8'h71,8'h97,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,[HL].1 */
                {8'h71,8'ha7,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,[HL].2 */
                {8'h71,8'hb7,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,[HL].3 */
                {8'h71,8'hc7,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,[HL].4 */
                {8'h71,8'hd7,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,[HL].5 */
                {8'h71,8'he7,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,[HL].6 */
                {8'h71,8'hf7,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* XOR1,CY,[HL].7 */
                {8'h71,8'h80,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SET1,,CY */
                {8'h71,8'h88,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CLR1,,CY */
                {8'h71,8'hc0,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* NOT1,,CY */
                {8'h61,8'hec,2'b01} : dec_CY_enable_adrstage = 1'b1;  /* RETB,, */
                {8'h61,8'hfc,2'b01} : dec_CY_enable_adrstage = 1'b1;  /* RETI,, */
                {8'h61,8'hcd,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* POP,,PSW */
                {8'h61,8'h19,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,A */
                {8'h61,8'h39,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,A */
                {8'h61,8'h83,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADD,A,[HL+C] */
                {8'h61,8'h93,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h61,8'ha3,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUB,A,[HL+C] */
                {8'h61,8'hb3,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SUBC,A,[HL+C] */
                {8'h71,8'h90,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SET1,,CY */
                {8'h71,8'ha0,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SET1,,CY */
                {8'h71,8'hb0,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SET1,,CY */
                {8'h71,8'hd0,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* NOT1,,CY */
                {8'h71,8'he0,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* NOT1,,CY */
                {8'h71,8'hf0,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* NOT1,,CY */
                {8'h71,8'h98,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CLR1,,CY */
                {8'h71,8'ha8,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CLR1,,CY */
                {8'h71,8'hb8,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* CLR1,,CY */
                {8'h71,8'hc8,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* NOT1,,CY */
                {8'h71,8'hd8,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* NOT1,,CY */
                {8'h71,8'he8,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* NOT1,,CY */
                {8'h71,8'hf8,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* NOT1,,CY */
                {8'h31,8'h8a,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHR,A,0 */
                {8'h31,8'h9a,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHR,A,1 */
                {8'h31,8'haa,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHR,A,2 */
                {8'h31,8'hba,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHR,A,3 */
                {8'h31,8'hca,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHR,A,4 */
                {8'h31,8'hda,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHR,A,5 */
                {8'h31,8'hea,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHR,A,6 */
                {8'h31,8'hfa,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHR,A,7 */
                {8'h31,8'h89,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,A,0 */
                {8'h31,8'h99,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,A,1 */
                {8'h31,8'ha9,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,A,2 */
                {8'h31,8'hb9,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,A,3 */
                {8'h31,8'hc9,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,A,4 */
                {8'h31,8'hd9,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,A,5 */
                {8'h31,8'he9,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,A,6 */
                {8'h31,8'hf9,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,A,7 */
                {8'h31,8'h88,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,B,0 */
                {8'h31,8'h98,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,B,1 */
                {8'h31,8'ha8,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,B,2 */
                {8'h31,8'hb8,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,B,3 */
                {8'h31,8'hc8,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,B,4 */
                {8'h31,8'hd8,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,B,5 */
                {8'h31,8'he8,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,B,6 */
                {8'h31,8'hf8,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,B,7 */
                {8'h31,8'h87,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,C,0 */
                {8'h31,8'h97,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,C,1 */
                {8'h31,8'ha7,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,C,2 */
                {8'h31,8'hb7,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,C,3 */
                {8'h31,8'hc7,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,C,4 */
                {8'h31,8'hd7,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,C,5 */
                {8'h31,8'he7,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,C,6 */
                {8'h31,8'hf7,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SHL,C,7 */
                {8'h31,8'h8b,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SAR,A,0 */
                {8'h31,8'h9b,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SAR,A,1 */
                {8'h31,8'hab,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SAR,A,2 */
                {8'h31,8'hbb,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SAR,A,3 */
                {8'h31,8'hcb,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SAR,A,4 */
                {8'h31,8'hdb,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SAR,A,5 */
                {8'h31,8'heb,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SAR,A,6 */
                {8'h31,8'hfb,2'bxx} : dec_CY_enable_adrstage = 1'b1;  /* SAR,A,7 */
                default : dec_CY_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_CY_enable <= 1'b0;
        else if(cpuen) dec_CY_enable <= dec_CY_enable_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　ADD,ADDC,SUB,SUBC,INC,DECの						*/
/*　　　　　　メモリアクセス演算を２クロック目から１クロック目に変更		*/
/*------------------------------------------------------------------------------*/

    output dec_AC_enable;
    reg    dec_AC_enable, dec_AC_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_AC_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h0c,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,A,#byte */
                {8'h0a,8'hxx,2'bx0} : dec_AC_enable_adrstage = 1'b1;  /* ADD,saddr,#byte */
                {8'h61,8'h08,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,A,X */
                {8'h61,8'h0a,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,A,C */
                {8'h61,8'h0b,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,A,B */
                {8'h61,8'h0c,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,A,E */
                {8'h61,8'h0d,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,A,D */
                {8'h61,8'h0e,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,A,L */
                {8'h61,8'h0f,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,A,H */
                {8'h61,8'h00,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,X,A */
                {8'h61,8'h01,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,A,A */
                {8'h61,8'h02,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,C,A */
                {8'h61,8'h03,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,B,A */
                {8'h61,8'h04,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,E,A */
                {8'h61,8'h05,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,D,A */
                {8'h61,8'h06,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,L,A */
                {8'h61,8'h07,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,H,A */
                {8'h0b,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,A,saddr */
                {8'h0f,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,A,!addr16 */
                {8'h0d,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,A,[HL] */
                {8'h0e,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,A,[HL+byte] */
                {8'h61,8'h80,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,A,[HL+B] */
                {8'h61,8'h82,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,A,[HL+C] */
                {8'h1c,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,#byte */
                {8'h1a,8'hxx,2'bx0} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,saddr,#byte */
                {8'h61,8'h18,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,X */
                {8'h61,8'h1a,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,C */
                {8'h61,8'h1b,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,B */
                {8'h61,8'h1c,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,E */
                {8'h61,8'h1d,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,D */
                {8'h61,8'h1e,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,L */
                {8'h61,8'h1f,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,H */
                {8'h61,8'h10,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,X,A */
                {8'h61,8'h11,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,A */
                {8'h61,8'h12,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,C,A */
                {8'h61,8'h13,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,B,A */
                {8'h61,8'h14,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,E,A */
                {8'h61,8'h15,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,D,A */
                {8'h61,8'h16,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,L,A */
                {8'h61,8'h17,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,H,A */
                {8'h1b,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,saddr */
                {8'h1f,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,!addr16 */
                {8'h1d,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,[HL] */
                {8'h1e,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,[HL+byte] */
                {8'h61,8'h90,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,[HL+B] */
                {8'h61,8'h92,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h2c,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,A,#byte */
                {8'h2a,8'hxx,2'bx0} : dec_AC_enable_adrstage = 1'b1;  /* SUB,saddr,#byte */
                {8'h61,8'h28,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,A,X */
                {8'h61,8'h2a,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,A,C */
                {8'h61,8'h2b,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,A,B */
                {8'h61,8'h2c,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,A,E */
                {8'h61,8'h2d,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,A,D */
                {8'h61,8'h2e,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,A,L */
                {8'h61,8'h2f,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,A,H */
                {8'h61,8'h20,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,X,A */
                {8'h61,8'h21,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,A,A */
                {8'h61,8'h22,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,C,A */
                {8'h61,8'h23,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,B,A */
                {8'h61,8'h24,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,E,A */
                {8'h61,8'h25,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,D,A */
                {8'h61,8'h26,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,L,A */
                {8'h61,8'h27,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,H,A */
                {8'h2b,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,A,saddr */
                {8'h2f,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,A,!addr16 */
                {8'h2d,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,A,[HL] */
                {8'h2e,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,A,[HL+byte] */
                {8'h61,8'ha0,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,A,[HL+B] */
                {8'h61,8'ha2,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,A,[HL+C] */
                {8'h3c,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,#byte */
                {8'h3a,8'hxx,2'bx0} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,saddr,#byte */
                {8'h61,8'h38,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,X */
                {8'h61,8'h3a,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,C */
                {8'h61,8'h3b,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,B */
                {8'h61,8'h3c,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,E */
                {8'h61,8'h3d,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,D */
                {8'h61,8'h3e,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,L */
                {8'h61,8'h3f,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,H */
                {8'h61,8'h30,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,X,A */
                {8'h61,8'h31,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,A */
                {8'h61,8'h32,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,C,A */
                {8'h61,8'h33,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,B,A */
                {8'h61,8'h34,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,E,A */
                {8'h61,8'h35,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,D,A */
                {8'h61,8'h36,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,L,A */
                {8'h61,8'h37,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,H,A */
                {8'h3b,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,saddr */
                {8'h3f,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,!addr16 */
                {8'h3d,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,[HL] */
                {8'h3e,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,[HL+byte] */
                {8'h61,8'hb0,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,[HL+B] */
                {8'h61,8'hb2,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,[HL+C] */
                {8'h4c,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,A,#byte */
                {8'h4a,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,saddr,#byte */
                {8'h40,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,!addr16,#byte */
                {8'h61,8'h48,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,A,X */
                {8'h61,8'h4a,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,A,C */
                {8'h61,8'h4b,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,A,B */
                {8'h61,8'h4c,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,A,E */
                {8'h61,8'h4d,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,A,D */
                {8'h61,8'h4e,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,A,L */
                {8'h61,8'h4f,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,A,H */
                {8'h61,8'h40,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,X,A */
                {8'h61,8'h41,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,A,A */
                {8'h61,8'h42,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,C,A */
                {8'h61,8'h43,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,B,A */
                {8'h61,8'h44,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,E,A */
                {8'h61,8'h45,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,D,A */
                {8'h61,8'h46,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,L,A */
                {8'h61,8'h47,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,H,A */
                {8'h4b,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,A,saddr */
                {8'h4f,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,A,!addr16 */
                {8'h4d,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,A,[HL] */
                {8'h4e,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,A,[HL+byte] */
                {8'h61,8'hc0,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,A,[HL+B] */
                {8'h61,8'hc2,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP,A,[HL+C] */
                {8'h61,8'hde,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMPS,X,[HL+byte] */
                {8'hd1,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP0,,A */
                {8'hd0,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP0,,X */
                {8'hd3,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP0,,B */
                {8'hd2,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP0,,C */
                {8'hd4,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP0,,saddr */
                {8'hd5,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMP0,,!addr16 */
                {8'h04,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDW,AX,#word */
                {8'h01,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDW,AX,AX */
                {8'h03,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDW,AX,BC */
                {8'h05,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDW,AX,DE */
                {8'h07,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDW,AX,HL */
                {8'h06,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDW,AX,saddrp */
                {8'h02,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDW,AX,!addr16 */
                {8'h61,8'h09,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDW,AX,[HL+byte] */
                {8'h24,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBW,AX,#word */
                {8'h21,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBW,AX,AX */
                {8'h23,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBW,AX,BC */
                {8'h25,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBW,AX,DE */
                {8'h27,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBW,AX,HL */
                {8'h26,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBW,AX,saddrp */
                {8'h22,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBW,AX,!addr16 */
                {8'h61,8'h29,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBW,AX,[HL+byte] */
                {8'h44,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMPW,AX,#word */
                {8'h43,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMPW,AX,BC */
                {8'h45,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMPW,AX,DE */
                {8'h47,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMPW,AX,HL */
                {8'h46,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMPW,AX,saddrp */
                {8'h42,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMPW,AX,!addr16 */
                {8'h61,8'h49,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* CMPW,AX,[HL+byte] */
                {8'h80,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* INC,,X */
                {8'h81,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* INC,,A */
                {8'h82,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* INC,,C */
                {8'h83,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* INC,,B */
                {8'h84,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* INC,,E */
                {8'h85,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* INC,,D */
                {8'h86,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* INC,,L */
                {8'h87,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* INC,,H */
                {8'ha4,8'hxx,2'bx0} : dec_AC_enable_adrstage = 1'b1;  /* INC,,saddr */
                {8'ha0,8'hxx,2'bx0} : dec_AC_enable_adrstage = 1'b1;  /* INC,,!addr16 */
                {8'h61,8'h59,2'bx0} : dec_AC_enable_adrstage = 1'b1;  /* INC,,[HL+byte] */
                {8'h90,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* DEC,,X */
                {8'h91,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* DEC,,A */
                {8'h92,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* DEC,,C */
                {8'h93,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* DEC,,B */
                {8'h94,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* DEC,,E */
                {8'h95,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* DEC,,D */
                {8'h96,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* DEC,,L */
                {8'h97,8'hxx,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* DEC,,H */
                {8'hb4,8'hxx,2'bx0} : dec_AC_enable_adrstage = 1'b1;  /* DEC,,saddr */
                {8'hb0,8'hxx,2'bx0} : dec_AC_enable_adrstage = 1'b1;  /* DEC,,!addr16 */
                {8'h61,8'h69,2'bx0} : dec_AC_enable_adrstage = 1'b1;  /* DEC,,[HL+byte] */
                {8'h61,8'hec,2'b01} : dec_AC_enable_adrstage = 1'b1;  /* RETB,, */
                {8'h61,8'hfc,2'b01} : dec_AC_enable_adrstage = 1'b1;  /* RETI,, */
                {8'h61,8'hcd,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* POP,,PSW */
                {8'h61,8'h19,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,A */
                {8'h61,8'h39,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,A */
                {8'h61,8'h83,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADD,A,[HL+C] */
                {8'h61,8'h93,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h61,8'ha3,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUB,A,[HL+C] */
                {8'h61,8'hb3,2'bxx} : dec_AC_enable_adrstage = 1'b1;  /* SUBC,A,[HL+C] */
                default : dec_AC_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_AC_enable <= 1'b0;
        else if(cpuen) dec_AC_enable <= dec_AC_enable_adrstage;
    end
    output dec_IE_enable;
    reg    dec_IE_enable, dec_IE_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1) begin
            dec_IE_enable_adrstage = 1'b0;
        end else if(ivack == 1'b1) begin
            casex ({stage_adr})  
                {2'b10} : dec_IE_enable_adrstage = 1'b1;  /* Interrupt */
                default : dec_IE_enable_adrstage = 1'b0;
            endcase
        end else if(skpack == 1'b1) begin
            dec_IE_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hec,2'b01} : dec_IE_enable_adrstage = 1'b1;  /* RETB,, */
                {8'h61,8'hfc,2'b01} : dec_IE_enable_adrstage = 1'b1;  /* RETI,, */
                {8'h61,8'hcd,2'bxx} : dec_IE_enable_adrstage = 1'b1;  /* POP,,PSW */
                default : dec_IE_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_IE_enable <= 1'b0;
        else if(cpuen) dec_IE_enable <= dec_IE_enable_adrstage;
    end
    output dec_ISP_enable;
    reg    dec_ISP_enable, dec_ISP_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_ISP_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hec,2'b01} : dec_ISP_enable_adrstage = 1'b1;  /* RETB,, */
                {8'h61,8'hfc,2'b01} : dec_ISP_enable_adrstage = 1'b1;  /* RETI,, */
                {8'h61,8'hcd,2'bxx} : dec_ISP_enable_adrstage = 1'b1;  /* POP,,PSW */
                default : dec_ISP_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_ISP_enable <= 1'b0;
        else if(cpuen) dec_ISP_enable <= dec_ISP_enable_adrstage;
    end
    output dec_RBS_enable;
    reg    dec_RBS_enable, dec_RBS_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_RBS_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hec,2'b01} : dec_RBS_enable_adrstage = 1'b1;  /* RETB,, */
                {8'h61,8'hfc,2'b01} : dec_RBS_enable_adrstage = 1'b1;  /* RETI,, */
                {8'h61,8'hcd,2'bxx} : dec_RBS_enable_adrstage = 1'b1;  /* POP,,PSW */
                {8'h61,8'hcf,2'bxx} : dec_RBS_enable_adrstage = 1'b1;  /* SEL,,RB0 */
                {8'h61,8'hdf,2'bxx} : dec_RBS_enable_adrstage = 1'b1;  /* SEL,,RB1 */
                {8'h61,8'hef,2'bxx} : dec_RBS_enable_adrstage = 1'b1;  /* SEL,,RB2 */
                {8'h61,8'hff,2'bxx} : dec_RBS_enable_adrstage = 1'b1;  /* SEL,,RB3 */
                default : dec_RBS_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_RBS_enable <= 1'b0;
        else if(cpuen) dec_RBS_enable <= dec_RBS_enable_adrstage;
    end
    output dec_NMIS_enable;
    reg    dec_NMIS_enable, dec_NMIS_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_NMIS_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hfc,2'b01} : dec_NMIS_enable_adrstage = 1'b1;  /* RETI,, */
                default : dec_NMIS_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_NMIS_enable <= 1'b0;
        else if(cpuen) dec_NMIS_enable <= dec_NMIS_enable_adrstage;
    end
    output dec_buf0_enable;
    reg    dec_buf0_enable, dec_buf0_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_buf0_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'ha8,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* XCH,A,saddr */
                {8'h61,8'hab,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* XCH,A,sfr */
                {8'h61,8'haa,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* XCH,A,!addr16 */
                {8'h61,8'hae,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* XCH,A,[DE] */
                {8'h61,8'haf,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'hac,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* XCH,A,[HL] */
                {8'h61,8'had,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* XCH,A,[HL+byte] */
                {8'h61,8'hb9,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* XCH,A,[HL+B] */
                {8'h61,8'ha9,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* XCH,A,[HL+C] */
                {8'h0a,8'hxx,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* ADD,saddr,#byte */
                {8'h1a,8'hxx,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* ADDC,saddr,#byte */
                {8'h2a,8'hxx,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SUB,saddr,#byte */
                {8'h3a,8'hxx,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SUBC,saddr,#byte */
                {8'h5a,8'hxx,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* AND,saddr,#byte */
                {8'h6a,8'hxx,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* OR,saddr,#byte */
                {8'h7a,8'hxx,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* XOR,saddr,#byte */
                {8'ha4,8'hxx,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* INC,,saddr */
                {8'ha0,8'hxx,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* INC,,!addr16 */
                {8'h61,8'h59,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* INC,,[HL+byte] */
                {8'hb4,8'hxx,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* DEC,,saddr */
                {8'hb0,8'hxx,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* DEC,,!addr16 */
                {8'h61,8'h69,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* DEC,,[HL+byte] */
                {8'ha6,8'hxx,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* INCW,,saddrp */
                {8'ha2,8'hxx,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* INCW,,!addr16 */
                {8'h61,8'h79,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* INCW,,[HL+byte] */
                {8'hb6,8'hxx,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* DECW,,saddrp */
                {8'hb2,8'hxx,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* DECW,,!addr16 */
                {8'h61,8'h89,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* DECW,,[HL+byte] */
                {8'h71,8'h01,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,saddr.0,CY */
                {8'h71,8'h11,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,saddr.1,CY */
                {8'h71,8'h21,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,saddr.2,CY */
                {8'h71,8'h31,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,saddr.3,CY */
                {8'h71,8'h41,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,saddr.4,CY */
                {8'h71,8'h51,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,saddr.5,CY */
                {8'h71,8'h61,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,saddr.6,CY */
                {8'h71,8'h71,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,saddr.7,CY */
                {8'h71,8'h09,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,sfr.0,CY */
                {8'h71,8'h19,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,sfr.1,CY */
                {8'h71,8'h29,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,sfr.2,CY */
                {8'h71,8'h39,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,sfr.3,CY */
                {8'h71,8'h49,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,sfr.4,CY */
                {8'h71,8'h59,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,sfr.5,CY */
                {8'h71,8'h69,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,sfr.6,CY */
                {8'h71,8'h79,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,sfr.7,CY */
                {8'h71,8'h81,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,[HL].0,CY */
                {8'h71,8'h91,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,[HL].1,CY */
                {8'h71,8'ha1,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,[HL].2,CY */
                {8'h71,8'hb1,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,[HL].3,CY */
                {8'h71,8'hc1,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,[HL].4,CY */
                {8'h71,8'hd1,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,[HL].5,CY */
                {8'h71,8'he1,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,[HL].6,CY */
                {8'h71,8'hf1,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* MOV1,[HL].7,CY */
                {8'h71,8'h02,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,saddr.0 */
                {8'h71,8'h12,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,saddr.1 */
                {8'h71,8'h22,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,saddr.2 */
                {8'h71,8'h32,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,saddr.3 */
                {8'h71,8'h42,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,saddr.4 */
                {8'h71,8'h52,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,saddr.5 */
                {8'h71,8'h62,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,saddr.6 */
                {8'h71,8'h72,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,saddr.7 */
                {8'h71,8'h0a,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,sfr.0 */
                {8'h71,8'h1a,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,sfr.1 */
                {8'h71,8'h2a,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,sfr.2 */
                {8'h71,8'h3a,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,sfr.3 */
                {8'h71,8'h4a,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,sfr.4 */
                {8'h71,8'h5a,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,sfr.5 */
                {8'h71,8'h6a,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,sfr.6 */
                {8'h71,8'h7a,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,sfr.7 */
                {8'h71,8'h00,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,!addr16.0 */
                {8'h71,8'h10,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,!addr16.1 */
                {8'h71,8'h20,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,!addr16.2 */
                {8'h71,8'h30,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,!addr16.3 */
                {8'h71,8'h40,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,!addr16.4 */
                {8'h71,8'h50,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,!addr16.5 */
                {8'h71,8'h60,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,!addr16.6 */
                {8'h71,8'h70,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,!addr16.7 */
                {8'h71,8'h82,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,[HL].0 */
                {8'h71,8'h92,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,[HL].1 */
                {8'h71,8'ha2,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,[HL].2 */
                {8'h71,8'hb2,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,[HL].3 */
                {8'h71,8'hc2,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,[HL].4 */
                {8'h71,8'hd2,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,[HL].5 */
                {8'h71,8'he2,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,[HL].6 */
                {8'h71,8'hf2,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* SET1,,[HL].7 */
                {8'h71,8'h03,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,saddr.0 */
                {8'h71,8'h13,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,saddr.1 */
                {8'h71,8'h23,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,saddr.2 */
                {8'h71,8'h33,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,saddr.3 */
                {8'h71,8'h43,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,saddr.4 */
                {8'h71,8'h53,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,saddr.5 */
                {8'h71,8'h63,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,saddr.6 */
                {8'h71,8'h73,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,saddr.7 */
                {8'h71,8'h0b,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,sfr.0 */
                {8'h71,8'h1b,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,sfr.1 */
                {8'h71,8'h2b,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,sfr.2 */
                {8'h71,8'h3b,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,sfr.3 */
                {8'h71,8'h4b,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,sfr.4 */
                {8'h71,8'h5b,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,sfr.5 */
                {8'h71,8'h6b,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,sfr.6 */
                {8'h71,8'h7b,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,sfr.7 */
                {8'h71,8'h08,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,!addr16.0 */
                {8'h71,8'h18,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,!addr16.1 */
                {8'h71,8'h28,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,!addr16.2 */
                {8'h71,8'h38,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,!addr16.3 */
                {8'h71,8'h48,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,!addr16.4 */
                {8'h71,8'h58,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,!addr16.5 */
                {8'h71,8'h68,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,!addr16.6 */
                {8'h71,8'h78,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,!addr16.7 */
                {8'h71,8'h83,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,[HL].0 */
                {8'h71,8'h93,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,[HL].1 */
                {8'h71,8'ha3,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,[HL].2 */
                {8'h71,8'hb3,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,[HL].3 */
                {8'h71,8'hc3,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,[HL].4 */
                {8'h71,8'hd3,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,[HL].5 */
                {8'h71,8'he3,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,[HL].6 */
                {8'h71,8'hf3,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* CLR1,,[HL].7 */
                {8'hd7,8'hxx,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* RET,, */
                {8'h61,8'hec,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* RETB,, */
                {8'h61,8'hfc,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* RETI,, */
                {8'h31,8'h02,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,saddr.0,$addr8 */
                {8'h31,8'h12,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,saddr.1,$addr8 */
                {8'h31,8'h22,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,saddr.2,$addr8 */
                {8'h31,8'h32,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,saddr.3,$addr8 */
                {8'h31,8'h42,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,saddr.4,$addr8 */
                {8'h31,8'h52,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,saddr.5,$addr8 */
                {8'h31,8'h62,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,saddr.6,$addr8 */
                {8'h31,8'h72,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,saddr.7,$addr8 */
                {8'h31,8'h82,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,sfr.0,$addr8 */
                {8'h31,8'h92,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,sfr.1,$addr8 */
                {8'h31,8'ha2,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,sfr.2,$addr8 */
                {8'h31,8'hb2,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,sfr.3,$addr8 */
                {8'h31,8'hc2,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,sfr.4,$addr8 */
                {8'h31,8'hd2,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,sfr.5,$addr8 */
                {8'h31,8'he2,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,sfr.6,$addr8 */
                {8'h31,8'hf2,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,sfr.7,$addr8 */
                {8'h31,8'h03,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,A.0,$addr8 */
                {8'h31,8'h13,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,A.1,$addr8 */
                {8'h31,8'h23,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,A.2,$addr8 */
                {8'h31,8'h33,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,A.3,$addr8 */
                {8'h31,8'h43,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,A.4,$addr8 */
                {8'h31,8'h53,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,A.5,$addr8 */
                {8'h31,8'h63,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,A.6,$addr8 */
                {8'h31,8'h73,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,A.7,$addr8 */
                {8'h31,8'h83,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,[HL].0,$addr8 */
                {8'h31,8'h93,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,[HL].1,$addr8 */
                {8'h31,8'ha3,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,[HL].2,$addr8 */
                {8'h31,8'hb3,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,[HL].3,$addr8 */
                {8'h31,8'hc3,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,[HL].4,$addr8 */
                {8'h31,8'hd3,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,[HL].5,$addr8 */
                {8'h31,8'he3,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,[HL].6,$addr8 */
                {8'h31,8'hf3,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BT,[HL].7,$addr8 */
                {8'h31,8'h04,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,saddr.0,$addr8 */
                {8'h31,8'h14,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,saddr.1,$addr8 */
                {8'h31,8'h24,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,saddr.2,$addr8 */
                {8'h31,8'h34,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,saddr.3,$addr8 */
                {8'h31,8'h44,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,saddr.4,$addr8 */
                {8'h31,8'h54,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,saddr.5,$addr8 */
                {8'h31,8'h64,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,saddr.6,$addr8 */
                {8'h31,8'h74,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,saddr.7,$addr8 */
                {8'h31,8'h84,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,sfr.0,$addr8 */
                {8'h31,8'h94,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,sfr.1,$addr8 */
                {8'h31,8'ha4,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,sfr.2,$addr8 */
                {8'h31,8'hb4,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,sfr.3,$addr8 */
                {8'h31,8'hc4,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,sfr.4,$addr8 */
                {8'h31,8'hd4,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,sfr.5,$addr8 */
                {8'h31,8'he4,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,sfr.6,$addr8 */
                {8'h31,8'hf4,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,sfr.7,$addr8 */
                {8'h31,8'h05,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,A.0,$addr8 */
                {8'h31,8'h15,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,A.1,$addr8 */
                {8'h31,8'h25,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,A.2,$addr8 */
                {8'h31,8'h35,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,A.3,$addr8 */
                {8'h31,8'h45,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,A.4,$addr8 */
                {8'h31,8'h55,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,A.5,$addr8 */
                {8'h31,8'h65,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,A.6,$addr8 */
                {8'h31,8'h75,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,A.7,$addr8 */
                {8'h31,8'h85,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,[HL].0,$addr8 */
                {8'h31,8'h95,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,[HL].1,$addr8 */
                {8'h31,8'ha5,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,[HL].2,$addr8 */
                {8'h31,8'hb5,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,[HL].3,$addr8 */
                {8'h31,8'hc5,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,[HL].4,$addr8 */
                {8'h31,8'hd5,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,[HL].5,$addr8 */
                {8'h31,8'he5,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,[HL].6,$addr8 */
                {8'h31,8'hf5,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BF,[HL].7,$addr8 */
                {8'h31,8'h00,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                {8'h31,8'h00,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                {8'h31,8'h10,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                {8'h31,8'h10,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                {8'h31,8'h20,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                {8'h31,8'h20,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                {8'h31,8'h30,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                {8'h31,8'h30,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                {8'h31,8'h40,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                {8'h31,8'h40,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                {8'h31,8'h50,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                {8'h31,8'h50,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                {8'h31,8'h60,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                {8'h31,8'h60,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                {8'h31,8'h70,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                {8'h31,8'h70,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                {8'h31,8'h80,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                {8'h31,8'h80,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                {8'h31,8'h90,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                {8'h31,8'h90,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                {8'h31,8'ha0,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                {8'h31,8'ha0,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                {8'h31,8'hb0,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                {8'h31,8'hb0,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                {8'h31,8'hc0,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                {8'h31,8'hc0,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                {8'h31,8'hd0,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                {8'h31,8'hd0,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                {8'h31,8'he0,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                {8'h31,8'he0,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                {8'h31,8'hf0,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                {8'h31,8'hf0,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                {8'h31,8'h01,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,A.0,$addr8 */
                {8'h31,8'h11,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,A.1,$addr8 */
                {8'h31,8'h21,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,A.2,$addr8 */
                {8'h31,8'h31,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,A.3,$addr8 */
                {8'h31,8'h41,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,A.4,$addr8 */
                {8'h31,8'h51,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,A.5,$addr8 */
                {8'h31,8'h61,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,A.6,$addr8 */
                {8'h31,8'h71,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,A.7,$addr8 */
                {8'h31,8'h81,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                {8'h31,8'h81,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                {8'h31,8'h91,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                {8'h31,8'h91,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                {8'h31,8'ha1,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                {8'h31,8'ha1,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                {8'h31,8'hb1,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                {8'h31,8'hb1,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                {8'h31,8'hc1,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                {8'h31,8'hc1,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                {8'h31,8'hd1,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                {8'h31,8'hd1,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                {8'h31,8'he1,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                {8'h31,8'he1,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                {8'h31,8'hf1,2'b00} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                {8'h31,8'hf1,2'b01} : dec_buf0_enable_adrstage = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                {8'h61,8'hbb,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* XCH,A,sfr */
                {8'h61,8'hba,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* XCH,A,!addr16 */
                {8'h61,8'hbe,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* XCH,A,[DE] */
                {8'h61,8'hbf,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'hbc,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* XCH,A,[HL] */
                {8'h61,8'hbd,2'bx0} : dec_buf0_enable_adrstage = 1'b1;  /* XCH,A,[HL+byte] */
                default : dec_buf0_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_buf0_enable <= 1'b0;
        else if(cpuen) dec_buf0_enable <= dec_buf0_enable_adrstage;
    end
    output dec_buf1_enable;
    reg    dec_buf1_enable, dec_buf1_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_buf1_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'ha6,8'hxx,2'bx0} : dec_buf1_enable_adrstage = 1'b1;  /* INCW,,saddrp */
                {8'ha2,8'hxx,2'bx0} : dec_buf1_enable_adrstage = 1'b1;  /* INCW,,!addr16 */
                {8'h61,8'h79,2'bx0} : dec_buf1_enable_adrstage = 1'b1;  /* INCW,,[HL+byte] */
                {8'hb6,8'hxx,2'bx0} : dec_buf1_enable_adrstage = 1'b1;  /* DECW,,saddrp */
                {8'hb2,8'hxx,2'bx0} : dec_buf1_enable_adrstage = 1'b1;  /* DECW,,!addr16 */
                {8'h61,8'h89,2'bx0} : dec_buf1_enable_adrstage = 1'b1;  /* DECW,,[HL+byte] */
                {8'hd7,8'hxx,2'b00} : dec_buf1_enable_adrstage = 1'b1;  /* RET,, */
                {8'h61,8'hec,2'b00} : dec_buf1_enable_adrstage = 1'b1;  /* RETB,, */
                {8'h61,8'hfc,2'b00} : dec_buf1_enable_adrstage = 1'b1;  /* RETI,, */
                default : dec_buf1_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_buf1_enable <= 1'b0;
        else if(cpuen) dec_buf1_enable <= dec_buf1_enable_adrstage;
    end
    output dec_buf2_enable;
    reg    dec_buf2_enable, dec_buf2_enable_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1|| skpack == 1'b1) begin
            dec_buf2_enable_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hd7,8'hxx,2'b01} : dec_buf2_enable_adrstage = 1'b1;  /* RET,, */
                {8'h61,8'hec,2'b01} : dec_buf2_enable_adrstage = 1'b1;  /* RETB,, */
                {8'h61,8'hfc,2'b01} : dec_buf2_enable_adrstage = 1'b1;  /* RETI,, */
                default : dec_buf2_enable_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_buf2_enable <= 1'b0;
        else if(cpuen) dec_buf2_enable <= dec_buf2_enable_adrstage;
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_cpuwr_enable;
    reg    dec_cpuwr_enable;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(decout_mask == 1'b1) begin
//            dec_cpuwr_enable = 1'b0;
//        end else if(rstvec == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1) begin
            dec_cpuwr_enable = 1'b0;
        end else if(skpack == 1'b1) begin
            dec_cpuwr_enable = 1'b0;
        end else if(ivack == 1'b1) begin
            casex ({stage_adr})  
                {2'b00} : dec_cpuwr_enable = 1'b1;  /* Interrupt */
                {2'b01} : dec_cpuwr_enable = 1'b1;  /* Interrupt */
                default : dec_cpuwr_enable = 1'b0;
            endcase
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hcd,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,saddr,#byte */
                {8'hce,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,sfr,#byte */
                {8'hcf,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,!addr16,#byte */
                {8'hca,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,[DE+byte],#byte */
                {8'hcc,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,[HL+byte],#byte */
                {8'h9d,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,saddr,A */
                {8'h9e,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,sfr,A */
                {8'h9f,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,!addr16,A */
                {8'h99,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,[DE],A */
                {8'h9a,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,[DE+byte],A */
                {8'h9b,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,[HL],A */
                {8'h9c,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,[HL+byte],A */
                {8'h61,8'hd9,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,[HL+B],A */
                {8'h61,8'hf9,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,[HL+C],A */
                {8'h19,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,word[B],#byte */
                {8'h18,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,word[B],A */
                {8'h38,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,word[C],#byte */
                {8'h28,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,word[C],A */
                {8'h39,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,word[BC],#byte */
                {8'h48,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,word[BC],A */
                {8'hc8,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,[SP+byte],#byte */
                {8'h98,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOV,[SP+byte],A */
                {8'h61,8'hce,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOVS,[HL+byte],X */
                {8'h61,8'ha8,2'bx1} : dec_cpuwr_enable = 1'b1;  /* XCH,A,saddr */
                {8'h61,8'hab,2'bx1} : dec_cpuwr_enable = 1'b1;  /* XCH,A,sfr */
                {8'h61,8'haa,2'bx1} : dec_cpuwr_enable = 1'b1;  /* XCH,A,!addr16 */
                {8'h61,8'hae,2'bx1} : dec_cpuwr_enable = 1'b1;  /* XCH,A,[DE] */
                {8'h61,8'haf,2'bx1} : dec_cpuwr_enable = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'hac,2'bx1} : dec_cpuwr_enable = 1'b1;  /* XCH,A,[HL] */
                {8'h61,8'had,2'bx1} : dec_cpuwr_enable = 1'b1;  /* XCH,A,[HL+byte] */
                {8'h61,8'hb9,2'bx1} : dec_cpuwr_enable = 1'b1;  /* XCH,A,[HL+B] */
                {8'h61,8'ha9,2'bx1} : dec_cpuwr_enable = 1'b1;  /* XCH,A,[HL+C] */
                {8'he4,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* ONEB,,saddr */
                {8'he5,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* ONEB,,!addr16 */
                {8'hf4,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* CLRB,,saddr */
                {8'hf5,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* CLRB,,!addr16 */
                {8'hc9,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOVW,saddrp,#word */
                {8'hcb,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOVW,sfrp,#word */
                {8'hbd,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOVW,saddrp,AX */
                {8'hbe,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOVW,sfrp,AX */
                {8'hbf,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOVW,!addr16,AX */
                {8'hb9,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOVW,[DE],AX */
                {8'hba,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOVW,[DE+byte],AX */
                {8'hbb,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOVW,[HL],AX */
                {8'hbc,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOVW,[HL+byte],AX */
                {8'h58,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOVW,word[B],AX */
                {8'h68,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOVW,word[C],AX */
                {8'h78,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOVW,word[BC],AX */
                {8'hb8,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* MOVW,[SP+byte],AX */
                {8'h0a,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* ADD,saddr,#byte */
                {8'h1a,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* ADDC,saddr,#byte */
                {8'h2a,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SUB,saddr,#byte */
                {8'h3a,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SUBC,saddr,#byte */
                {8'h5a,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* AND,saddr,#byte */
                {8'h6a,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* OR,saddr,#byte */
                {8'h7a,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* XOR,saddr,#byte */
                {8'ha4,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* INC,,saddr */
                {8'ha0,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* INC,,!addr16 */
                {8'h61,8'h59,2'bx1} : dec_cpuwr_enable = 1'b1;  /* INC,,[HL+byte] */
                {8'hb4,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* DEC,,saddr */
                {8'hb0,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* DEC,,!addr16 */
                {8'h61,8'h69,2'bx1} : dec_cpuwr_enable = 1'b1;  /* DEC,,[HL+byte] */
                {8'ha6,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* INCW,,saddrp */
                {8'ha2,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* INCW,,!addr16 */
                {8'h61,8'h79,2'bx1} : dec_cpuwr_enable = 1'b1;  /* INCW,,[HL+byte] */
                {8'hb6,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* DECW,,saddrp */
                {8'hb2,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* DECW,,!addr16 */
                {8'h61,8'h89,2'bx1} : dec_cpuwr_enable = 1'b1;  /* DECW,,[HL+byte] */
                {8'h71,8'h01,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,saddr.0,CY */
                {8'h71,8'h11,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,saddr.1,CY */
                {8'h71,8'h21,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,saddr.2,CY */
                {8'h71,8'h31,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,saddr.3,CY */
                {8'h71,8'h41,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,saddr.4,CY */
                {8'h71,8'h51,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,saddr.5,CY */
                {8'h71,8'h61,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,saddr.6,CY */
                {8'h71,8'h71,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,saddr.7,CY */
                {8'h71,8'h09,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,sfr.0,CY */
                {8'h71,8'h19,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,sfr.1,CY */
                {8'h71,8'h29,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,sfr.2,CY */
                {8'h71,8'h39,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,sfr.3,CY */
                {8'h71,8'h49,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,sfr.4,CY */
                {8'h71,8'h59,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,sfr.5,CY */
                {8'h71,8'h69,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,sfr.6,CY */
                {8'h71,8'h79,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,sfr.7,CY */
                {8'h71,8'h81,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,[HL].0,CY */
                {8'h71,8'h91,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,[HL].1,CY */
                {8'h71,8'ha1,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,[HL].2,CY */
                {8'h71,8'hb1,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,[HL].3,CY */
                {8'h71,8'hc1,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,[HL].4,CY */
                {8'h71,8'hd1,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,[HL].5,CY */
                {8'h71,8'he1,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,[HL].6,CY */
                {8'h71,8'hf1,2'bx1} : dec_cpuwr_enable = 1'b1;  /* MOV1,[HL].7,CY */
                {8'h71,8'h02,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,saddr.0 */
                {8'h71,8'h12,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,saddr.1 */
                {8'h71,8'h22,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,saddr.2 */
                {8'h71,8'h32,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,saddr.3 */
                {8'h71,8'h42,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,saddr.4 */
                {8'h71,8'h52,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,saddr.5 */
                {8'h71,8'h62,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,saddr.6 */
                {8'h71,8'h72,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,saddr.7 */
                {8'h71,8'h0a,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,sfr.0 */
                {8'h71,8'h1a,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,sfr.1 */
                {8'h71,8'h2a,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,sfr.2 */
                {8'h71,8'h3a,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,sfr.3 */
                {8'h71,8'h4a,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,sfr.4 */
                {8'h71,8'h5a,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,sfr.5 */
                {8'h71,8'h6a,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,sfr.6 */
                {8'h71,8'h7a,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,sfr.7 */
                {8'h71,8'h00,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,!addr16.0 */
                {8'h71,8'h10,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,!addr16.1 */
                {8'h71,8'h20,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,!addr16.2 */
                {8'h71,8'h30,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,!addr16.3 */
                {8'h71,8'h40,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,!addr16.4 */
                {8'h71,8'h50,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,!addr16.5 */
                {8'h71,8'h60,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,!addr16.6 */
                {8'h71,8'h70,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,!addr16.7 */
                {8'h71,8'h82,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,[HL].0 */
                {8'h71,8'h92,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,[HL].1 */
                {8'h71,8'ha2,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,[HL].2 */
                {8'h71,8'hb2,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,[HL].3 */
                {8'h71,8'hc2,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,[HL].4 */
                {8'h71,8'hd2,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,[HL].5 */
                {8'h71,8'he2,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,[HL].6 */
                {8'h71,8'hf2,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SET1,,[HL].7 */
                {8'h71,8'h03,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,saddr.0 */
                {8'h71,8'h13,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,saddr.1 */
                {8'h71,8'h23,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,saddr.2 */
                {8'h71,8'h33,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,saddr.3 */
                {8'h71,8'h43,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,saddr.4 */
                {8'h71,8'h53,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,saddr.5 */
                {8'h71,8'h63,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,saddr.6 */
                {8'h71,8'h73,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,saddr.7 */
                {8'h71,8'h0b,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,sfr.0 */
                {8'h71,8'h1b,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,sfr.1 */
                {8'h71,8'h2b,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,sfr.2 */
                {8'h71,8'h3b,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,sfr.3 */
                {8'h71,8'h4b,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,sfr.4 */
                {8'h71,8'h5b,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,sfr.5 */
                {8'h71,8'h6b,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,sfr.6 */
                {8'h71,8'h7b,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,sfr.7 */
                {8'h71,8'h08,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,!addr16.0 */
                {8'h71,8'h18,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,!addr16.1 */
                {8'h71,8'h28,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,!addr16.2 */
                {8'h71,8'h38,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,!addr16.3 */
                {8'h71,8'h48,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,!addr16.4 */
                {8'h71,8'h58,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,!addr16.5 */
                {8'h71,8'h68,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,!addr16.6 */
                {8'h71,8'h78,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,!addr16.7 */
                {8'h71,8'h83,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,[HL].0 */
                {8'h71,8'h93,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,[HL].1 */
                {8'h71,8'ha3,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,[HL].2 */
                {8'h71,8'hb3,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,[HL].3 */
                {8'h71,8'hc3,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,[HL].4 */
                {8'h71,8'hd3,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,[HL].5 */
                {8'h71,8'he3,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,[HL].6 */
                {8'h71,8'hf3,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CLR1,,[HL].7 */
                {8'h61,8'hca,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALL,,AX */
                {8'h61,8'hca,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALL,,AX */
                {8'h61,8'hda,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALL,,BC */
                {8'h61,8'hda,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALL,,BC */
                {8'h61,8'hea,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALL,,DE */
                {8'h61,8'hea,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALL,,DE */
                {8'h61,8'hfa,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALL,,HL */
                {8'h61,8'hfa,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALL,,HL */
                {8'hfe,8'hxx,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALL,,$!addr16 */
                {8'hfe,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALL,,$!addr16 */
                {8'hfd,8'hxx,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALL,,!addr16 */
                {8'hfd,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALL,,!addr16 */
                {8'hfc,8'hxx,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALL,,!!addr20 */
                {8'hfc,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALL,,!!addr20 */
                {8'h61,8'h84,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0080h] */
                {8'h61,8'h84,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0080h] */
                {8'h61,8'h94,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0082h] */
                {8'h61,8'h94,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0082h] */
                {8'h61,8'ha4,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0084h] */
                {8'h61,8'ha4,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0084h] */
                {8'h61,8'hb4,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0086h] */
                {8'h61,8'hb4,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0086h] */
                {8'h61,8'hc4,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0088h] */
                {8'h61,8'hc4,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0088h] */
                {8'h61,8'hd4,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[008Ah] */
                {8'h61,8'hd4,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[008Ah] */
                {8'h61,8'he4,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[008Ch] */
                {8'h61,8'he4,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[008Ch] */
                {8'h61,8'hf4,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[008Eh] */
                {8'h61,8'hf4,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[008Eh] */
                {8'h61,8'h85,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0090h] */
                {8'h61,8'h85,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0090h] */
                {8'h61,8'h95,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0092h] */
                {8'h61,8'h95,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0092h] */
                {8'h61,8'ha5,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0094h] */
                {8'h61,8'ha5,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0094h] */
                {8'h61,8'hb5,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0096h] */
                {8'h61,8'hb5,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0096h] */
                {8'h61,8'hc5,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0098h] */
                {8'h61,8'hc5,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[0098h] */
                {8'h61,8'hd5,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[009Ah] */
                {8'h61,8'hd5,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[009Ah] */
                {8'h61,8'he5,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[009Ch] */
                {8'h61,8'he5,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[009Ch] */
                {8'h61,8'hf5,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[009Eh] */
                {8'h61,8'hf5,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[009Eh] */
                {8'h61,8'h86,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00A0h] */
                {8'h61,8'h86,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00A0h] */
                {8'h61,8'h96,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00A2h] */
                {8'h61,8'h96,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00A2h] */
                {8'h61,8'ha6,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00A4h] */
                {8'h61,8'ha6,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00A4h] */
                {8'h61,8'hb6,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00A6h] */
                {8'h61,8'hb6,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00A6h] */
                {8'h61,8'hc6,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00A8h] */
                {8'h61,8'hc6,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00A8h] */
                {8'h61,8'hd6,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00AAh] */
                {8'h61,8'hd6,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00AAh] */
                {8'h61,8'he6,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00ACh] */
                {8'h61,8'he6,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00ACh] */
                {8'h61,8'hf6,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00AEh] */
                {8'h61,8'hf6,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00AEh] */
                {8'h61,8'h87,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00B0h] */
                {8'h61,8'h87,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00B0h] */
                {8'h61,8'h97,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00B2h] */
                {8'h61,8'h97,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00B2h] */
                {8'h61,8'ha7,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00B4h] */
                {8'h61,8'ha7,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00B4h] */
                {8'h61,8'hb7,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00B6h] */
                {8'h61,8'hb7,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00B6h] */
                {8'h61,8'hc7,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00B8h] */
                {8'h61,8'hc7,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00B8h] */
                {8'h61,8'hd7,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00BAh] */
                {8'h61,8'hd7,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00BAh] */
                {8'h61,8'he7,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00BCh] */
                {8'h61,8'he7,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00BCh] */
                {8'h61,8'hf7,2'bx0} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00BEh] */
                {8'h61,8'hf7,2'bx1} : dec_cpuwr_enable = 1'b1;  /* CALLT,,[00BEh] */
                {8'h61,8'hcc,2'bx0} : dec_cpuwr_enable = 1'b1;  /* BRK,, */
                {8'h61,8'hcc,2'bx1} : dec_cpuwr_enable = 1'b1;  /* BRK,, */
                {8'h61,8'hdd,2'bxx} : dec_cpuwr_enable = 1'b1;  /* PUSH,,PSW */
                {8'hc1,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* PUSH,,AX */
                {8'hc3,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* PUSH,,BC */
                {8'hc5,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* PUSH,,DE */
                {8'hc7,8'hxx,2'bxx} : dec_cpuwr_enable = 1'b1;  /* PUSH,,HL */
                {8'h31,8'h00,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                {8'h31,8'h10,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                {8'h31,8'h20,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                {8'h31,8'h30,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                {8'h31,8'h40,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                {8'h31,8'h50,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                {8'h31,8'h60,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                {8'h31,8'h70,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                {8'h31,8'h80,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                {8'h31,8'h90,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                {8'h31,8'ha0,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                {8'h31,8'hb0,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                {8'h31,8'hc0,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                {8'h31,8'hd0,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                {8'h31,8'he0,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                {8'h31,8'hf0,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                {8'h31,8'h81,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                {8'h31,8'h91,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                {8'h31,8'ha1,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                {8'h31,8'hb1,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                {8'h31,8'hc1,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                {8'h31,8'hd1,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                {8'h31,8'he1,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                {8'h31,8'hf1,2'b10} : dec_cpuwr_enable = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                {8'hff,8'hxx,2'bx0} : dec_cpuwr_enable = 1'b1;  /* SOFT,,BREAK */
                {8'hff,8'hxx,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SOFT,,BREAK */
                {8'h61,8'ha1,2'bx0} : dec_cpuwr_enable = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'ha1,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'hb1,2'bx0} : dec_cpuwr_enable = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hb1,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hc1,2'bx0} : dec_cpuwr_enable = 1'b1;  /* SOFT4,,BREAK */
                {8'h61,8'hc1,2'bx1} : dec_cpuwr_enable = 1'b1;  /* SOFT4,,BREAK */
                {8'h61,8'hbb,2'bx1} : dec_cpuwr_enable = 1'b1;  /* XCH,A,sfr */
                {8'h61,8'hba,2'bx1} : dec_cpuwr_enable = 1'b1;  /* XCH,A,!addr16 */
                {8'h61,8'hbe,2'bx1} : dec_cpuwr_enable = 1'b1;  /* XCH,A,[DE] */
                {8'h61,8'hbf,2'bx1} : dec_cpuwr_enable = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'hbc,2'bx1} : dec_cpuwr_enable = 1'b1;  /* XCH,A,[HL] */
                {8'h61,8'hbd,2'bx1} : dec_cpuwr_enable = 1'b1;  /* XCH,A,[HL+byte] */
                default : dec_cpuwr_enable = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_cpurd_enable;
    reg    dec_cpurd_enable;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 ) begin
            dec_cpurd_enable = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h8d,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,A,saddr */
                {8'h8e,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,A,sfr */
                {8'h8f,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,A,!addr16 */
                {8'h89,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,A,[DE] */
                {8'h8a,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,A,[DE+byte] */
                {8'h8b,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,A,[HL] */
                {8'h8c,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,A,[HL+byte] */
                {8'h61,8'hc9,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,A,[HL+B] */
                {8'h61,8'he9,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,A,[HL+C] */
                {8'h09,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,A,word[B] */
                {8'h29,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,A,word[C] */
                {8'h49,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,A,word[BC] */
                {8'h88,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,A,[SP+byte] */
                {8'he8,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,B,saddr */
                {8'he9,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,B,!addr16 */
                {8'hf8,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,C,saddr */
                {8'hf9,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,C,!addr16 */
                {8'hd8,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,X,saddr */
                {8'hd9,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,X,!addr16 */
                {8'h61,8'hb8,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV,ES,saddr */
                {8'h61,8'ha8,2'bx0} : dec_cpurd_enable = 1'b1;  /* XCH,A,saddr */
                {8'h61,8'hab,2'bx0} : dec_cpurd_enable = 1'b1;  /* XCH,A,sfr */
                {8'h61,8'haa,2'bx0} : dec_cpurd_enable = 1'b1;  /* XCH,A,!addr16 */
                {8'h61,8'hae,2'bx0} : dec_cpurd_enable = 1'b1;  /* XCH,A,[DE] */
                {8'h61,8'haf,2'bx0} : dec_cpurd_enable = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'hac,2'bx0} : dec_cpurd_enable = 1'b1;  /* XCH,A,[HL] */
                {8'h61,8'had,2'bx0} : dec_cpurd_enable = 1'b1;  /* XCH,A,[HL+byte] */
                {8'h61,8'hb9,2'bx0} : dec_cpurd_enable = 1'b1;  /* XCH,A,[HL+B] */
                {8'h61,8'ha9,2'bx0} : dec_cpurd_enable = 1'b1;  /* XCH,A,[HL+C] */
                {8'had,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,AX,saddrp */
                {8'hae,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,AX,sfrp */
                {8'haf,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,AX,!addr16 */
                {8'ha9,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,AX,[DE] */
                {8'haa,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,AX,[DE+byte] */
                {8'hab,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,AX,[HL] */
                {8'hac,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,AX,[HL+byte] */
                {8'h59,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,AX,word[B] */
                {8'h69,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,AX,word[C] */
                {8'h79,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,AX,word[BC] */
                {8'ha8,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,AX,[SP+byte] */
                {8'hda,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,BC,saddrp */
                {8'hdb,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,BC,!addr16 */
                {8'hea,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,DE,saddrp */
                {8'heb,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,DE,!addr16 */
                {8'hfa,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,HL,saddrp */
                {8'hfb,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOVW,HL,!addr16 */
                {8'h0a,8'hxx,2'bx0} : dec_cpurd_enable = 1'b1;  /* ADD,saddr,#byte */
                {8'h0b,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADD,A,saddr */
                {8'h0f,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADD,A,!addr16 */
                {8'h0d,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADD,A,[HL] */
                {8'h0e,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADD,A,[HL+byte] */
                {8'h61,8'h80,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADD,A,[HL+B] */
                {8'h61,8'h82,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADD,A,[HL+C] */
                {8'h1a,8'hxx,2'bx0} : dec_cpurd_enable = 1'b1;  /* ADDC,saddr,#byte */
                {8'h1b,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADDC,A,saddr */
                {8'h1f,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADDC,A,!addr16 */
                {8'h1d,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADDC,A,[HL] */
                {8'h1e,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADDC,A,[HL+byte] */
                {8'h61,8'h90,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADDC,A,[HL+B] */
                {8'h61,8'h92,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h2a,8'hxx,2'bx0} : dec_cpurd_enable = 1'b1;  /* SUB,saddr,#byte */
                {8'h2b,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUB,A,saddr */
                {8'h2f,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUB,A,!addr16 */
                {8'h2d,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUB,A,[HL] */
                {8'h2e,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUB,A,[HL+byte] */
                {8'h61,8'ha0,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUB,A,[HL+B] */
                {8'h61,8'ha2,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUB,A,[HL+C] */
                {8'h3a,8'hxx,2'bx0} : dec_cpurd_enable = 1'b1;  /* SUBC,saddr,#byte */
                {8'h3b,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUBC,A,saddr */
                {8'h3f,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUBC,A,!addr16 */
                {8'h3d,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUBC,A,[HL] */
                {8'h3e,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUBC,A,[HL+byte] */
                {8'h61,8'hb0,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUBC,A,[HL+B] */
                {8'h61,8'hb2,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUBC,A,[HL+C] */
                {8'h5a,8'hxx,2'bx0} : dec_cpurd_enable = 1'b1;  /* AND,saddr,#byte */
                {8'h5b,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND,A,saddr */
                {8'h5f,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND,A,!addr16 */
                {8'h5d,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND,A,[HL] */
                {8'h5e,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND,A,[HL+byte] */
                {8'h61,8'hd0,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND,A,[HL+B] */
                {8'h61,8'hd2,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND,A,[HL+C] */
                {8'h6a,8'hxx,2'bx0} : dec_cpurd_enable = 1'b1;  /* OR,saddr,#byte */
                {8'h6b,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR,A,saddr */
                {8'h6f,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR,A,!addr16 */
                {8'h6d,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR,A,[HL] */
                {8'h6e,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR,A,[HL+byte] */
                {8'h61,8'he0,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR,A,[HL+B] */
                {8'h61,8'he2,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR,A,[HL+C] */
                {8'h7a,8'hxx,2'bx0} : dec_cpurd_enable = 1'b1;  /* XOR,saddr,#byte */
                {8'h7b,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR,A,saddr */
                {8'h7f,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR,A,!addr16 */
                {8'h7d,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR,A,[HL] */
                {8'h7e,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR,A,[HL+byte] */
                {8'h61,8'hf0,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR,A,[HL+B] */
                {8'h61,8'hf2,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR,A,[HL+C] */
                {8'h4a,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* CMP,saddr,#byte */
                {8'h40,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* CMP,!addr16,#byte */
                {8'h4b,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* CMP,A,saddr */
                {8'h4f,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* CMP,A,!addr16 */
                {8'h4d,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* CMP,A,[HL] */
                {8'h4e,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* CMP,A,[HL+byte] */
                {8'h61,8'hc0,2'bxx} : dec_cpurd_enable = 1'b1;  /* CMP,A,[HL+B] */
                {8'h61,8'hc2,2'bxx} : dec_cpurd_enable = 1'b1;  /* CMP,A,[HL+C] */
                {8'h61,8'hde,2'bxx} : dec_cpurd_enable = 1'b1;  /* CMPS,X,[HL+byte] */
                {8'hd4,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* CMP0,,saddr */
                {8'hd5,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* CMP0,,!addr16 */
                {8'h06,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADDW,AX,saddrp */
                {8'h02,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADDW,AX,!addr16 */
                {8'h61,8'h09,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADDW,AX,[HL+byte] */
                {8'h26,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUBW,AX,saddrp */
                {8'h22,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUBW,AX,!addr16 */
                {8'h61,8'h29,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUBW,AX,[HL+byte] */
                {8'h46,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* CMPW,AX,saddrp */
                {8'h42,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* CMPW,AX,!addr16 */
                {8'h61,8'h49,2'bxx} : dec_cpurd_enable = 1'b1;  /* CMPW,AX,[HL+byte] */
                {8'ha4,8'hxx,2'bx0} : dec_cpurd_enable = 1'b1;  /* INC,,saddr */
                {8'ha0,8'hxx,2'bx0} : dec_cpurd_enable = 1'b1;  /* INC,,!addr16 */
                {8'h61,8'h59,2'bx0} : dec_cpurd_enable = 1'b1;  /* INC,,[HL+byte] */
                {8'hb4,8'hxx,2'bx0} : dec_cpurd_enable = 1'b1;  /* DEC,,saddr */
                {8'hb0,8'hxx,2'bx0} : dec_cpurd_enable = 1'b1;  /* DEC,,!addr16 */
                {8'h61,8'h69,2'bx0} : dec_cpurd_enable = 1'b1;  /* DEC,,[HL+byte] */
                {8'ha6,8'hxx,2'bx0} : dec_cpurd_enable = 1'b1;  /* INCW,,saddrp */
                {8'ha2,8'hxx,2'bx0} : dec_cpurd_enable = 1'b1;  /* INCW,,!addr16 */
                {8'h61,8'h79,2'bx0} : dec_cpurd_enable = 1'b1;  /* INCW,,[HL+byte] */
                {8'hb6,8'hxx,2'bx0} : dec_cpurd_enable = 1'b1;  /* DECW,,saddrp */
                {8'hb2,8'hxx,2'bx0} : dec_cpurd_enable = 1'b1;  /* DECW,,!addr16 */
                {8'h61,8'h89,2'bx0} : dec_cpurd_enable = 1'b1;  /* DECW,,[HL+byte] */
                {8'h71,8'h04,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,saddr.0 */
                {8'h71,8'h14,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,saddr.1 */
                {8'h71,8'h24,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,saddr.2 */
                {8'h71,8'h34,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,saddr.3 */
                {8'h71,8'h44,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,saddr.4 */
                {8'h71,8'h54,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,saddr.5 */
                {8'h71,8'h64,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,saddr.6 */
                {8'h71,8'h74,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,saddr.7 */
                {8'h71,8'h0c,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,sfr.0 */
                {8'h71,8'h1c,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,sfr.1 */
                {8'h71,8'h2c,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,sfr.2 */
                {8'h71,8'h3c,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,sfr.3 */
                {8'h71,8'h4c,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,sfr.4 */
                {8'h71,8'h5c,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,sfr.5 */
                {8'h71,8'h6c,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,sfr.6 */
                {8'h71,8'h7c,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,sfr.7 */
                {8'h71,8'h84,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,[HL].0 */
                {8'h71,8'h94,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,[HL].1 */
                {8'h71,8'ha4,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,[HL].2 */
                {8'h71,8'hb4,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,[HL].3 */
                {8'h71,8'hc4,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,[HL].4 */
                {8'h71,8'hd4,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,[HL].5 */
                {8'h71,8'he4,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,[HL].6 */
                {8'h71,8'hf4,2'bxx} : dec_cpurd_enable = 1'b1;  /* MOV1,CY,[HL].7 */
                {8'h71,8'h01,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,saddr.0,CY */
                {8'h71,8'h11,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,saddr.1,CY */
                {8'h71,8'h21,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,saddr.2,CY */
                {8'h71,8'h31,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,saddr.3,CY */
                {8'h71,8'h41,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,saddr.4,CY */
                {8'h71,8'h51,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,saddr.5,CY */
                {8'h71,8'h61,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,saddr.6,CY */
                {8'h71,8'h71,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,saddr.7,CY */
                {8'h71,8'h09,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,sfr.0,CY */
                {8'h71,8'h19,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,sfr.1,CY */
                {8'h71,8'h29,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,sfr.2,CY */
                {8'h71,8'h39,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,sfr.3,CY */
                {8'h71,8'h49,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,sfr.4,CY */
                {8'h71,8'h59,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,sfr.5,CY */
                {8'h71,8'h69,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,sfr.6,CY */
                {8'h71,8'h79,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,sfr.7,CY */
                {8'h71,8'h81,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,[HL].0,CY */
                {8'h71,8'h91,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,[HL].1,CY */
                {8'h71,8'ha1,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,[HL].2,CY */
                {8'h71,8'hb1,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,[HL].3,CY */
                {8'h71,8'hc1,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,[HL].4,CY */
                {8'h71,8'hd1,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,[HL].5,CY */
                {8'h71,8'he1,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,[HL].6,CY */
                {8'h71,8'hf1,2'bx0} : dec_cpurd_enable = 1'b1;  /* MOV1,[HL].7,CY */
                {8'h71,8'h05,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,saddr.0 */
                {8'h71,8'h15,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,saddr.1 */
                {8'h71,8'h25,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,saddr.2 */
                {8'h71,8'h35,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,saddr.3 */
                {8'h71,8'h45,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,saddr.4 */
                {8'h71,8'h55,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,saddr.5 */
                {8'h71,8'h65,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,saddr.6 */
                {8'h71,8'h75,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,saddr.7 */
                {8'h71,8'h0d,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,sfr.0 */
                {8'h71,8'h1d,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,sfr.1 */
                {8'h71,8'h2d,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,sfr.2 */
                {8'h71,8'h3d,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,sfr.3 */
                {8'h71,8'h4d,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,sfr.4 */
                {8'h71,8'h5d,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,sfr.5 */
                {8'h71,8'h6d,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,sfr.6 */
                {8'h71,8'h7d,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,sfr.7 */
                {8'h71,8'h85,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,[HL].0 */
                {8'h71,8'h95,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,[HL].1 */
                {8'h71,8'ha5,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,[HL].2 */
                {8'h71,8'hb5,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,[HL].3 */
                {8'h71,8'hc5,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,[HL].4 */
                {8'h71,8'hd5,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,[HL].5 */
                {8'h71,8'he5,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,[HL].6 */
                {8'h71,8'hf5,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND1,CY,[HL].7 */
                {8'h71,8'h06,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,saddr.0 */
                {8'h71,8'h16,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,saddr.1 */
                {8'h71,8'h26,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,saddr.2 */
                {8'h71,8'h36,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,saddr.3 */
                {8'h71,8'h46,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,saddr.4 */
                {8'h71,8'h56,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,saddr.5 */
                {8'h71,8'h66,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,saddr.6 */
                {8'h71,8'h76,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,saddr.7 */
                {8'h71,8'h0e,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,sfr.0 */
                {8'h71,8'h1e,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,sfr.1 */
                {8'h71,8'h2e,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,sfr.2 */
                {8'h71,8'h3e,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,sfr.3 */
                {8'h71,8'h4e,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,sfr.4 */
                {8'h71,8'h5e,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,sfr.5 */
                {8'h71,8'h6e,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,sfr.6 */
                {8'h71,8'h7e,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,sfr.7 */
                {8'h71,8'h86,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,[HL].0 */
                {8'h71,8'h96,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,[HL].1 */
                {8'h71,8'ha6,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,[HL].2 */
                {8'h71,8'hb6,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,[HL].3 */
                {8'h71,8'hc6,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,[HL].4 */
                {8'h71,8'hd6,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,[HL].5 */
                {8'h71,8'he6,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,[HL].6 */
                {8'h71,8'hf6,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR1,CY,[HL].7 */
                {8'h71,8'h07,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,saddr.0 */
                {8'h71,8'h17,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,saddr.1 */
                {8'h71,8'h27,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,saddr.2 */
                {8'h71,8'h37,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,saddr.3 */
                {8'h71,8'h47,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,saddr.4 */
                {8'h71,8'h57,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,saddr.5 */
                {8'h71,8'h67,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,saddr.6 */
                {8'h71,8'h77,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,saddr.7 */
                {8'h71,8'h0f,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,sfr.0 */
                {8'h71,8'h1f,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,sfr.1 */
                {8'h71,8'h2f,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,sfr.2 */
                {8'h71,8'h3f,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,sfr.3 */
                {8'h71,8'h4f,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,sfr.4 */
                {8'h71,8'h5f,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,sfr.5 */
                {8'h71,8'h6f,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,sfr.6 */
                {8'h71,8'h7f,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,sfr.7 */
                {8'h71,8'h87,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,[HL].0 */
                {8'h71,8'h97,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,[HL].1 */
                {8'h71,8'ha7,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,[HL].2 */
                {8'h71,8'hb7,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,[HL].3 */
                {8'h71,8'hc7,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,[HL].4 */
                {8'h71,8'hd7,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,[HL].5 */
                {8'h71,8'he7,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,[HL].6 */
                {8'h71,8'hf7,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR1,CY,[HL].7 */
                {8'h71,8'h02,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,saddr.0 */
                {8'h71,8'h12,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,saddr.1 */
                {8'h71,8'h22,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,saddr.2 */
                {8'h71,8'h32,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,saddr.3 */
                {8'h71,8'h42,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,saddr.4 */
                {8'h71,8'h52,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,saddr.5 */
                {8'h71,8'h62,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,saddr.6 */
                {8'h71,8'h72,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,saddr.7 */
                {8'h71,8'h0a,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,sfr.0 */
                {8'h71,8'h1a,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,sfr.1 */
                {8'h71,8'h2a,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,sfr.2 */
                {8'h71,8'h3a,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,sfr.3 */
                {8'h71,8'h4a,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,sfr.4 */
                {8'h71,8'h5a,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,sfr.5 */
                {8'h71,8'h6a,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,sfr.6 */
                {8'h71,8'h7a,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,sfr.7 */
                {8'h71,8'h00,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,!addr16.0 */
                {8'h71,8'h10,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,!addr16.1 */
                {8'h71,8'h20,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,!addr16.2 */
                {8'h71,8'h30,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,!addr16.3 */
                {8'h71,8'h40,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,!addr16.4 */
                {8'h71,8'h50,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,!addr16.5 */
                {8'h71,8'h60,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,!addr16.6 */
                {8'h71,8'h70,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,!addr16.7 */
                {8'h71,8'h82,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,[HL].0 */
                {8'h71,8'h92,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,[HL].1 */
                {8'h71,8'ha2,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,[HL].2 */
                {8'h71,8'hb2,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,[HL].3 */
                {8'h71,8'hc2,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,[HL].4 */
                {8'h71,8'hd2,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,[HL].5 */
                {8'h71,8'he2,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,[HL].6 */
                {8'h71,8'hf2,2'bx0} : dec_cpurd_enable = 1'b1;  /* SET1,,[HL].7 */
                {8'h71,8'h03,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,saddr.0 */
                {8'h71,8'h13,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,saddr.1 */
                {8'h71,8'h23,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,saddr.2 */
                {8'h71,8'h33,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,saddr.3 */
                {8'h71,8'h43,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,saddr.4 */
                {8'h71,8'h53,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,saddr.5 */
                {8'h71,8'h63,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,saddr.6 */
                {8'h71,8'h73,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,saddr.7 */
                {8'h71,8'h0b,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,sfr.0 */
                {8'h71,8'h1b,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,sfr.1 */
                {8'h71,8'h2b,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,sfr.2 */
                {8'h71,8'h3b,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,sfr.3 */
                {8'h71,8'h4b,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,sfr.4 */
                {8'h71,8'h5b,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,sfr.5 */
                {8'h71,8'h6b,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,sfr.6 */
                {8'h71,8'h7b,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,sfr.7 */
                {8'h71,8'h08,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,!addr16.0 */
                {8'h71,8'h18,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,!addr16.1 */
                {8'h71,8'h28,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,!addr16.2 */
                {8'h71,8'h38,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,!addr16.3 */
                {8'h71,8'h48,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,!addr16.4 */
                {8'h71,8'h58,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,!addr16.5 */
                {8'h71,8'h68,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,!addr16.6 */
                {8'h71,8'h78,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,!addr16.7 */
                {8'h71,8'h83,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,[HL].0 */
                {8'h71,8'h93,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,[HL].1 */
                {8'h71,8'ha3,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,[HL].2 */
                {8'h71,8'hb3,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,[HL].3 */
                {8'h71,8'hc3,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,[HL].4 */
                {8'h71,8'hd3,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,[HL].5 */
                {8'h71,8'he3,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,[HL].6 */
                {8'h71,8'hf3,2'bx0} : dec_cpurd_enable = 1'b1;  /* CLR1,,[HL].7 */
                {8'hd7,8'hxx,2'b00} : dec_cpurd_enable = 1'b1;  /* RET,, */
                {8'hd7,8'hxx,2'b01} : dec_cpurd_enable = 1'b1;  /* RET,, */
                {8'h61,8'hec,2'b00} : dec_cpurd_enable = 1'b1;  /* RETB,, */
                {8'h61,8'hec,2'b01} : dec_cpurd_enable = 1'b1;  /* RETB,, */
                {8'h61,8'hfc,2'b00} : dec_cpurd_enable = 1'b1;  /* RETI,, */
                {8'h61,8'hfc,2'b01} : dec_cpurd_enable = 1'b1;  /* RETI,, */
                {8'h61,8'hcd,2'bxx} : dec_cpurd_enable = 1'b1;  /* POP,,PSW */
                {8'hc0,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* POP,,AX */
                {8'hc2,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* POP,,BC */
                {8'hc4,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* POP,,DE */
                {8'hc6,8'hxx,2'bxx} : dec_cpurd_enable = 1'b1;  /* POP,,HL */
                {8'h31,8'h02,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,saddr.0,$addr8 */
                {8'h31,8'h12,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,saddr.1,$addr8 */
                {8'h31,8'h22,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,saddr.2,$addr8 */
                {8'h31,8'h32,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,saddr.3,$addr8 */
                {8'h31,8'h42,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,saddr.4,$addr8 */
                {8'h31,8'h52,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,saddr.5,$addr8 */
                {8'h31,8'h62,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,saddr.6,$addr8 */
                {8'h31,8'h72,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,saddr.7,$addr8 */
                {8'h31,8'h82,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,sfr.0,$addr8 */
                {8'h31,8'h92,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,sfr.1,$addr8 */
                {8'h31,8'ha2,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,sfr.2,$addr8 */
                {8'h31,8'hb2,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,sfr.3,$addr8 */
                {8'h31,8'hc2,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,sfr.4,$addr8 */
                {8'h31,8'hd2,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,sfr.5,$addr8 */
                {8'h31,8'he2,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,sfr.6,$addr8 */
                {8'h31,8'hf2,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,sfr.7,$addr8 */
                {8'h31,8'h83,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,[HL].0,$addr8 */
                {8'h31,8'h93,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,[HL].1,$addr8 */
                {8'h31,8'ha3,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,[HL].2,$addr8 */
                {8'h31,8'hb3,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,[HL].3,$addr8 */
                {8'h31,8'hc3,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,[HL].4,$addr8 */
                {8'h31,8'hd3,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,[HL].5,$addr8 */
                {8'h31,8'he3,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,[HL].6,$addr8 */
                {8'h31,8'hf3,2'b00} : dec_cpurd_enable = 1'b1;  /* BT,[HL].7,$addr8 */
                {8'h31,8'h04,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,saddr.0,$addr8 */
                {8'h31,8'h14,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,saddr.1,$addr8 */
                {8'h31,8'h24,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,saddr.2,$addr8 */
                {8'h31,8'h34,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,saddr.3,$addr8 */
                {8'h31,8'h44,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,saddr.4,$addr8 */
                {8'h31,8'h54,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,saddr.5,$addr8 */
                {8'h31,8'h64,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,saddr.6,$addr8 */
                {8'h31,8'h74,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,saddr.7,$addr8 */
                {8'h31,8'h84,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,sfr.0,$addr8 */
                {8'h31,8'h94,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,sfr.1,$addr8 */
                {8'h31,8'ha4,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,sfr.2,$addr8 */
                {8'h31,8'hb4,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,sfr.3,$addr8 */
                {8'h31,8'hc4,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,sfr.4,$addr8 */
                {8'h31,8'hd4,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,sfr.5,$addr8 */
                {8'h31,8'he4,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,sfr.6,$addr8 */
                {8'h31,8'hf4,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,sfr.7,$addr8 */
                {8'h31,8'h85,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,[HL].0,$addr8 */
                {8'h31,8'h95,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,[HL].1,$addr8 */
                {8'h31,8'ha5,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,[HL].2,$addr8 */
                {8'h31,8'hb5,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,[HL].3,$addr8 */
                {8'h31,8'hc5,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,[HL].4,$addr8 */
                {8'h31,8'hd5,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,[HL].5,$addr8 */
                {8'h31,8'he5,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,[HL].6,$addr8 */
                {8'h31,8'hf5,2'b00} : dec_cpurd_enable = 1'b1;  /* BF,[HL].7,$addr8 */
                {8'h31,8'h00,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                {8'h31,8'h00,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                {8'h31,8'h10,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                {8'h31,8'h10,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                {8'h31,8'h20,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                {8'h31,8'h20,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                {8'h31,8'h30,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                {8'h31,8'h30,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                {8'h31,8'h40,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                {8'h31,8'h40,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                {8'h31,8'h50,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                {8'h31,8'h50,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                {8'h31,8'h60,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                {8'h31,8'h60,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                {8'h31,8'h70,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                {8'h31,8'h70,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                {8'h31,8'h80,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                {8'h31,8'h80,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                {8'h31,8'h90,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                {8'h31,8'h90,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                {8'h31,8'ha0,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                {8'h31,8'ha0,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                {8'h31,8'hb0,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                {8'h31,8'hb0,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                {8'h31,8'hc0,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                {8'h31,8'hc0,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                {8'h31,8'hd0,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                {8'h31,8'hd0,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                {8'h31,8'he0,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                {8'h31,8'he0,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                {8'h31,8'hf0,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                {8'h31,8'hf0,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                {8'h31,8'h81,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                {8'h31,8'h81,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                {8'h31,8'h91,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                {8'h31,8'h91,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                {8'h31,8'ha1,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                {8'h31,8'ha1,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                {8'h31,8'hb1,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                {8'h31,8'hb1,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                {8'h31,8'hc1,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                {8'h31,8'hc1,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                {8'h31,8'hd1,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                {8'h31,8'hd1,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                {8'h31,8'he1,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                {8'h31,8'he1,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                {8'h31,8'hf1,2'b00} : dec_cpurd_enable = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                {8'h31,8'hf1,2'b01} : dec_cpurd_enable = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                {8'h61,8'hbb,2'bx0} : dec_cpurd_enable = 1'b1;  /* XCH,A,sfr */
                {8'h61,8'hba,2'bx0} : dec_cpurd_enable = 1'b1;  /* XCH,A,!addr16 */
                {8'h61,8'hbe,2'bx0} : dec_cpurd_enable = 1'b1;  /* XCH,A,[DE] */
                {8'h61,8'hbf,2'bx0} : dec_cpurd_enable = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'hbc,2'bx0} : dec_cpurd_enable = 1'b1;  /* XCH,A,[HL] */
                {8'h61,8'hbd,2'bx0} : dec_cpurd_enable = 1'b1;  /* XCH,A,[HL+byte] */
                {8'h61,8'hd1,2'bxx} : dec_cpurd_enable = 1'b1;  /* AND,A,[HL+B] */
                {8'h61,8'he1,2'bxx} : dec_cpurd_enable = 1'b1;  /* OR,A,[HL+B] */
                {8'h61,8'hf1,2'bxx} : dec_cpurd_enable = 1'b1;  /* XOR,A,[HL+B] */
                {8'h61,8'h83,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADD,A,[HL+C] */
                {8'h61,8'h93,2'bxx} : dec_cpurd_enable = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h61,8'ha3,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUB,A,[HL+C] */
                {8'h61,8'hb3,2'bxx} : dec_cpurd_enable = 1'b1;  /* SUBC,A,[HL+C] */
                default : dec_cpurd_enable = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_enable;
    reg    dec_ma_enable;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(decout_mask == 1'b1) begin
//            dec_ma_enable = 1'b0;
//        end else if(rstvec == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1) begin
            dec_ma_enable = 1'b0;
        end else if(ivack == 1'b1) begin
            casex ({stage_adr})  
                {2'b00} : dec_ma_enable = 1'b1;  /* Interrupt */
                {2'b01} : dec_ma_enable = 1'b1;  /* Interrupt */
                default : dec_ma_enable = 1'b0;
            endcase
        end else if(skpack == 1'b1) begin
            dec_ma_enable = 1'b0;
        end else begin
            if(ID_stage0 == 8'h61) begin
                casex ({ID_stage1,stage_adr})  
                    {8'hc9,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,A,[HL+B] */
                    {8'hd9,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,[HL+B],A */
                    {8'he9,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,A,[HL+C] */
                    {8'hf9,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,[HL+C],A */
                    {8'hb8,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,ES,saddr */
                    {8'hce,2'bxx} : dec_ma_enable = 1'b1;  /* MOVS,[HL+byte],X */
                    {8'ha8,2'bx0} : dec_ma_enable = 1'b1;  /* XCH,A,saddr */
                    {8'ha8,2'bx1} : dec_ma_enable = 1'b1;  /* XCH,A,saddr */
                    {8'hab,2'bx0} : dec_ma_enable = 1'b1;  /* XCH,A,sfr */
                    {8'hab,2'bx1} : dec_ma_enable = 1'b1;  /* XCH,A,sfr */
                    {8'haa,2'bx0} : dec_ma_enable = 1'b1;  /* XCH,A,!addr16 */
                    {8'haa,2'bx1} : dec_ma_enable = 1'b1;  /* XCH,A,!addr16 */
                    {8'hae,2'bx0} : dec_ma_enable = 1'b1;  /* XCH,A,[DE] */
                    {8'hae,2'bx1} : dec_ma_enable = 1'b1;  /* XCH,A,[DE] */
                    {8'haf,2'bx0} : dec_ma_enable = 1'b1;  /* XCH,A,[DE+byte] */
                    {8'haf,2'bx1} : dec_ma_enable = 1'b1;  /* XCH,A,[DE+byte] */
                    {8'hac,2'bx0} : dec_ma_enable = 1'b1;  /* XCH,A,[HL] */
                    {8'hac,2'bx1} : dec_ma_enable = 1'b1;  /* XCH,A,[HL] */
                    {8'had,2'bx0} : dec_ma_enable = 1'b1;  /* XCH,A,[HL+byte] */
                    {8'had,2'bx1} : dec_ma_enable = 1'b1;  /* XCH,A,[HL+byte] */
                    {8'hb9,2'bx0} : dec_ma_enable = 1'b1;  /* XCH,A,[HL+B] */
                    {8'hb9,2'bx1} : dec_ma_enable = 1'b1;  /* XCH,A,[HL+B] */
                    {8'ha9,2'bx0} : dec_ma_enable = 1'b1;  /* XCH,A,[HL+C] */
                    {8'ha9,2'bx1} : dec_ma_enable = 1'b1;  /* XCH,A,[HL+C] */
                    {8'h80,2'bxx} : dec_ma_enable = 1'b1;  /* ADD,A,[HL+B] */
                    {8'h82,2'bxx} : dec_ma_enable = 1'b1;  /* ADD,A,[HL+C] */
                    {8'h90,2'bxx} : dec_ma_enable = 1'b1;  /* ADDC,A,[HL+B] */
                    {8'h92,2'bxx} : dec_ma_enable = 1'b1;  /* ADDC,A,[HL+C] */
                    {8'ha0,2'bxx} : dec_ma_enable = 1'b1;  /* SUB,A,[HL+B] */
                    {8'ha2,2'bxx} : dec_ma_enable = 1'b1;  /* SUB,A,[HL+C] */
                    {8'hb0,2'bxx} : dec_ma_enable = 1'b1;  /* SUBC,A,[HL+B] */
                    {8'hb2,2'bxx} : dec_ma_enable = 1'b1;  /* SUBC,A,[HL+C] */
                    {8'hd0,2'bxx} : dec_ma_enable = 1'b1;  /* AND,A,[HL+B] */
                    {8'hd2,2'bxx} : dec_ma_enable = 1'b1;  /* AND,A,[HL+C] */
                    {8'he0,2'bxx} : dec_ma_enable = 1'b1;  /* OR,A,[HL+B] */
                    {8'he2,2'bxx} : dec_ma_enable = 1'b1;  /* OR,A,[HL+C] */
                    {8'hf0,2'bxx} : dec_ma_enable = 1'b1;  /* XOR,A,[HL+B] */
                    {8'hf2,2'bxx} : dec_ma_enable = 1'b1;  /* XOR,A,[HL+C] */
                    {8'hc0,2'bxx} : dec_ma_enable = 1'b1;  /* CMP,A,[HL+B] */
                    {8'hc2,2'bxx} : dec_ma_enable = 1'b1;  /* CMP,A,[HL+C] */
                    {8'hde,2'bxx} : dec_ma_enable = 1'b1;  /* CMPS,X,[HL+byte] */
                    {8'h09,2'bxx} : dec_ma_enable = 1'b1;  /* ADDW,AX,[HL+byte] */
                    {8'h29,2'bxx} : dec_ma_enable = 1'b1;  /* SUBW,AX,[HL+byte] */
                    {8'h49,2'bxx} : dec_ma_enable = 1'b1;  /* CMPW,AX,[HL+byte] */
                    {8'h59,2'bx0} : dec_ma_enable = 1'b1;  /* INC,,[HL+byte] */
                    {8'h59,2'bx1} : dec_ma_enable = 1'b1;  /* INC,,[HL+byte] */
                    {8'h69,2'bx0} : dec_ma_enable = 1'b1;  /* DEC,,[HL+byte] */
                    {8'h69,2'bx1} : dec_ma_enable = 1'b1;  /* DEC,,[HL+byte] */
                    {8'h79,2'bx0} : dec_ma_enable = 1'b1;  /* INCW,,[HL+byte] */
                    {8'h79,2'bx1} : dec_ma_enable = 1'b1;  /* INCW,,[HL+byte] */
                    {8'h89,2'bx0} : dec_ma_enable = 1'b1;  /* DECW,,[HL+byte] */
                    {8'h89,2'bx1} : dec_ma_enable = 1'b1;  /* DECW,,[HL+byte] */
                    {8'hca,2'bx0} : dec_ma_enable = 1'b1;  /* CALL,,AX */
                    {8'hca,2'bx1} : dec_ma_enable = 1'b1;  /* CALL,,AX */
                    {8'hda,2'bx0} : dec_ma_enable = 1'b1;  /* CALL,,BC */
                    {8'hda,2'bx1} : dec_ma_enable = 1'b1;  /* CALL,,BC */
                    {8'hea,2'bx0} : dec_ma_enable = 1'b1;  /* CALL,,DE */
                    {8'hea,2'bx1} : dec_ma_enable = 1'b1;  /* CALL,,DE */
                    {8'hfa,2'bx0} : dec_ma_enable = 1'b1;  /* CALL,,HL */
                    {8'hfa,2'bx1} : dec_ma_enable = 1'b1;  /* CALL,,HL */
                    {8'h84,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[0080h] */
                    {8'h84,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[0080h] */
                    {8'h94,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[0082h] */
                    {8'h94,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[0082h] */
                    {8'ha4,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[0084h] */
                    {8'ha4,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[0084h] */
                    {8'hb4,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[0086h] */
                    {8'hb4,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[0086h] */
                    {8'hc4,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[0088h] */
                    {8'hc4,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[0088h] */
                    {8'hd4,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[008Ah] */
                    {8'hd4,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[008Ah] */
                    {8'he4,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[008Ch] */
                    {8'he4,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[008Ch] */
                    {8'hf4,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[008Eh] */
                    {8'hf4,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[008Eh] */
                    {8'h85,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[0090h] */
                    {8'h85,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[0090h] */
                    {8'h95,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[0092h] */
                    {8'h95,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[0092h] */
                    {8'ha5,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[0094h] */
                    {8'ha5,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[0094h] */
                    {8'hb5,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[0096h] */
                    {8'hb5,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[0096h] */
                    {8'hc5,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[0098h] */
                    {8'hc5,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[0098h] */
                    {8'hd5,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[009Ah] */
                    {8'hd5,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[009Ah] */
                    {8'he5,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[009Ch] */
                    {8'he5,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[009Ch] */
                    {8'hf5,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[009Eh] */
                    {8'hf5,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[009Eh] */
                    {8'h86,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[00A0h] */
                    {8'h86,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[00A0h] */
                    {8'h96,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[00A2h] */
                    {8'h96,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[00A2h] */
                    {8'ha6,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[00A4h] */
                    {8'ha6,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[00A4h] */
                    {8'hb6,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[00A6h] */
                    {8'hb6,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[00A6h] */
                    {8'hc6,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[00A8h] */
                    {8'hc6,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[00A8h] */
                    {8'hd6,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[00AAh] */
                    {8'hd6,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[00AAh] */
                    {8'he6,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[00ACh] */
                    {8'he6,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[00ACh] */
                    {8'hf6,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[00AEh] */
                    {8'hf6,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[00AEh] */
                    {8'h87,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[00B0h] */
                    {8'h87,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[00B0h] */
                    {8'h97,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[00B2h] */
                    {8'h97,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[00B2h] */
                    {8'ha7,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[00B4h] */
                    {8'ha7,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[00B4h] */
                    {8'hb7,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[00B6h] */
                    {8'hb7,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[00B6h] */
                    {8'hc7,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[00B8h] */
                    {8'hc7,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[00B8h] */
                    {8'hd7,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[00BAh] */
                    {8'hd7,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[00BAh] */
                    {8'he7,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[00BCh] */
                    {8'he7,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[00BCh] */
                    {8'hf7,2'bx0} : dec_ma_enable = 1'b1;  /* CALLT,,[00BEh] */
                    {8'hf7,2'bx1} : dec_ma_enable = 1'b1;  /* CALLT,,[00BEh] */
                    {8'hcc,2'bx0} : dec_ma_enable = 1'b1;  /* BRK,, */
                    {8'hcc,2'bx1} : dec_ma_enable = 1'b1;  /* BRK,, */
                    {8'hec,2'b00} : dec_ma_enable = 1'b1;  /* RETB,, */
                    {8'hec,2'b01} : dec_ma_enable = 1'b1;  /* RETB,, */
                    {8'hfc,2'b00} : dec_ma_enable = 1'b1;  /* RETI,, */
                    {8'hfc,2'b01} : dec_ma_enable = 1'b1;  /* RETI,, */
                    {8'hdd,2'bxx} : dec_ma_enable = 1'b1;  /* PUSH,,PSW */
                    {8'hcd,2'bxx} : dec_ma_enable = 1'b1;  /* POP,,PSW */
                    {8'ha1,2'bx0} : dec_ma_enable = 1'b1;  /* SOFT2,,BREAK */
                    {8'ha1,2'bx1} : dec_ma_enable = 1'b1;  /* SOFT2,,BREAK */
                    {8'hb1,2'bx0} : dec_ma_enable = 1'b1;  /* SOFT3,,BREAK */
                    {8'hb1,2'bx1} : dec_ma_enable = 1'b1;  /* SOFT3,,BREAK */
                    {8'hc1,2'bx0} : dec_ma_enable = 1'b1;  /* SOFT4,,BREAK */
                    {8'hc1,2'bx1} : dec_ma_enable = 1'b1;  /* SOFT4,,BREAK */
                    {8'hbb,2'bx0} : dec_ma_enable = 1'b1;  /* XCH,A,sfr */
                    {8'hbb,2'bx1} : dec_ma_enable = 1'b1;  /* XCH,A,sfr */
                    {8'hba,2'bx0} : dec_ma_enable = 1'b1;  /* XCH,A,!addr16 */
                    {8'hba,2'bx1} : dec_ma_enable = 1'b1;  /* XCH,A,!addr16 */
                    {8'hbe,2'bx0} : dec_ma_enable = 1'b1;  /* XCH,A,[DE] */
                    {8'hbe,2'bx1} : dec_ma_enable = 1'b1;  /* XCH,A,[DE] */
                    {8'hbf,2'bx0} : dec_ma_enable = 1'b1;  /* XCH,A,[DE+byte] */
                    {8'hbf,2'bx1} : dec_ma_enable = 1'b1;  /* XCH,A,[DE+byte] */
                    {8'hbc,2'bx0} : dec_ma_enable = 1'b1;  /* XCH,A,[HL] */
                    {8'hbc,2'bx1} : dec_ma_enable = 1'b1;  /* XCH,A,[HL] */
                    {8'hbd,2'bx0} : dec_ma_enable = 1'b1;  /* XCH,A,[HL+byte] */
                    {8'hbd,2'bx1} : dec_ma_enable = 1'b1;  /* XCH,A,[HL+byte] */
                    {8'hd1,2'bxx} : dec_ma_enable = 1'b1;  /* AND,A,[HL+B] */
                    {8'he1,2'bxx} : dec_ma_enable = 1'b1;  /* OR,A,[HL+B] */
                    {8'hf1,2'bxx} : dec_ma_enable = 1'b1;  /* XOR,A,[HL+B] */
                    {8'h83,2'bxx} : dec_ma_enable = 1'b1;  /* ADD,A,[HL+C] */
                    {8'h93,2'bxx} : dec_ma_enable = 1'b1;  /* ADDC,A,[HL+C] */
                    {8'ha3,2'bxx} : dec_ma_enable = 1'b1;  /* SUB,A,[HL+C] */
                    {8'hb3,2'bxx} : dec_ma_enable = 1'b1;  /* SUBC,A,[HL+C] */
                    default : dec_ma_enable = 1'b0;
                endcase
            end else if(ID_stage0 == 8'h71) begin
                casex ({ID_stage1,stage_adr})  
                    {8'h04,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,saddr.0 */
                    {8'h14,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,saddr.1 */
                    {8'h24,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,saddr.2 */
                    {8'h34,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,saddr.3 */
                    {8'h44,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,saddr.4 */
                    {8'h54,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,saddr.5 */
                    {8'h64,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,saddr.6 */
                    {8'h74,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,saddr.7 */
                    {8'h0c,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,sfr.0 */
                    {8'h1c,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,sfr.1 */
                    {8'h2c,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,sfr.2 */
                    {8'h3c,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,sfr.3 */
                    {8'h4c,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,sfr.4 */
                    {8'h5c,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,sfr.5 */
                    {8'h6c,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,sfr.6 */
                    {8'h7c,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,sfr.7 */
                    {8'h84,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,[HL].0 */
                    {8'h94,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,[HL].1 */
                    {8'ha4,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,[HL].2 */
                    {8'hb4,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,[HL].3 */
                    {8'hc4,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,[HL].4 */
                    {8'hd4,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,[HL].5 */
                    {8'he4,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,[HL].6 */
                    {8'hf4,2'bxx} : dec_ma_enable = 1'b1;  /* MOV1,CY,[HL].7 */
                    {8'h01,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,saddr.0,CY */
                    {8'h01,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,saddr.0,CY */
                    {8'h11,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,saddr.1,CY */
                    {8'h11,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,saddr.1,CY */
                    {8'h21,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,saddr.2,CY */
                    {8'h21,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,saddr.2,CY */
                    {8'h31,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,saddr.3,CY */
                    {8'h31,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,saddr.3,CY */
                    {8'h41,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,saddr.4,CY */
                    {8'h41,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,saddr.4,CY */
                    {8'h51,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,saddr.5,CY */
                    {8'h51,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,saddr.5,CY */
                    {8'h61,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,saddr.6,CY */
                    {8'h61,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,saddr.6,CY */
                    {8'h71,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,saddr.7,CY */
                    {8'h71,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,saddr.7,CY */
                    {8'h09,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,sfr.0,CY */
                    {8'h09,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,sfr.0,CY */
                    {8'h19,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,sfr.1,CY */
                    {8'h19,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,sfr.1,CY */
                    {8'h29,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,sfr.2,CY */
                    {8'h29,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,sfr.2,CY */
                    {8'h39,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,sfr.3,CY */
                    {8'h39,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,sfr.3,CY */
                    {8'h49,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,sfr.4,CY */
                    {8'h49,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,sfr.4,CY */
                    {8'h59,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,sfr.5,CY */
                    {8'h59,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,sfr.5,CY */
                    {8'h69,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,sfr.6,CY */
                    {8'h69,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,sfr.6,CY */
                    {8'h79,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,sfr.7,CY */
                    {8'h79,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,sfr.7,CY */
                    {8'h81,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,[HL].0,CY */
                    {8'h81,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,[HL].0,CY */
                    {8'h91,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,[HL].1,CY */
                    {8'h91,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,[HL].1,CY */
                    {8'ha1,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,[HL].2,CY */
                    {8'ha1,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,[HL].2,CY */
                    {8'hb1,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,[HL].3,CY */
                    {8'hb1,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,[HL].3,CY */
                    {8'hc1,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,[HL].4,CY */
                    {8'hc1,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,[HL].4,CY */
                    {8'hd1,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,[HL].5,CY */
                    {8'hd1,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,[HL].5,CY */
                    {8'he1,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,[HL].6,CY */
                    {8'he1,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,[HL].6,CY */
                    {8'hf1,2'bx0} : dec_ma_enable = 1'b1;  /* MOV1,[HL].7,CY */
                    {8'hf1,2'bx1} : dec_ma_enable = 1'b1;  /* MOV1,[HL].7,CY */
                    {8'h05,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,saddr.0 */
                    {8'h15,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,saddr.1 */
                    {8'h25,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,saddr.2 */
                    {8'h35,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,saddr.3 */
                    {8'h45,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,saddr.4 */
                    {8'h55,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,saddr.5 */
                    {8'h65,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,saddr.6 */
                    {8'h75,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,saddr.7 */
                    {8'h0d,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,sfr.0 */
                    {8'h1d,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,sfr.1 */
                    {8'h2d,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,sfr.2 */
                    {8'h3d,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,sfr.3 */
                    {8'h4d,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,sfr.4 */
                    {8'h5d,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,sfr.5 */
                    {8'h6d,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,sfr.6 */
                    {8'h7d,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,sfr.7 */
                    {8'h85,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,[HL].0 */
                    {8'h95,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,[HL].1 */
                    {8'ha5,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,[HL].2 */
                    {8'hb5,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,[HL].3 */
                    {8'hc5,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,[HL].4 */
                    {8'hd5,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,[HL].5 */
                    {8'he5,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,[HL].6 */
                    {8'hf5,2'bxx} : dec_ma_enable = 1'b1;  /* AND1,CY,[HL].7 */
                    {8'h06,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,saddr.0 */
                    {8'h16,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,saddr.1 */
                    {8'h26,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,saddr.2 */
                    {8'h36,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,saddr.3 */
                    {8'h46,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,saddr.4 */
                    {8'h56,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,saddr.5 */
                    {8'h66,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,saddr.6 */
                    {8'h76,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,saddr.7 */
                    {8'h0e,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,sfr.0 */
                    {8'h1e,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,sfr.1 */
                    {8'h2e,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,sfr.2 */
                    {8'h3e,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,sfr.3 */
                    {8'h4e,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,sfr.4 */
                    {8'h5e,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,sfr.5 */
                    {8'h6e,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,sfr.6 */
                    {8'h7e,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,sfr.7 */
                    {8'h86,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,[HL].0 */
                    {8'h96,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,[HL].1 */
                    {8'ha6,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,[HL].2 */
                    {8'hb6,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,[HL].3 */
                    {8'hc6,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,[HL].4 */
                    {8'hd6,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,[HL].5 */
                    {8'he6,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,[HL].6 */
                    {8'hf6,2'bxx} : dec_ma_enable = 1'b1;  /* OR1,CY,[HL].7 */
                    {8'h07,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,saddr.0 */
                    {8'h17,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,saddr.1 */
                    {8'h27,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,saddr.2 */
                    {8'h37,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,saddr.3 */
                    {8'h47,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,saddr.4 */
                    {8'h57,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,saddr.5 */
                    {8'h67,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,saddr.6 */
                    {8'h77,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,saddr.7 */
                    {8'h0f,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,sfr.0 */
                    {8'h1f,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,sfr.1 */
                    {8'h2f,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,sfr.2 */
                    {8'h3f,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,sfr.3 */
                    {8'h4f,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,sfr.4 */
                    {8'h5f,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,sfr.5 */
                    {8'h6f,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,sfr.6 */
                    {8'h7f,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,sfr.7 */
                    {8'h87,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,[HL].0 */
                    {8'h97,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,[HL].1 */
                    {8'ha7,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,[HL].2 */
                    {8'hb7,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,[HL].3 */
                    {8'hc7,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,[HL].4 */
                    {8'hd7,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,[HL].5 */
                    {8'he7,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,[HL].6 */
                    {8'hf7,2'bxx} : dec_ma_enable = 1'b1;  /* XOR1,CY,[HL].7 */
                    {8'h02,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,saddr.0 */
                    {8'h02,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,saddr.0 */
                    {8'h12,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,saddr.1 */
                    {8'h12,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,saddr.1 */
                    {8'h22,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,saddr.2 */
                    {8'h22,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,saddr.2 */
                    {8'h32,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,saddr.3 */
                    {8'h32,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,saddr.3 */
                    {8'h42,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,saddr.4 */
                    {8'h42,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,saddr.4 */
                    {8'h52,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,saddr.5 */
                    {8'h52,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,saddr.5 */
                    {8'h62,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,saddr.6 */
                    {8'h62,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,saddr.6 */
                    {8'h72,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,saddr.7 */
                    {8'h72,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,saddr.7 */
                    {8'h0a,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,sfr.0 */
                    {8'h0a,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,sfr.0 */
                    {8'h1a,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,sfr.1 */
                    {8'h1a,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,sfr.1 */
                    {8'h2a,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,sfr.2 */
                    {8'h2a,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,sfr.2 */
                    {8'h3a,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,sfr.3 */
                    {8'h3a,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,sfr.3 */
                    {8'h4a,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,sfr.4 */
                    {8'h4a,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,sfr.4 */
                    {8'h5a,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,sfr.5 */
                    {8'h5a,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,sfr.5 */
                    {8'h6a,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,sfr.6 */
                    {8'h6a,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,sfr.6 */
                    {8'h7a,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,sfr.7 */
                    {8'h7a,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,sfr.7 */
                    {8'h00,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,!addr16.0 */
                    {8'h00,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,!addr16.0 */
                    {8'h10,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,!addr16.1 */
                    {8'h10,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,!addr16.1 */
                    {8'h20,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,!addr16.2 */
                    {8'h20,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,!addr16.2 */
                    {8'h30,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,!addr16.3 */
                    {8'h30,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,!addr16.3 */
                    {8'h40,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,!addr16.4 */
                    {8'h40,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,!addr16.4 */
                    {8'h50,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,!addr16.5 */
                    {8'h50,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,!addr16.5 */
                    {8'h60,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,!addr16.6 */
                    {8'h60,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,!addr16.6 */
                    {8'h70,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,!addr16.7 */
                    {8'h70,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,!addr16.7 */
                    {8'h82,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,[HL].0 */
                    {8'h82,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,[HL].0 */
                    {8'h92,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,[HL].1 */
                    {8'h92,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,[HL].1 */
                    {8'ha2,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,[HL].2 */
                    {8'ha2,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,[HL].2 */
                    {8'hb2,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,[HL].3 */
                    {8'hb2,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,[HL].3 */
                    {8'hc2,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,[HL].4 */
                    {8'hc2,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,[HL].4 */
                    {8'hd2,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,[HL].5 */
                    {8'hd2,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,[HL].5 */
                    {8'he2,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,[HL].6 */
                    {8'he2,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,[HL].6 */
                    {8'hf2,2'bx0} : dec_ma_enable = 1'b1;  /* SET1,,[HL].7 */
                    {8'hf2,2'bx1} : dec_ma_enable = 1'b1;  /* SET1,,[HL].7 */
                    {8'h03,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,saddr.0 */
                    {8'h03,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,saddr.0 */
                    {8'h13,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,saddr.1 */
                    {8'h13,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,saddr.1 */
                    {8'h23,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,saddr.2 */
                    {8'h23,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,saddr.2 */
                    {8'h33,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,saddr.3 */
                    {8'h33,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,saddr.3 */
                    {8'h43,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,saddr.4 */
                    {8'h43,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,saddr.4 */
                    {8'h53,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,saddr.5 */
                    {8'h53,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,saddr.5 */
                    {8'h63,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,saddr.6 */
                    {8'h63,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,saddr.6 */
                    {8'h73,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,saddr.7 */
                    {8'h73,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,saddr.7 */
                    {8'h0b,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,sfr.0 */
                    {8'h0b,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,sfr.0 */
                    {8'h1b,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,sfr.1 */
                    {8'h1b,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,sfr.1 */
                    {8'h2b,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,sfr.2 */
                    {8'h2b,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,sfr.2 */
                    {8'h3b,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,sfr.3 */
                    {8'h3b,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,sfr.3 */
                    {8'h4b,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,sfr.4 */
                    {8'h4b,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,sfr.4 */
                    {8'h5b,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,sfr.5 */
                    {8'h5b,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,sfr.5 */
                    {8'h6b,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,sfr.6 */
                    {8'h6b,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,sfr.6 */
                    {8'h7b,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,sfr.7 */
                    {8'h7b,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,sfr.7 */
                    {8'h08,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,!addr16.0 */
                    {8'h08,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,!addr16.0 */
                    {8'h18,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,!addr16.1 */
                    {8'h18,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,!addr16.1 */
                    {8'h28,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,!addr16.2 */
                    {8'h28,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,!addr16.2 */
                    {8'h38,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,!addr16.3 */
                    {8'h38,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,!addr16.3 */
                    {8'h48,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,!addr16.4 */
                    {8'h48,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,!addr16.4 */
                    {8'h58,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,!addr16.5 */
                    {8'h58,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,!addr16.5 */
                    {8'h68,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,!addr16.6 */
                    {8'h68,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,!addr16.6 */
                    {8'h78,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,!addr16.7 */
                    {8'h78,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,!addr16.7 */
                    {8'h83,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,[HL].0 */
                    {8'h83,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,[HL].0 */
                    {8'h93,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,[HL].1 */
                    {8'h93,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,[HL].1 */
                    {8'ha3,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,[HL].2 */
                    {8'ha3,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,[HL].2 */
                    {8'hb3,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,[HL].3 */
                    {8'hb3,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,[HL].3 */
                    {8'hc3,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,[HL].4 */
                    {8'hc3,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,[HL].4 */
                    {8'hd3,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,[HL].5 */
                    {8'hd3,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,[HL].5 */
                    {8'he3,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,[HL].6 */
                    {8'he3,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,[HL].6 */
                    {8'hf3,2'bx0} : dec_ma_enable = 1'b1;  /* CLR1,,[HL].7 */
                    {8'hf3,2'bx1} : dec_ma_enable = 1'b1;  /* CLR1,,[HL].7 */
                    default : dec_ma_enable = 1'b0;
                endcase
            end else if(ID_stage0 == 8'h31) begin
                casex ({ID_stage1,stage_adr})  
                    {8'h02,2'b00} : dec_ma_enable = 1'b1;  /* BT,saddr.0,$addr8 */
                    {8'h02,2'b01} : dec_ma_enable = 1'b1;  /* BT,saddr.0,$addr8 */
                    {8'h12,2'b00} : dec_ma_enable = 1'b1;  /* BT,saddr.1,$addr8 */
                    {8'h12,2'b01} : dec_ma_enable = 1'b1;  /* BT,saddr.1,$addr8 */
                    {8'h22,2'b00} : dec_ma_enable = 1'b1;  /* BT,saddr.2,$addr8 */
                    {8'h22,2'b01} : dec_ma_enable = 1'b1;  /* BT,saddr.2,$addr8 */
                    {8'h32,2'b00} : dec_ma_enable = 1'b1;  /* BT,saddr.3,$addr8 */
                    {8'h32,2'b01} : dec_ma_enable = 1'b1;  /* BT,saddr.3,$addr8 */
                    {8'h42,2'b00} : dec_ma_enable = 1'b1;  /* BT,saddr.4,$addr8 */
                    {8'h42,2'b01} : dec_ma_enable = 1'b1;  /* BT,saddr.4,$addr8 */
                    {8'h52,2'b00} : dec_ma_enable = 1'b1;  /* BT,saddr.5,$addr8 */
                    {8'h52,2'b01} : dec_ma_enable = 1'b1;  /* BT,saddr.5,$addr8 */
                    {8'h62,2'b00} : dec_ma_enable = 1'b1;  /* BT,saddr.6,$addr8 */
                    {8'h62,2'b01} : dec_ma_enable = 1'b1;  /* BT,saddr.6,$addr8 */
                    {8'h72,2'b00} : dec_ma_enable = 1'b1;  /* BT,saddr.7,$addr8 */
                    {8'h72,2'b01} : dec_ma_enable = 1'b1;  /* BT,saddr.7,$addr8 */
                    {8'h82,2'b00} : dec_ma_enable = 1'b1;  /* BT,sfr.0,$addr8 */
                    {8'h82,2'b01} : dec_ma_enable = 1'b1;  /* BT,sfr.0,$addr8 */
                    {8'h92,2'b00} : dec_ma_enable = 1'b1;  /* BT,sfr.1,$addr8 */
                    {8'h92,2'b01} : dec_ma_enable = 1'b1;  /* BT,sfr.1,$addr8 */
                    {8'ha2,2'b00} : dec_ma_enable = 1'b1;  /* BT,sfr.2,$addr8 */
                    {8'ha2,2'b01} : dec_ma_enable = 1'b1;  /* BT,sfr.2,$addr8 */
                    {8'hb2,2'b00} : dec_ma_enable = 1'b1;  /* BT,sfr.3,$addr8 */
                    {8'hb2,2'b01} : dec_ma_enable = 1'b1;  /* BT,sfr.3,$addr8 */
                    {8'hc2,2'b00} : dec_ma_enable = 1'b1;  /* BT,sfr.4,$addr8 */
                    {8'hc2,2'b01} : dec_ma_enable = 1'b1;  /* BT,sfr.4,$addr8 */
                    {8'hd2,2'b00} : dec_ma_enable = 1'b1;  /* BT,sfr.5,$addr8 */
                    {8'hd2,2'b01} : dec_ma_enable = 1'b1;  /* BT,sfr.5,$addr8 */
                    {8'he2,2'b00} : dec_ma_enable = 1'b1;  /* BT,sfr.6,$addr8 */
                    {8'he2,2'b01} : dec_ma_enable = 1'b1;  /* BT,sfr.6,$addr8 */
                    {8'hf2,2'b00} : dec_ma_enable = 1'b1;  /* BT,sfr.7,$addr8 */
                    {8'hf2,2'b01} : dec_ma_enable = 1'b1;  /* BT,sfr.7,$addr8 */
                    {8'h83,2'b00} : dec_ma_enable = 1'b1;  /* BT,[HL].0,$addr8 */
                    {8'h83,2'b01} : dec_ma_enable = 1'b1;  /* BT,[HL].0,$addr8 */
                    {8'h93,2'b00} : dec_ma_enable = 1'b1;  /* BT,[HL].1,$addr8 */
                    {8'h93,2'b01} : dec_ma_enable = 1'b1;  /* BT,[HL].1,$addr8 */
                    {8'ha3,2'b00} : dec_ma_enable = 1'b1;  /* BT,[HL].2,$addr8 */
                    {8'ha3,2'b01} : dec_ma_enable = 1'b1;  /* BT,[HL].2,$addr8 */
                    {8'hb3,2'b00} : dec_ma_enable = 1'b1;  /* BT,[HL].3,$addr8 */
                    {8'hb3,2'b01} : dec_ma_enable = 1'b1;  /* BT,[HL].3,$addr8 */
                    {8'hc3,2'b00} : dec_ma_enable = 1'b1;  /* BT,[HL].4,$addr8 */
                    {8'hc3,2'b01} : dec_ma_enable = 1'b1;  /* BT,[HL].4,$addr8 */
                    {8'hd3,2'b00} : dec_ma_enable = 1'b1;  /* BT,[HL].5,$addr8 */
                    {8'hd3,2'b01} : dec_ma_enable = 1'b1;  /* BT,[HL].5,$addr8 */
                    {8'he3,2'b00} : dec_ma_enable = 1'b1;  /* BT,[HL].6,$addr8 */
                    {8'he3,2'b01} : dec_ma_enable = 1'b1;  /* BT,[HL].6,$addr8 */
                    {8'hf3,2'b00} : dec_ma_enable = 1'b1;  /* BT,[HL].7,$addr8 */
                    {8'hf3,2'b01} : dec_ma_enable = 1'b1;  /* BT,[HL].7,$addr8 */
                    {8'h04,2'b00} : dec_ma_enable = 1'b1;  /* BF,saddr.0,$addr8 */
                    {8'h04,2'b01} : dec_ma_enable = 1'b1;  /* BF,saddr.0,$addr8 */
                    {8'h14,2'b00} : dec_ma_enable = 1'b1;  /* BF,saddr.1,$addr8 */
                    {8'h14,2'b01} : dec_ma_enable = 1'b1;  /* BF,saddr.1,$addr8 */
                    {8'h24,2'b00} : dec_ma_enable = 1'b1;  /* BF,saddr.2,$addr8 */
                    {8'h24,2'b01} : dec_ma_enable = 1'b1;  /* BF,saddr.2,$addr8 */
                    {8'h34,2'b00} : dec_ma_enable = 1'b1;  /* BF,saddr.3,$addr8 */
                    {8'h34,2'b01} : dec_ma_enable = 1'b1;  /* BF,saddr.3,$addr8 */
                    {8'h44,2'b00} : dec_ma_enable = 1'b1;  /* BF,saddr.4,$addr8 */
                    {8'h44,2'b01} : dec_ma_enable = 1'b1;  /* BF,saddr.4,$addr8 */
                    {8'h54,2'b00} : dec_ma_enable = 1'b1;  /* BF,saddr.5,$addr8 */
                    {8'h54,2'b01} : dec_ma_enable = 1'b1;  /* BF,saddr.5,$addr8 */
                    {8'h64,2'b00} : dec_ma_enable = 1'b1;  /* BF,saddr.6,$addr8 */
                    {8'h64,2'b01} : dec_ma_enable = 1'b1;  /* BF,saddr.6,$addr8 */
                    {8'h74,2'b00} : dec_ma_enable = 1'b1;  /* BF,saddr.7,$addr8 */
                    {8'h74,2'b01} : dec_ma_enable = 1'b1;  /* BF,saddr.7,$addr8 */
                    {8'h84,2'b00} : dec_ma_enable = 1'b1;  /* BF,sfr.0,$addr8 */
                    {8'h84,2'b01} : dec_ma_enable = 1'b1;  /* BF,sfr.0,$addr8 */
                    {8'h94,2'b00} : dec_ma_enable = 1'b1;  /* BF,sfr.1,$addr8 */
                    {8'h94,2'b01} : dec_ma_enable = 1'b1;  /* BF,sfr.1,$addr8 */
                    {8'ha4,2'b00} : dec_ma_enable = 1'b1;  /* BF,sfr.2,$addr8 */
                    {8'ha4,2'b01} : dec_ma_enable = 1'b1;  /* BF,sfr.2,$addr8 */
                    {8'hb4,2'b00} : dec_ma_enable = 1'b1;  /* BF,sfr.3,$addr8 */
                    {8'hb4,2'b01} : dec_ma_enable = 1'b1;  /* BF,sfr.3,$addr8 */
                    {8'hc4,2'b00} : dec_ma_enable = 1'b1;  /* BF,sfr.4,$addr8 */
                    {8'hc4,2'b01} : dec_ma_enable = 1'b1;  /* BF,sfr.4,$addr8 */
                    {8'hd4,2'b00} : dec_ma_enable = 1'b1;  /* BF,sfr.5,$addr8 */
                    {8'hd4,2'b01} : dec_ma_enable = 1'b1;  /* BF,sfr.5,$addr8 */
                    {8'he4,2'b00} : dec_ma_enable = 1'b1;  /* BF,sfr.6,$addr8 */
                    {8'he4,2'b01} : dec_ma_enable = 1'b1;  /* BF,sfr.6,$addr8 */
                    {8'hf4,2'b00} : dec_ma_enable = 1'b1;  /* BF,sfr.7,$addr8 */
                    {8'hf4,2'b01} : dec_ma_enable = 1'b1;  /* BF,sfr.7,$addr8 */
                    {8'h85,2'b00} : dec_ma_enable = 1'b1;  /* BF,[HL].0,$addr8 */
                    {8'h85,2'b01} : dec_ma_enable = 1'b1;  /* BF,[HL].0,$addr8 */
                    {8'h95,2'b00} : dec_ma_enable = 1'b1;  /* BF,[HL].1,$addr8 */
                    {8'h95,2'b01} : dec_ma_enable = 1'b1;  /* BF,[HL].1,$addr8 */
                    {8'ha5,2'b00} : dec_ma_enable = 1'b1;  /* BF,[HL].2,$addr8 */
                    {8'ha5,2'b01} : dec_ma_enable = 1'b1;  /* BF,[HL].2,$addr8 */
                    {8'hb5,2'b00} : dec_ma_enable = 1'b1;  /* BF,[HL].3,$addr8 */
                    {8'hb5,2'b01} : dec_ma_enable = 1'b1;  /* BF,[HL].3,$addr8 */
                    {8'hc5,2'b00} : dec_ma_enable = 1'b1;  /* BF,[HL].4,$addr8 */
                    {8'hc5,2'b01} : dec_ma_enable = 1'b1;  /* BF,[HL].4,$addr8 */
                    {8'hd5,2'b00} : dec_ma_enable = 1'b1;  /* BF,[HL].5,$addr8 */
                    {8'hd5,2'b01} : dec_ma_enable = 1'b1;  /* BF,[HL].5,$addr8 */
                    {8'he5,2'b00} : dec_ma_enable = 1'b1;  /* BF,[HL].6,$addr8 */
                    {8'he5,2'b01} : dec_ma_enable = 1'b1;  /* BF,[HL].6,$addr8 */
                    {8'hf5,2'b00} : dec_ma_enable = 1'b1;  /* BF,[HL].7,$addr8 */
                    {8'hf5,2'b01} : dec_ma_enable = 1'b1;  /* BF,[HL].7,$addr8 */
                    {8'h00,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                    {8'h00,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                    {8'h00,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                    {8'h10,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                    {8'h10,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                    {8'h10,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                    {8'h20,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                    {8'h20,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                    {8'h20,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                    {8'h30,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                    {8'h30,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                    {8'h30,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                    {8'h40,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                    {8'h40,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                    {8'h40,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                    {8'h50,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                    {8'h50,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                    {8'h50,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                    {8'h60,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                    {8'h60,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                    {8'h60,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                    {8'h70,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                    {8'h70,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                    {8'h70,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                    {8'h80,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                    {8'h80,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                    {8'h80,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                    {8'h90,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                    {8'h90,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                    {8'h90,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                    {8'ha0,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                    {8'ha0,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                    {8'ha0,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                    {8'hb0,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                    {8'hb0,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                    {8'hb0,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                    {8'hc0,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                    {8'hc0,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                    {8'hc0,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                    {8'hd0,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                    {8'hd0,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                    {8'hd0,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                    {8'he0,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                    {8'he0,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                    {8'he0,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                    {8'hf0,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                    {8'hf0,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                    {8'hf0,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                    {8'h81,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                    {8'h81,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                    {8'h81,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                    {8'h91,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                    {8'h91,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                    {8'h91,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                    {8'ha1,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                    {8'ha1,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                    {8'ha1,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                    {8'hb1,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                    {8'hb1,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                    {8'hb1,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                    {8'hc1,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                    {8'hc1,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                    {8'hc1,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                    {8'hd1,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                    {8'hd1,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                    {8'hd1,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                    {8'he1,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                    {8'he1,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                    {8'he1,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                    {8'hf1,2'b00} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                    {8'hf1,2'b01} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                    {8'hf1,2'b10} : dec_ma_enable = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                    default : dec_ma_enable = 1'b0;
                endcase
            end else begin
                casex ({ID_stage0,stage_adr})  
                    {8'hcd,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,saddr,#byte */
                    {8'hce,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,sfr,#byte */
                    {8'hcf,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,!addr16,#byte */
                    {8'hca,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,[DE+byte],#byte */
                    {8'hcc,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,[HL+byte],#byte */
                    {8'h8d,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,A,saddr */
                    {8'h9d,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,saddr,A */
                    {8'h8e,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,A,sfr */
                    {8'h9e,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,sfr,A */
                    {8'h8f,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,A,!addr16 */
                    {8'h9f,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,!addr16,A */
                    {8'h89,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,A,[DE] */
                    {8'h99,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,[DE],A */
                    {8'h8a,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,A,[DE+byte] */
                    {8'h9a,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,[DE+byte],A */
                    {8'h8b,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,A,[HL] */
                    {8'h9b,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,[HL],A */
                    {8'h8c,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,A,[HL+byte] */
                    {8'h9c,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,[HL+byte],A */
                    {8'h19,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,word[B],#byte */
                    {8'h09,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,A,word[B] */
                    {8'h18,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,word[B],A */
                    {8'h38,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,word[C],#byte */
                    {8'h29,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,A,word[C] */
                    {8'h28,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,word[C],A */
                    {8'h39,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,word[BC],#byte */
                    {8'h49,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,A,word[BC] */
                    {8'h48,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,word[BC],A */
                    {8'hc8,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,[SP+byte],#byte */
                    {8'h88,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,A,[SP+byte] */
                    {8'h98,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,[SP+byte],A */
                    {8'he8,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,B,saddr */
                    {8'he9,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,B,!addr16 */
                    {8'hf8,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,C,saddr */
                    {8'hf9,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,C,!addr16 */
                    {8'hd8,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,X,saddr */
                    {8'hd9,2'bxx} : dec_ma_enable = 1'b1;  /* MOV,X,!addr16 */
                    {8'he4,2'bxx} : dec_ma_enable = 1'b1;  /* ONEB,,saddr */
                    {8'he5,2'bxx} : dec_ma_enable = 1'b1;  /* ONEB,,!addr16 */
                    {8'hf4,2'bxx} : dec_ma_enable = 1'b1;  /* CLRB,,saddr */
                    {8'hf5,2'bxx} : dec_ma_enable = 1'b1;  /* CLRB,,!addr16 */
                    {8'hc9,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,saddrp,#word */
                    {8'hcb,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,sfrp,#word */
                    {8'had,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,AX,saddrp */
                    {8'hbd,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,saddrp,AX */
                    {8'hae,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,AX,sfrp */
                    {8'hbe,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,sfrp,AX */
                    {8'haf,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,AX,!addr16 */
                    {8'hbf,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,!addr16,AX */
                    {8'ha9,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,AX,[DE] */
                    {8'haa,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,AX,[DE+byte] */
                    {8'hb9,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,[DE],AX */
                    {8'hba,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,[DE+byte],AX */
                    {8'hab,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,AX,[HL] */
                    {8'hac,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,AX,[HL+byte] */
                    {8'hbb,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,[HL],AX */
                    {8'hbc,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,[HL+byte],AX */
                    {8'h59,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,AX,word[B] */
                    {8'h58,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,word[B],AX */
                    {8'h69,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,AX,word[C] */
                    {8'h68,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,word[C],AX */
                    {8'h79,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,AX,word[BC] */
                    {8'h78,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,word[BC],AX */
                    {8'ha8,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,AX,[SP+byte] */
                    {8'hb8,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,[SP+byte],AX */
                    {8'hda,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,BC,saddrp */
                    {8'hdb,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,BC,!addr16 */
                    {8'hea,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,DE,saddrp */
                    {8'heb,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,DE,!addr16 */
                    {8'hfa,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,HL,saddrp */
                    {8'hfb,2'bxx} : dec_ma_enable = 1'b1;  /* MOVW,HL,!addr16 */
                    {8'h0a,2'bx0} : dec_ma_enable = 1'b1;  /* ADD,saddr,#byte */
                    {8'h0a,2'bx1} : dec_ma_enable = 1'b1;  /* ADD,saddr,#byte */
                    {8'h0b,2'bxx} : dec_ma_enable = 1'b1;  /* ADD,A,saddr */
                    {8'h0f,2'bxx} : dec_ma_enable = 1'b1;  /* ADD,A,!addr16 */
                    {8'h0d,2'bxx} : dec_ma_enable = 1'b1;  /* ADD,A,[HL] */
                    {8'h0e,2'bxx} : dec_ma_enable = 1'b1;  /* ADD,A,[HL+byte] */
                    {8'h1a,2'bx0} : dec_ma_enable = 1'b1;  /* ADDC,saddr,#byte */
                    {8'h1a,2'bx1} : dec_ma_enable = 1'b1;  /* ADDC,saddr,#byte */
                    {8'h1b,2'bxx} : dec_ma_enable = 1'b1;  /* ADDC,A,saddr */
                    {8'h1f,2'bxx} : dec_ma_enable = 1'b1;  /* ADDC,A,!addr16 */
                    {8'h1d,2'bxx} : dec_ma_enable = 1'b1;  /* ADDC,A,[HL] */
                    {8'h1e,2'bxx} : dec_ma_enable = 1'b1;  /* ADDC,A,[HL+byte] */
                    {8'h2a,2'bx0} : dec_ma_enable = 1'b1;  /* SUB,saddr,#byte */
                    {8'h2a,2'bx1} : dec_ma_enable = 1'b1;  /* SUB,saddr,#byte */
                    {8'h2b,2'bxx} : dec_ma_enable = 1'b1;  /* SUB,A,saddr */
                    {8'h2f,2'bxx} : dec_ma_enable = 1'b1;  /* SUB,A,!addr16 */
                    {8'h2d,2'bxx} : dec_ma_enable = 1'b1;  /* SUB,A,[HL] */
                    {8'h2e,2'bxx} : dec_ma_enable = 1'b1;  /* SUB,A,[HL+byte] */
                    {8'h3a,2'bx0} : dec_ma_enable = 1'b1;  /* SUBC,saddr,#byte */
                    {8'h3a,2'bx1} : dec_ma_enable = 1'b1;  /* SUBC,saddr,#byte */
                    {8'h3b,2'bxx} : dec_ma_enable = 1'b1;  /* SUBC,A,saddr */
                    {8'h3f,2'bxx} : dec_ma_enable = 1'b1;  /* SUBC,A,!addr16 */
                    {8'h3d,2'bxx} : dec_ma_enable = 1'b1;  /* SUBC,A,[HL] */
                    {8'h3e,2'bxx} : dec_ma_enable = 1'b1;  /* SUBC,A,[HL+byte] */
                    {8'h5a,2'bx0} : dec_ma_enable = 1'b1;  /* AND,saddr,#byte */
                    {8'h5a,2'bx1} : dec_ma_enable = 1'b1;  /* AND,saddr,#byte */
                    {8'h5b,2'bxx} : dec_ma_enable = 1'b1;  /* AND,A,saddr */
                    {8'h5f,2'bxx} : dec_ma_enable = 1'b1;  /* AND,A,!addr16 */
                    {8'h5d,2'bxx} : dec_ma_enable = 1'b1;  /* AND,A,[HL] */
                    {8'h5e,2'bxx} : dec_ma_enable = 1'b1;  /* AND,A,[HL+byte] */
                    {8'h6a,2'bx0} : dec_ma_enable = 1'b1;  /* OR,saddr,#byte */
                    {8'h6a,2'bx1} : dec_ma_enable = 1'b1;  /* OR,saddr,#byte */
                    {8'h6b,2'bxx} : dec_ma_enable = 1'b1;  /* OR,A,saddr */
                    {8'h6f,2'bxx} : dec_ma_enable = 1'b1;  /* OR,A,!addr16 */
                    {8'h6d,2'bxx} : dec_ma_enable = 1'b1;  /* OR,A,[HL] */
                    {8'h6e,2'bxx} : dec_ma_enable = 1'b1;  /* OR,A,[HL+byte] */
                    {8'h7a,2'bx0} : dec_ma_enable = 1'b1;  /* XOR,saddr,#byte */
                    {8'h7a,2'bx1} : dec_ma_enable = 1'b1;  /* XOR,saddr,#byte */
                    {8'h7b,2'bxx} : dec_ma_enable = 1'b1;  /* XOR,A,saddr */
                    {8'h7f,2'bxx} : dec_ma_enable = 1'b1;  /* XOR,A,!addr16 */
                    {8'h7d,2'bxx} : dec_ma_enable = 1'b1;  /* XOR,A,[HL] */
                    {8'h7e,2'bxx} : dec_ma_enable = 1'b1;  /* XOR,A,[HL+byte] */
                    {8'h4a,2'bxx} : dec_ma_enable = 1'b1;  /* CMP,saddr,#byte */
                    {8'h40,2'bxx} : dec_ma_enable = 1'b1;  /* CMP,!addr16,#byte */
                    {8'h4b,2'bxx} : dec_ma_enable = 1'b1;  /* CMP,A,saddr */
                    {8'h4f,2'bxx} : dec_ma_enable = 1'b1;  /* CMP,A,!addr16 */
                    {8'h4d,2'bxx} : dec_ma_enable = 1'b1;  /* CMP,A,[HL] */
                    {8'h4e,2'bxx} : dec_ma_enable = 1'b1;  /* CMP,A,[HL+byte] */
                    {8'hd4,2'bxx} : dec_ma_enable = 1'b1;  /* CMP0,,saddr */
                    {8'hd5,2'bxx} : dec_ma_enable = 1'b1;  /* CMP0,,!addr16 */
                    {8'h06,2'bxx} : dec_ma_enable = 1'b1;  /* ADDW,AX,saddrp */
                    {8'h02,2'bxx} : dec_ma_enable = 1'b1;  /* ADDW,AX,!addr16 */
                    {8'h26,2'bxx} : dec_ma_enable = 1'b1;  /* SUBW,AX,saddrp */
                    {8'h22,2'bxx} : dec_ma_enable = 1'b1;  /* SUBW,AX,!addr16 */
                    {8'h46,2'bxx} : dec_ma_enable = 1'b1;  /* CMPW,AX,saddrp */
                    {8'h42,2'bxx} : dec_ma_enable = 1'b1;  /* CMPW,AX,!addr16 */
                    {8'ha4,2'bx0} : dec_ma_enable = 1'b1;  /* INC,,saddr */
                    {8'ha4,2'bx1} : dec_ma_enable = 1'b1;  /* INC,,saddr */
                    {8'ha0,2'bx0} : dec_ma_enable = 1'b1;  /* INC,,!addr16 */
                    {8'ha0,2'bx1} : dec_ma_enable = 1'b1;  /* INC,,!addr16 */
                    {8'hb4,2'bx0} : dec_ma_enable = 1'b1;  /* DEC,,saddr */
                    {8'hb4,2'bx1} : dec_ma_enable = 1'b1;  /* DEC,,saddr */
                    {8'hb0,2'bx0} : dec_ma_enable = 1'b1;  /* DEC,,!addr16 */
                    {8'hb0,2'bx1} : dec_ma_enable = 1'b1;  /* DEC,,!addr16 */
                    {8'ha6,2'bx0} : dec_ma_enable = 1'b1;  /* INCW,,saddrp */
                    {8'ha6,2'bx1} : dec_ma_enable = 1'b1;  /* INCW,,saddrp */
                    {8'ha2,2'bx0} : dec_ma_enable = 1'b1;  /* INCW,,!addr16 */
                    {8'ha2,2'bx1} : dec_ma_enable = 1'b1;  /* INCW,,!addr16 */
                    {8'hb6,2'bx0} : dec_ma_enable = 1'b1;  /* DECW,,saddrp */
                    {8'hb6,2'bx1} : dec_ma_enable = 1'b1;  /* DECW,,saddrp */
                    {8'hb2,2'bx0} : dec_ma_enable = 1'b1;  /* DECW,,!addr16 */
                    {8'hb2,2'bx1} : dec_ma_enable = 1'b1;  /* DECW,,!addr16 */
                    {8'hfe,2'bx0} : dec_ma_enable = 1'b1;  /* CALL,,$!addr16 */
                    {8'hfe,2'bx1} : dec_ma_enable = 1'b1;  /* CALL,,$!addr16 */
                    {8'hfd,2'bx0} : dec_ma_enable = 1'b1;  /* CALL,,!addr16 */
                    {8'hfd,2'bx1} : dec_ma_enable = 1'b1;  /* CALL,,!addr16 */
                    {8'hfc,2'bx0} : dec_ma_enable = 1'b1;  /* CALL,,!!addr20 */
                    {8'hfc,2'bx1} : dec_ma_enable = 1'b1;  /* CALL,,!!addr20 */
                    {8'hd7,2'b00} : dec_ma_enable = 1'b1;  /* RET,, */
                    {8'hd7,2'b01} : dec_ma_enable = 1'b1;  /* RET,, */
                    {8'hc1,2'bxx} : dec_ma_enable = 1'b1;  /* PUSH,,AX */
                    {8'hc3,2'bxx} : dec_ma_enable = 1'b1;  /* PUSH,,BC */
                    {8'hc5,2'bxx} : dec_ma_enable = 1'b1;  /* PUSH,,DE */
                    {8'hc7,2'bxx} : dec_ma_enable = 1'b1;  /* PUSH,,HL */
                    {8'hc0,2'bxx} : dec_ma_enable = 1'b1;  /* POP,,AX */
                    {8'hc2,2'bxx} : dec_ma_enable = 1'b1;  /* POP,,BC */
                    {8'hc4,2'bxx} : dec_ma_enable = 1'b1;  /* POP,,DE */
                    {8'hc6,2'bxx} : dec_ma_enable = 1'b1;  /* POP,,HL */
                    {8'hff,2'bx0} : dec_ma_enable = 1'b1;  /* SOFT,,BREAK */
                    {8'hff,2'bx1} : dec_ma_enable = 1'b1;  /* SOFT,,BREAK */
                    default : dec_ma_enable = 1'b0;
                endcase
            end
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_sp;
    reg    dec_ma_data_sp;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(decout_mask == 1'b1) begin
//            dec_ma_data_sp = 1'b0;
//        end else if(rstvec == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1) begin
            dec_ma_data_sp = 1'b0;
        end else if(ivack == 1'b1) begin
            casex ({stage_adr})  
                {2'b00} : dec_ma_data_sp = 1'b1;  /* Interrupt */
                {2'b01} : dec_ma_data_sp = 1'b1;  /* Interrupt */
                default : dec_ma_data_sp = 1'b0;
            endcase
        end else if(skpack == 1'b1) begin
            dec_ma_data_sp = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hca,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALL,,AX */
                {8'h61,8'hca,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALL,,AX */
                {8'h61,8'hda,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALL,,BC */
                {8'h61,8'hda,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALL,,BC */
                {8'h61,8'hea,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALL,,DE */
                {8'h61,8'hea,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALL,,DE */
                {8'h61,8'hfa,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALL,,HL */
                {8'h61,8'hfa,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALL,,HL */
                {8'hfe,8'hxx,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALL,,$!addr16 */
                {8'hfe,8'hxx,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALL,,$!addr16 */
                {8'hfd,8'hxx,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALL,,!addr16 */
                {8'hfd,8'hxx,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALL,,!addr16 */
                {8'hfc,8'hxx,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALL,,!!addr20 */
                {8'hfc,8'hxx,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALL,,!!addr20 */
                {8'h61,8'h84,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0080h] */
                {8'h61,8'h84,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0080h] */
                {8'h61,8'h94,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0082h] */
                {8'h61,8'h94,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0082h] */
                {8'h61,8'ha4,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0084h] */
                {8'h61,8'ha4,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0084h] */
                {8'h61,8'hb4,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0086h] */
                {8'h61,8'hb4,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0086h] */
                {8'h61,8'hc4,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0088h] */
                {8'h61,8'hc4,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0088h] */
                {8'h61,8'hd4,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[008Ah] */
                {8'h61,8'hd4,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[008Ah] */
                {8'h61,8'he4,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[008Ch] */
                {8'h61,8'he4,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[008Ch] */
                {8'h61,8'hf4,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[008Eh] */
                {8'h61,8'hf4,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[008Eh] */
                {8'h61,8'h85,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0090h] */
                {8'h61,8'h85,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0090h] */
                {8'h61,8'h95,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0092h] */
                {8'h61,8'h95,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0092h] */
                {8'h61,8'ha5,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0094h] */
                {8'h61,8'ha5,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0094h] */
                {8'h61,8'hb5,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0096h] */
                {8'h61,8'hb5,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0096h] */
                {8'h61,8'hc5,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0098h] */
                {8'h61,8'hc5,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[0098h] */
                {8'h61,8'hd5,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[009Ah] */
                {8'h61,8'hd5,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[009Ah] */
                {8'h61,8'he5,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[009Ch] */
                {8'h61,8'he5,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[009Ch] */
                {8'h61,8'hf5,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[009Eh] */
                {8'h61,8'hf5,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[009Eh] */
                {8'h61,8'h86,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00A0h] */
                {8'h61,8'h86,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00A0h] */
                {8'h61,8'h96,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00A2h] */
                {8'h61,8'h96,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00A2h] */
                {8'h61,8'ha6,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00A4h] */
                {8'h61,8'ha6,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00A4h] */
                {8'h61,8'hb6,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00A6h] */
                {8'h61,8'hb6,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00A6h] */
                {8'h61,8'hc6,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00A8h] */
                {8'h61,8'hc6,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00A8h] */
                {8'h61,8'hd6,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00AAh] */
                {8'h61,8'hd6,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00AAh] */
                {8'h61,8'he6,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00ACh] */
                {8'h61,8'he6,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00ACh] */
                {8'h61,8'hf6,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00AEh] */
                {8'h61,8'hf6,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00AEh] */
                {8'h61,8'h87,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00B0h] */
                {8'h61,8'h87,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00B0h] */
                {8'h61,8'h97,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00B2h] */
                {8'h61,8'h97,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00B2h] */
                {8'h61,8'ha7,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00B4h] */
                {8'h61,8'ha7,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00B4h] */
                {8'h61,8'hb7,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00B6h] */
                {8'h61,8'hb7,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00B6h] */
                {8'h61,8'hc7,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00B8h] */
                {8'h61,8'hc7,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00B8h] */
                {8'h61,8'hd7,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00BAh] */
                {8'h61,8'hd7,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00BAh] */
                {8'h61,8'he7,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00BCh] */
                {8'h61,8'he7,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00BCh] */
                {8'h61,8'hf7,2'bx0} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00BEh] */
                {8'h61,8'hf7,2'bx1} : dec_ma_data_sp = 1'b1;  /* CALLT,,[00BEh] */
                {8'h61,8'hcc,2'bx0} : dec_ma_data_sp = 1'b1;  /* BRK,, */
                {8'h61,8'hcc,2'bx1} : dec_ma_data_sp = 1'b1;  /* BRK,, */
                {8'hd7,8'hxx,2'b00} : dec_ma_data_sp = 1'b1;  /* RET,, */
                {8'hd7,8'hxx,2'b01} : dec_ma_data_sp = 1'b1;  /* RET,, */
                {8'h61,8'hec,2'b00} : dec_ma_data_sp = 1'b1;  /* RETB,, */
                {8'h61,8'hec,2'b01} : dec_ma_data_sp = 1'b1;  /* RETB,, */
                {8'h61,8'hfc,2'b00} : dec_ma_data_sp = 1'b1;  /* RETI,, */
                {8'h61,8'hfc,2'b01} : dec_ma_data_sp = 1'b1;  /* RETI,, */
                {8'h61,8'hdd,2'bxx} : dec_ma_data_sp = 1'b1;  /* PUSH,,PSW */
                {8'hc1,8'hxx,2'bxx} : dec_ma_data_sp = 1'b1;  /* PUSH,,AX */
                {8'hc3,8'hxx,2'bxx} : dec_ma_data_sp = 1'b1;  /* PUSH,,BC */
                {8'hc5,8'hxx,2'bxx} : dec_ma_data_sp = 1'b1;  /* PUSH,,DE */
                {8'hc7,8'hxx,2'bxx} : dec_ma_data_sp = 1'b1;  /* PUSH,,HL */
                {8'h61,8'hcd,2'bxx} : dec_ma_data_sp = 1'b1;  /* POP,,PSW */
                {8'hc0,8'hxx,2'bxx} : dec_ma_data_sp = 1'b1;  /* POP,,AX */
                {8'hc2,8'hxx,2'bxx} : dec_ma_data_sp = 1'b1;  /* POP,,BC */
                {8'hc4,8'hxx,2'bxx} : dec_ma_data_sp = 1'b1;  /* POP,,DE */
                {8'hc6,8'hxx,2'bxx} : dec_ma_data_sp = 1'b1;  /* POP,,HL */
                {8'hff,8'hxx,2'bx0} : dec_ma_data_sp = 1'b1;  /* SOFT,,BREAK */
                {8'hff,8'hxx,2'bx1} : dec_ma_data_sp = 1'b1;  /* SOFT,,BREAK */
                {8'h61,8'ha1,2'bx0} : dec_ma_data_sp = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'ha1,2'bx1} : dec_ma_data_sp = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'hb1,2'bx0} : dec_ma_data_sp = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hb1,2'bx1} : dec_ma_data_sp = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hc1,2'bx0} : dec_ma_data_sp = 1'b1;  /* SOFT4,,BREAK */
                {8'h61,8'hc1,2'bx1} : dec_ma_data_sp = 1'b1;  /* SOFT4,,BREAK */
                default : dec_ma_data_sp = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_saddr_op1;
    reg    dec_ma_data_saddr_op1;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_saddr_op1 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hcd,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* MOV,saddr,#byte */
                {8'h8d,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* MOV,A,saddr */
                {8'h9d,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* MOV,saddr,A */
                {8'he8,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* MOV,B,saddr */
                {8'hf8,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* MOV,C,saddr */
                {8'hd8,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* MOV,X,saddr */
                {8'he4,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* ONEB,,saddr */
                {8'hf4,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* CLRB,,saddr */
                {8'hc9,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* MOVW,saddrp,#word */
                {8'had,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* MOVW,AX,saddrp */
                {8'hbd,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* MOVW,saddrp,AX */
                {8'hda,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* MOVW,BC,saddrp */
                {8'hea,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* MOVW,DE,saddrp */
                {8'hfa,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* MOVW,HL,saddrp */
                {8'h0a,8'hxx,2'bx0} : dec_ma_data_saddr_op1 = 1'b1;  /* ADD,saddr,#byte */
                {8'h0a,8'hxx,2'bx1} : dec_ma_data_saddr_op1 = 1'b1;  /* ADD,saddr,#byte */
                {8'h0b,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* ADD,A,saddr */
                {8'h1a,8'hxx,2'bx0} : dec_ma_data_saddr_op1 = 1'b1;  /* ADDC,saddr,#byte */
                {8'h1a,8'hxx,2'bx1} : dec_ma_data_saddr_op1 = 1'b1;  /* ADDC,saddr,#byte */
                {8'h1b,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* ADDC,A,saddr */
                {8'h2a,8'hxx,2'bx0} : dec_ma_data_saddr_op1 = 1'b1;  /* SUB,saddr,#byte */
                {8'h2a,8'hxx,2'bx1} : dec_ma_data_saddr_op1 = 1'b1;  /* SUB,saddr,#byte */
                {8'h2b,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* SUB,A,saddr */
                {8'h3a,8'hxx,2'bx0} : dec_ma_data_saddr_op1 = 1'b1;  /* SUBC,saddr,#byte */
                {8'h3a,8'hxx,2'bx1} : dec_ma_data_saddr_op1 = 1'b1;  /* SUBC,saddr,#byte */
                {8'h3b,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* SUBC,A,saddr */
                {8'h5a,8'hxx,2'bx0} : dec_ma_data_saddr_op1 = 1'b1;  /* AND,saddr,#byte */
                {8'h5a,8'hxx,2'bx1} : dec_ma_data_saddr_op1 = 1'b1;  /* AND,saddr,#byte */
                {8'h5b,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* AND,A,saddr */
                {8'h6a,8'hxx,2'bx0} : dec_ma_data_saddr_op1 = 1'b1;  /* OR,saddr,#byte */
                {8'h6a,8'hxx,2'bx1} : dec_ma_data_saddr_op1 = 1'b1;  /* OR,saddr,#byte */
                {8'h6b,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* OR,A,saddr */
                {8'h7a,8'hxx,2'bx0} : dec_ma_data_saddr_op1 = 1'b1;  /* XOR,saddr,#byte */
                {8'h7a,8'hxx,2'bx1} : dec_ma_data_saddr_op1 = 1'b1;  /* XOR,saddr,#byte */
                {8'h7b,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* XOR,A,saddr */
                {8'h4a,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* CMP,saddr,#byte */
                {8'h4b,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* CMP,A,saddr */
                {8'hd4,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* CMP0,,saddr */
                {8'h06,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* ADDW,AX,saddrp */
                {8'h26,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* SUBW,AX,saddrp */
                {8'h46,8'hxx,2'bxx} : dec_ma_data_saddr_op1 = 1'b1;  /* CMPW,AX,saddrp */
                {8'ha4,8'hxx,2'bx0} : dec_ma_data_saddr_op1 = 1'b1;  /* INC,,saddr */
                {8'ha4,8'hxx,2'bx1} : dec_ma_data_saddr_op1 = 1'b1;  /* INC,,saddr */
                {8'hb4,8'hxx,2'bx0} : dec_ma_data_saddr_op1 = 1'b1;  /* DEC,,saddr */
                {8'hb4,8'hxx,2'bx1} : dec_ma_data_saddr_op1 = 1'b1;  /* DEC,,saddr */
                {8'ha6,8'hxx,2'bx0} : dec_ma_data_saddr_op1 = 1'b1;  /* INCW,,saddrp */
                {8'ha6,8'hxx,2'bx1} : dec_ma_data_saddr_op1 = 1'b1;  /* INCW,,saddrp */
                {8'hb6,8'hxx,2'bx0} : dec_ma_data_saddr_op1 = 1'b1;  /* DECW,,saddrp */
                {8'hb6,8'hxx,2'bx1} : dec_ma_data_saddr_op1 = 1'b1;  /* DECW,,saddrp */
                default : dec_ma_data_saddr_op1 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_saddr_op2;
    reg    dec_ma_data_saddr_op2;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_saddr_op2 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hb8,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV,ES,saddr */
                {8'h61,8'ha8,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* XCH,A,saddr */
                {8'h61,8'ha8,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* XCH,A,saddr */
                {8'h71,8'h04,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,CY,saddr.0 */
                {8'h71,8'h14,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,CY,saddr.1 */
                {8'h71,8'h24,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,CY,saddr.2 */
                {8'h71,8'h34,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,CY,saddr.3 */
                {8'h71,8'h44,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,CY,saddr.4 */
                {8'h71,8'h54,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,CY,saddr.5 */
                {8'h71,8'h64,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,CY,saddr.6 */
                {8'h71,8'h74,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,CY,saddr.7 */
                {8'h71,8'h01,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,saddr.0,CY */
                {8'h71,8'h01,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,saddr.0,CY */
                {8'h71,8'h11,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,saddr.1,CY */
                {8'h71,8'h11,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,saddr.1,CY */
                {8'h71,8'h21,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,saddr.2,CY */
                {8'h71,8'h21,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,saddr.2,CY */
                {8'h71,8'h31,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,saddr.3,CY */
                {8'h71,8'h31,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,saddr.3,CY */
                {8'h71,8'h41,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,saddr.4,CY */
                {8'h71,8'h41,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,saddr.4,CY */
                {8'h71,8'h51,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,saddr.5,CY */
                {8'h71,8'h51,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,saddr.5,CY */
                {8'h71,8'h61,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,saddr.6,CY */
                {8'h71,8'h61,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,saddr.6,CY */
                {8'h71,8'h71,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,saddr.7,CY */
                {8'h71,8'h71,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* MOV1,saddr.7,CY */
                {8'h71,8'h05,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* AND1,CY,saddr.0 */
                {8'h71,8'h15,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* AND1,CY,saddr.1 */
                {8'h71,8'h25,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* AND1,CY,saddr.2 */
                {8'h71,8'h35,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* AND1,CY,saddr.3 */
                {8'h71,8'h45,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* AND1,CY,saddr.4 */
                {8'h71,8'h55,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* AND1,CY,saddr.5 */
                {8'h71,8'h65,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* AND1,CY,saddr.6 */
                {8'h71,8'h75,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* AND1,CY,saddr.7 */
                {8'h71,8'h06,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* OR1,CY,saddr.0 */
                {8'h71,8'h16,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* OR1,CY,saddr.1 */
                {8'h71,8'h26,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* OR1,CY,saddr.2 */
                {8'h71,8'h36,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* OR1,CY,saddr.3 */
                {8'h71,8'h46,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* OR1,CY,saddr.4 */
                {8'h71,8'h56,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* OR1,CY,saddr.5 */
                {8'h71,8'h66,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* OR1,CY,saddr.6 */
                {8'h71,8'h76,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* OR1,CY,saddr.7 */
                {8'h71,8'h07,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* XOR1,CY,saddr.0 */
                {8'h71,8'h17,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* XOR1,CY,saddr.1 */
                {8'h71,8'h27,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* XOR1,CY,saddr.2 */
                {8'h71,8'h37,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* XOR1,CY,saddr.3 */
                {8'h71,8'h47,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* XOR1,CY,saddr.4 */
                {8'h71,8'h57,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* XOR1,CY,saddr.5 */
                {8'h71,8'h67,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* XOR1,CY,saddr.6 */
                {8'h71,8'h77,2'bxx} : dec_ma_data_saddr_op2 = 1'b1;  /* XOR1,CY,saddr.7 */
                {8'h71,8'h02,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* SET1,,saddr.0 */
                {8'h71,8'h02,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* SET1,,saddr.0 */
                {8'h71,8'h12,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* SET1,,saddr.1 */
                {8'h71,8'h12,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* SET1,,saddr.1 */
                {8'h71,8'h22,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* SET1,,saddr.2 */
                {8'h71,8'h22,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* SET1,,saddr.2 */
                {8'h71,8'h32,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* SET1,,saddr.3 */
                {8'h71,8'h32,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* SET1,,saddr.3 */
                {8'h71,8'h42,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* SET1,,saddr.4 */
                {8'h71,8'h42,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* SET1,,saddr.4 */
                {8'h71,8'h52,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* SET1,,saddr.5 */
                {8'h71,8'h52,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* SET1,,saddr.5 */
                {8'h71,8'h62,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* SET1,,saddr.6 */
                {8'h71,8'h62,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* SET1,,saddr.6 */
                {8'h71,8'h72,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* SET1,,saddr.7 */
                {8'h71,8'h72,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* SET1,,saddr.7 */
                {8'h71,8'h03,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* CLR1,,saddr.0 */
                {8'h71,8'h03,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* CLR1,,saddr.0 */
                {8'h71,8'h13,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* CLR1,,saddr.1 */
                {8'h71,8'h13,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* CLR1,,saddr.1 */
                {8'h71,8'h23,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* CLR1,,saddr.2 */
                {8'h71,8'h23,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* CLR1,,saddr.2 */
                {8'h71,8'h33,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* CLR1,,saddr.3 */
                {8'h71,8'h33,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* CLR1,,saddr.3 */
                {8'h71,8'h43,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* CLR1,,saddr.4 */
                {8'h71,8'h43,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* CLR1,,saddr.4 */
                {8'h71,8'h53,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* CLR1,,saddr.5 */
                {8'h71,8'h53,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* CLR1,,saddr.5 */
                {8'h71,8'h63,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* CLR1,,saddr.6 */
                {8'h71,8'h63,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* CLR1,,saddr.6 */
                {8'h71,8'h73,2'bx0} : dec_ma_data_saddr_op2 = 1'b1;  /* CLR1,,saddr.7 */
                {8'h71,8'h73,2'bx1} : dec_ma_data_saddr_op2 = 1'b1;  /* CLR1,,saddr.7 */
                {8'h31,8'h02,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BT,saddr.0,$addr8 */
                {8'h31,8'h12,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BT,saddr.1,$addr8 */
                {8'h31,8'h22,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BT,saddr.2,$addr8 */
                {8'h31,8'h32,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BT,saddr.3,$addr8 */
                {8'h31,8'h42,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BT,saddr.4,$addr8 */
                {8'h31,8'h52,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BT,saddr.5,$addr8 */
                {8'h31,8'h62,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BT,saddr.6,$addr8 */
                {8'h31,8'h72,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BT,saddr.7,$addr8 */
                {8'h31,8'h04,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BF,saddr.0,$addr8 */
                {8'h31,8'h14,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BF,saddr.1,$addr8 */
                {8'h31,8'h24,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BF,saddr.2,$addr8 */
                {8'h31,8'h34,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BF,saddr.3,$addr8 */
                {8'h31,8'h44,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BF,saddr.4,$addr8 */
                {8'h31,8'h54,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BF,saddr.5,$addr8 */
                {8'h31,8'h64,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BF,saddr.6,$addr8 */
                {8'h31,8'h74,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BF,saddr.7,$addr8 */
                {8'h31,8'h00,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                {8'h31,8'h00,2'b01} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                {8'h31,8'h00,2'b10} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                {8'h31,8'h10,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                {8'h31,8'h10,2'b01} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                {8'h31,8'h10,2'b10} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                {8'h31,8'h20,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                {8'h31,8'h20,2'b01} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                {8'h31,8'h20,2'b10} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                {8'h31,8'h30,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                {8'h31,8'h30,2'b01} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                {8'h31,8'h30,2'b10} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                {8'h31,8'h40,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                {8'h31,8'h40,2'b01} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                {8'h31,8'h40,2'b10} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                {8'h31,8'h50,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                {8'h31,8'h50,2'b01} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                {8'h31,8'h50,2'b10} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                {8'h31,8'h60,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                {8'h31,8'h60,2'b01} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                {8'h31,8'h60,2'b10} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                {8'h31,8'h70,2'b00} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                {8'h31,8'h70,2'b01} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                {8'h31,8'h70,2'b10} : dec_ma_data_saddr_op2 = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                default : dec_ma_data_saddr_op2 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_sfr_op1;
    reg    dec_ma_data_sfr_op1;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_sfr_op1 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hce,8'hxx,2'bxx} : dec_ma_data_sfr_op1 = 1'b1;  /* MOV,sfr,#byte */
                {8'h8e,8'hxx,2'bxx} : dec_ma_data_sfr_op1 = 1'b1;  /* MOV,A,sfr */
                {8'h9e,8'hxx,2'bxx} : dec_ma_data_sfr_op1 = 1'b1;  /* MOV,sfr,A */
                {8'hcb,8'hxx,2'bxx} : dec_ma_data_sfr_op1 = 1'b1;  /* MOVW,sfrp,#word */
                {8'hae,8'hxx,2'bxx} : dec_ma_data_sfr_op1 = 1'b1;  /* MOVW,AX,sfrp */
                {8'hbe,8'hxx,2'bxx} : dec_ma_data_sfr_op1 = 1'b1;  /* MOVW,sfrp,AX */
                default : dec_ma_data_sfr_op1 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_sfr_op2;
    reg    dec_ma_data_sfr_op2;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_sfr_op2 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hab,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* XCH,A,sfr */
                {8'h61,8'hab,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* XCH,A,sfr */
                {8'h71,8'h0c,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,CY,sfr.0 */
                {8'h71,8'h1c,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,CY,sfr.1 */
                {8'h71,8'h2c,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,CY,sfr.2 */
                {8'h71,8'h3c,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,CY,sfr.3 */
                {8'h71,8'h4c,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,CY,sfr.4 */
                {8'h71,8'h5c,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,CY,sfr.5 */
                {8'h71,8'h6c,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,CY,sfr.6 */
                {8'h71,8'h7c,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,CY,sfr.7 */
                {8'h71,8'h09,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,sfr.0,CY */
                {8'h71,8'h09,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,sfr.0,CY */
                {8'h71,8'h19,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,sfr.1,CY */
                {8'h71,8'h19,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,sfr.1,CY */
                {8'h71,8'h29,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,sfr.2,CY */
                {8'h71,8'h29,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,sfr.2,CY */
                {8'h71,8'h39,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,sfr.3,CY */
                {8'h71,8'h39,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,sfr.3,CY */
                {8'h71,8'h49,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,sfr.4,CY */
                {8'h71,8'h49,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,sfr.4,CY */
                {8'h71,8'h59,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,sfr.5,CY */
                {8'h71,8'h59,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,sfr.5,CY */
                {8'h71,8'h69,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,sfr.6,CY */
                {8'h71,8'h69,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,sfr.6,CY */
                {8'h71,8'h79,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,sfr.7,CY */
                {8'h71,8'h79,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* MOV1,sfr.7,CY */
                {8'h71,8'h0d,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* AND1,CY,sfr.0 */
                {8'h71,8'h1d,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* AND1,CY,sfr.1 */
                {8'h71,8'h2d,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* AND1,CY,sfr.2 */
                {8'h71,8'h3d,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* AND1,CY,sfr.3 */
                {8'h71,8'h4d,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* AND1,CY,sfr.4 */
                {8'h71,8'h5d,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* AND1,CY,sfr.5 */
                {8'h71,8'h6d,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* AND1,CY,sfr.6 */
                {8'h71,8'h7d,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* AND1,CY,sfr.7 */
                {8'h71,8'h0e,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* OR1,CY,sfr.0 */
                {8'h71,8'h1e,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* OR1,CY,sfr.1 */
                {8'h71,8'h2e,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* OR1,CY,sfr.2 */
                {8'h71,8'h3e,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* OR1,CY,sfr.3 */
                {8'h71,8'h4e,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* OR1,CY,sfr.4 */
                {8'h71,8'h5e,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* OR1,CY,sfr.5 */
                {8'h71,8'h6e,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* OR1,CY,sfr.6 */
                {8'h71,8'h7e,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* OR1,CY,sfr.7 */
                {8'h71,8'h0f,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* XOR1,CY,sfr.0 */
                {8'h71,8'h1f,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* XOR1,CY,sfr.1 */
                {8'h71,8'h2f,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* XOR1,CY,sfr.2 */
                {8'h71,8'h3f,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* XOR1,CY,sfr.3 */
                {8'h71,8'h4f,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* XOR1,CY,sfr.4 */
                {8'h71,8'h5f,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* XOR1,CY,sfr.5 */
                {8'h71,8'h6f,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* XOR1,CY,sfr.6 */
                {8'h71,8'h7f,2'bxx} : dec_ma_data_sfr_op2 = 1'b1;  /* XOR1,CY,sfr.7 */
                {8'h71,8'h0a,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* SET1,,sfr.0 */
                {8'h71,8'h0a,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* SET1,,sfr.0 */
                {8'h71,8'h1a,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* SET1,,sfr.1 */
                {8'h71,8'h1a,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* SET1,,sfr.1 */
                {8'h71,8'h2a,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* SET1,,sfr.2 */
                {8'h71,8'h2a,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* SET1,,sfr.2 */
                {8'h71,8'h3a,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* SET1,,sfr.3 */
                {8'h71,8'h3a,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* SET1,,sfr.3 */
                {8'h71,8'h4a,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* SET1,,sfr.4 */
                {8'h71,8'h4a,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* SET1,,sfr.4 */
                {8'h71,8'h5a,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* SET1,,sfr.5 */
                {8'h71,8'h5a,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* SET1,,sfr.5 */
                {8'h71,8'h6a,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* SET1,,sfr.6 */
                {8'h71,8'h6a,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* SET1,,sfr.6 */
                {8'h71,8'h7a,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* SET1,,sfr.7 */
                {8'h71,8'h7a,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* SET1,,sfr.7 */
                {8'h71,8'h0b,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* CLR1,,sfr.0 */
                {8'h71,8'h0b,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* CLR1,,sfr.0 */
                {8'h71,8'h1b,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* CLR1,,sfr.1 */
                {8'h71,8'h1b,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* CLR1,,sfr.1 */
                {8'h71,8'h2b,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* CLR1,,sfr.2 */
                {8'h71,8'h2b,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* CLR1,,sfr.2 */
                {8'h71,8'h3b,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* CLR1,,sfr.3 */
                {8'h71,8'h3b,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* CLR1,,sfr.3 */
                {8'h71,8'h4b,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* CLR1,,sfr.4 */
                {8'h71,8'h4b,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* CLR1,,sfr.4 */
                {8'h71,8'h5b,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* CLR1,,sfr.5 */
                {8'h71,8'h5b,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* CLR1,,sfr.5 */
                {8'h71,8'h6b,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* CLR1,,sfr.6 */
                {8'h71,8'h6b,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* CLR1,,sfr.6 */
                {8'h71,8'h7b,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* CLR1,,sfr.7 */
                {8'h71,8'h7b,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* CLR1,,sfr.7 */
                {8'h31,8'h82,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BT,sfr.0,$addr8 */
                {8'h31,8'h92,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BT,sfr.1,$addr8 */
                {8'h31,8'ha2,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BT,sfr.2,$addr8 */
                {8'h31,8'hb2,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BT,sfr.3,$addr8 */
                {8'h31,8'hc2,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BT,sfr.4,$addr8 */
                {8'h31,8'hd2,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BT,sfr.5,$addr8 */
                {8'h31,8'he2,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BT,sfr.6,$addr8 */
                {8'h31,8'hf2,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BT,sfr.7,$addr8 */
                {8'h31,8'h84,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BF,sfr.0,$addr8 */
                {8'h31,8'h94,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BF,sfr.1,$addr8 */
                {8'h31,8'ha4,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BF,sfr.2,$addr8 */
                {8'h31,8'hb4,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BF,sfr.3,$addr8 */
                {8'h31,8'hc4,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BF,sfr.4,$addr8 */
                {8'h31,8'hd4,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BF,sfr.5,$addr8 */
                {8'h31,8'he4,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BF,sfr.6,$addr8 */
                {8'h31,8'hf4,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BF,sfr.7,$addr8 */
                {8'h31,8'h80,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                {8'h31,8'h80,2'b01} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                {8'h31,8'h80,2'b10} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                {8'h31,8'h90,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                {8'h31,8'h90,2'b01} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                {8'h31,8'h90,2'b10} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                {8'h31,8'ha0,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                {8'h31,8'ha0,2'b01} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                {8'h31,8'ha0,2'b10} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                {8'h31,8'hb0,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                {8'h31,8'hb0,2'b01} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                {8'h31,8'hb0,2'b10} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                {8'h31,8'hc0,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                {8'h31,8'hc0,2'b01} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                {8'h31,8'hc0,2'b10} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                {8'h31,8'hd0,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                {8'h31,8'hd0,2'b01} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                {8'h31,8'hd0,2'b10} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                {8'h31,8'he0,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                {8'h31,8'he0,2'b01} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                {8'h31,8'he0,2'b10} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                {8'h31,8'hf0,2'b00} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                {8'h31,8'hf0,2'b01} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                {8'h31,8'hf0,2'b10} : dec_ma_data_sfr_op2 = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                {8'h61,8'hbb,2'bx0} : dec_ma_data_sfr_op2 = 1'b1;  /* XCH,A,sfr */
                {8'h61,8'hbb,2'bx1} : dec_ma_data_sfr_op2 = 1'b1;  /* XCH,A,sfr */
                default : dec_ma_data_sfr_op2 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_op12;
    reg    dec_ma_data_op12;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_op12 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hcf,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* MOV,!addr16,#byte */
                {8'h8f,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* MOV,A,!addr16 */
                {8'h9f,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* MOV,!addr16,A */
                {8'he9,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* MOV,B,!addr16 */
                {8'hf9,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* MOV,C,!addr16 */
                {8'hd9,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* MOV,X,!addr16 */
                {8'he5,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* ONEB,,!addr16 */
                {8'hf5,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* CLRB,,!addr16 */
                {8'haf,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* MOVW,AX,!addr16 */
                {8'hbf,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* MOVW,!addr16,AX */
                {8'hdb,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* MOVW,BC,!addr16 */
                {8'heb,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* MOVW,DE,!addr16 */
                {8'hfb,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* MOVW,HL,!addr16 */
                {8'h0f,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* ADD,A,!addr16 */
                {8'h1f,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* ADDC,A,!addr16 */
                {8'h2f,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* SUB,A,!addr16 */
                {8'h3f,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* SUBC,A,!addr16 */
                {8'h5f,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* AND,A,!addr16 */
                {8'h6f,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* OR,A,!addr16 */
                {8'h7f,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* XOR,A,!addr16 */
                {8'h40,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* CMP,!addr16,#byte */
                {8'h4f,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* CMP,A,!addr16 */
                {8'hd5,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* CMP0,,!addr16 */
                {8'h02,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* ADDW,AX,!addr16 */
                {8'h22,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* SUBW,AX,!addr16 */
                {8'h42,8'hxx,2'bxx} : dec_ma_data_op12 = 1'b1;  /* CMPW,AX,!addr16 */
                {8'ha0,8'hxx,2'bx0} : dec_ma_data_op12 = 1'b1;  /* INC,,!addr16 */
                {8'ha0,8'hxx,2'bx1} : dec_ma_data_op12 = 1'b1;  /* INC,,!addr16 */
                {8'hb0,8'hxx,2'bx0} : dec_ma_data_op12 = 1'b1;  /* DEC,,!addr16 */
                {8'hb0,8'hxx,2'bx1} : dec_ma_data_op12 = 1'b1;  /* DEC,,!addr16 */
                {8'ha2,8'hxx,2'bx0} : dec_ma_data_op12 = 1'b1;  /* INCW,,!addr16 */
                {8'ha2,8'hxx,2'bx1} : dec_ma_data_op12 = 1'b1;  /* INCW,,!addr16 */
                {8'hb2,8'hxx,2'bx0} : dec_ma_data_op12 = 1'b1;  /* DECW,,!addr16 */
                {8'hb2,8'hxx,2'bx1} : dec_ma_data_op12 = 1'b1;  /* DECW,,!addr16 */
                default : dec_ma_data_op12 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_op23;
    reg    dec_ma_data_op23;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_op23 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'haa,2'bx0} : dec_ma_data_op23 = 1'b1;  /* XCH,A,!addr16 */
                {8'h61,8'haa,2'bx1} : dec_ma_data_op23 = 1'b1;  /* XCH,A,!addr16 */
                {8'h71,8'h00,2'bx0} : dec_ma_data_op23 = 1'b1;  /* SET1,,!addr16.0 */
                {8'h71,8'h00,2'bx1} : dec_ma_data_op23 = 1'b1;  /* SET1,,!addr16.0 */
                {8'h71,8'h10,2'bx0} : dec_ma_data_op23 = 1'b1;  /* SET1,,!addr16.1 */
                {8'h71,8'h10,2'bx1} : dec_ma_data_op23 = 1'b1;  /* SET1,,!addr16.1 */
                {8'h71,8'h20,2'bx0} : dec_ma_data_op23 = 1'b1;  /* SET1,,!addr16.2 */
                {8'h71,8'h20,2'bx1} : dec_ma_data_op23 = 1'b1;  /* SET1,,!addr16.2 */
                {8'h71,8'h30,2'bx0} : dec_ma_data_op23 = 1'b1;  /* SET1,,!addr16.3 */
                {8'h71,8'h30,2'bx1} : dec_ma_data_op23 = 1'b1;  /* SET1,,!addr16.3 */
                {8'h71,8'h40,2'bx0} : dec_ma_data_op23 = 1'b1;  /* SET1,,!addr16.4 */
                {8'h71,8'h40,2'bx1} : dec_ma_data_op23 = 1'b1;  /* SET1,,!addr16.4 */
                {8'h71,8'h50,2'bx0} : dec_ma_data_op23 = 1'b1;  /* SET1,,!addr16.5 */
                {8'h71,8'h50,2'bx1} : dec_ma_data_op23 = 1'b1;  /* SET1,,!addr16.5 */
                {8'h71,8'h60,2'bx0} : dec_ma_data_op23 = 1'b1;  /* SET1,,!addr16.6 */
                {8'h71,8'h60,2'bx1} : dec_ma_data_op23 = 1'b1;  /* SET1,,!addr16.6 */
                {8'h71,8'h70,2'bx0} : dec_ma_data_op23 = 1'b1;  /* SET1,,!addr16.7 */
                {8'h71,8'h70,2'bx1} : dec_ma_data_op23 = 1'b1;  /* SET1,,!addr16.7 */
                {8'h71,8'h08,2'bx0} : dec_ma_data_op23 = 1'b1;  /* CLR1,,!addr16.0 */
                {8'h71,8'h08,2'bx1} : dec_ma_data_op23 = 1'b1;  /* CLR1,,!addr16.0 */
                {8'h71,8'h18,2'bx0} : dec_ma_data_op23 = 1'b1;  /* CLR1,,!addr16.1 */
                {8'h71,8'h18,2'bx1} : dec_ma_data_op23 = 1'b1;  /* CLR1,,!addr16.1 */
                {8'h71,8'h28,2'bx0} : dec_ma_data_op23 = 1'b1;  /* CLR1,,!addr16.2 */
                {8'h71,8'h28,2'bx1} : dec_ma_data_op23 = 1'b1;  /* CLR1,,!addr16.2 */
                {8'h71,8'h38,2'bx0} : dec_ma_data_op23 = 1'b1;  /* CLR1,,!addr16.3 */
                {8'h71,8'h38,2'bx1} : dec_ma_data_op23 = 1'b1;  /* CLR1,,!addr16.3 */
                {8'h71,8'h48,2'bx0} : dec_ma_data_op23 = 1'b1;  /* CLR1,,!addr16.4 */
                {8'h71,8'h48,2'bx1} : dec_ma_data_op23 = 1'b1;  /* CLR1,,!addr16.4 */
                {8'h71,8'h58,2'bx0} : dec_ma_data_op23 = 1'b1;  /* CLR1,,!addr16.5 */
                {8'h71,8'h58,2'bx1} : dec_ma_data_op23 = 1'b1;  /* CLR1,,!addr16.5 */
                {8'h71,8'h68,2'bx0} : dec_ma_data_op23 = 1'b1;  /* CLR1,,!addr16.6 */
                {8'h71,8'h68,2'bx1} : dec_ma_data_op23 = 1'b1;  /* CLR1,,!addr16.6 */
                {8'h71,8'h78,2'bx0} : dec_ma_data_op23 = 1'b1;  /* CLR1,,!addr16.7 */
                {8'h71,8'h78,2'bx1} : dec_ma_data_op23 = 1'b1;  /* CLR1,,!addr16.7 */
                {8'h61,8'hba,2'bx0} : dec_ma_data_op23 = 1'b1;  /* XCH,A,!addr16 */
                {8'h61,8'hba,2'bx1} : dec_ma_data_op23 = 1'b1;  /* XCH,A,!addr16 */
                default : dec_ma_data_op23 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_HL;
    reg    dec_ma_data_HL;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_HL = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h8b,8'hxx,2'bxx} : dec_ma_data_HL = 1'b1;  /* MOV,A,[HL] */
                {8'h9b,8'hxx,2'bxx} : dec_ma_data_HL = 1'b1;  /* MOV,[HL],A */
                {8'h61,8'hac,2'bx0} : dec_ma_data_HL = 1'b1;  /* XCH,A,[HL] */
                {8'h61,8'hac,2'bx1} : dec_ma_data_HL = 1'b1;  /* XCH,A,[HL] */
                {8'hab,8'hxx,2'bxx} : dec_ma_data_HL = 1'b1;  /* MOVW,AX,[HL] */
                {8'hbb,8'hxx,2'bxx} : dec_ma_data_HL = 1'b1;  /* MOVW,[HL],AX */
                {8'h0d,8'hxx,2'bxx} : dec_ma_data_HL = 1'b1;  /* ADD,A,[HL] */
                {8'h1d,8'hxx,2'bxx} : dec_ma_data_HL = 1'b1;  /* ADDC,A,[HL] */
                {8'h2d,8'hxx,2'bxx} : dec_ma_data_HL = 1'b1;  /* SUB,A,[HL] */
                {8'h3d,8'hxx,2'bxx} : dec_ma_data_HL = 1'b1;  /* SUBC,A,[HL] */
                {8'h5d,8'hxx,2'bxx} : dec_ma_data_HL = 1'b1;  /* AND,A,[HL] */
                {8'h6d,8'hxx,2'bxx} : dec_ma_data_HL = 1'b1;  /* OR,A,[HL] */
                {8'h7d,8'hxx,2'bxx} : dec_ma_data_HL = 1'b1;  /* XOR,A,[HL] */
                {8'h4d,8'hxx,2'bxx} : dec_ma_data_HL = 1'b1;  /* CMP,A,[HL] */
                {8'h71,8'h84,2'bxx} : dec_ma_data_HL = 1'b1;  /* MOV1,CY,[HL].0 */
                {8'h71,8'h94,2'bxx} : dec_ma_data_HL = 1'b1;  /* MOV1,CY,[HL].1 */
                {8'h71,8'ha4,2'bxx} : dec_ma_data_HL = 1'b1;  /* MOV1,CY,[HL].2 */
                {8'h71,8'hb4,2'bxx} : dec_ma_data_HL = 1'b1;  /* MOV1,CY,[HL].3 */
                {8'h71,8'hc4,2'bxx} : dec_ma_data_HL = 1'b1;  /* MOV1,CY,[HL].4 */
                {8'h71,8'hd4,2'bxx} : dec_ma_data_HL = 1'b1;  /* MOV1,CY,[HL].5 */
                {8'h71,8'he4,2'bxx} : dec_ma_data_HL = 1'b1;  /* MOV1,CY,[HL].6 */
                {8'h71,8'hf4,2'bxx} : dec_ma_data_HL = 1'b1;  /* MOV1,CY,[HL].7 */
                {8'h71,8'h81,2'bx0} : dec_ma_data_HL = 1'b1;  /* MOV1,[HL].0,CY */
                {8'h71,8'h81,2'bx1} : dec_ma_data_HL = 1'b1;  /* MOV1,[HL].0,CY */
                {8'h71,8'h91,2'bx0} : dec_ma_data_HL = 1'b1;  /* MOV1,[HL].1,CY */
                {8'h71,8'h91,2'bx1} : dec_ma_data_HL = 1'b1;  /* MOV1,[HL].1,CY */
                {8'h71,8'ha1,2'bx0} : dec_ma_data_HL = 1'b1;  /* MOV1,[HL].2,CY */
                {8'h71,8'ha1,2'bx1} : dec_ma_data_HL = 1'b1;  /* MOV1,[HL].2,CY */
                {8'h71,8'hb1,2'bx0} : dec_ma_data_HL = 1'b1;  /* MOV1,[HL].3,CY */
                {8'h71,8'hb1,2'bx1} : dec_ma_data_HL = 1'b1;  /* MOV1,[HL].3,CY */
                {8'h71,8'hc1,2'bx0} : dec_ma_data_HL = 1'b1;  /* MOV1,[HL].4,CY */
                {8'h71,8'hc1,2'bx1} : dec_ma_data_HL = 1'b1;  /* MOV1,[HL].4,CY */
                {8'h71,8'hd1,2'bx0} : dec_ma_data_HL = 1'b1;  /* MOV1,[HL].5,CY */
                {8'h71,8'hd1,2'bx1} : dec_ma_data_HL = 1'b1;  /* MOV1,[HL].5,CY */
                {8'h71,8'he1,2'bx0} : dec_ma_data_HL = 1'b1;  /* MOV1,[HL].6,CY */
                {8'h71,8'he1,2'bx1} : dec_ma_data_HL = 1'b1;  /* MOV1,[HL].6,CY */
                {8'h71,8'hf1,2'bx0} : dec_ma_data_HL = 1'b1;  /* MOV1,[HL].7,CY */
                {8'h71,8'hf1,2'bx1} : dec_ma_data_HL = 1'b1;  /* MOV1,[HL].7,CY */
                {8'h71,8'h85,2'bxx} : dec_ma_data_HL = 1'b1;  /* AND1,CY,[HL].0 */
                {8'h71,8'h95,2'bxx} : dec_ma_data_HL = 1'b1;  /* AND1,CY,[HL].1 */
                {8'h71,8'ha5,2'bxx} : dec_ma_data_HL = 1'b1;  /* AND1,CY,[HL].2 */
                {8'h71,8'hb5,2'bxx} : dec_ma_data_HL = 1'b1;  /* AND1,CY,[HL].3 */
                {8'h71,8'hc5,2'bxx} : dec_ma_data_HL = 1'b1;  /* AND1,CY,[HL].4 */
                {8'h71,8'hd5,2'bxx} : dec_ma_data_HL = 1'b1;  /* AND1,CY,[HL].5 */
                {8'h71,8'he5,2'bxx} : dec_ma_data_HL = 1'b1;  /* AND1,CY,[HL].6 */
                {8'h71,8'hf5,2'bxx} : dec_ma_data_HL = 1'b1;  /* AND1,CY,[HL].7 */
                {8'h71,8'h86,2'bxx} : dec_ma_data_HL = 1'b1;  /* OR1,CY,[HL].0 */
                {8'h71,8'h96,2'bxx} : dec_ma_data_HL = 1'b1;  /* OR1,CY,[HL].1 */
                {8'h71,8'ha6,2'bxx} : dec_ma_data_HL = 1'b1;  /* OR1,CY,[HL].2 */
                {8'h71,8'hb6,2'bxx} : dec_ma_data_HL = 1'b1;  /* OR1,CY,[HL].3 */
                {8'h71,8'hc6,2'bxx} : dec_ma_data_HL = 1'b1;  /* OR1,CY,[HL].4 */
                {8'h71,8'hd6,2'bxx} : dec_ma_data_HL = 1'b1;  /* OR1,CY,[HL].5 */
                {8'h71,8'he6,2'bxx} : dec_ma_data_HL = 1'b1;  /* OR1,CY,[HL].6 */
                {8'h71,8'hf6,2'bxx} : dec_ma_data_HL = 1'b1;  /* OR1,CY,[HL].7 */
                {8'h71,8'h87,2'bxx} : dec_ma_data_HL = 1'b1;  /* XOR1,CY,[HL].0 */
                {8'h71,8'h97,2'bxx} : dec_ma_data_HL = 1'b1;  /* XOR1,CY,[HL].1 */
                {8'h71,8'ha7,2'bxx} : dec_ma_data_HL = 1'b1;  /* XOR1,CY,[HL].2 */
                {8'h71,8'hb7,2'bxx} : dec_ma_data_HL = 1'b1;  /* XOR1,CY,[HL].3 */
                {8'h71,8'hc7,2'bxx} : dec_ma_data_HL = 1'b1;  /* XOR1,CY,[HL].4 */
                {8'h71,8'hd7,2'bxx} : dec_ma_data_HL = 1'b1;  /* XOR1,CY,[HL].5 */
                {8'h71,8'he7,2'bxx} : dec_ma_data_HL = 1'b1;  /* XOR1,CY,[HL].6 */
                {8'h71,8'hf7,2'bxx} : dec_ma_data_HL = 1'b1;  /* XOR1,CY,[HL].7 */
                {8'h71,8'h82,2'bx0} : dec_ma_data_HL = 1'b1;  /* SET1,,[HL].0 */
                {8'h71,8'h82,2'bx1} : dec_ma_data_HL = 1'b1;  /* SET1,,[HL].0 */
                {8'h71,8'h92,2'bx0} : dec_ma_data_HL = 1'b1;  /* SET1,,[HL].1 */
                {8'h71,8'h92,2'bx1} : dec_ma_data_HL = 1'b1;  /* SET1,,[HL].1 */
                {8'h71,8'ha2,2'bx0} : dec_ma_data_HL = 1'b1;  /* SET1,,[HL].2 */
                {8'h71,8'ha2,2'bx1} : dec_ma_data_HL = 1'b1;  /* SET1,,[HL].2 */
                {8'h71,8'hb2,2'bx0} : dec_ma_data_HL = 1'b1;  /* SET1,,[HL].3 */
                {8'h71,8'hb2,2'bx1} : dec_ma_data_HL = 1'b1;  /* SET1,,[HL].3 */
                {8'h71,8'hc2,2'bx0} : dec_ma_data_HL = 1'b1;  /* SET1,,[HL].4 */
                {8'h71,8'hc2,2'bx1} : dec_ma_data_HL = 1'b1;  /* SET1,,[HL].4 */
                {8'h71,8'hd2,2'bx0} : dec_ma_data_HL = 1'b1;  /* SET1,,[HL].5 */
                {8'h71,8'hd2,2'bx1} : dec_ma_data_HL = 1'b1;  /* SET1,,[HL].5 */
                {8'h71,8'he2,2'bx0} : dec_ma_data_HL = 1'b1;  /* SET1,,[HL].6 */
                {8'h71,8'he2,2'bx1} : dec_ma_data_HL = 1'b1;  /* SET1,,[HL].6 */
                {8'h71,8'hf2,2'bx0} : dec_ma_data_HL = 1'b1;  /* SET1,,[HL].7 */
                {8'h71,8'hf2,2'bx1} : dec_ma_data_HL = 1'b1;  /* SET1,,[HL].7 */
                {8'h71,8'h83,2'bx0} : dec_ma_data_HL = 1'b1;  /* CLR1,,[HL].0 */
                {8'h71,8'h83,2'bx1} : dec_ma_data_HL = 1'b1;  /* CLR1,,[HL].0 */
                {8'h71,8'h93,2'bx0} : dec_ma_data_HL = 1'b1;  /* CLR1,,[HL].1 */
                {8'h71,8'h93,2'bx1} : dec_ma_data_HL = 1'b1;  /* CLR1,,[HL].1 */
                {8'h71,8'ha3,2'bx0} : dec_ma_data_HL = 1'b1;  /* CLR1,,[HL].2 */
                {8'h71,8'ha3,2'bx1} : dec_ma_data_HL = 1'b1;  /* CLR1,,[HL].2 */
                {8'h71,8'hb3,2'bx0} : dec_ma_data_HL = 1'b1;  /* CLR1,,[HL].3 */
                {8'h71,8'hb3,2'bx1} : dec_ma_data_HL = 1'b1;  /* CLR1,,[HL].3 */
                {8'h71,8'hc3,2'bx0} : dec_ma_data_HL = 1'b1;  /* CLR1,,[HL].4 */
                {8'h71,8'hc3,2'bx1} : dec_ma_data_HL = 1'b1;  /* CLR1,,[HL].4 */
                {8'h71,8'hd3,2'bx0} : dec_ma_data_HL = 1'b1;  /* CLR1,,[HL].5 */
                {8'h71,8'hd3,2'bx1} : dec_ma_data_HL = 1'b1;  /* CLR1,,[HL].5 */
                {8'h71,8'he3,2'bx0} : dec_ma_data_HL = 1'b1;  /* CLR1,,[HL].6 */
                {8'h71,8'he3,2'bx1} : dec_ma_data_HL = 1'b1;  /* CLR1,,[HL].6 */
                {8'h71,8'hf3,2'bx0} : dec_ma_data_HL = 1'b1;  /* CLR1,,[HL].7 */
                {8'h71,8'hf3,2'bx1} : dec_ma_data_HL = 1'b1;  /* CLR1,,[HL].7 */
                {8'h31,8'h83,2'b00} : dec_ma_data_HL = 1'b1;  /* BT,[HL].0,$addr8 */
                {8'h31,8'h93,2'b00} : dec_ma_data_HL = 1'b1;  /* BT,[HL].1,$addr8 */
                {8'h31,8'ha3,2'b00} : dec_ma_data_HL = 1'b1;  /* BT,[HL].2,$addr8 */
                {8'h31,8'hb3,2'b00} : dec_ma_data_HL = 1'b1;  /* BT,[HL].3,$addr8 */
                {8'h31,8'hc3,2'b00} : dec_ma_data_HL = 1'b1;  /* BT,[HL].4,$addr8 */
                {8'h31,8'hd3,2'b00} : dec_ma_data_HL = 1'b1;  /* BT,[HL].5,$addr8 */
                {8'h31,8'he3,2'b00} : dec_ma_data_HL = 1'b1;  /* BT,[HL].6,$addr8 */
                {8'h31,8'hf3,2'b00} : dec_ma_data_HL = 1'b1;  /* BT,[HL].7,$addr8 */
                {8'h31,8'h85,2'b00} : dec_ma_data_HL = 1'b1;  /* BF,[HL].0,$addr8 */
                {8'h31,8'h95,2'b00} : dec_ma_data_HL = 1'b1;  /* BF,[HL].1,$addr8 */
                {8'h31,8'ha5,2'b00} : dec_ma_data_HL = 1'b1;  /* BF,[HL].2,$addr8 */
                {8'h31,8'hb5,2'b00} : dec_ma_data_HL = 1'b1;  /* BF,[HL].3,$addr8 */
                {8'h31,8'hc5,2'b00} : dec_ma_data_HL = 1'b1;  /* BF,[HL].4,$addr8 */
                {8'h31,8'hd5,2'b00} : dec_ma_data_HL = 1'b1;  /* BF,[HL].5,$addr8 */
                {8'h31,8'he5,2'b00} : dec_ma_data_HL = 1'b1;  /* BF,[HL].6,$addr8 */
                {8'h31,8'hf5,2'b00} : dec_ma_data_HL = 1'b1;  /* BF,[HL].7,$addr8 */
                {8'h31,8'h81,2'b00} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                {8'h31,8'h81,2'b01} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                {8'h31,8'h81,2'b10} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                {8'h31,8'h91,2'b00} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                {8'h31,8'h91,2'b01} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                {8'h31,8'h91,2'b10} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                {8'h31,8'ha1,2'b00} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                {8'h31,8'ha1,2'b01} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                {8'h31,8'ha1,2'b10} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                {8'h31,8'hb1,2'b00} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                {8'h31,8'hb1,2'b01} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                {8'h31,8'hb1,2'b10} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                {8'h31,8'hc1,2'b00} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                {8'h31,8'hc1,2'b01} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                {8'h31,8'hc1,2'b10} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                {8'h31,8'hd1,2'b00} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                {8'h31,8'hd1,2'b01} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                {8'h31,8'hd1,2'b10} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                {8'h31,8'he1,2'b00} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                {8'h31,8'he1,2'b01} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                {8'h31,8'he1,2'b10} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                {8'h31,8'hf1,2'b00} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                {8'h31,8'hf1,2'b01} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                {8'h31,8'hf1,2'b10} : dec_ma_data_HL = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                {8'h61,8'hbc,2'bx0} : dec_ma_data_HL = 1'b1;  /* XCH,A,[HL] */
                {8'h61,8'hbc,2'bx1} : dec_ma_data_HL = 1'b1;  /* XCH,A,[HL] */
                default : dec_ma_data_HL = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_HLop1;
    reg    dec_ma_data_HLop1;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_HLop1 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hcc,8'hxx,2'bxx} : dec_ma_data_HLop1 = 1'b1;  /* MOV,[HL+byte],#byte */
                {8'h8c,8'hxx,2'bxx} : dec_ma_data_HLop1 = 1'b1;  /* MOV,A,[HL+byte] */
                {8'h9c,8'hxx,2'bxx} : dec_ma_data_HLop1 = 1'b1;  /* MOV,[HL+byte],A */
                {8'hac,8'hxx,2'bxx} : dec_ma_data_HLop1 = 1'b1;  /* MOVW,AX,[HL+byte] */
                {8'hbc,8'hxx,2'bxx} : dec_ma_data_HLop1 = 1'b1;  /* MOVW,[HL+byte],AX */
                {8'h0e,8'hxx,2'bxx} : dec_ma_data_HLop1 = 1'b1;  /* ADD,A,[HL+byte] */
                {8'h1e,8'hxx,2'bxx} : dec_ma_data_HLop1 = 1'b1;  /* ADDC,A,[HL+byte] */
                {8'h2e,8'hxx,2'bxx} : dec_ma_data_HLop1 = 1'b1;  /* SUB,A,[HL+byte] */
                {8'h3e,8'hxx,2'bxx} : dec_ma_data_HLop1 = 1'b1;  /* SUBC,A,[HL+byte] */
                {8'h5e,8'hxx,2'bxx} : dec_ma_data_HLop1 = 1'b1;  /* AND,A,[HL+byte] */
                {8'h6e,8'hxx,2'bxx} : dec_ma_data_HLop1 = 1'b1;  /* OR,A,[HL+byte] */
                {8'h7e,8'hxx,2'bxx} : dec_ma_data_HLop1 = 1'b1;  /* XOR,A,[HL+byte] */
                {8'h4e,8'hxx,2'bxx} : dec_ma_data_HLop1 = 1'b1;  /* CMP,A,[HL+byte] */
                default : dec_ma_data_HLop1 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_HLop2;
    reg    dec_ma_data_HLop2;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_HLop2 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hce,2'bxx} : dec_ma_data_HLop2 = 1'b1;  /* MOVS,[HL+byte],X */
                {8'h61,8'had,2'bx0} : dec_ma_data_HLop2 = 1'b1;  /* XCH,A,[HL+byte] */
                {8'h61,8'had,2'bx1} : dec_ma_data_HLop2 = 1'b1;  /* XCH,A,[HL+byte] */
                {8'h61,8'hde,2'bxx} : dec_ma_data_HLop2 = 1'b1;  /* CMPS,X,[HL+byte] */
                {8'h61,8'h09,2'bxx} : dec_ma_data_HLop2 = 1'b1;  /* ADDW,AX,[HL+byte] */
                {8'h61,8'h29,2'bxx} : dec_ma_data_HLop2 = 1'b1;  /* SUBW,AX,[HL+byte] */
                {8'h61,8'h49,2'bxx} : dec_ma_data_HLop2 = 1'b1;  /* CMPW,AX,[HL+byte] */
                {8'h61,8'h59,2'bx0} : dec_ma_data_HLop2 = 1'b1;  /* INC,,[HL+byte] */
                {8'h61,8'h59,2'bx1} : dec_ma_data_HLop2 = 1'b1;  /* INC,,[HL+byte] */
                {8'h61,8'h69,2'bx0} : dec_ma_data_HLop2 = 1'b1;  /* DEC,,[HL+byte] */
                {8'h61,8'h69,2'bx1} : dec_ma_data_HLop2 = 1'b1;  /* DEC,,[HL+byte] */
                {8'h61,8'h79,2'bx0} : dec_ma_data_HLop2 = 1'b1;  /* INCW,,[HL+byte] */
                {8'h61,8'h79,2'bx1} : dec_ma_data_HLop2 = 1'b1;  /* INCW,,[HL+byte] */
                {8'h61,8'h89,2'bx0} : dec_ma_data_HLop2 = 1'b1;  /* DECW,,[HL+byte] */
                {8'h61,8'h89,2'bx1} : dec_ma_data_HLop2 = 1'b1;  /* DECW,,[HL+byte] */
                {8'h61,8'hbd,2'bx0} : dec_ma_data_HLop2 = 1'b1;  /* XCH,A,[HL+byte] */
                {8'h61,8'hbd,2'bx1} : dec_ma_data_HLop2 = 1'b1;  /* XCH,A,[HL+byte] */
                default : dec_ma_data_HLop2 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_HLB;
    reg    dec_ma_data_HLB;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_HLB = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hc9,2'bxx} : dec_ma_data_HLB = 1'b1;  /* MOV,A,[HL+B] */
                {8'h61,8'hd9,2'bxx} : dec_ma_data_HLB = 1'b1;  /* MOV,[HL+B],A */
                {8'h61,8'hb9,2'bx0} : dec_ma_data_HLB = 1'b1;  /* XCH,A,[HL+B] */
                {8'h61,8'hb9,2'bx1} : dec_ma_data_HLB = 1'b1;  /* XCH,A,[HL+B] */
                {8'h61,8'h80,2'bxx} : dec_ma_data_HLB = 1'b1;  /* ADD,A,[HL+B] */
                {8'h61,8'h90,2'bxx} : dec_ma_data_HLB = 1'b1;  /* ADDC,A,[HL+B] */
                {8'h61,8'ha0,2'bxx} : dec_ma_data_HLB = 1'b1;  /* SUB,A,[HL+B] */
                {8'h61,8'hb0,2'bxx} : dec_ma_data_HLB = 1'b1;  /* SUBC,A,[HL+B] */
                {8'h61,8'hd0,2'bxx} : dec_ma_data_HLB = 1'b1;  /* AND,A,[HL+B] */
                {8'h61,8'he0,2'bxx} : dec_ma_data_HLB = 1'b1;  /* OR,A,[HL+B] */
                {8'h61,8'hf0,2'bxx} : dec_ma_data_HLB = 1'b1;  /* XOR,A,[HL+B] */
                {8'h61,8'hc0,2'bxx} : dec_ma_data_HLB = 1'b1;  /* CMP,A,[HL+B] */
                {8'h61,8'hd1,2'bxx} : dec_ma_data_HLB = 1'b1;  /* AND,A,[HL+B] */
                {8'h61,8'he1,2'bxx} : dec_ma_data_HLB = 1'b1;  /* OR,A,[HL+B] */
                {8'h61,8'hf1,2'bxx} : dec_ma_data_HLB = 1'b1;  /* XOR,A,[HL+B] */
                default : dec_ma_data_HLB = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_HLC;
    reg    dec_ma_data_HLC;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_HLC = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'he9,2'bxx} : dec_ma_data_HLC = 1'b1;  /* MOV,A,[HL+C] */
                {8'h61,8'hf9,2'bxx} : dec_ma_data_HLC = 1'b1;  /* MOV,[HL+C],A */
                {8'h61,8'ha9,2'bx0} : dec_ma_data_HLC = 1'b1;  /* XCH,A,[HL+C] */
                {8'h61,8'ha9,2'bx1} : dec_ma_data_HLC = 1'b1;  /* XCH,A,[HL+C] */
                {8'h61,8'h82,2'bxx} : dec_ma_data_HLC = 1'b1;  /* ADD,A,[HL+C] */
                {8'h61,8'h92,2'bxx} : dec_ma_data_HLC = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h61,8'ha2,2'bxx} : dec_ma_data_HLC = 1'b1;  /* SUB,A,[HL+C] */
                {8'h61,8'hb2,2'bxx} : dec_ma_data_HLC = 1'b1;  /* SUBC,A,[HL+C] */
                {8'h61,8'hd2,2'bxx} : dec_ma_data_HLC = 1'b1;  /* AND,A,[HL+C] */
                {8'h61,8'he2,2'bxx} : dec_ma_data_HLC = 1'b1;  /* OR,A,[HL+C] */
                {8'h61,8'hf2,2'bxx} : dec_ma_data_HLC = 1'b1;  /* XOR,A,[HL+C] */
                {8'h61,8'hc2,2'bxx} : dec_ma_data_HLC = 1'b1;  /* CMP,A,[HL+C] */
                {8'h61,8'h83,2'bxx} : dec_ma_data_HLC = 1'b1;  /* ADD,A,[HL+C] */
                {8'h61,8'h93,2'bxx} : dec_ma_data_HLC = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h61,8'ha3,2'bxx} : dec_ma_data_HLC = 1'b1;  /* SUB,A,[HL+C] */
                {8'h61,8'hb3,2'bxx} : dec_ma_data_HLC = 1'b1;  /* SUBC,A,[HL+C] */
                default : dec_ma_data_HLC = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_DE;
    reg    dec_ma_data_DE;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_DE = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h89,8'hxx,2'bxx} : dec_ma_data_DE = 1'b1;  /* MOV,A,[DE] */
                {8'h99,8'hxx,2'bxx} : dec_ma_data_DE = 1'b1;  /* MOV,[DE],A */
                {8'h61,8'hae,2'bx0} : dec_ma_data_DE = 1'b1;  /* XCH,A,[DE] */
                {8'h61,8'hae,2'bx1} : dec_ma_data_DE = 1'b1;  /* XCH,A,[DE] */
                {8'ha9,8'hxx,2'bxx} : dec_ma_data_DE = 1'b1;  /* MOVW,AX,[DE] */
                {8'hb9,8'hxx,2'bxx} : dec_ma_data_DE = 1'b1;  /* MOVW,[DE],AX */
                {8'h61,8'hbe,2'bx0} : dec_ma_data_DE = 1'b1;  /* XCH,A,[DE] */
                {8'h61,8'hbe,2'bx1} : dec_ma_data_DE = 1'b1;  /* XCH,A,[DE] */
                default : dec_ma_data_DE = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_DEop1;
    reg    dec_ma_data_DEop1;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_DEop1 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hca,8'hxx,2'bxx} : dec_ma_data_DEop1 = 1'b1;  /* MOV,[DE+byte],#byte */
                {8'h8a,8'hxx,2'bxx} : dec_ma_data_DEop1 = 1'b1;  /* MOV,A,[DE+byte] */
                {8'h9a,8'hxx,2'bxx} : dec_ma_data_DEop1 = 1'b1;  /* MOV,[DE+byte],A */
                {8'haa,8'hxx,2'bxx} : dec_ma_data_DEop1 = 1'b1;  /* MOVW,AX,[DE+byte] */
                {8'hba,8'hxx,2'bxx} : dec_ma_data_DEop1 = 1'b1;  /* MOVW,[DE+byte],AX */
                default : dec_ma_data_DEop1 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_DEop2;
    reg    dec_ma_data_DEop2;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_DEop2 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'haf,2'bx0} : dec_ma_data_DEop2 = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'haf,2'bx1} : dec_ma_data_DEop2 = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'hbf,2'bx0} : dec_ma_data_DEop2 = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'hbf,2'bx1} : dec_ma_data_DEop2 = 1'b1;  /* XCH,A,[DE+byte] */
                default : dec_ma_data_DEop2 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_SPop1;
    reg    dec_ma_data_SPop1;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_SPop1 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hc8,8'hxx,2'bxx} : dec_ma_data_SPop1 = 1'b1;  /* MOV,[SP+byte],#byte */
                {8'h88,8'hxx,2'bxx} : dec_ma_data_SPop1 = 1'b1;  /* MOV,A,[SP+byte] */
                {8'h98,8'hxx,2'bxx} : dec_ma_data_SPop1 = 1'b1;  /* MOV,[SP+byte],A */
                {8'ha8,8'hxx,2'bxx} : dec_ma_data_SPop1 = 1'b1;  /* MOVW,AX,[SP+byte] */
                {8'hb8,8'hxx,2'bxx} : dec_ma_data_SPop1 = 1'b1;  /* MOVW,[SP+byte],AX */
                default : dec_ma_data_SPop1 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_BCop12;
    reg    dec_ma_data_BCop12;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_BCop12 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h39,8'hxx,2'bxx} : dec_ma_data_BCop12 = 1'b1;  /* MOV,word[BC],#byte */
                {8'h49,8'hxx,2'bxx} : dec_ma_data_BCop12 = 1'b1;  /* MOV,A,word[BC] */
                {8'h48,8'hxx,2'bxx} : dec_ma_data_BCop12 = 1'b1;  /* MOV,word[BC],A */
                {8'h79,8'hxx,2'bxx} : dec_ma_data_BCop12 = 1'b1;  /* MOVW,AX,word[BC] */
                {8'h78,8'hxx,2'bxx} : dec_ma_data_BCop12 = 1'b1;  /* MOVW,word[BC],AX */
                default : dec_ma_data_BCop12 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_Bop12;
    reg    dec_ma_data_Bop12;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_Bop12 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h19,8'hxx,2'bxx} : dec_ma_data_Bop12 = 1'b1;  /* MOV,word[B],#byte */
                {8'h09,8'hxx,2'bxx} : dec_ma_data_Bop12 = 1'b1;  /* MOV,A,word[B] */
                {8'h18,8'hxx,2'bxx} : dec_ma_data_Bop12 = 1'b1;  /* MOV,word[B],A */
                {8'h59,8'hxx,2'bxx} : dec_ma_data_Bop12 = 1'b1;  /* MOVW,AX,word[B] */
                {8'h58,8'hxx,2'bxx} : dec_ma_data_Bop12 = 1'b1;  /* MOVW,word[B],AX */
                default : dec_ma_data_Bop12 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ma_data_Cop12;
    reg    dec_ma_data_Cop12;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ma_data_Cop12 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h38,8'hxx,2'bxx} : dec_ma_data_Cop12 = 1'b1;  /* MOV,word[C],#byte */
                {8'h29,8'hxx,2'bxx} : dec_ma_data_Cop12 = 1'b1;  /* MOV,A,word[C] */
                {8'h28,8'hxx,2'bxx} : dec_ma_data_Cop12 = 1'b1;  /* MOV,word[C],A */
                {8'h69,8'hxx,2'bxx} : dec_ma_data_Cop12 = 1'b1;  /* MOVW,AX,word[C] */
                {8'h68,8'hxx,2'bxx} : dec_ma_data_Cop12 = 1'b1;  /* MOVW,word[C],AX */
                default : dec_ma_data_Cop12 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_sp_set_enable;
    reg    dec_sp_set_enable;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(decout_mask == 1'b1) begin
//            dec_sp_set_enable = 1'b0;
//        end else if(rstvec == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1) begin
            dec_sp_set_enable = 1'b0;
        end else if(ivack == 1'b1) begin
            casex ({stage_adr})  
                {2'b00} : dec_sp_set_enable = 1'b1;  /* Interrupt */
                {2'b01} : dec_sp_set_enable = 1'b1;  /* Interrupt */
                default : dec_sp_set_enable = 1'b0;
            endcase
        end else if(skpack == 1'b1) begin
            dec_sp_set_enable = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hca,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALL,,AX */
                {8'h61,8'hca,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALL,,AX */
                {8'h61,8'hda,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALL,,BC */
                {8'h61,8'hda,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALL,,BC */
                {8'h61,8'hea,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALL,,DE */
                {8'h61,8'hea,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALL,,DE */
                {8'h61,8'hfa,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALL,,HL */
                {8'h61,8'hfa,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALL,,HL */
                {8'hfe,8'hxx,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALL,,$!addr16 */
                {8'hfe,8'hxx,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALL,,$!addr16 */
                {8'hfd,8'hxx,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALL,,!addr16 */
                {8'hfd,8'hxx,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALL,,!addr16 */
                {8'hfc,8'hxx,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALL,,!!addr20 */
                {8'hfc,8'hxx,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALL,,!!addr20 */
                {8'h61,8'h84,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0080h] */
                {8'h61,8'h84,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0080h] */
                {8'h61,8'h94,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0082h] */
                {8'h61,8'h94,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0082h] */
                {8'h61,8'ha4,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0084h] */
                {8'h61,8'ha4,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0084h] */
                {8'h61,8'hb4,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0086h] */
                {8'h61,8'hb4,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0086h] */
                {8'h61,8'hc4,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0088h] */
                {8'h61,8'hc4,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0088h] */
                {8'h61,8'hd4,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[008Ah] */
                {8'h61,8'hd4,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[008Ah] */
                {8'h61,8'he4,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[008Ch] */
                {8'h61,8'he4,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[008Ch] */
                {8'h61,8'hf4,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[008Eh] */
                {8'h61,8'hf4,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[008Eh] */
                {8'h61,8'h85,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0090h] */
                {8'h61,8'h85,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0090h] */
                {8'h61,8'h95,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0092h] */
                {8'h61,8'h95,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0092h] */
                {8'h61,8'ha5,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0094h] */
                {8'h61,8'ha5,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0094h] */
                {8'h61,8'hb5,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0096h] */
                {8'h61,8'hb5,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0096h] */
                {8'h61,8'hc5,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0098h] */
                {8'h61,8'hc5,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[0098h] */
                {8'h61,8'hd5,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[009Ah] */
                {8'h61,8'hd5,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[009Ah] */
                {8'h61,8'he5,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[009Ch] */
                {8'h61,8'he5,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[009Ch] */
                {8'h61,8'hf5,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[009Eh] */
                {8'h61,8'hf5,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[009Eh] */
                {8'h61,8'h86,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00A0h] */
                {8'h61,8'h86,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00A0h] */
                {8'h61,8'h96,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00A2h] */
                {8'h61,8'h96,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00A2h] */
                {8'h61,8'ha6,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00A4h] */
                {8'h61,8'ha6,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00A4h] */
                {8'h61,8'hb6,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00A6h] */
                {8'h61,8'hb6,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00A6h] */
                {8'h61,8'hc6,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00A8h] */
                {8'h61,8'hc6,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00A8h] */
                {8'h61,8'hd6,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00AAh] */
                {8'h61,8'hd6,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00AAh] */
                {8'h61,8'he6,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00ACh] */
                {8'h61,8'he6,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00ACh] */
                {8'h61,8'hf6,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00AEh] */
                {8'h61,8'hf6,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00AEh] */
                {8'h61,8'h87,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00B0h] */
                {8'h61,8'h87,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00B0h] */
                {8'h61,8'h97,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00B2h] */
                {8'h61,8'h97,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00B2h] */
                {8'h61,8'ha7,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00B4h] */
                {8'h61,8'ha7,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00B4h] */
                {8'h61,8'hb7,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00B6h] */
                {8'h61,8'hb7,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00B6h] */
                {8'h61,8'hc7,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00B8h] */
                {8'h61,8'hc7,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00B8h] */
                {8'h61,8'hd7,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00BAh] */
                {8'h61,8'hd7,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00BAh] */
                {8'h61,8'he7,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00BCh] */
                {8'h61,8'he7,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00BCh] */
                {8'h61,8'hf7,2'bx0} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00BEh] */
                {8'h61,8'hf7,2'bx1} : dec_sp_set_enable = 1'b1;  /* CALLT,,[00BEh] */
                {8'h61,8'hcc,2'bx0} : dec_sp_set_enable = 1'b1;  /* BRK,, */
                {8'h61,8'hcc,2'bx1} : dec_sp_set_enable = 1'b1;  /* BRK,, */
                {8'hd7,8'hxx,2'b00} : dec_sp_set_enable = 1'b1;  /* RET,, */
                {8'hd7,8'hxx,2'b01} : dec_sp_set_enable = 1'b1;  /* RET,, */
                {8'h61,8'hec,2'b00} : dec_sp_set_enable = 1'b1;  /* RETB,, */
                {8'h61,8'hec,2'b01} : dec_sp_set_enable = 1'b1;  /* RETB,, */
                {8'h61,8'hfc,2'b00} : dec_sp_set_enable = 1'b1;  /* RETI,, */
                {8'h61,8'hfc,2'b01} : dec_sp_set_enable = 1'b1;  /* RETI,, */
                {8'h61,8'hdd,2'bxx} : dec_sp_set_enable = 1'b1;  /* PUSH,,PSW */
                {8'hc1,8'hxx,2'bxx} : dec_sp_set_enable = 1'b1;  /* PUSH,,AX */
                {8'hc3,8'hxx,2'bxx} : dec_sp_set_enable = 1'b1;  /* PUSH,,BC */
                {8'hc5,8'hxx,2'bxx} : dec_sp_set_enable = 1'b1;  /* PUSH,,DE */
                {8'hc7,8'hxx,2'bxx} : dec_sp_set_enable = 1'b1;  /* PUSH,,HL */
                {8'h61,8'hcd,2'bxx} : dec_sp_set_enable = 1'b1;  /* POP,,PSW */
                {8'hc0,8'hxx,2'bxx} : dec_sp_set_enable = 1'b1;  /* POP,,AX */
                {8'hc2,8'hxx,2'bxx} : dec_sp_set_enable = 1'b1;  /* POP,,BC */
                {8'hc4,8'hxx,2'bxx} : dec_sp_set_enable = 1'b1;  /* POP,,DE */
                {8'hc6,8'hxx,2'bxx} : dec_sp_set_enable = 1'b1;  /* POP,,HL */
                {8'hff,8'hxx,2'bx0} : dec_sp_set_enable = 1'b1;  /* SOFT,,BREAK */
                {8'hff,8'hxx,2'bx1} : dec_sp_set_enable = 1'b1;  /* SOFT,,BREAK */
                {8'h61,8'ha1,2'bx0} : dec_sp_set_enable = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'ha1,2'bx1} : dec_sp_set_enable = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'hb1,2'bx0} : dec_sp_set_enable = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hb1,2'bx1} : dec_sp_set_enable = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hc1,2'bx0} : dec_sp_set_enable = 1'b1;  /* SOFT4,,BREAK */
                {8'h61,8'hc1,2'bx1} : dec_sp_set_enable = 1'b1;  /* SOFT4,,BREAK */
                default : dec_sp_set_enable = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_sp_inc;
    reg    dec_sp_inc;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_sp_inc = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hd7,8'hxx,2'b00} : dec_sp_inc = 1'b1;  /* RET,, */
                {8'hd7,8'hxx,2'b01} : dec_sp_inc = 1'b1;  /* RET,, */
                {8'h61,8'hec,2'b00} : dec_sp_inc = 1'b1;  /* RETB,, */
                {8'h61,8'hec,2'b01} : dec_sp_inc = 1'b1;  /* RETB,, */
                {8'h61,8'hfc,2'b00} : dec_sp_inc = 1'b1;  /* RETI,, */
                {8'h61,8'hfc,2'b01} : dec_sp_inc = 1'b1;  /* RETI,, */
                {8'h61,8'hcd,2'bxx} : dec_sp_inc = 1'b1;  /* POP,,PSW */
                {8'hc0,8'hxx,2'bxx} : dec_sp_inc = 1'b1;  /* POP,,AX */
                {8'hc2,8'hxx,2'bxx} : dec_sp_inc = 1'b1;  /* POP,,BC */
                {8'hc4,8'hxx,2'bxx} : dec_sp_inc = 1'b1;  /* POP,,DE */
                {8'hc6,8'hxx,2'bxx} : dec_sp_inc = 1'b1;  /* POP,,HL */
                default : dec_sp_inc = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_sp_dec;
    reg    dec_sp_dec;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(decout_mask == 1'b1) begin
//            dec_sp_dec = 1'b0;
//        end else if(rstvec == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1) begin
            dec_sp_dec = 1'b0;
        end else if(ivack == 1'b1) begin
            casex ({stage_adr})  
                {2'b00} : dec_sp_dec = 1'b1;  /* Interrupt */
                {2'b01} : dec_sp_dec = 1'b1;  /* Interrupt */
                default : dec_sp_dec = 1'b0;
            endcase
        end else if(skpack == 1'b1) begin
            dec_sp_dec = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hca,2'bx0} : dec_sp_dec = 1'b1;  /* CALL,,AX */
                {8'h61,8'hca,2'bx1} : dec_sp_dec = 1'b1;  /* CALL,,AX */
                {8'h61,8'hda,2'bx0} : dec_sp_dec = 1'b1;  /* CALL,,BC */
                {8'h61,8'hda,2'bx1} : dec_sp_dec = 1'b1;  /* CALL,,BC */
                {8'h61,8'hea,2'bx0} : dec_sp_dec = 1'b1;  /* CALL,,DE */
                {8'h61,8'hea,2'bx1} : dec_sp_dec = 1'b1;  /* CALL,,DE */
                {8'h61,8'hfa,2'bx0} : dec_sp_dec = 1'b1;  /* CALL,,HL */
                {8'h61,8'hfa,2'bx1} : dec_sp_dec = 1'b1;  /* CALL,,HL */
                {8'hfe,8'hxx,2'bx0} : dec_sp_dec = 1'b1;  /* CALL,,$!addr16 */
                {8'hfe,8'hxx,2'bx1} : dec_sp_dec = 1'b1;  /* CALL,,$!addr16 */
                {8'hfd,8'hxx,2'bx0} : dec_sp_dec = 1'b1;  /* CALL,,!addr16 */
                {8'hfd,8'hxx,2'bx1} : dec_sp_dec = 1'b1;  /* CALL,,!addr16 */
                {8'hfc,8'hxx,2'bx0} : dec_sp_dec = 1'b1;  /* CALL,,!!addr20 */
                {8'hfc,8'hxx,2'bx1} : dec_sp_dec = 1'b1;  /* CALL,,!!addr20 */
                {8'h61,8'h84,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[0080h] */
                {8'h61,8'h84,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[0080h] */
                {8'h61,8'h94,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[0082h] */
                {8'h61,8'h94,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[0082h] */
                {8'h61,8'ha4,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[0084h] */
                {8'h61,8'ha4,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[0084h] */
                {8'h61,8'hb4,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[0086h] */
                {8'h61,8'hb4,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[0086h] */
                {8'h61,8'hc4,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[0088h] */
                {8'h61,8'hc4,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[0088h] */
                {8'h61,8'hd4,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[008Ah] */
                {8'h61,8'hd4,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[008Ah] */
                {8'h61,8'he4,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[008Ch] */
                {8'h61,8'he4,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[008Ch] */
                {8'h61,8'hf4,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[008Eh] */
                {8'h61,8'hf4,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[008Eh] */
                {8'h61,8'h85,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[0090h] */
                {8'h61,8'h85,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[0090h] */
                {8'h61,8'h95,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[0092h] */
                {8'h61,8'h95,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[0092h] */
                {8'h61,8'ha5,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[0094h] */
                {8'h61,8'ha5,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[0094h] */
                {8'h61,8'hb5,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[0096h] */
                {8'h61,8'hb5,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[0096h] */
                {8'h61,8'hc5,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[0098h] */
                {8'h61,8'hc5,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[0098h] */
                {8'h61,8'hd5,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[009Ah] */
                {8'h61,8'hd5,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[009Ah] */
                {8'h61,8'he5,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[009Ch] */
                {8'h61,8'he5,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[009Ch] */
                {8'h61,8'hf5,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[009Eh] */
                {8'h61,8'hf5,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[009Eh] */
                {8'h61,8'h86,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[00A0h] */
                {8'h61,8'h86,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[00A0h] */
                {8'h61,8'h96,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[00A2h] */
                {8'h61,8'h96,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[00A2h] */
                {8'h61,8'ha6,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[00A4h] */
                {8'h61,8'ha6,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[00A4h] */
                {8'h61,8'hb6,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[00A6h] */
                {8'h61,8'hb6,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[00A6h] */
                {8'h61,8'hc6,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[00A8h] */
                {8'h61,8'hc6,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[00A8h] */
                {8'h61,8'hd6,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[00AAh] */
                {8'h61,8'hd6,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[00AAh] */
                {8'h61,8'he6,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[00ACh] */
                {8'h61,8'he6,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[00ACh] */
                {8'h61,8'hf6,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[00AEh] */
                {8'h61,8'hf6,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[00AEh] */
                {8'h61,8'h87,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[00B0h] */
                {8'h61,8'h87,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[00B0h] */
                {8'h61,8'h97,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[00B2h] */
                {8'h61,8'h97,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[00B2h] */
                {8'h61,8'ha7,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[00B4h] */
                {8'h61,8'ha7,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[00B4h] */
                {8'h61,8'hb7,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[00B6h] */
                {8'h61,8'hb7,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[00B6h] */
                {8'h61,8'hc7,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[00B8h] */
                {8'h61,8'hc7,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[00B8h] */
                {8'h61,8'hd7,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[00BAh] */
                {8'h61,8'hd7,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[00BAh] */
                {8'h61,8'he7,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[00BCh] */
                {8'h61,8'he7,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[00BCh] */
                {8'h61,8'hf7,2'bx0} : dec_sp_dec = 1'b1;  /* CALLT,,[00BEh] */
                {8'h61,8'hf7,2'bx1} : dec_sp_dec = 1'b1;  /* CALLT,,[00BEh] */
                {8'h61,8'hcc,2'bx0} : dec_sp_dec = 1'b1;  /* BRK,, */
                {8'h61,8'hcc,2'bx1} : dec_sp_dec = 1'b1;  /* BRK,, */
                {8'h61,8'hdd,2'bxx} : dec_sp_dec = 1'b1;  /* PUSH,,PSW */
                {8'hc1,8'hxx,2'bxx} : dec_sp_dec = 1'b1;  /* PUSH,,AX */
                {8'hc3,8'hxx,2'bxx} : dec_sp_dec = 1'b1;  /* PUSH,,BC */
                {8'hc5,8'hxx,2'bxx} : dec_sp_dec = 1'b1;  /* PUSH,,DE */
                {8'hc7,8'hxx,2'bxx} : dec_sp_dec = 1'b1;  /* PUSH,,HL */
                {8'hff,8'hxx,2'bx0} : dec_sp_dec = 1'b1;  /* SOFT,,BREAK */
                {8'hff,8'hxx,2'bx1} : dec_sp_dec = 1'b1;  /* SOFT,,BREAK */
                {8'h61,8'ha1,2'bx0} : dec_sp_dec = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'ha1,2'bx1} : dec_sp_dec = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'hb1,2'bx0} : dec_sp_dec = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hb1,2'bx1} : dec_sp_dec = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hc1,2'bx0} : dec_sp_dec = 1'b1;  /* SOFT4,,BREAK */
                {8'h61,8'hc1,2'bx1} : dec_sp_dec = 1'b1;  /* SOFT4,,BREAK */
                default : dec_sp_dec = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_inc1;
    reg    dec_pc_inc1;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1) begin
            dec_pc_inc1 = 1'b0;
        end else if(skpack == 1'b1) begin
            casex ({ID_stage0,ID_stage1})  
                {8'h60,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,X */
                {8'h62,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,C */
                {8'h63,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,B */
                {8'h64,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,E */
                {8'h65,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,D */
                {8'h66,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,L */
                {8'h67,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,H */
                {8'h70,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,X,A */
                {8'h72,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,C,A */
                {8'h73,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,B,A */
                {8'h74,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,E,A */
                {8'h75,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,D,A */
                {8'h76,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,L,A */
                {8'h77,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,H,A */
                {8'h89,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,[DE] */
                {8'h99,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,[DE],A */
                {8'h8b,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,[HL] */
                {8'h9b,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOV,[HL],A */
                {8'h08,8'hxx} : dec_pc_inc1 = 1'b1;  /* XCH,A,X */
                {8'he1,8'hxx} : dec_pc_inc1 = 1'b1;  /* ONEB,,A */
                {8'he0,8'hxx} : dec_pc_inc1 = 1'b1;  /* ONEB,,X */
                {8'he3,8'hxx} : dec_pc_inc1 = 1'b1;  /* ONEB,,B */
                {8'he2,8'hxx} : dec_pc_inc1 = 1'b1;  /* ONEB,,C */
                {8'hf1,8'hxx} : dec_pc_inc1 = 1'b1;  /* CLRB,,A */
                {8'hf0,8'hxx} : dec_pc_inc1 = 1'b1;  /* CLRB,,X */
                {8'hf3,8'hxx} : dec_pc_inc1 = 1'b1;  /* CLRB,,B */
                {8'hf2,8'hxx} : dec_pc_inc1 = 1'b1;  /* CLRB,,C */
                {8'h13,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOVW,AX,BC */
                {8'h12,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOVW,BC,AX */
                {8'h15,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOVW,AX,DE */
                {8'h14,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOVW,DE,AX */
                {8'h17,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOVW,AX,HL */
                {8'h16,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOVW,HL,AX */
                {8'ha9,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOVW,AX,[DE] */
                {8'hb9,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOVW,[DE],AX */
                {8'hab,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOVW,AX,[HL] */
                {8'hbb,8'hxx} : dec_pc_inc1 = 1'b1;  /* MOVW,[HL],AX */
                {8'h33,8'hxx} : dec_pc_inc1 = 1'b1;  /* XCHW,AX,BC */
                {8'h35,8'hxx} : dec_pc_inc1 = 1'b1;  /* XCHW,AX,DE */
                {8'h37,8'hxx} : dec_pc_inc1 = 1'b1;  /* XCHW,AX,HL */
                {8'he6,8'hxx} : dec_pc_inc1 = 1'b1;  /* ONEW,,AX */
                {8'he7,8'hxx} : dec_pc_inc1 = 1'b1;  /* ONEW,,BC */
                {8'hf6,8'hxx} : dec_pc_inc1 = 1'b1;  /* CLRW,,AX */
                {8'hf7,8'hxx} : dec_pc_inc1 = 1'b1;  /* CLRW,,BC */
                {8'h0d,8'hxx} : dec_pc_inc1 = 1'b1;  /* ADD,A,[HL] */
                {8'h1d,8'hxx} : dec_pc_inc1 = 1'b1;  /* ADDC,A,[HL] */
                {8'h2d,8'hxx} : dec_pc_inc1 = 1'b1;  /* SUB,A,[HL] */
                {8'h3d,8'hxx} : dec_pc_inc1 = 1'b1;  /* SUBC,A,[HL] */
                {8'h5d,8'hxx} : dec_pc_inc1 = 1'b1;  /* AND,A,[HL] */
                {8'h6d,8'hxx} : dec_pc_inc1 = 1'b1;  /* OR,A,[HL] */
                {8'h7d,8'hxx} : dec_pc_inc1 = 1'b1;  /* XOR,A,[HL] */
                {8'h4d,8'hxx} : dec_pc_inc1 = 1'b1;  /* CMP,A,[HL] */
                {8'hd1,8'hxx} : dec_pc_inc1 = 1'b1;  /* CMP0,,A */
                {8'hd0,8'hxx} : dec_pc_inc1 = 1'b1;  /* CMP0,,X */
                {8'hd3,8'hxx} : dec_pc_inc1 = 1'b1;  /* CMP0,,B */
                {8'hd2,8'hxx} : dec_pc_inc1 = 1'b1;  /* CMP0,,C */
                {8'h01,8'hxx} : dec_pc_inc1 = 1'b1;  /* ADDW,AX,AX */
                {8'h03,8'hxx} : dec_pc_inc1 = 1'b1;  /* ADDW,AX,BC */
                {8'h05,8'hxx} : dec_pc_inc1 = 1'b1;  /* ADDW,AX,DE */
                {8'h07,8'hxx} : dec_pc_inc1 = 1'b1;  /* ADDW,AX,HL */
                {8'h21,8'hxx} : dec_pc_inc1 = 1'b1;  /* SUBW,AX,AX */
                {8'h23,8'hxx} : dec_pc_inc1 = 1'b1;  /* SUBW,AX,BC */
                {8'h25,8'hxx} : dec_pc_inc1 = 1'b1;  /* SUBW,AX,DE */
                {8'h27,8'hxx} : dec_pc_inc1 = 1'b1;  /* SUBW,AX,HL */
                {8'h43,8'hxx} : dec_pc_inc1 = 1'b1;  /* CMPW,AX,BC */
                {8'h45,8'hxx} : dec_pc_inc1 = 1'b1;  /* CMPW,AX,DE */
                {8'h47,8'hxx} : dec_pc_inc1 = 1'b1;  /* CMPW,AX,HL */
                {8'hd6,8'hxx} : dec_pc_inc1 = 1'b1;  /* MULU,,X */
                {8'h80,8'hxx} : dec_pc_inc1 = 1'b1;  /* INC,,X */
                {8'h81,8'hxx} : dec_pc_inc1 = 1'b1;  /* INC,,A */
                {8'h82,8'hxx} : dec_pc_inc1 = 1'b1;  /* INC,,C */
                {8'h83,8'hxx} : dec_pc_inc1 = 1'b1;  /* INC,,B */
                {8'h84,8'hxx} : dec_pc_inc1 = 1'b1;  /* INC,,E */
                {8'h85,8'hxx} : dec_pc_inc1 = 1'b1;  /* INC,,D */
                {8'h86,8'hxx} : dec_pc_inc1 = 1'b1;  /* INC,,L */
                {8'h87,8'hxx} : dec_pc_inc1 = 1'b1;  /* INC,,H */
                {8'h90,8'hxx} : dec_pc_inc1 = 1'b1;  /* DEC,,X */
                {8'h91,8'hxx} : dec_pc_inc1 = 1'b1;  /* DEC,,A */
                {8'h92,8'hxx} : dec_pc_inc1 = 1'b1;  /* DEC,,C */
                {8'h93,8'hxx} : dec_pc_inc1 = 1'b1;  /* DEC,,B */
                {8'h94,8'hxx} : dec_pc_inc1 = 1'b1;  /* DEC,,E */
                {8'h95,8'hxx} : dec_pc_inc1 = 1'b1;  /* DEC,,D */
                {8'h96,8'hxx} : dec_pc_inc1 = 1'b1;  /* DEC,,L */
                {8'h97,8'hxx} : dec_pc_inc1 = 1'b1;  /* DEC,,H */
                {8'ha1,8'hxx} : dec_pc_inc1 = 1'b1;  /* INCW,,AX */
                {8'ha3,8'hxx} : dec_pc_inc1 = 1'b1;  /* INCW,,BC */
                {8'ha5,8'hxx} : dec_pc_inc1 = 1'b1;  /* INCW,,DE */
                {8'ha7,8'hxx} : dec_pc_inc1 = 1'b1;  /* INCW,,HL */
                {8'hb1,8'hxx} : dec_pc_inc1 = 1'b1;  /* DECW,,AX */
                {8'hb3,8'hxx} : dec_pc_inc1 = 1'b1;  /* DECW,,BC */
                {8'hb5,8'hxx} : dec_pc_inc1 = 1'b1;  /* DECW,,DE */
                {8'hb7,8'hxx} : dec_pc_inc1 = 1'b1;  /* DECW,,HL */
                {8'hd7,8'hxx} : dec_pc_inc1 = 1'b1;  /* RET,, */
                {8'hc1,8'hxx} : dec_pc_inc1 = 1'b1;  /* PUSH,,AX */
                {8'hc3,8'hxx} : dec_pc_inc1 = 1'b1;  /* PUSH,,BC */
                {8'hc5,8'hxx} : dec_pc_inc1 = 1'b1;  /* PUSH,,DE */
                {8'hc7,8'hxx} : dec_pc_inc1 = 1'b1;  /* PUSH,,HL */
                {8'hc0,8'hxx} : dec_pc_inc1 = 1'b1;  /* POP,,AX */
                {8'hc2,8'hxx} : dec_pc_inc1 = 1'b1;  /* POP,,BC */
                {8'hc4,8'hxx} : dec_pc_inc1 = 1'b1;  /* POP,,DE */
                {8'hc6,8'hxx} : dec_pc_inc1 = 1'b1;  /* POP,,HL */
                {8'h00,8'hxx} : dec_pc_inc1 = 1'b1;  /* NOP,, */
                {8'h11,8'hxx} : dec_pc_inc1 = 1'b1;  /* PREFIX,, */
                {8'hff,8'hxx} : dec_pc_inc1 = 1'b1;  /* SOFT,,BREAK */
                default : dec_pc_inc1 = 1'b0;
            endcase
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h60,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,X */
                {8'h62,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,C */
                {8'h63,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,B */
                {8'h64,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,E */
                {8'h65,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,D */
                {8'h66,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,L */
                {8'h67,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,H */
                {8'h70,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,X,A */
                {8'h72,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,C,A */
                {8'h73,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,B,A */
                {8'h74,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,E,A */
                {8'h75,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,D,A */
                {8'h76,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,L,A */
                {8'h77,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,H,A */
                {8'h89,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,[DE] */
                {8'h99,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,[DE],A */
                {8'h8b,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,A,[HL] */
                {8'h9b,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOV,[HL],A */
                {8'h08,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* XCH,A,X */
                {8'he1,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* ONEB,,A */
                {8'he0,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* ONEB,,X */
                {8'he3,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* ONEB,,B */
                {8'he2,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* ONEB,,C */
                {8'hf1,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* CLRB,,A */
                {8'hf0,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* CLRB,,X */
                {8'hf3,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* CLRB,,B */
                {8'hf2,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* CLRB,,C */
                {8'h13,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOVW,AX,BC */
                {8'h12,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOVW,BC,AX */
                {8'h15,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOVW,AX,DE */
                {8'h14,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOVW,DE,AX */
                {8'h17,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOVW,AX,HL */
                {8'h16,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOVW,HL,AX */
                {8'ha9,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOVW,AX,[DE] */
                {8'hb9,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOVW,[DE],AX */
                {8'hab,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOVW,AX,[HL] */
                {8'hbb,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MOVW,[HL],AX */
                {8'h33,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* XCHW,AX,BC */
                {8'h35,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* XCHW,AX,DE */
                {8'h37,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* XCHW,AX,HL */
                {8'he6,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* ONEW,,AX */
                {8'he7,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* ONEW,,BC */
                {8'hf6,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* CLRW,,AX */
                {8'hf7,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* CLRW,,BC */
                {8'h0d,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* ADD,A,[HL] */
                {8'h1d,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* ADDC,A,[HL] */
                {8'h2d,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* SUB,A,[HL] */
                {8'h3d,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* SUBC,A,[HL] */
                {8'h5d,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* AND,A,[HL] */
                {8'h6d,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* OR,A,[HL] */
                {8'h7d,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* XOR,A,[HL] */
                {8'h4d,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* CMP,A,[HL] */
                {8'hd1,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* CMP0,,A */
                {8'hd0,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* CMP0,,X */
                {8'hd3,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* CMP0,,B */
                {8'hd2,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* CMP0,,C */
                {8'h01,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* ADDW,AX,AX */
                {8'h03,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* ADDW,AX,BC */
                {8'h05,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* ADDW,AX,DE */
                {8'h07,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* ADDW,AX,HL */
                {8'h21,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* SUBW,AX,AX */
                {8'h23,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* SUBW,AX,BC */
                {8'h25,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* SUBW,AX,DE */
                {8'h27,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* SUBW,AX,HL */
                {8'h43,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* CMPW,AX,BC */
                {8'h45,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* CMPW,AX,DE */
                {8'h47,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* CMPW,AX,HL */
                {8'hd6,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* MULU,,X */
                {8'h80,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* INC,,X */
                {8'h81,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* INC,,A */
                {8'h82,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* INC,,C */
                {8'h83,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* INC,,B */
                {8'h84,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* INC,,E */
                {8'h85,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* INC,,D */
                {8'h86,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* INC,,L */
                {8'h87,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* INC,,H */
                {8'h90,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* DEC,,X */
                {8'h91,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* DEC,,A */
                {8'h92,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* DEC,,C */
                {8'h93,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* DEC,,B */
                {8'h94,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* DEC,,E */
                {8'h95,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* DEC,,D */
                {8'h96,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* DEC,,L */
                {8'h97,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* DEC,,H */
                {8'ha1,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* INCW,,AX */
                {8'ha3,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* INCW,,BC */
                {8'ha5,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* INCW,,DE */
                {8'ha7,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* INCW,,HL */
                {8'hb1,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* DECW,,AX */
                {8'hb3,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* DECW,,BC */
                {8'hb5,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* DECW,,DE */
                {8'hb7,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* DECW,,HL */
                {8'hc1,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* PUSH,,AX */
                {8'hc3,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* PUSH,,BC */
                {8'hc5,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* PUSH,,DE */
                {8'hc7,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* PUSH,,HL */
                {8'hc0,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* POP,,AX */
                {8'hc2,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* POP,,BC */
                {8'hc4,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* POP,,DE */
                {8'hc6,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* POP,,HL */
                {8'h00,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* NOP,, */
                {8'h11,8'hxx,2'bxx} : dec_pc_inc1 = 1'b1;  /* PREFIX,, */
                {8'hff,8'hxx,2'bx0} : dec_pc_inc1 = 1'b1;  /* SOFT,,BREAK */
                default : dec_pc_inc1 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_inc2;
    reg    dec_pc_inc2;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1) begin
            dec_pc_inc2 = 1'b0;
        end else if(skpack == 1'b1) begin
            casex ({ID_stage0,ID_stage1})  
                {8'h50,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,X,#byte */
                {8'h51,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,A,#byte */
                {8'h52,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,C,#byte */
                {8'h53,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,B,#byte */
                {8'h54,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,E,#byte */
                {8'h55,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,D,#byte */
                {8'h56,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,L,#byte */
                {8'h57,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,H,#byte */
                {8'h8d,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,A,saddr */
                {8'h9d,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,saddr,A */
                {8'h8e,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,A,sfr */
                {8'h9e,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,sfr,A */
                {8'h41,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,ES,#byte */
                {8'h8a,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,A,[DE+byte] */
                {8'h9a,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,[DE+byte],A */
                {8'h8c,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,A,[HL+byte] */
                {8'h9c,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,[HL+byte],A */
                {8'h61,8'hc9} : dec_pc_inc2 = 1'b1;  /* MOV,A,[HL+B] */
                {8'h61,8'hd9} : dec_pc_inc2 = 1'b1;  /* MOV,[HL+B],A */
                {8'h61,8'he9} : dec_pc_inc2 = 1'b1;  /* MOV,A,[HL+C] */
                {8'h61,8'hf9} : dec_pc_inc2 = 1'b1;  /* MOV,[HL+C],A */
                {8'h88,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,A,[SP+byte] */
                {8'h98,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,[SP+byte],A */
                {8'he8,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,B,saddr */
                {8'hf8,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,C,saddr */
                {8'hd8,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOV,X,saddr */
                {8'h61,8'h8a} : dec_pc_inc2 = 1'b1;  /* XCH,A,C */
                {8'h61,8'h8b} : dec_pc_inc2 = 1'b1;  /* XCH,A,B */
                {8'h61,8'h8c} : dec_pc_inc2 = 1'b1;  /* XCH,A,E */
                {8'h61,8'h8d} : dec_pc_inc2 = 1'b1;  /* XCH,A,D */
                {8'h61,8'h8e} : dec_pc_inc2 = 1'b1;  /* XCH,A,L */
                {8'h61,8'h8f} : dec_pc_inc2 = 1'b1;  /* XCH,A,H */
                {8'h61,8'hae} : dec_pc_inc2 = 1'b1;  /* XCH,A,[DE] */
                {8'h61,8'hac} : dec_pc_inc2 = 1'b1;  /* XCH,A,[HL] */
                {8'h61,8'hb9} : dec_pc_inc2 = 1'b1;  /* XCH,A,[HL+B] */
                {8'h61,8'ha9} : dec_pc_inc2 = 1'b1;  /* XCH,A,[HL+C] */
                {8'he4,8'hxx} : dec_pc_inc2 = 1'b1;  /* ONEB,,saddr */
                {8'hf4,8'hxx} : dec_pc_inc2 = 1'b1;  /* CLRB,,saddr */
                {8'had,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOVW,AX,saddrp */
                {8'hbd,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOVW,saddrp,AX */
                {8'hae,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOVW,AX,sfrp */
                {8'hbe,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOVW,sfrp,AX */
                {8'haa,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOVW,AX,[DE+byte] */
                {8'hba,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOVW,[DE+byte],AX */
                {8'hac,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOVW,AX,[HL+byte] */
                {8'hbc,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOVW,[HL+byte],AX */
                {8'ha8,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOVW,AX,[SP+byte] */
                {8'hb8,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOVW,[SP+byte],AX */
                {8'hda,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOVW,BC,saddrp */
                {8'hea,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOVW,DE,saddrp */
                {8'hfa,8'hxx} : dec_pc_inc2 = 1'b1;  /* MOVW,HL,saddrp */
                {8'h0c,8'hxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,#byte */
                {8'h61,8'h08} : dec_pc_inc2 = 1'b1;  /* ADD,A,X */
                {8'h61,8'h0a} : dec_pc_inc2 = 1'b1;  /* ADD,A,C */
                {8'h61,8'h0b} : dec_pc_inc2 = 1'b1;  /* ADD,A,B */
                {8'h61,8'h0c} : dec_pc_inc2 = 1'b1;  /* ADD,A,E */
                {8'h61,8'h0d} : dec_pc_inc2 = 1'b1;  /* ADD,A,D */
                {8'h61,8'h0e} : dec_pc_inc2 = 1'b1;  /* ADD,A,L */
                {8'h61,8'h0f} : dec_pc_inc2 = 1'b1;  /* ADD,A,H */
                {8'h61,8'h00} : dec_pc_inc2 = 1'b1;  /* ADD,X,A */
                {8'h61,8'h01} : dec_pc_inc2 = 1'b1;  /* ADD,A,A */
                {8'h61,8'h02} : dec_pc_inc2 = 1'b1;  /* ADD,C,A */
                {8'h61,8'h03} : dec_pc_inc2 = 1'b1;  /* ADD,B,A */
                {8'h61,8'h04} : dec_pc_inc2 = 1'b1;  /* ADD,E,A */
                {8'h61,8'h05} : dec_pc_inc2 = 1'b1;  /* ADD,D,A */
                {8'h61,8'h06} : dec_pc_inc2 = 1'b1;  /* ADD,L,A */
                {8'h61,8'h07} : dec_pc_inc2 = 1'b1;  /* ADD,H,A */
                {8'h0b,8'hxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,saddr */
                {8'h0e,8'hxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,[HL+byte] */
                {8'h61,8'h80} : dec_pc_inc2 = 1'b1;  /* ADD,A,[HL+B] */
                {8'h61,8'h82} : dec_pc_inc2 = 1'b1;  /* ADD,A,[HL+C] */
                {8'h1c,8'hxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,#byte */
                {8'h61,8'h18} : dec_pc_inc2 = 1'b1;  /* ADDC,A,X */
                {8'h61,8'h1a} : dec_pc_inc2 = 1'b1;  /* ADDC,A,C */
                {8'h61,8'h1b} : dec_pc_inc2 = 1'b1;  /* ADDC,A,B */
                {8'h61,8'h1c} : dec_pc_inc2 = 1'b1;  /* ADDC,A,E */
                {8'h61,8'h1d} : dec_pc_inc2 = 1'b1;  /* ADDC,A,D */
                {8'h61,8'h1e} : dec_pc_inc2 = 1'b1;  /* ADDC,A,L */
                {8'h61,8'h1f} : dec_pc_inc2 = 1'b1;  /* ADDC,A,H */
                {8'h61,8'h10} : dec_pc_inc2 = 1'b1;  /* ADDC,X,A */
                {8'h61,8'h11} : dec_pc_inc2 = 1'b1;  /* ADDC,A,A */
                {8'h61,8'h12} : dec_pc_inc2 = 1'b1;  /* ADDC,C,A */
                {8'h61,8'h13} : dec_pc_inc2 = 1'b1;  /* ADDC,B,A */
                {8'h61,8'h14} : dec_pc_inc2 = 1'b1;  /* ADDC,E,A */
                {8'h61,8'h15} : dec_pc_inc2 = 1'b1;  /* ADDC,D,A */
                {8'h61,8'h16} : dec_pc_inc2 = 1'b1;  /* ADDC,L,A */
                {8'h61,8'h17} : dec_pc_inc2 = 1'b1;  /* ADDC,H,A */
                {8'h1b,8'hxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,saddr */
                {8'h1e,8'hxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,[HL+byte] */
                {8'h61,8'h90} : dec_pc_inc2 = 1'b1;  /* ADDC,A,[HL+B] */
                {8'h61,8'h92} : dec_pc_inc2 = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h2c,8'hxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,#byte */
                {8'h61,8'h28} : dec_pc_inc2 = 1'b1;  /* SUB,A,X */
                {8'h61,8'h2a} : dec_pc_inc2 = 1'b1;  /* SUB,A,C */
                {8'h61,8'h2b} : dec_pc_inc2 = 1'b1;  /* SUB,A,B */
                {8'h61,8'h2c} : dec_pc_inc2 = 1'b1;  /* SUB,A,E */
                {8'h61,8'h2d} : dec_pc_inc2 = 1'b1;  /* SUB,A,D */
                {8'h61,8'h2e} : dec_pc_inc2 = 1'b1;  /* SUB,A,L */
                {8'h61,8'h2f} : dec_pc_inc2 = 1'b1;  /* SUB,A,H */
                {8'h61,8'h20} : dec_pc_inc2 = 1'b1;  /* SUB,X,A */
                {8'h61,8'h21} : dec_pc_inc2 = 1'b1;  /* SUB,A,A */
                {8'h61,8'h22} : dec_pc_inc2 = 1'b1;  /* SUB,C,A */
                {8'h61,8'h23} : dec_pc_inc2 = 1'b1;  /* SUB,B,A */
                {8'h61,8'h24} : dec_pc_inc2 = 1'b1;  /* SUB,E,A */
                {8'h61,8'h25} : dec_pc_inc2 = 1'b1;  /* SUB,D,A */
                {8'h61,8'h26} : dec_pc_inc2 = 1'b1;  /* SUB,L,A */
                {8'h61,8'h27} : dec_pc_inc2 = 1'b1;  /* SUB,H,A */
                {8'h2b,8'hxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,saddr */
                {8'h2e,8'hxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,[HL+byte] */
                {8'h61,8'ha0} : dec_pc_inc2 = 1'b1;  /* SUB,A,[HL+B] */
                {8'h61,8'ha2} : dec_pc_inc2 = 1'b1;  /* SUB,A,[HL+C] */
                {8'h3c,8'hxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,#byte */
                {8'h61,8'h38} : dec_pc_inc2 = 1'b1;  /* SUBC,A,X */
                {8'h61,8'h3a} : dec_pc_inc2 = 1'b1;  /* SUBC,A,C */
                {8'h61,8'h3b} : dec_pc_inc2 = 1'b1;  /* SUBC,A,B */
                {8'h61,8'h3c} : dec_pc_inc2 = 1'b1;  /* SUBC,A,E */
                {8'h61,8'h3d} : dec_pc_inc2 = 1'b1;  /* SUBC,A,D */
                {8'h61,8'h3e} : dec_pc_inc2 = 1'b1;  /* SUBC,A,L */
                {8'h61,8'h3f} : dec_pc_inc2 = 1'b1;  /* SUBC,A,H */
                {8'h61,8'h30} : dec_pc_inc2 = 1'b1;  /* SUBC,X,A */
                {8'h61,8'h31} : dec_pc_inc2 = 1'b1;  /* SUBC,A,A */
                {8'h61,8'h32} : dec_pc_inc2 = 1'b1;  /* SUBC,C,A */
                {8'h61,8'h33} : dec_pc_inc2 = 1'b1;  /* SUBC,B,A */
                {8'h61,8'h34} : dec_pc_inc2 = 1'b1;  /* SUBC,E,A */
                {8'h61,8'h35} : dec_pc_inc2 = 1'b1;  /* SUBC,D,A */
                {8'h61,8'h36} : dec_pc_inc2 = 1'b1;  /* SUBC,L,A */
                {8'h61,8'h37} : dec_pc_inc2 = 1'b1;  /* SUBC,H,A */
                {8'h3b,8'hxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,saddr */
                {8'h3e,8'hxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,[HL+byte] */
                {8'h61,8'hb0} : dec_pc_inc2 = 1'b1;  /* SUBC,A,[HL+B] */
                {8'h61,8'hb2} : dec_pc_inc2 = 1'b1;  /* SUBC,A,[HL+C] */
                {8'h5c,8'hxx} : dec_pc_inc2 = 1'b1;  /* AND,A,#byte */
                {8'h61,8'h58} : dec_pc_inc2 = 1'b1;  /* AND,A,X */
                {8'h61,8'h5a} : dec_pc_inc2 = 1'b1;  /* AND,A,C */
                {8'h61,8'h5b} : dec_pc_inc2 = 1'b1;  /* AND,A,B */
                {8'h61,8'h5c} : dec_pc_inc2 = 1'b1;  /* AND,A,E */
                {8'h61,8'h5d} : dec_pc_inc2 = 1'b1;  /* AND,A,D */
                {8'h61,8'h5e} : dec_pc_inc2 = 1'b1;  /* AND,A,L */
                {8'h61,8'h5f} : dec_pc_inc2 = 1'b1;  /* AND,A,H */
                {8'h61,8'h50} : dec_pc_inc2 = 1'b1;  /* AND,X,A */
                {8'h61,8'h51} : dec_pc_inc2 = 1'b1;  /* AND,A,A */
                {8'h61,8'h52} : dec_pc_inc2 = 1'b1;  /* AND,C,A */
                {8'h61,8'h53} : dec_pc_inc2 = 1'b1;  /* AND,B,A */
                {8'h61,8'h54} : dec_pc_inc2 = 1'b1;  /* AND,E,A */
                {8'h61,8'h55} : dec_pc_inc2 = 1'b1;  /* AND,D,A */
                {8'h61,8'h56} : dec_pc_inc2 = 1'b1;  /* AND,L,A */
                {8'h61,8'h57} : dec_pc_inc2 = 1'b1;  /* AND,H,A */
                {8'h5b,8'hxx} : dec_pc_inc2 = 1'b1;  /* AND,A,saddr */
                {8'h5e,8'hxx} : dec_pc_inc2 = 1'b1;  /* AND,A,[HL+byte] */
                {8'h61,8'hd0} : dec_pc_inc2 = 1'b1;  /* AND,A,[HL+B] */
                {8'h61,8'hd2} : dec_pc_inc2 = 1'b1;  /* AND,A,[HL+C] */
                {8'h6c,8'hxx} : dec_pc_inc2 = 1'b1;  /* OR,A,#byte */
                {8'h61,8'h68} : dec_pc_inc2 = 1'b1;  /* OR,A,X */
                {8'h61,8'h6a} : dec_pc_inc2 = 1'b1;  /* OR,A,C */
                {8'h61,8'h6b} : dec_pc_inc2 = 1'b1;  /* OR,A,B */
                {8'h61,8'h6c} : dec_pc_inc2 = 1'b1;  /* OR,A,E */
                {8'h61,8'h6d} : dec_pc_inc2 = 1'b1;  /* OR,A,D */
                {8'h61,8'h6e} : dec_pc_inc2 = 1'b1;  /* OR,A,L */
                {8'h61,8'h6f} : dec_pc_inc2 = 1'b1;  /* OR,A,H */
                {8'h61,8'h60} : dec_pc_inc2 = 1'b1;  /* OR,X,A */
                {8'h61,8'h61} : dec_pc_inc2 = 1'b1;  /* OR,A,A */
                {8'h61,8'h62} : dec_pc_inc2 = 1'b1;  /* OR,C,A */
                {8'h61,8'h63} : dec_pc_inc2 = 1'b1;  /* OR,B,A */
                {8'h61,8'h64} : dec_pc_inc2 = 1'b1;  /* OR,E,A */
                {8'h61,8'h65} : dec_pc_inc2 = 1'b1;  /* OR,D,A */
                {8'h61,8'h66} : dec_pc_inc2 = 1'b1;  /* OR,L,A */
                {8'h61,8'h67} : dec_pc_inc2 = 1'b1;  /* OR,H,A */
                {8'h6b,8'hxx} : dec_pc_inc2 = 1'b1;  /* OR,A,saddr */
                {8'h6e,8'hxx} : dec_pc_inc2 = 1'b1;  /* OR,A,[HL+byte] */
                {8'h61,8'he0} : dec_pc_inc2 = 1'b1;  /* OR,A,[HL+B] */
                {8'h61,8'he2} : dec_pc_inc2 = 1'b1;  /* OR,A,[HL+C] */
                {8'h7c,8'hxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,#byte */
                {8'h61,8'h78} : dec_pc_inc2 = 1'b1;  /* XOR,A,X */
                {8'h61,8'h7a} : dec_pc_inc2 = 1'b1;  /* XOR,A,C */
                {8'h61,8'h7b} : dec_pc_inc2 = 1'b1;  /* XOR,A,B */
                {8'h61,8'h7c} : dec_pc_inc2 = 1'b1;  /* XOR,A,E */
                {8'h61,8'h7d} : dec_pc_inc2 = 1'b1;  /* XOR,A,D */
                {8'h61,8'h7e} : dec_pc_inc2 = 1'b1;  /* XOR,A,L */
                {8'h61,8'h7f} : dec_pc_inc2 = 1'b1;  /* XOR,A,H */
                {8'h61,8'h70} : dec_pc_inc2 = 1'b1;  /* XOR,X,A */
                {8'h61,8'h71} : dec_pc_inc2 = 1'b1;  /* XOR,A,A */
                {8'h61,8'h72} : dec_pc_inc2 = 1'b1;  /* XOR,C,A */
                {8'h61,8'h73} : dec_pc_inc2 = 1'b1;  /* XOR,B,A */
                {8'h61,8'h74} : dec_pc_inc2 = 1'b1;  /* XOR,E,A */
                {8'h61,8'h75} : dec_pc_inc2 = 1'b1;  /* XOR,D,A */
                {8'h61,8'h76} : dec_pc_inc2 = 1'b1;  /* XOR,L,A */
                {8'h61,8'h77} : dec_pc_inc2 = 1'b1;  /* XOR,H,A */
                {8'h7b,8'hxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,saddr */
                {8'h7e,8'hxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,[HL+byte] */
                {8'h61,8'hf0} : dec_pc_inc2 = 1'b1;  /* XOR,A,[HL+B] */
                {8'h61,8'hf2} : dec_pc_inc2 = 1'b1;  /* XOR,A,[HL+C] */
                {8'h4c,8'hxx} : dec_pc_inc2 = 1'b1;  /* CMP,A,#byte */
                {8'h61,8'h48} : dec_pc_inc2 = 1'b1;  /* CMP,A,X */
                {8'h61,8'h4a} : dec_pc_inc2 = 1'b1;  /* CMP,A,C */
                {8'h61,8'h4b} : dec_pc_inc2 = 1'b1;  /* CMP,A,B */
                {8'h61,8'h4c} : dec_pc_inc2 = 1'b1;  /* CMP,A,E */
                {8'h61,8'h4d} : dec_pc_inc2 = 1'b1;  /* CMP,A,D */
                {8'h61,8'h4e} : dec_pc_inc2 = 1'b1;  /* CMP,A,L */
                {8'h61,8'h4f} : dec_pc_inc2 = 1'b1;  /* CMP,A,H */
                {8'h61,8'h40} : dec_pc_inc2 = 1'b1;  /* CMP,X,A */
                {8'h61,8'h41} : dec_pc_inc2 = 1'b1;  /* CMP,A,A */
                {8'h61,8'h42} : dec_pc_inc2 = 1'b1;  /* CMP,C,A */
                {8'h61,8'h43} : dec_pc_inc2 = 1'b1;  /* CMP,B,A */
                {8'h61,8'h44} : dec_pc_inc2 = 1'b1;  /* CMP,E,A */
                {8'h61,8'h45} : dec_pc_inc2 = 1'b1;  /* CMP,D,A */
                {8'h61,8'h46} : dec_pc_inc2 = 1'b1;  /* CMP,L,A */
                {8'h61,8'h47} : dec_pc_inc2 = 1'b1;  /* CMP,H,A */
                {8'h4b,8'hxx} : dec_pc_inc2 = 1'b1;  /* CMP,A,saddr */
                {8'h4e,8'hxx} : dec_pc_inc2 = 1'b1;  /* CMP,A,[HL+byte] */
                {8'h61,8'hc0} : dec_pc_inc2 = 1'b1;  /* CMP,A,[HL+B] */
                {8'h61,8'hc2} : dec_pc_inc2 = 1'b1;  /* CMP,A,[HL+C] */
                {8'hd4,8'hxx} : dec_pc_inc2 = 1'b1;  /* CMP0,,saddr */
                {8'h06,8'hxx} : dec_pc_inc2 = 1'b1;  /* ADDW,AX,saddrp */
                {8'h26,8'hxx} : dec_pc_inc2 = 1'b1;  /* SUBW,AX,saddrp */
                {8'h46,8'hxx} : dec_pc_inc2 = 1'b1;  /* CMPW,AX,saddrp */
                {8'ha4,8'hxx} : dec_pc_inc2 = 1'b1;  /* INC,,saddr */
                {8'hb4,8'hxx} : dec_pc_inc2 = 1'b1;  /* DEC,,saddr */
                {8'ha6,8'hxx} : dec_pc_inc2 = 1'b1;  /* INCW,,saddrp */
                {8'hb6,8'hxx} : dec_pc_inc2 = 1'b1;  /* DECW,,saddrp */
                {8'h31,8'h0a} : dec_pc_inc2 = 1'b1;  /* SHR,A,0 */
                {8'h31,8'h1a} : dec_pc_inc2 = 1'b1;  /* SHR,A,1 */
                {8'h31,8'h2a} : dec_pc_inc2 = 1'b1;  /* SHR,A,2 */
                {8'h31,8'h3a} : dec_pc_inc2 = 1'b1;  /* SHR,A,3 */
                {8'h31,8'h4a} : dec_pc_inc2 = 1'b1;  /* SHR,A,4 */
                {8'h31,8'h5a} : dec_pc_inc2 = 1'b1;  /* SHR,A,5 */
                {8'h31,8'h6a} : dec_pc_inc2 = 1'b1;  /* SHR,A,6 */
                {8'h31,8'h7a} : dec_pc_inc2 = 1'b1;  /* SHR,A,7 */
                {8'h31,8'h0e} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,0 */
                {8'h31,8'h1e} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,1 */
                {8'h31,8'h2e} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,2 */
                {8'h31,8'h3e} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,3 */
                {8'h31,8'h4e} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,4 */
                {8'h31,8'h5e} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,5 */
                {8'h31,8'h6e} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,6 */
                {8'h31,8'h7e} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,7 */
                {8'h31,8'h8e} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,8 */
                {8'h31,8'h9e} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,9 */
                {8'h31,8'hae} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,10 */
                {8'h31,8'hbe} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,11 */
                {8'h31,8'hce} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,12 */
                {8'h31,8'hde} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,13 */
                {8'h31,8'hee} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,14 */
                {8'h31,8'hfe} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,15 */
                {8'h31,8'h09} : dec_pc_inc2 = 1'b1;  /* SHL,A,0 */
                {8'h31,8'h19} : dec_pc_inc2 = 1'b1;  /* SHL,A,1 */
                {8'h31,8'h29} : dec_pc_inc2 = 1'b1;  /* SHL,A,2 */
                {8'h31,8'h39} : dec_pc_inc2 = 1'b1;  /* SHL,A,3 */
                {8'h31,8'h49} : dec_pc_inc2 = 1'b1;  /* SHL,A,4 */
                {8'h31,8'h59} : dec_pc_inc2 = 1'b1;  /* SHL,A,5 */
                {8'h31,8'h69} : dec_pc_inc2 = 1'b1;  /* SHL,A,6 */
                {8'h31,8'h79} : dec_pc_inc2 = 1'b1;  /* SHL,A,7 */
                {8'h31,8'h08} : dec_pc_inc2 = 1'b1;  /* SHL,B,0 */
                {8'h31,8'h18} : dec_pc_inc2 = 1'b1;  /* SHL,B,1 */
                {8'h31,8'h28} : dec_pc_inc2 = 1'b1;  /* SHL,B,2 */
                {8'h31,8'h38} : dec_pc_inc2 = 1'b1;  /* SHL,B,3 */
                {8'h31,8'h48} : dec_pc_inc2 = 1'b1;  /* SHL,B,4 */
                {8'h31,8'h58} : dec_pc_inc2 = 1'b1;  /* SHL,B,5 */
                {8'h31,8'h68} : dec_pc_inc2 = 1'b1;  /* SHL,B,6 */
                {8'h31,8'h78} : dec_pc_inc2 = 1'b1;  /* SHL,B,7 */
                {8'h31,8'h07} : dec_pc_inc2 = 1'b1;  /* SHL,C,0 */
                {8'h31,8'h17} : dec_pc_inc2 = 1'b1;  /* SHL,C,1 */
                {8'h31,8'h27} : dec_pc_inc2 = 1'b1;  /* SHL,C,2 */
                {8'h31,8'h37} : dec_pc_inc2 = 1'b1;  /* SHL,C,3 */
                {8'h31,8'h47} : dec_pc_inc2 = 1'b1;  /* SHL,C,4 */
                {8'h31,8'h57} : dec_pc_inc2 = 1'b1;  /* SHL,C,5 */
                {8'h31,8'h67} : dec_pc_inc2 = 1'b1;  /* SHL,C,6 */
                {8'h31,8'h77} : dec_pc_inc2 = 1'b1;  /* SHL,C,7 */
                {8'h31,8'h0d} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,0 */
                {8'h31,8'h1d} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,1 */
                {8'h31,8'h2d} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,2 */
                {8'h31,8'h3d} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,3 */
                {8'h31,8'h4d} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,4 */
                {8'h31,8'h5d} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,5 */
                {8'h31,8'h6d} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,6 */
                {8'h31,8'h7d} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,7 */
                {8'h31,8'h8d} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,8 */
                {8'h31,8'h9d} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,9 */
                {8'h31,8'had} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,10 */
                {8'h31,8'hbd} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,11 */
                {8'h31,8'hcd} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,12 */
                {8'h31,8'hdd} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,13 */
                {8'h31,8'hed} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,14 */
                {8'h31,8'hfd} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,15 */
                {8'h31,8'h0c} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,0 */
                {8'h31,8'h1c} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,1 */
                {8'h31,8'h2c} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,2 */
                {8'h31,8'h3c} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,3 */
                {8'h31,8'h4c} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,4 */
                {8'h31,8'h5c} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,5 */
                {8'h31,8'h6c} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,6 */
                {8'h31,8'h7c} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,7 */
                {8'h31,8'h8c} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,8 */
                {8'h31,8'h9c} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,9 */
                {8'h31,8'hac} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,10 */
                {8'h31,8'hbc} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,11 */
                {8'h31,8'hcc} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,12 */
                {8'h31,8'hdc} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,13 */
                {8'h31,8'hec} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,14 */
                {8'h31,8'hfc} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,15 */
                {8'h31,8'h0b} : dec_pc_inc2 = 1'b1;  /* SAR,A,0 */
                {8'h31,8'h1b} : dec_pc_inc2 = 1'b1;  /* SAR,A,1 */
                {8'h31,8'h2b} : dec_pc_inc2 = 1'b1;  /* SAR,A,2 */
                {8'h31,8'h3b} : dec_pc_inc2 = 1'b1;  /* SAR,A,3 */
                {8'h31,8'h4b} : dec_pc_inc2 = 1'b1;  /* SAR,A,4 */
                {8'h31,8'h5b} : dec_pc_inc2 = 1'b1;  /* SAR,A,5 */
                {8'h31,8'h6b} : dec_pc_inc2 = 1'b1;  /* SAR,A,6 */
                {8'h31,8'h7b} : dec_pc_inc2 = 1'b1;  /* SAR,A,7 */
                {8'h31,8'h0f} : dec_pc_inc2 = 1'b1;  /* SARW,AX,0 */
                {8'h31,8'h1f} : dec_pc_inc2 = 1'b1;  /* SARW,AX,1 */
                {8'h31,8'h2f} : dec_pc_inc2 = 1'b1;  /* SARW,AX,2 */
                {8'h31,8'h3f} : dec_pc_inc2 = 1'b1;  /* SARW,AX,3 */
                {8'h31,8'h4f} : dec_pc_inc2 = 1'b1;  /* SARW,AX,4 */
                {8'h31,8'h5f} : dec_pc_inc2 = 1'b1;  /* SARW,AX,5 */
                {8'h31,8'h6f} : dec_pc_inc2 = 1'b1;  /* SARW,AX,6 */
                {8'h31,8'h7f} : dec_pc_inc2 = 1'b1;  /* SARW,AX,7 */
                {8'h31,8'h8f} : dec_pc_inc2 = 1'b1;  /* SARW,AX,8 */
                {8'h31,8'h9f} : dec_pc_inc2 = 1'b1;  /* SARW,AX,9 */
                {8'h31,8'haf} : dec_pc_inc2 = 1'b1;  /* SARW,AX,10 */
                {8'h31,8'hbf} : dec_pc_inc2 = 1'b1;  /* SARW,AX,11 */
                {8'h31,8'hcf} : dec_pc_inc2 = 1'b1;  /* SARW,AX,12 */
                {8'h31,8'hdf} : dec_pc_inc2 = 1'b1;  /* SARW,AX,13 */
                {8'h31,8'hef} : dec_pc_inc2 = 1'b1;  /* SARW,AX,14 */
                {8'h31,8'hff} : dec_pc_inc2 = 1'b1;  /* SARW,AX,15 */
                {8'h61,8'hdb} : dec_pc_inc2 = 1'b1;  /* ROR,A,1 */
                {8'h61,8'heb} : dec_pc_inc2 = 1'b1;  /* ROL,A,1 */
                {8'h61,8'hfb} : dec_pc_inc2 = 1'b1;  /* RORC,A,1 */
                {8'h61,8'hdc} : dec_pc_inc2 = 1'b1;  /* ROLC,A,1 */
                {8'h61,8'hee} : dec_pc_inc2 = 1'b1;  /* ROLWC,AX,1 */
                {8'h61,8'hfe} : dec_pc_inc2 = 1'b1;  /* ROLWC,BC,1 */
                {8'h71,8'h8c} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,A.0 */
                {8'h71,8'h9c} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,A.1 */
                {8'h71,8'hac} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,A.2 */
                {8'h71,8'hbc} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,A.3 */
                {8'h71,8'hcc} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,A.4 */
                {8'h71,8'hdc} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,A.5 */
                {8'h71,8'hec} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,A.6 */
                {8'h71,8'hfc} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,A.7 */
                {8'h71,8'h84} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,[HL].0 */
                {8'h71,8'h94} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,[HL].1 */
                {8'h71,8'ha4} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,[HL].2 */
                {8'h71,8'hb4} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,[HL].3 */
                {8'h71,8'hc4} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,[HL].4 */
                {8'h71,8'hd4} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,[HL].5 */
                {8'h71,8'he4} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,[HL].6 */
                {8'h71,8'hf4} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,[HL].7 */
                {8'h71,8'h89} : dec_pc_inc2 = 1'b1;  /* MOV1,A.0,CY */
                {8'h71,8'h99} : dec_pc_inc2 = 1'b1;  /* MOV1,A.1,CY */
                {8'h71,8'ha9} : dec_pc_inc2 = 1'b1;  /* MOV1,A.2,CY */
                {8'h71,8'hb9} : dec_pc_inc2 = 1'b1;  /* MOV1,A.3,CY */
                {8'h71,8'hc9} : dec_pc_inc2 = 1'b1;  /* MOV1,A.4,CY */
                {8'h71,8'hd9} : dec_pc_inc2 = 1'b1;  /* MOV1,A.5,CY */
                {8'h71,8'he9} : dec_pc_inc2 = 1'b1;  /* MOV1,A.6,CY */
                {8'h71,8'hf9} : dec_pc_inc2 = 1'b1;  /* MOV1,A.7,CY */
                {8'h71,8'h81} : dec_pc_inc2 = 1'b1;  /* MOV1,[HL].0,CY */
                {8'h71,8'h91} : dec_pc_inc2 = 1'b1;  /* MOV1,[HL].1,CY */
                {8'h71,8'ha1} : dec_pc_inc2 = 1'b1;  /* MOV1,[HL].2,CY */
                {8'h71,8'hb1} : dec_pc_inc2 = 1'b1;  /* MOV1,[HL].3,CY */
                {8'h71,8'hc1} : dec_pc_inc2 = 1'b1;  /* MOV1,[HL].4,CY */
                {8'h71,8'hd1} : dec_pc_inc2 = 1'b1;  /* MOV1,[HL].5,CY */
                {8'h71,8'he1} : dec_pc_inc2 = 1'b1;  /* MOV1,[HL].6,CY */
                {8'h71,8'hf1} : dec_pc_inc2 = 1'b1;  /* MOV1,[HL].7,CY */
                {8'h71,8'h8d} : dec_pc_inc2 = 1'b1;  /* AND1,CY,A.0 */
                {8'h71,8'h9d} : dec_pc_inc2 = 1'b1;  /* AND1,CY,A.1 */
                {8'h71,8'had} : dec_pc_inc2 = 1'b1;  /* AND1,CY,A.2 */
                {8'h71,8'hbd} : dec_pc_inc2 = 1'b1;  /* AND1,CY,A.3 */
                {8'h71,8'hcd} : dec_pc_inc2 = 1'b1;  /* AND1,CY,A.4 */
                {8'h71,8'hdd} : dec_pc_inc2 = 1'b1;  /* AND1,CY,A.5 */
                {8'h71,8'hed} : dec_pc_inc2 = 1'b1;  /* AND1,CY,A.6 */
                {8'h71,8'hfd} : dec_pc_inc2 = 1'b1;  /* AND1,CY,A.7 */
                {8'h71,8'h85} : dec_pc_inc2 = 1'b1;  /* AND1,CY,[HL].0 */
                {8'h71,8'h95} : dec_pc_inc2 = 1'b1;  /* AND1,CY,[HL].1 */
                {8'h71,8'ha5} : dec_pc_inc2 = 1'b1;  /* AND1,CY,[HL].2 */
                {8'h71,8'hb5} : dec_pc_inc2 = 1'b1;  /* AND1,CY,[HL].3 */
                {8'h71,8'hc5} : dec_pc_inc2 = 1'b1;  /* AND1,CY,[HL].4 */
                {8'h71,8'hd5} : dec_pc_inc2 = 1'b1;  /* AND1,CY,[HL].5 */
                {8'h71,8'he5} : dec_pc_inc2 = 1'b1;  /* AND1,CY,[HL].6 */
                {8'h71,8'hf5} : dec_pc_inc2 = 1'b1;  /* AND1,CY,[HL].7 */
                {8'h71,8'h8e} : dec_pc_inc2 = 1'b1;  /* OR1,CY,A.0 */
                {8'h71,8'h9e} : dec_pc_inc2 = 1'b1;  /* OR1,CY,A.1 */
                {8'h71,8'hae} : dec_pc_inc2 = 1'b1;  /* OR1,CY,A.2 */
                {8'h71,8'hbe} : dec_pc_inc2 = 1'b1;  /* OR1,CY,A.3 */
                {8'h71,8'hce} : dec_pc_inc2 = 1'b1;  /* OR1,CY,A.4 */
                {8'h71,8'hde} : dec_pc_inc2 = 1'b1;  /* OR1,CY,A.5 */
                {8'h71,8'hee} : dec_pc_inc2 = 1'b1;  /* OR1,CY,A.6 */
                {8'h71,8'hfe} : dec_pc_inc2 = 1'b1;  /* OR1,CY,A.7 */
                {8'h71,8'h86} : dec_pc_inc2 = 1'b1;  /* OR1,CY,[HL].0 */
                {8'h71,8'h96} : dec_pc_inc2 = 1'b1;  /* OR1,CY,[HL].1 */
                {8'h71,8'ha6} : dec_pc_inc2 = 1'b1;  /* OR1,CY,[HL].2 */
                {8'h71,8'hb6} : dec_pc_inc2 = 1'b1;  /* OR1,CY,[HL].3 */
                {8'h71,8'hc6} : dec_pc_inc2 = 1'b1;  /* OR1,CY,[HL].4 */
                {8'h71,8'hd6} : dec_pc_inc2 = 1'b1;  /* OR1,CY,[HL].5 */
                {8'h71,8'he6} : dec_pc_inc2 = 1'b1;  /* OR1,CY,[HL].6 */
                {8'h71,8'hf6} : dec_pc_inc2 = 1'b1;  /* OR1,CY,[HL].7 */
                {8'h71,8'h8f} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,A.0 */
                {8'h71,8'h9f} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,A.1 */
                {8'h71,8'haf} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,A.2 */
                {8'h71,8'hbf} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,A.3 */
                {8'h71,8'hcf} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,A.4 */
                {8'h71,8'hdf} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,A.5 */
                {8'h71,8'hef} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,A.6 */
                {8'h71,8'hff} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,A.7 */
                {8'h71,8'h87} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,[HL].0 */
                {8'h71,8'h97} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,[HL].1 */
                {8'h71,8'ha7} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,[HL].2 */
                {8'h71,8'hb7} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,[HL].3 */
                {8'h71,8'hc7} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,[HL].4 */
                {8'h71,8'hd7} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,[HL].5 */
                {8'h71,8'he7} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,[HL].6 */
                {8'h71,8'hf7} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,[HL].7 */
                {8'h71,8'h8a} : dec_pc_inc2 = 1'b1;  /* SET1,,A.0 */
                {8'h71,8'h9a} : dec_pc_inc2 = 1'b1;  /* SET1,,A.1 */
                {8'h71,8'haa} : dec_pc_inc2 = 1'b1;  /* SET1,,A.2 */
                {8'h71,8'hba} : dec_pc_inc2 = 1'b1;  /* SET1,,A.3 */
                {8'h71,8'hca} : dec_pc_inc2 = 1'b1;  /* SET1,,A.4 */
                {8'h71,8'hda} : dec_pc_inc2 = 1'b1;  /* SET1,,A.5 */
                {8'h71,8'hea} : dec_pc_inc2 = 1'b1;  /* SET1,,A.6 */
                {8'h71,8'hfa} : dec_pc_inc2 = 1'b1;  /* SET1,,A.7 */
                {8'h71,8'h82} : dec_pc_inc2 = 1'b1;  /* SET1,,[HL].0 */
                {8'h71,8'h92} : dec_pc_inc2 = 1'b1;  /* SET1,,[HL].1 */
                {8'h71,8'ha2} : dec_pc_inc2 = 1'b1;  /* SET1,,[HL].2 */
                {8'h71,8'hb2} : dec_pc_inc2 = 1'b1;  /* SET1,,[HL].3 */
                {8'h71,8'hc2} : dec_pc_inc2 = 1'b1;  /* SET1,,[HL].4 */
                {8'h71,8'hd2} : dec_pc_inc2 = 1'b1;  /* SET1,,[HL].5 */
                {8'h71,8'he2} : dec_pc_inc2 = 1'b1;  /* SET1,,[HL].6 */
                {8'h71,8'hf2} : dec_pc_inc2 = 1'b1;  /* SET1,,[HL].7 */
                {8'h71,8'h8b} : dec_pc_inc2 = 1'b1;  /* CLR1,,A.0 */
                {8'h71,8'h9b} : dec_pc_inc2 = 1'b1;  /* CLR1,,A.1 */
                {8'h71,8'hab} : dec_pc_inc2 = 1'b1;  /* CLR1,,A.2 */
                {8'h71,8'hbb} : dec_pc_inc2 = 1'b1;  /* CLR1,,A.3 */
                {8'h71,8'hcb} : dec_pc_inc2 = 1'b1;  /* CLR1,,A.4 */
                {8'h71,8'hdb} : dec_pc_inc2 = 1'b1;  /* CLR1,,A.5 */
                {8'h71,8'heb} : dec_pc_inc2 = 1'b1;  /* CLR1,,A.6 */
                {8'h71,8'hfb} : dec_pc_inc2 = 1'b1;  /* CLR1,,A.7 */
                {8'h71,8'h83} : dec_pc_inc2 = 1'b1;  /* CLR1,,[HL].0 */
                {8'h71,8'h93} : dec_pc_inc2 = 1'b1;  /* CLR1,,[HL].1 */
                {8'h71,8'ha3} : dec_pc_inc2 = 1'b1;  /* CLR1,,[HL].2 */
                {8'h71,8'hb3} : dec_pc_inc2 = 1'b1;  /* CLR1,,[HL].3 */
                {8'h71,8'hc3} : dec_pc_inc2 = 1'b1;  /* CLR1,,[HL].4 */
                {8'h71,8'hd3} : dec_pc_inc2 = 1'b1;  /* CLR1,,[HL].5 */
                {8'h71,8'he3} : dec_pc_inc2 = 1'b1;  /* CLR1,,[HL].6 */
                {8'h71,8'hf3} : dec_pc_inc2 = 1'b1;  /* CLR1,,[HL].7 */
                {8'h71,8'h80} : dec_pc_inc2 = 1'b1;  /* SET1,,CY */
                {8'h71,8'h88} : dec_pc_inc2 = 1'b1;  /* CLR1,,CY */
                {8'h71,8'hc0} : dec_pc_inc2 = 1'b1;  /* NOT1,,CY */
                {8'h61,8'hca} : dec_pc_inc2 = 1'b1;  /* CALL,,AX */
                {8'h61,8'hda} : dec_pc_inc2 = 1'b1;  /* CALL,,BC */
                {8'h61,8'hea} : dec_pc_inc2 = 1'b1;  /* CALL,,DE */
                {8'h61,8'hfa} : dec_pc_inc2 = 1'b1;  /* CALL,,HL */
                {8'h61,8'h84} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0080h] */
                {8'h61,8'h94} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0082h] */
                {8'h61,8'ha4} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0084h] */
                {8'h61,8'hb4} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0086h] */
                {8'h61,8'hc4} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0088h] */
                {8'h61,8'hd4} : dec_pc_inc2 = 1'b1;  /* CALLT,,[008Ah] */
                {8'h61,8'he4} : dec_pc_inc2 = 1'b1;  /* CALLT,,[008Ch] */
                {8'h61,8'hf4} : dec_pc_inc2 = 1'b1;  /* CALLT,,[008Eh] */
                {8'h61,8'h85} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0090h] */
                {8'h61,8'h95} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0092h] */
                {8'h61,8'ha5} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0094h] */
                {8'h61,8'hb5} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0096h] */
                {8'h61,8'hc5} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0098h] */
                {8'h61,8'hd5} : dec_pc_inc2 = 1'b1;  /* CALLT,,[009Ah] */
                {8'h61,8'he5} : dec_pc_inc2 = 1'b1;  /* CALLT,,[009Ch] */
                {8'h61,8'hf5} : dec_pc_inc2 = 1'b1;  /* CALLT,,[009Eh] */
                {8'h61,8'h86} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00A0h] */
                {8'h61,8'h96} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00A2h] */
                {8'h61,8'ha6} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00A4h] */
                {8'h61,8'hb6} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00A6h] */
                {8'h61,8'hc6} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00A8h] */
                {8'h61,8'hd6} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00AAh] */
                {8'h61,8'he6} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00ACh] */
                {8'h61,8'hf6} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00AEh] */
                {8'h61,8'h87} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00B0h] */
                {8'h61,8'h97} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00B2h] */
                {8'h61,8'ha7} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00B4h] */
                {8'h61,8'hb7} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00B6h] */
                {8'h61,8'hc7} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00B8h] */
                {8'h61,8'hd7} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00BAh] */
                {8'h61,8'he7} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00BCh] */
                {8'h61,8'hf7} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00BEh] */
                {8'h61,8'hcc} : dec_pc_inc2 = 1'b1;  /* BRK,, */
                {8'h61,8'hec} : dec_pc_inc2 = 1'b1;  /* RETB,, */
                {8'h61,8'hfc} : dec_pc_inc2 = 1'b1;  /* RETI,, */
                {8'h61,8'hdd} : dec_pc_inc2 = 1'b1;  /* PUSH,,PSW */
                {8'h61,8'hcd} : dec_pc_inc2 = 1'b1;  /* POP,,PSW */
                {8'h10,8'hxx} : dec_pc_inc2 = 1'b1;  /* ADDW,SP,#byte */
                {8'h20,8'hxx} : dec_pc_inc2 = 1'b1;  /* SUBW,SP,#byte */
                {8'hef,8'hxx} : dec_pc_inc2 = 1'b1;  /* BR,,$addr8 */
                {8'h61,8'hcb} : dec_pc_inc2 = 1'b1;  /* BR,,AX */
                {8'hdc,8'hxx} : dec_pc_inc2 = 1'b1;  /* BC,,$addr8 */
                {8'hde,8'hxx} : dec_pc_inc2 = 1'b1;  /* BNC,,$addr8 */
                {8'hdd,8'hxx} : dec_pc_inc2 = 1'b1;  /* BZ,,$addr8 */
                {8'hdf,8'hxx} : dec_pc_inc2 = 1'b1;  /* BNZ,,$addr8 */
                {8'h61,8'hc8} : dec_pc_inc2 = 1'b1;  /* SKC,, */
                {8'h61,8'hd8} : dec_pc_inc2 = 1'b1;  /* SKNC,, */
                {8'h61,8'he8} : dec_pc_inc2 = 1'b1;  /* SKZ,, */
                {8'h61,8'hf8} : dec_pc_inc2 = 1'b1;  /* SKNZ,, */
                {8'h61,8'he3} : dec_pc_inc2 = 1'b1;  /* SKH,, */
                {8'h61,8'hf3} : dec_pc_inc2 = 1'b1;  /* SKNH,, */
                {8'h61,8'hcf} : dec_pc_inc2 = 1'b1;  /* SEL,,RB0 */
                {8'h61,8'hdf} : dec_pc_inc2 = 1'b1;  /* SEL,,RB1 */
                {8'h61,8'hef} : dec_pc_inc2 = 1'b1;  /* SEL,,RB2 */
                {8'h61,8'hff} : dec_pc_inc2 = 1'b1;  /* SEL,,RB3 */
                {8'h61,8'hed} : dec_pc_inc2 = 1'b1;  /* HALT,, */
                {8'h61,8'hfd} : dec_pc_inc2 = 1'b1;  /* STOP,, */
                {8'h61,8'ha1} : dec_pc_inc2 = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'h81} : dec_pc_inc2 = 1'b1;  /* ALT1,, */
                {8'h61,8'h91} : dec_pc_inc2 = 1'b1;  /* ALT2,, */
                {8'h61,8'h88} : dec_pc_inc2 = 1'b1;  /* XCH,A,X */
                {8'h61,8'h98} : dec_pc_inc2 = 1'b1;  /* XCH,A,X */
                {8'h61,8'h99} : dec_pc_inc2 = 1'b1;  /* XCH,A,X */
                {8'h61,8'h9a} : dec_pc_inc2 = 1'b1;  /* XCH,A,C */
                {8'h61,8'h9b} : dec_pc_inc2 = 1'b1;  /* XCH,A,B */
                {8'h61,8'h9c} : dec_pc_inc2 = 1'b1;  /* XCH,A,E */
                {8'h61,8'h9d} : dec_pc_inc2 = 1'b1;  /* XCH,A,D */
                {8'h61,8'h9e} : dec_pc_inc2 = 1'b1;  /* XCH,A,L */
                {8'h61,8'h9f} : dec_pc_inc2 = 1'b1;  /* XCH,A,H */
                {8'h61,8'hbe} : dec_pc_inc2 = 1'b1;  /* XCH,A,[DE] */
                {8'h61,8'hbc} : dec_pc_inc2 = 1'b1;  /* XCH,A,[HL] */
                {8'h61,8'h19} : dec_pc_inc2 = 1'b1;  /* ADDC,A,A */
                {8'h61,8'h39} : dec_pc_inc2 = 1'b1;  /* SUBC,A,A */
                {8'h61,8'hd1} : dec_pc_inc2 = 1'b1;  /* AND,A,[HL+B] */
                {8'h61,8'he1} : dec_pc_inc2 = 1'b1;  /* OR,A,[HL+B] */
                {8'h61,8'hf1} : dec_pc_inc2 = 1'b1;  /* XOR,A,[HL+B] */
                {8'h61,8'h83} : dec_pc_inc2 = 1'b1;  /* ADD,A,[HL+C] */
                {8'h61,8'h93} : dec_pc_inc2 = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h61,8'ha3} : dec_pc_inc2 = 1'b1;  /* SUB,A,[HL+C] */
                {8'h61,8'hb3} : dec_pc_inc2 = 1'b1;  /* SUBC,A,[HL+C] */
                {8'h71,8'h90} : dec_pc_inc2 = 1'b1;  /* SET1,,CY */
                {8'h71,8'ha0} : dec_pc_inc2 = 1'b1;  /* SET1,,CY */
                {8'h71,8'hb0} : dec_pc_inc2 = 1'b1;  /* SET1,,CY */
                {8'h71,8'hd0} : dec_pc_inc2 = 1'b1;  /* NOT1,,CY */
                {8'h71,8'he0} : dec_pc_inc2 = 1'b1;  /* NOT1,,CY */
                {8'h71,8'hf0} : dec_pc_inc2 = 1'b1;  /* NOT1,,CY */
                {8'h71,8'h98} : dec_pc_inc2 = 1'b1;  /* CLR1,,CY */
                {8'h71,8'ha8} : dec_pc_inc2 = 1'b1;  /* CLR1,,CY */
                {8'h71,8'hb8} : dec_pc_inc2 = 1'b1;  /* CLR1,,CY */
                {8'h71,8'hc8} : dec_pc_inc2 = 1'b1;  /* NOT1,,CY */
                {8'h71,8'hd8} : dec_pc_inc2 = 1'b1;  /* NOT1,,CY */
                {8'h71,8'he8} : dec_pc_inc2 = 1'b1;  /* NOT1,,CY */
                {8'h71,8'hf8} : dec_pc_inc2 = 1'b1;  /* NOT1,,CY */
                {8'h31,8'h8a} : dec_pc_inc2 = 1'b1;  /* SHR,A,0 */
                {8'h31,8'h9a} : dec_pc_inc2 = 1'b1;  /* SHR,A,1 */
                {8'h31,8'haa} : dec_pc_inc2 = 1'b1;  /* SHR,A,2 */
                {8'h31,8'hba} : dec_pc_inc2 = 1'b1;  /* SHR,A,3 */
                {8'h31,8'hca} : dec_pc_inc2 = 1'b1;  /* SHR,A,4 */
                {8'h31,8'hda} : dec_pc_inc2 = 1'b1;  /* SHR,A,5 */
                {8'h31,8'hea} : dec_pc_inc2 = 1'b1;  /* SHR,A,6 */
                {8'h31,8'hfa} : dec_pc_inc2 = 1'b1;  /* SHR,A,7 */
                {8'h31,8'h89} : dec_pc_inc2 = 1'b1;  /* SHL,A,0 */
                {8'h31,8'h99} : dec_pc_inc2 = 1'b1;  /* SHL,A,1 */
                {8'h31,8'ha9} : dec_pc_inc2 = 1'b1;  /* SHL,A,2 */
                {8'h31,8'hb9} : dec_pc_inc2 = 1'b1;  /* SHL,A,3 */
                {8'h31,8'hc9} : dec_pc_inc2 = 1'b1;  /* SHL,A,4 */
                {8'h31,8'hd9} : dec_pc_inc2 = 1'b1;  /* SHL,A,5 */
                {8'h31,8'he9} : dec_pc_inc2 = 1'b1;  /* SHL,A,6 */
                {8'h31,8'hf9} : dec_pc_inc2 = 1'b1;  /* SHL,A,7 */
                {8'h31,8'h88} : dec_pc_inc2 = 1'b1;  /* SHL,B,0 */
                {8'h31,8'h98} : dec_pc_inc2 = 1'b1;  /* SHL,B,1 */
                {8'h31,8'ha8} : dec_pc_inc2 = 1'b1;  /* SHL,B,2 */
                {8'h31,8'hb8} : dec_pc_inc2 = 1'b1;  /* SHL,B,3 */
                {8'h31,8'hc8} : dec_pc_inc2 = 1'b1;  /* SHL,B,4 */
                {8'h31,8'hd8} : dec_pc_inc2 = 1'b1;  /* SHL,B,5 */
                {8'h31,8'he8} : dec_pc_inc2 = 1'b1;  /* SHL,B,6 */
                {8'h31,8'hf8} : dec_pc_inc2 = 1'b1;  /* SHL,B,7 */
                {8'h31,8'h87} : dec_pc_inc2 = 1'b1;  /* SHL,C,0 */
                {8'h31,8'h97} : dec_pc_inc2 = 1'b1;  /* SHL,C,1 */
                {8'h31,8'ha7} : dec_pc_inc2 = 1'b1;  /* SHL,C,2 */
                {8'h31,8'hb7} : dec_pc_inc2 = 1'b1;  /* SHL,C,3 */
                {8'h31,8'hc7} : dec_pc_inc2 = 1'b1;  /* SHL,C,4 */
                {8'h31,8'hd7} : dec_pc_inc2 = 1'b1;  /* SHL,C,5 */
                {8'h31,8'he7} : dec_pc_inc2 = 1'b1;  /* SHL,C,6 */
                {8'h31,8'hf7} : dec_pc_inc2 = 1'b1;  /* SHL,C,7 */
                {8'h31,8'h8b} : dec_pc_inc2 = 1'b1;  /* SAR,A,0 */
                {8'h31,8'h9b} : dec_pc_inc2 = 1'b1;  /* SAR,A,1 */
                {8'h31,8'hab} : dec_pc_inc2 = 1'b1;  /* SAR,A,2 */
                {8'h31,8'hbb} : dec_pc_inc2 = 1'b1;  /* SAR,A,3 */
                {8'h31,8'hcb} : dec_pc_inc2 = 1'b1;  /* SAR,A,4 */
                {8'h31,8'hdb} : dec_pc_inc2 = 1'b1;  /* SAR,A,5 */
                {8'h31,8'heb} : dec_pc_inc2 = 1'b1;  /* SAR,A,6 */
                {8'h31,8'hfb} : dec_pc_inc2 = 1'b1;  /* SAR,A,7 */
                {8'h31,8'h06} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h16} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h26} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h36} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h46} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h56} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h66} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h76} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h86} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h96} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'ha6} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'hb6} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'hc6} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'hd6} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'he6} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'hf6} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                default : dec_pc_inc2 = 1'b0;
            endcase
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h50,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,X,#byte */
                {8'h51,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,A,#byte */
                {8'h52,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,C,#byte */
                {8'h53,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,B,#byte */
                {8'h54,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,E,#byte */
                {8'h55,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,D,#byte */
                {8'h56,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,L,#byte */
                {8'h57,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,H,#byte */
                {8'h8d,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,A,saddr */
                {8'h9d,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,saddr,A */
                {8'h8e,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,A,sfr */
                {8'h9e,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,sfr,A */
                {8'h41,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,ES,#byte */
                {8'h8a,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,A,[DE+byte] */
                {8'h9a,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,[DE+byte],A */
                {8'h8c,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,A,[HL+byte] */
                {8'h9c,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,[HL+byte],A */
                {8'h61,8'hc9,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,A,[HL+B] */
                {8'h61,8'hd9,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,[HL+B],A */
                {8'h61,8'he9,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,A,[HL+C] */
                {8'h61,8'hf9,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,[HL+C],A */
                {8'h88,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,A,[SP+byte] */
                {8'h98,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,[SP+byte],A */
                {8'he8,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,B,saddr */
                {8'hf8,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,C,saddr */
                {8'hd8,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV,X,saddr */
                {8'h61,8'h8a,2'bxx} : dec_pc_inc2 = 1'b1;  /* XCH,A,C */
                {8'h61,8'h8b,2'bxx} : dec_pc_inc2 = 1'b1;  /* XCH,A,B */
                {8'h61,8'h8c,2'bxx} : dec_pc_inc2 = 1'b1;  /* XCH,A,E */
                {8'h61,8'h8d,2'bxx} : dec_pc_inc2 = 1'b1;  /* XCH,A,D */
                {8'h61,8'h8e,2'bxx} : dec_pc_inc2 = 1'b1;  /* XCH,A,L */
                {8'h61,8'h8f,2'bxx} : dec_pc_inc2 = 1'b1;  /* XCH,A,H */
                {8'h61,8'hae,2'bx1} : dec_pc_inc2 = 1'b1;  /* XCH,A,[DE] */
                {8'h61,8'hac,2'bx1} : dec_pc_inc2 = 1'b1;  /* XCH,A,[HL] */
                {8'h61,8'hb9,2'bx1} : dec_pc_inc2 = 1'b1;  /* XCH,A,[HL+B] */
                {8'h61,8'ha9,2'bx1} : dec_pc_inc2 = 1'b1;  /* XCH,A,[HL+C] */
                {8'he4,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* ONEB,,saddr */
                {8'hf4,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* CLRB,,saddr */
                {8'had,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOVW,AX,saddrp */
                {8'hbd,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOVW,saddrp,AX */
                {8'hae,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOVW,AX,sfrp */
                {8'hbe,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOVW,sfrp,AX */
                {8'haa,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOVW,AX,[DE+byte] */
                {8'hba,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOVW,[DE+byte],AX */
                {8'hac,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOVW,AX,[HL+byte] */
                {8'hbc,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOVW,[HL+byte],AX */
                {8'ha8,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOVW,AX,[SP+byte] */
                {8'hb8,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOVW,[SP+byte],AX */
                {8'hda,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOVW,BC,saddrp */
                {8'hea,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOVW,DE,saddrp */
                {8'hfa,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOVW,HL,saddrp */
                {8'h0c,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,#byte */
                {8'h61,8'h08,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,X */
                {8'h61,8'h0a,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,C */
                {8'h61,8'h0b,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,B */
                {8'h61,8'h0c,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,E */
                {8'h61,8'h0d,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,D */
                {8'h61,8'h0e,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,L */
                {8'h61,8'h0f,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,H */
                {8'h61,8'h00,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,X,A */
                {8'h61,8'h01,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,A */
                {8'h61,8'h02,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,C,A */
                {8'h61,8'h03,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,B,A */
                {8'h61,8'h04,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,E,A */
                {8'h61,8'h05,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,D,A */
                {8'h61,8'h06,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,L,A */
                {8'h61,8'h07,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,H,A */
                {8'h0b,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,saddr */
                {8'h0e,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,[HL+byte] */
                {8'h61,8'h80,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,[HL+B] */
                {8'h61,8'h82,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,[HL+C] */
                {8'h1c,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,#byte */
                {8'h61,8'h18,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,X */
                {8'h61,8'h1a,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,C */
                {8'h61,8'h1b,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,B */
                {8'h61,8'h1c,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,E */
                {8'h61,8'h1d,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,D */
                {8'h61,8'h1e,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,L */
                {8'h61,8'h1f,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,H */
                {8'h61,8'h10,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,X,A */
                {8'h61,8'h11,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,A */
                {8'h61,8'h12,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,C,A */
                {8'h61,8'h13,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,B,A */
                {8'h61,8'h14,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,E,A */
                {8'h61,8'h15,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,D,A */
                {8'h61,8'h16,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,L,A */
                {8'h61,8'h17,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,H,A */
                {8'h1b,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,saddr */
                {8'h1e,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,[HL+byte] */
                {8'h61,8'h90,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,[HL+B] */
                {8'h61,8'h92,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h2c,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,#byte */
                {8'h61,8'h28,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,X */
                {8'h61,8'h2a,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,C */
                {8'h61,8'h2b,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,B */
                {8'h61,8'h2c,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,E */
                {8'h61,8'h2d,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,D */
                {8'h61,8'h2e,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,L */
                {8'h61,8'h2f,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,H */
                {8'h61,8'h20,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,X,A */
                {8'h61,8'h21,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,A */
                {8'h61,8'h22,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,C,A */
                {8'h61,8'h23,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,B,A */
                {8'h61,8'h24,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,E,A */
                {8'h61,8'h25,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,D,A */
                {8'h61,8'h26,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,L,A */
                {8'h61,8'h27,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,H,A */
                {8'h2b,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,saddr */
                {8'h2e,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,[HL+byte] */
                {8'h61,8'ha0,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,[HL+B] */
                {8'h61,8'ha2,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,[HL+C] */
                {8'h3c,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,#byte */
                {8'h61,8'h38,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,X */
                {8'h61,8'h3a,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,C */
                {8'h61,8'h3b,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,B */
                {8'h61,8'h3c,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,E */
                {8'h61,8'h3d,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,D */
                {8'h61,8'h3e,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,L */
                {8'h61,8'h3f,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,H */
                {8'h61,8'h30,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,X,A */
                {8'h61,8'h31,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,A */
                {8'h61,8'h32,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,C,A */
                {8'h61,8'h33,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,B,A */
                {8'h61,8'h34,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,E,A */
                {8'h61,8'h35,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,D,A */
                {8'h61,8'h36,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,L,A */
                {8'h61,8'h37,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,H,A */
                {8'h3b,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,saddr */
                {8'h3e,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,[HL+byte] */
                {8'h61,8'hb0,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,[HL+B] */
                {8'h61,8'hb2,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,[HL+C] */
                {8'h5c,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,A,#byte */
                {8'h61,8'h58,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,A,X */
                {8'h61,8'h5a,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,A,C */
                {8'h61,8'h5b,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,A,B */
                {8'h61,8'h5c,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,A,E */
                {8'h61,8'h5d,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,A,D */
                {8'h61,8'h5e,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,A,L */
                {8'h61,8'h5f,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,A,H */
                {8'h61,8'h50,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,X,A */
                {8'h61,8'h51,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,A,A */
                {8'h61,8'h52,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,C,A */
                {8'h61,8'h53,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,B,A */
                {8'h61,8'h54,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,E,A */
                {8'h61,8'h55,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,D,A */
                {8'h61,8'h56,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,L,A */
                {8'h61,8'h57,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,H,A */
                {8'h5b,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,A,saddr */
                {8'h5e,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,A,[HL+byte] */
                {8'h61,8'hd0,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,A,[HL+B] */
                {8'h61,8'hd2,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,A,[HL+C] */
                {8'h6c,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,A,#byte */
                {8'h61,8'h68,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,A,X */
                {8'h61,8'h6a,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,A,C */
                {8'h61,8'h6b,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,A,B */
                {8'h61,8'h6c,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,A,E */
                {8'h61,8'h6d,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,A,D */
                {8'h61,8'h6e,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,A,L */
                {8'h61,8'h6f,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,A,H */
                {8'h61,8'h60,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,X,A */
                {8'h61,8'h61,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,A,A */
                {8'h61,8'h62,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,C,A */
                {8'h61,8'h63,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,B,A */
                {8'h61,8'h64,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,E,A */
                {8'h61,8'h65,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,D,A */
                {8'h61,8'h66,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,L,A */
                {8'h61,8'h67,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,H,A */
                {8'h6b,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,A,saddr */
                {8'h6e,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,A,[HL+byte] */
                {8'h61,8'he0,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,A,[HL+B] */
                {8'h61,8'he2,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,A,[HL+C] */
                {8'h7c,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,#byte */
                {8'h61,8'h78,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,X */
                {8'h61,8'h7a,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,C */
                {8'h61,8'h7b,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,B */
                {8'h61,8'h7c,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,E */
                {8'h61,8'h7d,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,D */
                {8'h61,8'h7e,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,L */
                {8'h61,8'h7f,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,H */
                {8'h61,8'h70,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,X,A */
                {8'h61,8'h71,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,A */
                {8'h61,8'h72,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,C,A */
                {8'h61,8'h73,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,B,A */
                {8'h61,8'h74,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,E,A */
                {8'h61,8'h75,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,D,A */
                {8'h61,8'h76,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,L,A */
                {8'h61,8'h77,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,H,A */
                {8'h7b,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,saddr */
                {8'h7e,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,[HL+byte] */
                {8'h61,8'hf0,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,[HL+B] */
                {8'h61,8'hf2,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,[HL+C] */
                {8'h4c,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,A,#byte */
                {8'h61,8'h48,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,A,X */
                {8'h61,8'h4a,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,A,C */
                {8'h61,8'h4b,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,A,B */
                {8'h61,8'h4c,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,A,E */
                {8'h61,8'h4d,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,A,D */
                {8'h61,8'h4e,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,A,L */
                {8'h61,8'h4f,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,A,H */
                {8'h61,8'h40,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,X,A */
                {8'h61,8'h41,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,A,A */
                {8'h61,8'h42,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,C,A */
                {8'h61,8'h43,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,B,A */
                {8'h61,8'h44,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,E,A */
                {8'h61,8'h45,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,D,A */
                {8'h61,8'h46,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,L,A */
                {8'h61,8'h47,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,H,A */
                {8'h4b,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,A,saddr */
                {8'h4e,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,A,[HL+byte] */
                {8'h61,8'hc0,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,A,[HL+B] */
                {8'h61,8'hc2,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP,A,[HL+C] */
                {8'hd4,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMP0,,saddr */
                {8'h06,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDW,AX,saddrp */
                {8'h26,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBW,AX,saddrp */
                {8'h46,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* CMPW,AX,saddrp */
                {8'ha4,8'hxx,2'bx1} : dec_pc_inc2 = 1'b1;  /* INC,,saddr */
                {8'hb4,8'hxx,2'bx1} : dec_pc_inc2 = 1'b1;  /* DEC,,saddr */
                {8'ha6,8'hxx,2'bx1} : dec_pc_inc2 = 1'b1;  /* INCW,,saddrp */
                {8'hb6,8'hxx,2'bx1} : dec_pc_inc2 = 1'b1;  /* DECW,,saddrp */
                {8'h31,8'h0a,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHR,A,0 */
                {8'h31,8'h1a,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHR,A,1 */
                {8'h31,8'h2a,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHR,A,2 */
                {8'h31,8'h3a,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHR,A,3 */
                {8'h31,8'h4a,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHR,A,4 */
                {8'h31,8'h5a,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHR,A,5 */
                {8'h31,8'h6a,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHR,A,6 */
                {8'h31,8'h7a,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHR,A,7 */
                {8'h31,8'h0e,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,0 */
                {8'h31,8'h1e,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,1 */
                {8'h31,8'h2e,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,2 */
                {8'h31,8'h3e,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,3 */
                {8'h31,8'h4e,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,4 */
                {8'h31,8'h5e,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,5 */
                {8'h31,8'h6e,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,6 */
                {8'h31,8'h7e,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,7 */
                {8'h31,8'h8e,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,8 */
                {8'h31,8'h9e,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,9 */
                {8'h31,8'hae,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,10 */
                {8'h31,8'hbe,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,11 */
                {8'h31,8'hce,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,12 */
                {8'h31,8'hde,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,13 */
                {8'h31,8'hee,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,14 */
                {8'h31,8'hfe,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHRW,AX,15 */
                {8'h31,8'h09,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,A,0 */
                {8'h31,8'h19,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,A,1 */
                {8'h31,8'h29,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,A,2 */
                {8'h31,8'h39,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,A,3 */
                {8'h31,8'h49,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,A,4 */
                {8'h31,8'h59,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,A,5 */
                {8'h31,8'h69,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,A,6 */
                {8'h31,8'h79,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,A,7 */
                {8'h31,8'h08,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,B,0 */
                {8'h31,8'h18,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,B,1 */
                {8'h31,8'h28,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,B,2 */
                {8'h31,8'h38,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,B,3 */
                {8'h31,8'h48,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,B,4 */
                {8'h31,8'h58,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,B,5 */
                {8'h31,8'h68,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,B,6 */
                {8'h31,8'h78,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,B,7 */
                {8'h31,8'h07,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,C,0 */
                {8'h31,8'h17,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,C,1 */
                {8'h31,8'h27,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,C,2 */
                {8'h31,8'h37,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,C,3 */
                {8'h31,8'h47,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,C,4 */
                {8'h31,8'h57,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,C,5 */
                {8'h31,8'h67,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,C,6 */
                {8'h31,8'h77,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,C,7 */
                {8'h31,8'h0d,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,0 */
                {8'h31,8'h1d,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,1 */
                {8'h31,8'h2d,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,2 */
                {8'h31,8'h3d,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,3 */
                {8'h31,8'h4d,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,4 */
                {8'h31,8'h5d,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,5 */
                {8'h31,8'h6d,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,6 */
                {8'h31,8'h7d,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,7 */
                {8'h31,8'h8d,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,8 */
                {8'h31,8'h9d,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,9 */
                {8'h31,8'had,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,10 */
                {8'h31,8'hbd,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,11 */
                {8'h31,8'hcd,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,12 */
                {8'h31,8'hdd,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,13 */
                {8'h31,8'hed,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,14 */
                {8'h31,8'hfd,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,AX,15 */
                {8'h31,8'h0c,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,0 */
                {8'h31,8'h1c,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,1 */
                {8'h31,8'h2c,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,2 */
                {8'h31,8'h3c,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,3 */
                {8'h31,8'h4c,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,4 */
                {8'h31,8'h5c,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,5 */
                {8'h31,8'h6c,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,6 */
                {8'h31,8'h7c,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,7 */
                {8'h31,8'h8c,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,8 */
                {8'h31,8'h9c,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,9 */
                {8'h31,8'hac,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,10 */
                {8'h31,8'hbc,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,11 */
                {8'h31,8'hcc,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,12 */
                {8'h31,8'hdc,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,13 */
                {8'h31,8'hec,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,14 */
                {8'h31,8'hfc,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHLW,BC,15 */
                {8'h31,8'h0b,2'bxx} : dec_pc_inc2 = 1'b1;  /* SAR,A,0 */
                {8'h31,8'h1b,2'bxx} : dec_pc_inc2 = 1'b1;  /* SAR,A,1 */
                {8'h31,8'h2b,2'bxx} : dec_pc_inc2 = 1'b1;  /* SAR,A,2 */
                {8'h31,8'h3b,2'bxx} : dec_pc_inc2 = 1'b1;  /* SAR,A,3 */
                {8'h31,8'h4b,2'bxx} : dec_pc_inc2 = 1'b1;  /* SAR,A,4 */
                {8'h31,8'h5b,2'bxx} : dec_pc_inc2 = 1'b1;  /* SAR,A,5 */
                {8'h31,8'h6b,2'bxx} : dec_pc_inc2 = 1'b1;  /* SAR,A,6 */
                {8'h31,8'h7b,2'bxx} : dec_pc_inc2 = 1'b1;  /* SAR,A,7 */
                {8'h31,8'h0f,2'bxx} : dec_pc_inc2 = 1'b1;  /* SARW,AX,0 */
                {8'h31,8'h1f,2'bxx} : dec_pc_inc2 = 1'b1;  /* SARW,AX,1 */
                {8'h31,8'h2f,2'bxx} : dec_pc_inc2 = 1'b1;  /* SARW,AX,2 */
                {8'h31,8'h3f,2'bxx} : dec_pc_inc2 = 1'b1;  /* SARW,AX,3 */
                {8'h31,8'h4f,2'bxx} : dec_pc_inc2 = 1'b1;  /* SARW,AX,4 */
                {8'h31,8'h5f,2'bxx} : dec_pc_inc2 = 1'b1;  /* SARW,AX,5 */
                {8'h31,8'h6f,2'bxx} : dec_pc_inc2 = 1'b1;  /* SARW,AX,6 */
                {8'h31,8'h7f,2'bxx} : dec_pc_inc2 = 1'b1;  /* SARW,AX,7 */
                {8'h31,8'h8f,2'bxx} : dec_pc_inc2 = 1'b1;  /* SARW,AX,8 */
                {8'h31,8'h9f,2'bxx} : dec_pc_inc2 = 1'b1;  /* SARW,AX,9 */
                {8'h31,8'haf,2'bxx} : dec_pc_inc2 = 1'b1;  /* SARW,AX,10 */
                {8'h31,8'hbf,2'bxx} : dec_pc_inc2 = 1'b1;  /* SARW,AX,11 */
                {8'h31,8'hcf,2'bxx} : dec_pc_inc2 = 1'b1;  /* SARW,AX,12 */
                {8'h31,8'hdf,2'bxx} : dec_pc_inc2 = 1'b1;  /* SARW,AX,13 */
                {8'h31,8'hef,2'bxx} : dec_pc_inc2 = 1'b1;  /* SARW,AX,14 */
                {8'h31,8'hff,2'bxx} : dec_pc_inc2 = 1'b1;  /* SARW,AX,15 */
                {8'h61,8'hdb,2'bxx} : dec_pc_inc2 = 1'b1;  /* ROR,A,1 */
                {8'h61,8'heb,2'bxx} : dec_pc_inc2 = 1'b1;  /* ROL,A,1 */
                {8'h61,8'hfb,2'bxx} : dec_pc_inc2 = 1'b1;  /* RORC,A,1 */
                {8'h61,8'hdc,2'bxx} : dec_pc_inc2 = 1'b1;  /* ROLC,A,1 */
                {8'h61,8'hee,2'bxx} : dec_pc_inc2 = 1'b1;  /* ROLWC,AX,1 */
                {8'h61,8'hfe,2'bxx} : dec_pc_inc2 = 1'b1;  /* ROLWC,BC,1 */
                {8'h71,8'h8c,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,A.0 */
                {8'h71,8'h9c,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,A.1 */
                {8'h71,8'hac,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,A.2 */
                {8'h71,8'hbc,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,A.3 */
                {8'h71,8'hcc,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,A.4 */
                {8'h71,8'hdc,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,A.5 */
                {8'h71,8'hec,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,A.6 */
                {8'h71,8'hfc,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,A.7 */
                {8'h71,8'h84,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,[HL].0 */
                {8'h71,8'h94,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,[HL].1 */
                {8'h71,8'ha4,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,[HL].2 */
                {8'h71,8'hb4,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,[HL].3 */
                {8'h71,8'hc4,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,[HL].4 */
                {8'h71,8'hd4,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,[HL].5 */
                {8'h71,8'he4,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,[HL].6 */
                {8'h71,8'hf4,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,CY,[HL].7 */
                {8'h71,8'h89,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,A.0,CY */
                {8'h71,8'h99,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,A.1,CY */
                {8'h71,8'ha9,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,A.2,CY */
                {8'h71,8'hb9,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,A.3,CY */
                {8'h71,8'hc9,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,A.4,CY */
                {8'h71,8'hd9,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,A.5,CY */
                {8'h71,8'he9,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,A.6,CY */
                {8'h71,8'hf9,2'bxx} : dec_pc_inc2 = 1'b1;  /* MOV1,A.7,CY */
                {8'h71,8'h81,2'bx1} : dec_pc_inc2 = 1'b1;  /* MOV1,[HL].0,CY */
                {8'h71,8'h91,2'bx1} : dec_pc_inc2 = 1'b1;  /* MOV1,[HL].1,CY */
                {8'h71,8'ha1,2'bx1} : dec_pc_inc2 = 1'b1;  /* MOV1,[HL].2,CY */
                {8'h71,8'hb1,2'bx1} : dec_pc_inc2 = 1'b1;  /* MOV1,[HL].3,CY */
                {8'h71,8'hc1,2'bx1} : dec_pc_inc2 = 1'b1;  /* MOV1,[HL].4,CY */
                {8'h71,8'hd1,2'bx1} : dec_pc_inc2 = 1'b1;  /* MOV1,[HL].5,CY */
                {8'h71,8'he1,2'bx1} : dec_pc_inc2 = 1'b1;  /* MOV1,[HL].6,CY */
                {8'h71,8'hf1,2'bx1} : dec_pc_inc2 = 1'b1;  /* MOV1,[HL].7,CY */
                {8'h71,8'h8d,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND1,CY,A.0 */
                {8'h71,8'h9d,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND1,CY,A.1 */
                {8'h71,8'had,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND1,CY,A.2 */
                {8'h71,8'hbd,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND1,CY,A.3 */
                {8'h71,8'hcd,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND1,CY,A.4 */
                {8'h71,8'hdd,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND1,CY,A.5 */
                {8'h71,8'hed,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND1,CY,A.6 */
                {8'h71,8'hfd,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND1,CY,A.7 */
                {8'h71,8'h85,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND1,CY,[HL].0 */
                {8'h71,8'h95,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND1,CY,[HL].1 */
                {8'h71,8'ha5,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND1,CY,[HL].2 */
                {8'h71,8'hb5,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND1,CY,[HL].3 */
                {8'h71,8'hc5,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND1,CY,[HL].4 */
                {8'h71,8'hd5,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND1,CY,[HL].5 */
                {8'h71,8'he5,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND1,CY,[HL].6 */
                {8'h71,8'hf5,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND1,CY,[HL].7 */
                {8'h71,8'h8e,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR1,CY,A.0 */
                {8'h71,8'h9e,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR1,CY,A.1 */
                {8'h71,8'hae,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR1,CY,A.2 */
                {8'h71,8'hbe,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR1,CY,A.3 */
                {8'h71,8'hce,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR1,CY,A.4 */
                {8'h71,8'hde,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR1,CY,A.5 */
                {8'h71,8'hee,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR1,CY,A.6 */
                {8'h71,8'hfe,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR1,CY,A.7 */
                {8'h71,8'h86,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR1,CY,[HL].0 */
                {8'h71,8'h96,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR1,CY,[HL].1 */
                {8'h71,8'ha6,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR1,CY,[HL].2 */
                {8'h71,8'hb6,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR1,CY,[HL].3 */
                {8'h71,8'hc6,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR1,CY,[HL].4 */
                {8'h71,8'hd6,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR1,CY,[HL].5 */
                {8'h71,8'he6,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR1,CY,[HL].6 */
                {8'h71,8'hf6,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR1,CY,[HL].7 */
                {8'h71,8'h8f,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,A.0 */
                {8'h71,8'h9f,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,A.1 */
                {8'h71,8'haf,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,A.2 */
                {8'h71,8'hbf,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,A.3 */
                {8'h71,8'hcf,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,A.4 */
                {8'h71,8'hdf,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,A.5 */
                {8'h71,8'hef,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,A.6 */
                {8'h71,8'hff,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,A.7 */
                {8'h71,8'h87,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,[HL].0 */
                {8'h71,8'h97,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,[HL].1 */
                {8'h71,8'ha7,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,[HL].2 */
                {8'h71,8'hb7,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,[HL].3 */
                {8'h71,8'hc7,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,[HL].4 */
                {8'h71,8'hd7,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,[HL].5 */
                {8'h71,8'he7,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,[HL].6 */
                {8'h71,8'hf7,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR1,CY,[HL].7 */
                {8'h71,8'h8a,2'bxx} : dec_pc_inc2 = 1'b1;  /* SET1,,A.0 */
                {8'h71,8'h9a,2'bxx} : dec_pc_inc2 = 1'b1;  /* SET1,,A.1 */
                {8'h71,8'haa,2'bxx} : dec_pc_inc2 = 1'b1;  /* SET1,,A.2 */
                {8'h71,8'hba,2'bxx} : dec_pc_inc2 = 1'b1;  /* SET1,,A.3 */
                {8'h71,8'hca,2'bxx} : dec_pc_inc2 = 1'b1;  /* SET1,,A.4 */
                {8'h71,8'hda,2'bxx} : dec_pc_inc2 = 1'b1;  /* SET1,,A.5 */
                {8'h71,8'hea,2'bxx} : dec_pc_inc2 = 1'b1;  /* SET1,,A.6 */
                {8'h71,8'hfa,2'bxx} : dec_pc_inc2 = 1'b1;  /* SET1,,A.7 */
                {8'h71,8'h82,2'bx1} : dec_pc_inc2 = 1'b1;  /* SET1,,[HL].0 */
                {8'h71,8'h92,2'bx1} : dec_pc_inc2 = 1'b1;  /* SET1,,[HL].1 */
                {8'h71,8'ha2,2'bx1} : dec_pc_inc2 = 1'b1;  /* SET1,,[HL].2 */
                {8'h71,8'hb2,2'bx1} : dec_pc_inc2 = 1'b1;  /* SET1,,[HL].3 */
                {8'h71,8'hc2,2'bx1} : dec_pc_inc2 = 1'b1;  /* SET1,,[HL].4 */
                {8'h71,8'hd2,2'bx1} : dec_pc_inc2 = 1'b1;  /* SET1,,[HL].5 */
                {8'h71,8'he2,2'bx1} : dec_pc_inc2 = 1'b1;  /* SET1,,[HL].6 */
                {8'h71,8'hf2,2'bx1} : dec_pc_inc2 = 1'b1;  /* SET1,,[HL].7 */
                {8'h71,8'h8b,2'bxx} : dec_pc_inc2 = 1'b1;  /* CLR1,,A.0 */
                {8'h71,8'h9b,2'bxx} : dec_pc_inc2 = 1'b1;  /* CLR1,,A.1 */
                {8'h71,8'hab,2'bxx} : dec_pc_inc2 = 1'b1;  /* CLR1,,A.2 */
                {8'h71,8'hbb,2'bxx} : dec_pc_inc2 = 1'b1;  /* CLR1,,A.3 */
                {8'h71,8'hcb,2'bxx} : dec_pc_inc2 = 1'b1;  /* CLR1,,A.4 */
                {8'h71,8'hdb,2'bxx} : dec_pc_inc2 = 1'b1;  /* CLR1,,A.5 */
                {8'h71,8'heb,2'bxx} : dec_pc_inc2 = 1'b1;  /* CLR1,,A.6 */
                {8'h71,8'hfb,2'bxx} : dec_pc_inc2 = 1'b1;  /* CLR1,,A.7 */
                {8'h71,8'h83,2'bx1} : dec_pc_inc2 = 1'b1;  /* CLR1,,[HL].0 */
                {8'h71,8'h93,2'bx1} : dec_pc_inc2 = 1'b1;  /* CLR1,,[HL].1 */
                {8'h71,8'ha3,2'bx1} : dec_pc_inc2 = 1'b1;  /* CLR1,,[HL].2 */
                {8'h71,8'hb3,2'bx1} : dec_pc_inc2 = 1'b1;  /* CLR1,,[HL].3 */
                {8'h71,8'hc3,2'bx1} : dec_pc_inc2 = 1'b1;  /* CLR1,,[HL].4 */
                {8'h71,8'hd3,2'bx1} : dec_pc_inc2 = 1'b1;  /* CLR1,,[HL].5 */
                {8'h71,8'he3,2'bx1} : dec_pc_inc2 = 1'b1;  /* CLR1,,[HL].6 */
                {8'h71,8'hf3,2'bx1} : dec_pc_inc2 = 1'b1;  /* CLR1,,[HL].7 */
                {8'h71,8'h80,2'bxx} : dec_pc_inc2 = 1'b1;  /* SET1,,CY */
                {8'h71,8'h88,2'bxx} : dec_pc_inc2 = 1'b1;  /* CLR1,,CY */
                {8'h71,8'hc0,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOT1,,CY */
                {8'h61,8'hca,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALL,,AX */
                {8'h61,8'hda,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALL,,BC */
                {8'h61,8'hea,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALL,,DE */
                {8'h61,8'hfa,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALL,,HL */
                {8'h61,8'h84,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0080h] */
                {8'h61,8'h94,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0082h] */
                {8'h61,8'ha4,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0084h] */
                {8'h61,8'hb4,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0086h] */
                {8'h61,8'hc4,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0088h] */
                {8'h61,8'hd4,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[008Ah] */
                {8'h61,8'he4,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[008Ch] */
                {8'h61,8'hf4,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[008Eh] */
                {8'h61,8'h85,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0090h] */
                {8'h61,8'h95,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0092h] */
                {8'h61,8'ha5,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0094h] */
                {8'h61,8'hb5,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0096h] */
                {8'h61,8'hc5,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[0098h] */
                {8'h61,8'hd5,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[009Ah] */
                {8'h61,8'he5,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[009Ch] */
                {8'h61,8'hf5,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[009Eh] */
                {8'h61,8'h86,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00A0h] */
                {8'h61,8'h96,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00A2h] */
                {8'h61,8'ha6,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00A4h] */
                {8'h61,8'hb6,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00A6h] */
                {8'h61,8'hc6,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00A8h] */
                {8'h61,8'hd6,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00AAh] */
                {8'h61,8'he6,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00ACh] */
                {8'h61,8'hf6,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00AEh] */
                {8'h61,8'h87,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00B0h] */
                {8'h61,8'h97,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00B2h] */
                {8'h61,8'ha7,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00B4h] */
                {8'h61,8'hb7,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00B6h] */
                {8'h61,8'hc7,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00B8h] */
                {8'h61,8'hd7,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00BAh] */
                {8'h61,8'he7,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00BCh] */
                {8'h61,8'hf7,2'bx0} : dec_pc_inc2 = 1'b1;  /* CALLT,,[00BEh] */
                {8'h61,8'hcc,2'bx0} : dec_pc_inc2 = 1'b1;  /* BRK,, */
                {8'h61,8'hdd,2'bxx} : dec_pc_inc2 = 1'b1;  /* PUSH,,PSW */
                {8'h61,8'hcd,2'bxx} : dec_pc_inc2 = 1'b1;  /* POP,,PSW */
                {8'h10,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDW,SP,#byte */
                {8'h20,8'hxx,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBW,SP,#byte */
                {8'hef,8'hxx,2'bx0} : dec_pc_inc2 = 1'b1;  /* BR,,$addr8 */
                {8'h61,8'hcb,2'bx0} : dec_pc_inc2 = 1'b1;  /* BR,,AX */
                {8'hdc,8'hxx,2'bx1} : dec_pc_inc2 = 1'b1;  /* BC,,$addr8 */
                {8'hde,8'hxx,2'bx1} : dec_pc_inc2 = 1'b1;  /* BNC,,$addr8 */
                {8'hdd,8'hxx,2'bx1} : dec_pc_inc2 = 1'b1;  /* BZ,,$addr8 */
                {8'hdf,8'hxx,2'bx1} : dec_pc_inc2 = 1'b1;  /* BNZ,,$addr8 */
                {8'h61,8'hc8,2'bxx} : dec_pc_inc2 = 1'b1;  /* SKC,, */
                {8'h61,8'hd8,2'bxx} : dec_pc_inc2 = 1'b1;  /* SKNC,, */
                {8'h61,8'he8,2'bxx} : dec_pc_inc2 = 1'b1;  /* SKZ,, */
                {8'h61,8'hf8,2'bxx} : dec_pc_inc2 = 1'b1;  /* SKNZ,, */
                {8'h61,8'he3,2'bxx} : dec_pc_inc2 = 1'b1;  /* SKH,, */
                {8'h61,8'hf3,2'bxx} : dec_pc_inc2 = 1'b1;  /* SKNH,, */
                {8'h61,8'hcf,2'bxx} : dec_pc_inc2 = 1'b1;  /* SEL,,RB0 */
                {8'h61,8'hdf,2'bxx} : dec_pc_inc2 = 1'b1;  /* SEL,,RB1 */
                {8'h61,8'hef,2'bxx} : dec_pc_inc2 = 1'b1;  /* SEL,,RB2 */
                {8'h61,8'hff,2'bxx} : dec_pc_inc2 = 1'b1;  /* SEL,,RB3 */
                {8'h61,8'hed,2'b10} : dec_pc_inc2 = 1'b1;  /* HALT,, */
                {8'h61,8'hfd,2'b10} : dec_pc_inc2 = 1'b1;  /* STOP,, */
                {8'h61,8'ha1,2'bx0} : dec_pc_inc2 = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'h81,2'bxx} : dec_pc_inc2 = 1'b1;  /* ALT1,, */
                {8'h61,8'h91,2'bxx} : dec_pc_inc2 = 1'b1;  /* ALT2,, */
                {8'h61,8'h88,2'bxx} : dec_pc_inc2 = 1'b1;  /* XCH,A,X */
                {8'h61,8'h98,2'bxx} : dec_pc_inc2 = 1'b1;  /* XCH,A,X */
                {8'h61,8'h99,2'bxx} : dec_pc_inc2 = 1'b1;  /* XCH,A,X */
                {8'h61,8'h9a,2'bxx} : dec_pc_inc2 = 1'b1;  /* XCH,A,C */
                {8'h61,8'h9b,2'bxx} : dec_pc_inc2 = 1'b1;  /* XCH,A,B */
                {8'h61,8'h9c,2'bxx} : dec_pc_inc2 = 1'b1;  /* XCH,A,E */
                {8'h61,8'h9d,2'bxx} : dec_pc_inc2 = 1'b1;  /* XCH,A,D */
                {8'h61,8'h9e,2'bxx} : dec_pc_inc2 = 1'b1;  /* XCH,A,L */
                {8'h61,8'h9f,2'bxx} : dec_pc_inc2 = 1'b1;  /* XCH,A,H */
                {8'h61,8'hbe,2'bx1} : dec_pc_inc2 = 1'b1;  /* XCH,A,[DE] */
                {8'h61,8'hbc,2'bx1} : dec_pc_inc2 = 1'b1;  /* XCH,A,[HL] */
                {8'h61,8'h19,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,A */
                {8'h61,8'h39,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,A */
                {8'h61,8'hd1,2'bxx} : dec_pc_inc2 = 1'b1;  /* AND,A,[HL+B] */
                {8'h61,8'he1,2'bxx} : dec_pc_inc2 = 1'b1;  /* OR,A,[HL+B] */
                {8'h61,8'hf1,2'bxx} : dec_pc_inc2 = 1'b1;  /* XOR,A,[HL+B] */
                {8'h61,8'h83,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADD,A,[HL+C] */
                {8'h61,8'h93,2'bxx} : dec_pc_inc2 = 1'b1;  /* ADDC,A,[HL+C] */
                {8'h61,8'ha3,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUB,A,[HL+C] */
                {8'h61,8'hb3,2'bxx} : dec_pc_inc2 = 1'b1;  /* SUBC,A,[HL+C] */
                {8'h71,8'h90,2'bxx} : dec_pc_inc2 = 1'b1;  /* SET1,,CY */
                {8'h71,8'ha0,2'bxx} : dec_pc_inc2 = 1'b1;  /* SET1,,CY */
                {8'h71,8'hb0,2'bxx} : dec_pc_inc2 = 1'b1;  /* SET1,,CY */
                {8'h71,8'hd0,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOT1,,CY */
                {8'h71,8'he0,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOT1,,CY */
                {8'h71,8'hf0,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOT1,,CY */
                {8'h71,8'h98,2'bxx} : dec_pc_inc2 = 1'b1;  /* CLR1,,CY */
                {8'h71,8'ha8,2'bxx} : dec_pc_inc2 = 1'b1;  /* CLR1,,CY */
                {8'h71,8'hb8,2'bxx} : dec_pc_inc2 = 1'b1;  /* CLR1,,CY */
                {8'h71,8'hc8,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOT1,,CY */
                {8'h71,8'hd8,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOT1,,CY */
                {8'h71,8'he8,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOT1,,CY */
                {8'h71,8'hf8,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOT1,,CY */
                {8'h31,8'h8a,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHR,A,0 */
                {8'h31,8'h9a,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHR,A,1 */
                {8'h31,8'haa,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHR,A,2 */
                {8'h31,8'hba,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHR,A,3 */
                {8'h31,8'hca,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHR,A,4 */
                {8'h31,8'hda,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHR,A,5 */
                {8'h31,8'hea,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHR,A,6 */
                {8'h31,8'hfa,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHR,A,7 */
                {8'h31,8'h89,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,A,0 */
                {8'h31,8'h99,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,A,1 */
                {8'h31,8'ha9,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,A,2 */
                {8'h31,8'hb9,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,A,3 */
                {8'h31,8'hc9,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,A,4 */
                {8'h31,8'hd9,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,A,5 */
                {8'h31,8'he9,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,A,6 */
                {8'h31,8'hf9,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,A,7 */
                {8'h31,8'h88,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,B,0 */
                {8'h31,8'h98,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,B,1 */
                {8'h31,8'ha8,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,B,2 */
                {8'h31,8'hb8,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,B,3 */
                {8'h31,8'hc8,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,B,4 */
                {8'h31,8'hd8,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,B,5 */
                {8'h31,8'he8,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,B,6 */
                {8'h31,8'hf8,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,B,7 */
                {8'h31,8'h87,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,C,0 */
                {8'h31,8'h97,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,C,1 */
                {8'h31,8'ha7,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,C,2 */
                {8'h31,8'hb7,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,C,3 */
                {8'h31,8'hc7,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,C,4 */
                {8'h31,8'hd7,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,C,5 */
                {8'h31,8'he7,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,C,6 */
                {8'h31,8'hf7,2'bxx} : dec_pc_inc2 = 1'b1;  /* SHL,C,7 */
                {8'h31,8'h8b,2'bxx} : dec_pc_inc2 = 1'b1;  /* SAR,A,0 */
                {8'h31,8'h9b,2'bxx} : dec_pc_inc2 = 1'b1;  /* SAR,A,1 */
                {8'h31,8'hab,2'bxx} : dec_pc_inc2 = 1'b1;  /* SAR,A,2 */
                {8'h31,8'hbb,2'bxx} : dec_pc_inc2 = 1'b1;  /* SAR,A,3 */
                {8'h31,8'hcb,2'bxx} : dec_pc_inc2 = 1'b1;  /* SAR,A,4 */
                {8'h31,8'hdb,2'bxx} : dec_pc_inc2 = 1'b1;  /* SAR,A,5 */
                {8'h31,8'heb,2'bxx} : dec_pc_inc2 = 1'b1;  /* SAR,A,6 */
                {8'h31,8'hfb,2'bxx} : dec_pc_inc2 = 1'b1;  /* SAR,A,7 */
                {8'h31,8'h06,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h16,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h26,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h36,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h46,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h56,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h66,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h76,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h86,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'h96,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'ha6,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'hb6,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'hc6,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'hd6,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'he6,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                {8'h31,8'hf6,2'bxx} : dec_pc_inc2 = 1'b1;  /* NOP,, */
                default : dec_pc_inc2 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_inc3;
    reg    dec_pc_inc3;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1) begin
            dec_pc_inc3 = 1'b0;
        end else if(skpack == 1'b1) begin
            casex ({ID_stage0,ID_stage1})  
                {8'hcd,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOV,saddr,#byte */
                {8'hce,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOV,sfr,#byte */
                {8'hca,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOV,[DE+byte],#byte */
                {8'hcc,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOV,[HL+byte],#byte */
                {8'h8f,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOV,A,!addr16 */
                {8'h9f,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOV,!addr16,A */
                {8'h09,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOV,A,word[B] */
                {8'h18,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOV,word[B],A */
                {8'h29,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOV,A,word[C] */
                {8'h28,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOV,word[C],A */
                {8'h49,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOV,A,word[BC] */
                {8'h48,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOV,word[BC],A */
                {8'hc8,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOV,[SP+byte],#byte */
                {8'he9,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOV,B,!addr16 */
                {8'hf9,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOV,C,!addr16 */
                {8'hd9,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOV,X,!addr16 */
                {8'h61,8'hb8} : dec_pc_inc3 = 1'b1;  /* MOV,ES,saddr */
                {8'h61,8'hce} : dec_pc_inc3 = 1'b1;  /* MOVS,[HL+byte],X */
                {8'h61,8'ha8} : dec_pc_inc3 = 1'b1;  /* XCH,A,saddr */
                {8'h61,8'hab} : dec_pc_inc3 = 1'b1;  /* XCH,A,sfr */
                {8'h61,8'haf} : dec_pc_inc3 = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'had} : dec_pc_inc3 = 1'b1;  /* XCH,A,[HL+byte] */
                {8'he5,8'hxx} : dec_pc_inc3 = 1'b1;  /* ONEB,,!addr16 */
                {8'hf5,8'hxx} : dec_pc_inc3 = 1'b1;  /* CLRB,,!addr16 */
                {8'h30,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOVW,AX,#word */
                {8'h32,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOVW,BC,#word */
                {8'h34,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOVW,DE,#word */
                {8'h36,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOVW,HL,#word */
                {8'haf,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOVW,AX,!addr16 */
                {8'hbf,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOVW,!addr16,AX */
                {8'h59,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOVW,AX,word[B] */
                {8'h58,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOVW,word[B],AX */
                {8'h69,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOVW,AX,word[C] */
                {8'h68,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOVW,word[C],AX */
                {8'h79,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOVW,AX,word[BC] */
                {8'h78,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOVW,word[BC],AX */
                {8'hdb,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOVW,BC,!addr16 */
                {8'heb,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOVW,DE,!addr16 */
                {8'hfb,8'hxx} : dec_pc_inc3 = 1'b1;  /* MOVW,HL,!addr16 */
                {8'h0a,8'hxx} : dec_pc_inc3 = 1'b1;  /* ADD,saddr,#byte */
                {8'h0f,8'hxx} : dec_pc_inc3 = 1'b1;  /* ADD,A,!addr16 */
                {8'h1a,8'hxx} : dec_pc_inc3 = 1'b1;  /* ADDC,saddr,#byte */
                {8'h1f,8'hxx} : dec_pc_inc3 = 1'b1;  /* ADDC,A,!addr16 */
                {8'h2a,8'hxx} : dec_pc_inc3 = 1'b1;  /* SUB,saddr,#byte */
                {8'h2f,8'hxx} : dec_pc_inc3 = 1'b1;  /* SUB,A,!addr16 */
                {8'h3a,8'hxx} : dec_pc_inc3 = 1'b1;  /* SUBC,saddr,#byte */
                {8'h3f,8'hxx} : dec_pc_inc3 = 1'b1;  /* SUBC,A,!addr16 */
                {8'h5a,8'hxx} : dec_pc_inc3 = 1'b1;  /* AND,saddr,#byte */
                {8'h5f,8'hxx} : dec_pc_inc3 = 1'b1;  /* AND,A,!addr16 */
                {8'h6a,8'hxx} : dec_pc_inc3 = 1'b1;  /* OR,saddr,#byte */
                {8'h6f,8'hxx} : dec_pc_inc3 = 1'b1;  /* OR,A,!addr16 */
                {8'h7a,8'hxx} : dec_pc_inc3 = 1'b1;  /* XOR,saddr,#byte */
                {8'h7f,8'hxx} : dec_pc_inc3 = 1'b1;  /* XOR,A,!addr16 */
                {8'h4a,8'hxx} : dec_pc_inc3 = 1'b1;  /* CMP,saddr,#byte */
                {8'h4f,8'hxx} : dec_pc_inc3 = 1'b1;  /* CMP,A,!addr16 */
                {8'h61,8'hde} : dec_pc_inc3 = 1'b1;  /* CMPS,X,[HL+byte] */
                {8'hd5,8'hxx} : dec_pc_inc3 = 1'b1;  /* CMP0,,!addr16 */
                {8'h04,8'hxx} : dec_pc_inc3 = 1'b1;  /* ADDW,AX,#word */
                {8'h02,8'hxx} : dec_pc_inc3 = 1'b1;  /* ADDW,AX,!addr16 */
                {8'h61,8'h09} : dec_pc_inc3 = 1'b1;  /* ADDW,AX,[HL+byte] */
                {8'h24,8'hxx} : dec_pc_inc3 = 1'b1;  /* SUBW,AX,#word */
                {8'h22,8'hxx} : dec_pc_inc3 = 1'b1;  /* SUBW,AX,!addr16 */
                {8'h61,8'h29} : dec_pc_inc3 = 1'b1;  /* SUBW,AX,[HL+byte] */
                {8'h44,8'hxx} : dec_pc_inc3 = 1'b1;  /* CMPW,AX,#word */
                {8'h42,8'hxx} : dec_pc_inc3 = 1'b1;  /* CMPW,AX,!addr16 */
                {8'h61,8'h49} : dec_pc_inc3 = 1'b1;  /* CMPW,AX,[HL+byte] */
                {8'ha0,8'hxx} : dec_pc_inc3 = 1'b1;  /* INC,,!addr16 */
                {8'h61,8'h59} : dec_pc_inc3 = 1'b1;  /* INC,,[HL+byte] */
                {8'hb0,8'hxx} : dec_pc_inc3 = 1'b1;  /* DEC,,!addr16 */
                {8'h61,8'h69} : dec_pc_inc3 = 1'b1;  /* DEC,,[HL+byte] */
                {8'ha2,8'hxx} : dec_pc_inc3 = 1'b1;  /* INCW,,!addr16 */
                {8'h61,8'h79} : dec_pc_inc3 = 1'b1;  /* INCW,,[HL+byte] */
                {8'hb2,8'hxx} : dec_pc_inc3 = 1'b1;  /* DECW,,!addr16 */
                {8'h61,8'h89} : dec_pc_inc3 = 1'b1;  /* DECW,,[HL+byte] */
                {8'h71,8'h04} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,saddr.0 */
                {8'h71,8'h14} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,saddr.1 */
                {8'h71,8'h24} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,saddr.2 */
                {8'h71,8'h34} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,saddr.3 */
                {8'h71,8'h44} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,saddr.4 */
                {8'h71,8'h54} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,saddr.5 */
                {8'h71,8'h64} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,saddr.6 */
                {8'h71,8'h74} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,saddr.7 */
                {8'h71,8'h0c} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,sfr.0 */
                {8'h71,8'h1c} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,sfr.1 */
                {8'h71,8'h2c} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,sfr.2 */
                {8'h71,8'h3c} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,sfr.3 */
                {8'h71,8'h4c} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,sfr.4 */
                {8'h71,8'h5c} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,sfr.5 */
                {8'h71,8'h6c} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,sfr.6 */
                {8'h71,8'h7c} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,sfr.7 */
                {8'h71,8'h01} : dec_pc_inc3 = 1'b1;  /* MOV1,saddr.0,CY */
                {8'h71,8'h11} : dec_pc_inc3 = 1'b1;  /* MOV1,saddr.1,CY */
                {8'h71,8'h21} : dec_pc_inc3 = 1'b1;  /* MOV1,saddr.2,CY */
                {8'h71,8'h31} : dec_pc_inc3 = 1'b1;  /* MOV1,saddr.3,CY */
                {8'h71,8'h41} : dec_pc_inc3 = 1'b1;  /* MOV1,saddr.4,CY */
                {8'h71,8'h51} : dec_pc_inc3 = 1'b1;  /* MOV1,saddr.5,CY */
                {8'h71,8'h61} : dec_pc_inc3 = 1'b1;  /* MOV1,saddr.6,CY */
                {8'h71,8'h71} : dec_pc_inc3 = 1'b1;  /* MOV1,saddr.7,CY */
                {8'h71,8'h09} : dec_pc_inc3 = 1'b1;  /* MOV1,sfr.0,CY */
                {8'h71,8'h19} : dec_pc_inc3 = 1'b1;  /* MOV1,sfr.1,CY */
                {8'h71,8'h29} : dec_pc_inc3 = 1'b1;  /* MOV1,sfr.2,CY */
                {8'h71,8'h39} : dec_pc_inc3 = 1'b1;  /* MOV1,sfr.3,CY */
                {8'h71,8'h49} : dec_pc_inc3 = 1'b1;  /* MOV1,sfr.4,CY */
                {8'h71,8'h59} : dec_pc_inc3 = 1'b1;  /* MOV1,sfr.5,CY */
                {8'h71,8'h69} : dec_pc_inc3 = 1'b1;  /* MOV1,sfr.6,CY */
                {8'h71,8'h79} : dec_pc_inc3 = 1'b1;  /* MOV1,sfr.7,CY */
                {8'h71,8'h05} : dec_pc_inc3 = 1'b1;  /* AND1,CY,saddr.0 */
                {8'h71,8'h15} : dec_pc_inc3 = 1'b1;  /* AND1,CY,saddr.1 */
                {8'h71,8'h25} : dec_pc_inc3 = 1'b1;  /* AND1,CY,saddr.2 */
                {8'h71,8'h35} : dec_pc_inc3 = 1'b1;  /* AND1,CY,saddr.3 */
                {8'h71,8'h45} : dec_pc_inc3 = 1'b1;  /* AND1,CY,saddr.4 */
                {8'h71,8'h55} : dec_pc_inc3 = 1'b1;  /* AND1,CY,saddr.5 */
                {8'h71,8'h65} : dec_pc_inc3 = 1'b1;  /* AND1,CY,saddr.6 */
                {8'h71,8'h75} : dec_pc_inc3 = 1'b1;  /* AND1,CY,saddr.7 */
                {8'h71,8'h0d} : dec_pc_inc3 = 1'b1;  /* AND1,CY,sfr.0 */
                {8'h71,8'h1d} : dec_pc_inc3 = 1'b1;  /* AND1,CY,sfr.1 */
                {8'h71,8'h2d} : dec_pc_inc3 = 1'b1;  /* AND1,CY,sfr.2 */
                {8'h71,8'h3d} : dec_pc_inc3 = 1'b1;  /* AND1,CY,sfr.3 */
                {8'h71,8'h4d} : dec_pc_inc3 = 1'b1;  /* AND1,CY,sfr.4 */
                {8'h71,8'h5d} : dec_pc_inc3 = 1'b1;  /* AND1,CY,sfr.5 */
                {8'h71,8'h6d} : dec_pc_inc3 = 1'b1;  /* AND1,CY,sfr.6 */
                {8'h71,8'h7d} : dec_pc_inc3 = 1'b1;  /* AND1,CY,sfr.7 */
                {8'h71,8'h06} : dec_pc_inc3 = 1'b1;  /* OR1,CY,saddr.0 */
                {8'h71,8'h16} : dec_pc_inc3 = 1'b1;  /* OR1,CY,saddr.1 */
                {8'h71,8'h26} : dec_pc_inc3 = 1'b1;  /* OR1,CY,saddr.2 */
                {8'h71,8'h36} : dec_pc_inc3 = 1'b1;  /* OR1,CY,saddr.3 */
                {8'h71,8'h46} : dec_pc_inc3 = 1'b1;  /* OR1,CY,saddr.4 */
                {8'h71,8'h56} : dec_pc_inc3 = 1'b1;  /* OR1,CY,saddr.5 */
                {8'h71,8'h66} : dec_pc_inc3 = 1'b1;  /* OR1,CY,saddr.6 */
                {8'h71,8'h76} : dec_pc_inc3 = 1'b1;  /* OR1,CY,saddr.7 */
                {8'h71,8'h0e} : dec_pc_inc3 = 1'b1;  /* OR1,CY,sfr.0 */
                {8'h71,8'h1e} : dec_pc_inc3 = 1'b1;  /* OR1,CY,sfr.1 */
                {8'h71,8'h2e} : dec_pc_inc3 = 1'b1;  /* OR1,CY,sfr.2 */
                {8'h71,8'h3e} : dec_pc_inc3 = 1'b1;  /* OR1,CY,sfr.3 */
                {8'h71,8'h4e} : dec_pc_inc3 = 1'b1;  /* OR1,CY,sfr.4 */
                {8'h71,8'h5e} : dec_pc_inc3 = 1'b1;  /* OR1,CY,sfr.5 */
                {8'h71,8'h6e} : dec_pc_inc3 = 1'b1;  /* OR1,CY,sfr.6 */
                {8'h71,8'h7e} : dec_pc_inc3 = 1'b1;  /* OR1,CY,sfr.7 */
                {8'h71,8'h07} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,saddr.0 */
                {8'h71,8'h17} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,saddr.1 */
                {8'h71,8'h27} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,saddr.2 */
                {8'h71,8'h37} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,saddr.3 */
                {8'h71,8'h47} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,saddr.4 */
                {8'h71,8'h57} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,saddr.5 */
                {8'h71,8'h67} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,saddr.6 */
                {8'h71,8'h77} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,saddr.7 */
                {8'h71,8'h0f} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,sfr.0 */
                {8'h71,8'h1f} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,sfr.1 */
                {8'h71,8'h2f} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,sfr.2 */
                {8'h71,8'h3f} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,sfr.3 */
                {8'h71,8'h4f} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,sfr.4 */
                {8'h71,8'h5f} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,sfr.5 */
                {8'h71,8'h6f} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,sfr.6 */
                {8'h71,8'h7f} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,sfr.7 */
                {8'h71,8'h02} : dec_pc_inc3 = 1'b1;  /* SET1,,saddr.0 */
                {8'h71,8'h12} : dec_pc_inc3 = 1'b1;  /* SET1,,saddr.1 */
                {8'h71,8'h22} : dec_pc_inc3 = 1'b1;  /* SET1,,saddr.2 */
                {8'h71,8'h32} : dec_pc_inc3 = 1'b1;  /* SET1,,saddr.3 */
                {8'h71,8'h42} : dec_pc_inc3 = 1'b1;  /* SET1,,saddr.4 */
                {8'h71,8'h52} : dec_pc_inc3 = 1'b1;  /* SET1,,saddr.5 */
                {8'h71,8'h62} : dec_pc_inc3 = 1'b1;  /* SET1,,saddr.6 */
                {8'h71,8'h72} : dec_pc_inc3 = 1'b1;  /* SET1,,saddr.7 */
                {8'h71,8'h0a} : dec_pc_inc3 = 1'b1;  /* SET1,,sfr.0 */
                {8'h71,8'h1a} : dec_pc_inc3 = 1'b1;  /* SET1,,sfr.1 */
                {8'h71,8'h2a} : dec_pc_inc3 = 1'b1;  /* SET1,,sfr.2 */
                {8'h71,8'h3a} : dec_pc_inc3 = 1'b1;  /* SET1,,sfr.3 */
                {8'h71,8'h4a} : dec_pc_inc3 = 1'b1;  /* SET1,,sfr.4 */
                {8'h71,8'h5a} : dec_pc_inc3 = 1'b1;  /* SET1,,sfr.5 */
                {8'h71,8'h6a} : dec_pc_inc3 = 1'b1;  /* SET1,,sfr.6 */
                {8'h71,8'h7a} : dec_pc_inc3 = 1'b1;  /* SET1,,sfr.7 */
                {8'h71,8'h03} : dec_pc_inc3 = 1'b1;  /* CLR1,,saddr.0 */
                {8'h71,8'h13} : dec_pc_inc3 = 1'b1;  /* CLR1,,saddr.1 */
                {8'h71,8'h23} : dec_pc_inc3 = 1'b1;  /* CLR1,,saddr.2 */
                {8'h71,8'h33} : dec_pc_inc3 = 1'b1;  /* CLR1,,saddr.3 */
                {8'h71,8'h43} : dec_pc_inc3 = 1'b1;  /* CLR1,,saddr.4 */
                {8'h71,8'h53} : dec_pc_inc3 = 1'b1;  /* CLR1,,saddr.5 */
                {8'h71,8'h63} : dec_pc_inc3 = 1'b1;  /* CLR1,,saddr.6 */
                {8'h71,8'h73} : dec_pc_inc3 = 1'b1;  /* CLR1,,saddr.7 */
                {8'h71,8'h0b} : dec_pc_inc3 = 1'b1;  /* CLR1,,sfr.0 */
                {8'h71,8'h1b} : dec_pc_inc3 = 1'b1;  /* CLR1,,sfr.1 */
                {8'h71,8'h2b} : dec_pc_inc3 = 1'b1;  /* CLR1,,sfr.2 */
                {8'h71,8'h3b} : dec_pc_inc3 = 1'b1;  /* CLR1,,sfr.3 */
                {8'h71,8'h4b} : dec_pc_inc3 = 1'b1;  /* CLR1,,sfr.4 */
                {8'h71,8'h5b} : dec_pc_inc3 = 1'b1;  /* CLR1,,sfr.5 */
                {8'h71,8'h6b} : dec_pc_inc3 = 1'b1;  /* CLR1,,sfr.6 */
                {8'h71,8'h7b} : dec_pc_inc3 = 1'b1;  /* CLR1,,sfr.7 */
                {8'hfe,8'hxx} : dec_pc_inc3 = 1'b1;  /* CALL,,$!addr16 */
                {8'hfd,8'hxx} : dec_pc_inc3 = 1'b1;  /* CALL,,!addr16 */
                {8'hed,8'hxx} : dec_pc_inc3 = 1'b1;  /* BR,,!addr16 */
                {8'hee,8'hxx} : dec_pc_inc3 = 1'b1;  /* BR,,$!addr16 */
                {8'h61,8'hc3} : dec_pc_inc3 = 1'b1;  /* BH,,$addr8 */
                {8'h61,8'hd3} : dec_pc_inc3 = 1'b1;  /* BNH,,$addr8 */
                {8'h31,8'h03} : dec_pc_inc3 = 1'b1;  /* BT,A.0,$addr8 */
                {8'h31,8'h13} : dec_pc_inc3 = 1'b1;  /* BT,A.1,$addr8 */
                {8'h31,8'h23} : dec_pc_inc3 = 1'b1;  /* BT,A.2,$addr8 */
                {8'h31,8'h33} : dec_pc_inc3 = 1'b1;  /* BT,A.3,$addr8 */
                {8'h31,8'h43} : dec_pc_inc3 = 1'b1;  /* BT,A.4,$addr8 */
                {8'h31,8'h53} : dec_pc_inc3 = 1'b1;  /* BT,A.5,$addr8 */
                {8'h31,8'h63} : dec_pc_inc3 = 1'b1;  /* BT,A.6,$addr8 */
                {8'h31,8'h73} : dec_pc_inc3 = 1'b1;  /* BT,A.7,$addr8 */
                {8'h31,8'h83} : dec_pc_inc3 = 1'b1;  /* BT,[HL].0,$addr8 */
                {8'h31,8'h93} : dec_pc_inc3 = 1'b1;  /* BT,[HL].1,$addr8 */
                {8'h31,8'ha3} : dec_pc_inc3 = 1'b1;  /* BT,[HL].2,$addr8 */
                {8'h31,8'hb3} : dec_pc_inc3 = 1'b1;  /* BT,[HL].3,$addr8 */
                {8'h31,8'hc3} : dec_pc_inc3 = 1'b1;  /* BT,[HL].4,$addr8 */
                {8'h31,8'hd3} : dec_pc_inc3 = 1'b1;  /* BT,[HL].5,$addr8 */
                {8'h31,8'he3} : dec_pc_inc3 = 1'b1;  /* BT,[HL].6,$addr8 */
                {8'h31,8'hf3} : dec_pc_inc3 = 1'b1;  /* BT,[HL].7,$addr8 */
                {8'h31,8'h05} : dec_pc_inc3 = 1'b1;  /* BF,A.0,$addr8 */
                {8'h31,8'h15} : dec_pc_inc3 = 1'b1;  /* BF,A.1,$addr8 */
                {8'h31,8'h25} : dec_pc_inc3 = 1'b1;  /* BF,A.2,$addr8 */
                {8'h31,8'h35} : dec_pc_inc3 = 1'b1;  /* BF,A.3,$addr8 */
                {8'h31,8'h45} : dec_pc_inc3 = 1'b1;  /* BF,A.4,$addr8 */
                {8'h31,8'h55} : dec_pc_inc3 = 1'b1;  /* BF,A.5,$addr8 */
                {8'h31,8'h65} : dec_pc_inc3 = 1'b1;  /* BF,A.6,$addr8 */
                {8'h31,8'h75} : dec_pc_inc3 = 1'b1;  /* BF,A.7,$addr8 */
                {8'h31,8'h85} : dec_pc_inc3 = 1'b1;  /* BF,[HL].0,$addr8 */
                {8'h31,8'h95} : dec_pc_inc3 = 1'b1;  /* BF,[HL].1,$addr8 */
                {8'h31,8'ha5} : dec_pc_inc3 = 1'b1;  /* BF,[HL].2,$addr8 */
                {8'h31,8'hb5} : dec_pc_inc3 = 1'b1;  /* BF,[HL].3,$addr8 */
                {8'h31,8'hc5} : dec_pc_inc3 = 1'b1;  /* BF,[HL].4,$addr8 */
                {8'h31,8'hd5} : dec_pc_inc3 = 1'b1;  /* BF,[HL].5,$addr8 */
                {8'h31,8'he5} : dec_pc_inc3 = 1'b1;  /* BF,[HL].6,$addr8 */
                {8'h31,8'hf5} : dec_pc_inc3 = 1'b1;  /* BF,[HL].7,$addr8 */
                {8'h31,8'h01} : dec_pc_inc3 = 1'b1;  /* BTCLR,A.0,$addr8 */
                {8'h31,8'h11} : dec_pc_inc3 = 1'b1;  /* BTCLR,A.1,$addr8 */
                {8'h31,8'h21} : dec_pc_inc3 = 1'b1;  /* BTCLR,A.2,$addr8 */
                {8'h31,8'h31} : dec_pc_inc3 = 1'b1;  /* BTCLR,A.3,$addr8 */
                {8'h31,8'h41} : dec_pc_inc3 = 1'b1;  /* BTCLR,A.4,$addr8 */
                {8'h31,8'h51} : dec_pc_inc3 = 1'b1;  /* BTCLR,A.5,$addr8 */
                {8'h31,8'h61} : dec_pc_inc3 = 1'b1;  /* BTCLR,A.6,$addr8 */
                {8'h31,8'h71} : dec_pc_inc3 = 1'b1;  /* BTCLR,A.7,$addr8 */
                {8'h31,8'h81} : dec_pc_inc3 = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                {8'h31,8'h91} : dec_pc_inc3 = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                {8'h31,8'ha1} : dec_pc_inc3 = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                {8'h31,8'hb1} : dec_pc_inc3 = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                {8'h31,8'hc1} : dec_pc_inc3 = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                {8'h31,8'hd1} : dec_pc_inc3 = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                {8'h31,8'he1} : dec_pc_inc3 = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                {8'h31,8'hf1} : dec_pc_inc3 = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                {8'h61,8'hb1} : dec_pc_inc3 = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hbb} : dec_pc_inc3 = 1'b1;  /* XCH,A,sfr */
                {8'h61,8'hbf} : dec_pc_inc3 = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'hbd} : dec_pc_inc3 = 1'b1;  /* XCH,A,[HL+byte] */
                default : dec_pc_inc3 = 1'b0;
            endcase
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hcd,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,saddr,#byte */
                {8'hce,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,sfr,#byte */
                {8'hca,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,[DE+byte],#byte */
                {8'hcc,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,[HL+byte],#byte */
                {8'h8f,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,A,!addr16 */
                {8'h9f,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,!addr16,A */
                {8'h09,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,A,word[B] */
                {8'h18,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,word[B],A */
                {8'h29,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,A,word[C] */
                {8'h28,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,word[C],A */
                {8'h49,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,A,word[BC] */
                {8'h48,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,word[BC],A */
                {8'hc8,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,[SP+byte],#byte */
                {8'he9,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,B,!addr16 */
                {8'hf9,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,C,!addr16 */
                {8'hd9,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,X,!addr16 */
                {8'h61,8'hb8,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV,ES,saddr */
                {8'h61,8'hce,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOVS,[HL+byte],X */
                {8'h61,8'ha8,2'bx1} : dec_pc_inc3 = 1'b1;  /* XCH,A,saddr */
                {8'h61,8'hab,2'bx1} : dec_pc_inc3 = 1'b1;  /* XCH,A,sfr */
                {8'h61,8'haf,2'bx1} : dec_pc_inc3 = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'had,2'bx1} : dec_pc_inc3 = 1'b1;  /* XCH,A,[HL+byte] */
                {8'he5,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* ONEB,,!addr16 */
                {8'hf5,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* CLRB,,!addr16 */
                {8'h30,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOVW,AX,#word */
                {8'h32,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOVW,BC,#word */
                {8'h34,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOVW,DE,#word */
                {8'h36,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOVW,HL,#word */
                {8'haf,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOVW,AX,!addr16 */
                {8'hbf,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOVW,!addr16,AX */
                {8'h59,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOVW,AX,word[B] */
                {8'h58,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOVW,word[B],AX */
                {8'h69,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOVW,AX,word[C] */
                {8'h68,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOVW,word[C],AX */
                {8'h79,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOVW,AX,word[BC] */
                {8'h78,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOVW,word[BC],AX */
                {8'hdb,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOVW,BC,!addr16 */
                {8'heb,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOVW,DE,!addr16 */
                {8'hfb,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOVW,HL,!addr16 */
                {8'h0a,8'hxx,2'bx1} : dec_pc_inc3 = 1'b1;  /* ADD,saddr,#byte */
                {8'h0f,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* ADD,A,!addr16 */
                {8'h1a,8'hxx,2'bx1} : dec_pc_inc3 = 1'b1;  /* ADDC,saddr,#byte */
                {8'h1f,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* ADDC,A,!addr16 */
                {8'h2a,8'hxx,2'bx1} : dec_pc_inc3 = 1'b1;  /* SUB,saddr,#byte */
                {8'h2f,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* SUB,A,!addr16 */
                {8'h3a,8'hxx,2'bx1} : dec_pc_inc3 = 1'b1;  /* SUBC,saddr,#byte */
                {8'h3f,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* SUBC,A,!addr16 */
                {8'h5a,8'hxx,2'bx1} : dec_pc_inc3 = 1'b1;  /* AND,saddr,#byte */
                {8'h5f,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND,A,!addr16 */
                {8'h6a,8'hxx,2'bx1} : dec_pc_inc3 = 1'b1;  /* OR,saddr,#byte */
                {8'h6f,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR,A,!addr16 */
                {8'h7a,8'hxx,2'bx1} : dec_pc_inc3 = 1'b1;  /* XOR,saddr,#byte */
                {8'h7f,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR,A,!addr16 */
                {8'h4a,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* CMP,saddr,#byte */
                {8'h4f,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* CMP,A,!addr16 */
                {8'h61,8'hde,2'bxx} : dec_pc_inc3 = 1'b1;  /* CMPS,X,[HL+byte] */
                {8'hd5,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* CMP0,,!addr16 */
                {8'h04,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* ADDW,AX,#word */
                {8'h02,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* ADDW,AX,!addr16 */
                {8'h61,8'h09,2'bxx} : dec_pc_inc3 = 1'b1;  /* ADDW,AX,[HL+byte] */
                {8'h24,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* SUBW,AX,#word */
                {8'h22,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* SUBW,AX,!addr16 */
                {8'h61,8'h29,2'bxx} : dec_pc_inc3 = 1'b1;  /* SUBW,AX,[HL+byte] */
                {8'h44,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* CMPW,AX,#word */
                {8'h42,8'hxx,2'bxx} : dec_pc_inc3 = 1'b1;  /* CMPW,AX,!addr16 */
                {8'h61,8'h49,2'bxx} : dec_pc_inc3 = 1'b1;  /* CMPW,AX,[HL+byte] */
                {8'ha0,8'hxx,2'bx1} : dec_pc_inc3 = 1'b1;  /* INC,,!addr16 */
                {8'h61,8'h59,2'bx1} : dec_pc_inc3 = 1'b1;  /* INC,,[HL+byte] */
                {8'hb0,8'hxx,2'bx1} : dec_pc_inc3 = 1'b1;  /* DEC,,!addr16 */
                {8'h61,8'h69,2'bx1} : dec_pc_inc3 = 1'b1;  /* DEC,,[HL+byte] */
                {8'ha2,8'hxx,2'bx1} : dec_pc_inc3 = 1'b1;  /* INCW,,!addr16 */
                {8'h61,8'h79,2'bx1} : dec_pc_inc3 = 1'b1;  /* INCW,,[HL+byte] */
                {8'hb2,8'hxx,2'bx1} : dec_pc_inc3 = 1'b1;  /* DECW,,!addr16 */
                {8'h61,8'h89,2'bx1} : dec_pc_inc3 = 1'b1;  /* DECW,,[HL+byte] */
                {8'h71,8'h04,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,saddr.0 */
                {8'h71,8'h14,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,saddr.1 */
                {8'h71,8'h24,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,saddr.2 */
                {8'h71,8'h34,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,saddr.3 */
                {8'h71,8'h44,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,saddr.4 */
                {8'h71,8'h54,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,saddr.5 */
                {8'h71,8'h64,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,saddr.6 */
                {8'h71,8'h74,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,saddr.7 */
                {8'h71,8'h0c,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,sfr.0 */
                {8'h71,8'h1c,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,sfr.1 */
                {8'h71,8'h2c,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,sfr.2 */
                {8'h71,8'h3c,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,sfr.3 */
                {8'h71,8'h4c,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,sfr.4 */
                {8'h71,8'h5c,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,sfr.5 */
                {8'h71,8'h6c,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,sfr.6 */
                {8'h71,8'h7c,2'bxx} : dec_pc_inc3 = 1'b1;  /* MOV1,CY,sfr.7 */
                {8'h71,8'h01,2'bx1} : dec_pc_inc3 = 1'b1;  /* MOV1,saddr.0,CY */
                {8'h71,8'h11,2'bx1} : dec_pc_inc3 = 1'b1;  /* MOV1,saddr.1,CY */
                {8'h71,8'h21,2'bx1} : dec_pc_inc3 = 1'b1;  /* MOV1,saddr.2,CY */
                {8'h71,8'h31,2'bx1} : dec_pc_inc3 = 1'b1;  /* MOV1,saddr.3,CY */
                {8'h71,8'h41,2'bx1} : dec_pc_inc3 = 1'b1;  /* MOV1,saddr.4,CY */
                {8'h71,8'h51,2'bx1} : dec_pc_inc3 = 1'b1;  /* MOV1,saddr.5,CY */
                {8'h71,8'h61,2'bx1} : dec_pc_inc3 = 1'b1;  /* MOV1,saddr.6,CY */
                {8'h71,8'h71,2'bx1} : dec_pc_inc3 = 1'b1;  /* MOV1,saddr.7,CY */
                {8'h71,8'h09,2'bx1} : dec_pc_inc3 = 1'b1;  /* MOV1,sfr.0,CY */
                {8'h71,8'h19,2'bx1} : dec_pc_inc3 = 1'b1;  /* MOV1,sfr.1,CY */
                {8'h71,8'h29,2'bx1} : dec_pc_inc3 = 1'b1;  /* MOV1,sfr.2,CY */
                {8'h71,8'h39,2'bx1} : dec_pc_inc3 = 1'b1;  /* MOV1,sfr.3,CY */
                {8'h71,8'h49,2'bx1} : dec_pc_inc3 = 1'b1;  /* MOV1,sfr.4,CY */
                {8'h71,8'h59,2'bx1} : dec_pc_inc3 = 1'b1;  /* MOV1,sfr.5,CY */
                {8'h71,8'h69,2'bx1} : dec_pc_inc3 = 1'b1;  /* MOV1,sfr.6,CY */
                {8'h71,8'h79,2'bx1} : dec_pc_inc3 = 1'b1;  /* MOV1,sfr.7,CY */
                {8'h71,8'h05,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND1,CY,saddr.0 */
                {8'h71,8'h15,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND1,CY,saddr.1 */
                {8'h71,8'h25,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND1,CY,saddr.2 */
                {8'h71,8'h35,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND1,CY,saddr.3 */
                {8'h71,8'h45,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND1,CY,saddr.4 */
                {8'h71,8'h55,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND1,CY,saddr.5 */
                {8'h71,8'h65,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND1,CY,saddr.6 */
                {8'h71,8'h75,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND1,CY,saddr.7 */
                {8'h71,8'h0d,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND1,CY,sfr.0 */
                {8'h71,8'h1d,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND1,CY,sfr.1 */
                {8'h71,8'h2d,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND1,CY,sfr.2 */
                {8'h71,8'h3d,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND1,CY,sfr.3 */
                {8'h71,8'h4d,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND1,CY,sfr.4 */
                {8'h71,8'h5d,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND1,CY,sfr.5 */
                {8'h71,8'h6d,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND1,CY,sfr.6 */
                {8'h71,8'h7d,2'bxx} : dec_pc_inc3 = 1'b1;  /* AND1,CY,sfr.7 */
                {8'h71,8'h06,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR1,CY,saddr.0 */
                {8'h71,8'h16,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR1,CY,saddr.1 */
                {8'h71,8'h26,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR1,CY,saddr.2 */
                {8'h71,8'h36,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR1,CY,saddr.3 */
                {8'h71,8'h46,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR1,CY,saddr.4 */
                {8'h71,8'h56,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR1,CY,saddr.5 */
                {8'h71,8'h66,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR1,CY,saddr.6 */
                {8'h71,8'h76,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR1,CY,saddr.7 */
                {8'h71,8'h0e,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR1,CY,sfr.0 */
                {8'h71,8'h1e,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR1,CY,sfr.1 */
                {8'h71,8'h2e,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR1,CY,sfr.2 */
                {8'h71,8'h3e,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR1,CY,sfr.3 */
                {8'h71,8'h4e,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR1,CY,sfr.4 */
                {8'h71,8'h5e,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR1,CY,sfr.5 */
                {8'h71,8'h6e,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR1,CY,sfr.6 */
                {8'h71,8'h7e,2'bxx} : dec_pc_inc3 = 1'b1;  /* OR1,CY,sfr.7 */
                {8'h71,8'h07,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,saddr.0 */
                {8'h71,8'h17,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,saddr.1 */
                {8'h71,8'h27,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,saddr.2 */
                {8'h71,8'h37,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,saddr.3 */
                {8'h71,8'h47,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,saddr.4 */
                {8'h71,8'h57,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,saddr.5 */
                {8'h71,8'h67,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,saddr.6 */
                {8'h71,8'h77,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,saddr.7 */
                {8'h71,8'h0f,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,sfr.0 */
                {8'h71,8'h1f,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,sfr.1 */
                {8'h71,8'h2f,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,sfr.2 */
                {8'h71,8'h3f,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,sfr.3 */
                {8'h71,8'h4f,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,sfr.4 */
                {8'h71,8'h5f,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,sfr.5 */
                {8'h71,8'h6f,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,sfr.6 */
                {8'h71,8'h7f,2'bxx} : dec_pc_inc3 = 1'b1;  /* XOR1,CY,sfr.7 */
                {8'h71,8'h02,2'bx1} : dec_pc_inc3 = 1'b1;  /* SET1,,saddr.0 */
                {8'h71,8'h12,2'bx1} : dec_pc_inc3 = 1'b1;  /* SET1,,saddr.1 */
                {8'h71,8'h22,2'bx1} : dec_pc_inc3 = 1'b1;  /* SET1,,saddr.2 */
                {8'h71,8'h32,2'bx1} : dec_pc_inc3 = 1'b1;  /* SET1,,saddr.3 */
                {8'h71,8'h42,2'bx1} : dec_pc_inc3 = 1'b1;  /* SET1,,saddr.4 */
                {8'h71,8'h52,2'bx1} : dec_pc_inc3 = 1'b1;  /* SET1,,saddr.5 */
                {8'h71,8'h62,2'bx1} : dec_pc_inc3 = 1'b1;  /* SET1,,saddr.6 */
                {8'h71,8'h72,2'bx1} : dec_pc_inc3 = 1'b1;  /* SET1,,saddr.7 */
                {8'h71,8'h0a,2'bx1} : dec_pc_inc3 = 1'b1;  /* SET1,,sfr.0 */
                {8'h71,8'h1a,2'bx1} : dec_pc_inc3 = 1'b1;  /* SET1,,sfr.1 */
                {8'h71,8'h2a,2'bx1} : dec_pc_inc3 = 1'b1;  /* SET1,,sfr.2 */
                {8'h71,8'h3a,2'bx1} : dec_pc_inc3 = 1'b1;  /* SET1,,sfr.3 */
                {8'h71,8'h4a,2'bx1} : dec_pc_inc3 = 1'b1;  /* SET1,,sfr.4 */
                {8'h71,8'h5a,2'bx1} : dec_pc_inc3 = 1'b1;  /* SET1,,sfr.5 */
                {8'h71,8'h6a,2'bx1} : dec_pc_inc3 = 1'b1;  /* SET1,,sfr.6 */
                {8'h71,8'h7a,2'bx1} : dec_pc_inc3 = 1'b1;  /* SET1,,sfr.7 */
                {8'h71,8'h03,2'bx1} : dec_pc_inc3 = 1'b1;  /* CLR1,,saddr.0 */
                {8'h71,8'h13,2'bx1} : dec_pc_inc3 = 1'b1;  /* CLR1,,saddr.1 */
                {8'h71,8'h23,2'bx1} : dec_pc_inc3 = 1'b1;  /* CLR1,,saddr.2 */
                {8'h71,8'h33,2'bx1} : dec_pc_inc3 = 1'b1;  /* CLR1,,saddr.3 */
                {8'h71,8'h43,2'bx1} : dec_pc_inc3 = 1'b1;  /* CLR1,,saddr.4 */
                {8'h71,8'h53,2'bx1} : dec_pc_inc3 = 1'b1;  /* CLR1,,saddr.5 */
                {8'h71,8'h63,2'bx1} : dec_pc_inc3 = 1'b1;  /* CLR1,,saddr.6 */
                {8'h71,8'h73,2'bx1} : dec_pc_inc3 = 1'b1;  /* CLR1,,saddr.7 */
                {8'h71,8'h0b,2'bx1} : dec_pc_inc3 = 1'b1;  /* CLR1,,sfr.0 */
                {8'h71,8'h1b,2'bx1} : dec_pc_inc3 = 1'b1;  /* CLR1,,sfr.1 */
                {8'h71,8'h2b,2'bx1} : dec_pc_inc3 = 1'b1;  /* CLR1,,sfr.2 */
                {8'h71,8'h3b,2'bx1} : dec_pc_inc3 = 1'b1;  /* CLR1,,sfr.3 */
                {8'h71,8'h4b,2'bx1} : dec_pc_inc3 = 1'b1;  /* CLR1,,sfr.4 */
                {8'h71,8'h5b,2'bx1} : dec_pc_inc3 = 1'b1;  /* CLR1,,sfr.5 */
                {8'h71,8'h6b,2'bx1} : dec_pc_inc3 = 1'b1;  /* CLR1,,sfr.6 */
                {8'h71,8'h7b,2'bx1} : dec_pc_inc3 = 1'b1;  /* CLR1,,sfr.7 */
                {8'hfe,8'hxx,2'bx0} : dec_pc_inc3 = 1'b1;  /* CALL,,$!addr16 */
                {8'hfd,8'hxx,2'bx0} : dec_pc_inc3 = 1'b1;  /* CALL,,!addr16 */
                {8'hee,8'hxx,2'bx0} : dec_pc_inc3 = 1'b1;  /* BR,,$!addr16 */
                {8'h61,8'hc3,2'bx1} : dec_pc_inc3 = 1'b1;  /* BH,,$addr8 */
                {8'h61,8'hd3,2'bx1} : dec_pc_inc3 = 1'b1;  /* BNH,,$addr8 */
                {8'h31,8'h03,2'b10} : dec_pc_inc3 = 1'b1;  /* BT,A.0,$addr8 */
                {8'h31,8'h13,2'b10} : dec_pc_inc3 = 1'b1;  /* BT,A.1,$addr8 */
                {8'h31,8'h23,2'b10} : dec_pc_inc3 = 1'b1;  /* BT,A.2,$addr8 */
                {8'h31,8'h33,2'b10} : dec_pc_inc3 = 1'b1;  /* BT,A.3,$addr8 */
                {8'h31,8'h43,2'b10} : dec_pc_inc3 = 1'b1;  /* BT,A.4,$addr8 */
                {8'h31,8'h53,2'b10} : dec_pc_inc3 = 1'b1;  /* BT,A.5,$addr8 */
                {8'h31,8'h63,2'b10} : dec_pc_inc3 = 1'b1;  /* BT,A.6,$addr8 */
                {8'h31,8'h73,2'b10} : dec_pc_inc3 = 1'b1;  /* BT,A.7,$addr8 */
                {8'h31,8'h83,2'b10} : dec_pc_inc3 = 1'b1;  /* BT,[HL].0,$addr8 */
                {8'h31,8'h93,2'b10} : dec_pc_inc3 = 1'b1;  /* BT,[HL].1,$addr8 */
                {8'h31,8'ha3,2'b10} : dec_pc_inc3 = 1'b1;  /* BT,[HL].2,$addr8 */
                {8'h31,8'hb3,2'b10} : dec_pc_inc3 = 1'b1;  /* BT,[HL].3,$addr8 */
                {8'h31,8'hc3,2'b10} : dec_pc_inc3 = 1'b1;  /* BT,[HL].4,$addr8 */
                {8'h31,8'hd3,2'b10} : dec_pc_inc3 = 1'b1;  /* BT,[HL].5,$addr8 */
                {8'h31,8'he3,2'b10} : dec_pc_inc3 = 1'b1;  /* BT,[HL].6,$addr8 */
                {8'h31,8'hf3,2'b10} : dec_pc_inc3 = 1'b1;  /* BT,[HL].7,$addr8 */
                {8'h31,8'h05,2'b10} : dec_pc_inc3 = 1'b1;  /* BF,A.0,$addr8 */
                {8'h31,8'h15,2'b10} : dec_pc_inc3 = 1'b1;  /* BF,A.1,$addr8 */
                {8'h31,8'h25,2'b10} : dec_pc_inc3 = 1'b1;  /* BF,A.2,$addr8 */
                {8'h31,8'h35,2'b10} : dec_pc_inc3 = 1'b1;  /* BF,A.3,$addr8 */
                {8'h31,8'h45,2'b10} : dec_pc_inc3 = 1'b1;  /* BF,A.4,$addr8 */
                {8'h31,8'h55,2'b10} : dec_pc_inc3 = 1'b1;  /* BF,A.5,$addr8 */
                {8'h31,8'h65,2'b10} : dec_pc_inc3 = 1'b1;  /* BF,A.6,$addr8 */
                {8'h31,8'h75,2'b10} : dec_pc_inc3 = 1'b1;  /* BF,A.7,$addr8 */
                {8'h31,8'h85,2'b10} : dec_pc_inc3 = 1'b1;  /* BF,[HL].0,$addr8 */
                {8'h31,8'h95,2'b10} : dec_pc_inc3 = 1'b1;  /* BF,[HL].1,$addr8 */
                {8'h31,8'ha5,2'b10} : dec_pc_inc3 = 1'b1;  /* BF,[HL].2,$addr8 */
                {8'h31,8'hb5,2'b10} : dec_pc_inc3 = 1'b1;  /* BF,[HL].3,$addr8 */
                {8'h31,8'hc5,2'b10} : dec_pc_inc3 = 1'b1;  /* BF,[HL].4,$addr8 */
                {8'h31,8'hd5,2'b10} : dec_pc_inc3 = 1'b1;  /* BF,[HL].5,$addr8 */
                {8'h31,8'he5,2'b10} : dec_pc_inc3 = 1'b1;  /* BF,[HL].6,$addr8 */
                {8'h31,8'hf5,2'b10} : dec_pc_inc3 = 1'b1;  /* BF,[HL].7,$addr8 */
                {8'h31,8'h01,2'b10} : dec_pc_inc3 = 1'b1;  /* BTCLR,A.0,$addr8 */
                {8'h31,8'h11,2'b10} : dec_pc_inc3 = 1'b1;  /* BTCLR,A.1,$addr8 */
                {8'h31,8'h21,2'b10} : dec_pc_inc3 = 1'b1;  /* BTCLR,A.2,$addr8 */
                {8'h31,8'h31,2'b10} : dec_pc_inc3 = 1'b1;  /* BTCLR,A.3,$addr8 */
                {8'h31,8'h41,2'b10} : dec_pc_inc3 = 1'b1;  /* BTCLR,A.4,$addr8 */
                {8'h31,8'h51,2'b10} : dec_pc_inc3 = 1'b1;  /* BTCLR,A.5,$addr8 */
                {8'h31,8'h61,2'b10} : dec_pc_inc3 = 1'b1;  /* BTCLR,A.6,$addr8 */
                {8'h31,8'h71,2'b10} : dec_pc_inc3 = 1'b1;  /* BTCLR,A.7,$addr8 */
                {8'h31,8'h81,2'b10} : dec_pc_inc3 = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                {8'h31,8'h91,2'b10} : dec_pc_inc3 = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                {8'h31,8'ha1,2'b10} : dec_pc_inc3 = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                {8'h31,8'hb1,2'b10} : dec_pc_inc3 = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                {8'h31,8'hc1,2'b10} : dec_pc_inc3 = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                {8'h31,8'hd1,2'b10} : dec_pc_inc3 = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                {8'h31,8'he1,2'b10} : dec_pc_inc3 = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                {8'h31,8'hf1,2'b10} : dec_pc_inc3 = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                {8'h61,8'hb1,2'bx0} : dec_pc_inc3 = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hbb,2'bx1} : dec_pc_inc3 = 1'b1;  /* XCH,A,sfr */
                {8'h61,8'hbf,2'bx1} : dec_pc_inc3 = 1'b1;  /* XCH,A,[DE+byte] */
                {8'h61,8'hbd,2'bx1} : dec_pc_inc3 = 1'b1;  /* XCH,A,[HL+byte] */
                default : dec_pc_inc3 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_inc4;
    reg    dec_pc_inc4;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1) begin
            dec_pc_inc4 = 1'b0;
        end else if(skpack == 1'b1) begin
            casex ({ID_stage0,ID_stage1})  
                {8'hcf,8'hxx} : dec_pc_inc4 = 1'b1;  /* MOV,!addr16,#byte */
                {8'h19,8'hxx} : dec_pc_inc4 = 1'b1;  /* MOV,word[B],#byte */
                {8'h38,8'hxx} : dec_pc_inc4 = 1'b1;  /* MOV,word[C],#byte */
                {8'h39,8'hxx} : dec_pc_inc4 = 1'b1;  /* MOV,word[BC],#byte */
                {8'h61,8'haa} : dec_pc_inc4 = 1'b1;  /* XCH,A,!addr16 */
                {8'hc9,8'hxx} : dec_pc_inc4 = 1'b1;  /* MOVW,saddrp,#word */
                {8'hcb,8'hxx} : dec_pc_inc4 = 1'b1;  /* MOVW,sfrp,#word */
                {8'h40,8'hxx} : dec_pc_inc4 = 1'b1;  /* CMP,!addr16,#byte */
                {8'h71,8'h00} : dec_pc_inc4 = 1'b1;  /* SET1,,!addr16.0 */
                {8'h71,8'h10} : dec_pc_inc4 = 1'b1;  /* SET1,,!addr16.1 */
                {8'h71,8'h20} : dec_pc_inc4 = 1'b1;  /* SET1,,!addr16.2 */
                {8'h71,8'h30} : dec_pc_inc4 = 1'b1;  /* SET1,,!addr16.3 */
                {8'h71,8'h40} : dec_pc_inc4 = 1'b1;  /* SET1,,!addr16.4 */
                {8'h71,8'h50} : dec_pc_inc4 = 1'b1;  /* SET1,,!addr16.5 */
                {8'h71,8'h60} : dec_pc_inc4 = 1'b1;  /* SET1,,!addr16.6 */
                {8'h71,8'h70} : dec_pc_inc4 = 1'b1;  /* SET1,,!addr16.7 */
                {8'h71,8'h08} : dec_pc_inc4 = 1'b1;  /* CLR1,,!addr16.0 */
                {8'h71,8'h18} : dec_pc_inc4 = 1'b1;  /* CLR1,,!addr16.1 */
                {8'h71,8'h28} : dec_pc_inc4 = 1'b1;  /* CLR1,,!addr16.2 */
                {8'h71,8'h38} : dec_pc_inc4 = 1'b1;  /* CLR1,,!addr16.3 */
                {8'h71,8'h48} : dec_pc_inc4 = 1'b1;  /* CLR1,,!addr16.4 */
                {8'h71,8'h58} : dec_pc_inc4 = 1'b1;  /* CLR1,,!addr16.5 */
                {8'h71,8'h68} : dec_pc_inc4 = 1'b1;  /* CLR1,,!addr16.6 */
                {8'h71,8'h78} : dec_pc_inc4 = 1'b1;  /* CLR1,,!addr16.7 */
                {8'hfc,8'hxx} : dec_pc_inc4 = 1'b1;  /* CALL,,!!addr20 */
                {8'hec,8'hxx} : dec_pc_inc4 = 1'b1;  /* BR,,!!addr20 */
                {8'h31,8'h02} : dec_pc_inc4 = 1'b1;  /* BT,saddr.0,$addr8 */
                {8'h31,8'h12} : dec_pc_inc4 = 1'b1;  /* BT,saddr.1,$addr8 */
                {8'h31,8'h22} : dec_pc_inc4 = 1'b1;  /* BT,saddr.2,$addr8 */
                {8'h31,8'h32} : dec_pc_inc4 = 1'b1;  /* BT,saddr.3,$addr8 */
                {8'h31,8'h42} : dec_pc_inc4 = 1'b1;  /* BT,saddr.4,$addr8 */
                {8'h31,8'h52} : dec_pc_inc4 = 1'b1;  /* BT,saddr.5,$addr8 */
                {8'h31,8'h62} : dec_pc_inc4 = 1'b1;  /* BT,saddr.6,$addr8 */
                {8'h31,8'h72} : dec_pc_inc4 = 1'b1;  /* BT,saddr.7,$addr8 */
                {8'h31,8'h82} : dec_pc_inc4 = 1'b1;  /* BT,sfr.0,$addr8 */
                {8'h31,8'h92} : dec_pc_inc4 = 1'b1;  /* BT,sfr.1,$addr8 */
                {8'h31,8'ha2} : dec_pc_inc4 = 1'b1;  /* BT,sfr.2,$addr8 */
                {8'h31,8'hb2} : dec_pc_inc4 = 1'b1;  /* BT,sfr.3,$addr8 */
                {8'h31,8'hc2} : dec_pc_inc4 = 1'b1;  /* BT,sfr.4,$addr8 */
                {8'h31,8'hd2} : dec_pc_inc4 = 1'b1;  /* BT,sfr.5,$addr8 */
                {8'h31,8'he2} : dec_pc_inc4 = 1'b1;  /* BT,sfr.6,$addr8 */
                {8'h31,8'hf2} : dec_pc_inc4 = 1'b1;  /* BT,sfr.7,$addr8 */
                {8'h31,8'h04} : dec_pc_inc4 = 1'b1;  /* BF,saddr.0,$addr8 */
                {8'h31,8'h14} : dec_pc_inc4 = 1'b1;  /* BF,saddr.1,$addr8 */
                {8'h31,8'h24} : dec_pc_inc4 = 1'b1;  /* BF,saddr.2,$addr8 */
                {8'h31,8'h34} : dec_pc_inc4 = 1'b1;  /* BF,saddr.3,$addr8 */
                {8'h31,8'h44} : dec_pc_inc4 = 1'b1;  /* BF,saddr.4,$addr8 */
                {8'h31,8'h54} : dec_pc_inc4 = 1'b1;  /* BF,saddr.5,$addr8 */
                {8'h31,8'h64} : dec_pc_inc4 = 1'b1;  /* BF,saddr.6,$addr8 */
                {8'h31,8'h74} : dec_pc_inc4 = 1'b1;  /* BF,saddr.7,$addr8 */
                {8'h31,8'h84} : dec_pc_inc4 = 1'b1;  /* BF,sfr.0,$addr8 */
                {8'h31,8'h94} : dec_pc_inc4 = 1'b1;  /* BF,sfr.1,$addr8 */
                {8'h31,8'ha4} : dec_pc_inc4 = 1'b1;  /* BF,sfr.2,$addr8 */
                {8'h31,8'hb4} : dec_pc_inc4 = 1'b1;  /* BF,sfr.3,$addr8 */
                {8'h31,8'hc4} : dec_pc_inc4 = 1'b1;  /* BF,sfr.4,$addr8 */
                {8'h31,8'hd4} : dec_pc_inc4 = 1'b1;  /* BF,sfr.5,$addr8 */
                {8'h31,8'he4} : dec_pc_inc4 = 1'b1;  /* BF,sfr.6,$addr8 */
                {8'h31,8'hf4} : dec_pc_inc4 = 1'b1;  /* BF,sfr.7,$addr8 */
                {8'h31,8'h00} : dec_pc_inc4 = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                {8'h31,8'h10} : dec_pc_inc4 = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                {8'h31,8'h20} : dec_pc_inc4 = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                {8'h31,8'h30} : dec_pc_inc4 = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                {8'h31,8'h40} : dec_pc_inc4 = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                {8'h31,8'h50} : dec_pc_inc4 = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                {8'h31,8'h60} : dec_pc_inc4 = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                {8'h31,8'h70} : dec_pc_inc4 = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                {8'h31,8'h80} : dec_pc_inc4 = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                {8'h31,8'h90} : dec_pc_inc4 = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                {8'h31,8'ha0} : dec_pc_inc4 = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                {8'h31,8'hb0} : dec_pc_inc4 = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                {8'h31,8'hc0} : dec_pc_inc4 = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                {8'h31,8'hd0} : dec_pc_inc4 = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                {8'h31,8'he0} : dec_pc_inc4 = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                {8'h31,8'hf0} : dec_pc_inc4 = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                {8'h61,8'hc1} : dec_pc_inc4 = 1'b1;  /* SOFT4,,BREAK */
                {8'h61,8'hba} : dec_pc_inc4 = 1'b1;  /* XCH,A,!addr16 */
                default : dec_pc_inc4 = 1'b0;
            endcase
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hcf,8'hxx,2'bxx} : dec_pc_inc4 = 1'b1;  /* MOV,!addr16,#byte */
                {8'h19,8'hxx,2'bxx} : dec_pc_inc4 = 1'b1;  /* MOV,word[B],#byte */
                {8'h38,8'hxx,2'bxx} : dec_pc_inc4 = 1'b1;  /* MOV,word[C],#byte */
                {8'h39,8'hxx,2'bxx} : dec_pc_inc4 = 1'b1;  /* MOV,word[BC],#byte */
                {8'h61,8'haa,2'bx1} : dec_pc_inc4 = 1'b1;  /* XCH,A,!addr16 */
                {8'hc9,8'hxx,2'bxx} : dec_pc_inc4 = 1'b1;  /* MOVW,saddrp,#word */
                {8'hcb,8'hxx,2'bxx} : dec_pc_inc4 = 1'b1;  /* MOVW,sfrp,#word */
                {8'h40,8'hxx,2'bxx} : dec_pc_inc4 = 1'b1;  /* CMP,!addr16,#byte */
                {8'h71,8'h00,2'bx1} : dec_pc_inc4 = 1'b1;  /* SET1,,!addr16.0 */
                {8'h71,8'h10,2'bx1} : dec_pc_inc4 = 1'b1;  /* SET1,,!addr16.1 */
                {8'h71,8'h20,2'bx1} : dec_pc_inc4 = 1'b1;  /* SET1,,!addr16.2 */
                {8'h71,8'h30,2'bx1} : dec_pc_inc4 = 1'b1;  /* SET1,,!addr16.3 */
                {8'h71,8'h40,2'bx1} : dec_pc_inc4 = 1'b1;  /* SET1,,!addr16.4 */
                {8'h71,8'h50,2'bx1} : dec_pc_inc4 = 1'b1;  /* SET1,,!addr16.5 */
                {8'h71,8'h60,2'bx1} : dec_pc_inc4 = 1'b1;  /* SET1,,!addr16.6 */
                {8'h71,8'h70,2'bx1} : dec_pc_inc4 = 1'b1;  /* SET1,,!addr16.7 */
                {8'h71,8'h08,2'bx1} : dec_pc_inc4 = 1'b1;  /* CLR1,,!addr16.0 */
                {8'h71,8'h18,2'bx1} : dec_pc_inc4 = 1'b1;  /* CLR1,,!addr16.1 */
                {8'h71,8'h28,2'bx1} : dec_pc_inc4 = 1'b1;  /* CLR1,,!addr16.2 */
                {8'h71,8'h38,2'bx1} : dec_pc_inc4 = 1'b1;  /* CLR1,,!addr16.3 */
                {8'h71,8'h48,2'bx1} : dec_pc_inc4 = 1'b1;  /* CLR1,,!addr16.4 */
                {8'h71,8'h58,2'bx1} : dec_pc_inc4 = 1'b1;  /* CLR1,,!addr16.5 */
                {8'h71,8'h68,2'bx1} : dec_pc_inc4 = 1'b1;  /* CLR1,,!addr16.6 */
                {8'h71,8'h78,2'bx1} : dec_pc_inc4 = 1'b1;  /* CLR1,,!addr16.7 */
                {8'hfc,8'hxx,2'bx0} : dec_pc_inc4 = 1'b1;  /* CALL,,!!addr20 */
                {8'h31,8'h02,2'b10} : dec_pc_inc4 = 1'b1;  /* BT,saddr.0,$addr8 */
                {8'h31,8'h12,2'b10} : dec_pc_inc4 = 1'b1;  /* BT,saddr.1,$addr8 */
                {8'h31,8'h22,2'b10} : dec_pc_inc4 = 1'b1;  /* BT,saddr.2,$addr8 */
                {8'h31,8'h32,2'b10} : dec_pc_inc4 = 1'b1;  /* BT,saddr.3,$addr8 */
                {8'h31,8'h42,2'b10} : dec_pc_inc4 = 1'b1;  /* BT,saddr.4,$addr8 */
                {8'h31,8'h52,2'b10} : dec_pc_inc4 = 1'b1;  /* BT,saddr.5,$addr8 */
                {8'h31,8'h62,2'b10} : dec_pc_inc4 = 1'b1;  /* BT,saddr.6,$addr8 */
                {8'h31,8'h72,2'b10} : dec_pc_inc4 = 1'b1;  /* BT,saddr.7,$addr8 */
                {8'h31,8'h82,2'b10} : dec_pc_inc4 = 1'b1;  /* BT,sfr.0,$addr8 */
                {8'h31,8'h92,2'b10} : dec_pc_inc4 = 1'b1;  /* BT,sfr.1,$addr8 */
                {8'h31,8'ha2,2'b10} : dec_pc_inc4 = 1'b1;  /* BT,sfr.2,$addr8 */
                {8'h31,8'hb2,2'b10} : dec_pc_inc4 = 1'b1;  /* BT,sfr.3,$addr8 */
                {8'h31,8'hc2,2'b10} : dec_pc_inc4 = 1'b1;  /* BT,sfr.4,$addr8 */
                {8'h31,8'hd2,2'b10} : dec_pc_inc4 = 1'b1;  /* BT,sfr.5,$addr8 */
                {8'h31,8'he2,2'b10} : dec_pc_inc4 = 1'b1;  /* BT,sfr.6,$addr8 */
                {8'h31,8'hf2,2'b10} : dec_pc_inc4 = 1'b1;  /* BT,sfr.7,$addr8 */
                {8'h31,8'h04,2'b10} : dec_pc_inc4 = 1'b1;  /* BF,saddr.0,$addr8 */
                {8'h31,8'h14,2'b10} : dec_pc_inc4 = 1'b1;  /* BF,saddr.1,$addr8 */
                {8'h31,8'h24,2'b10} : dec_pc_inc4 = 1'b1;  /* BF,saddr.2,$addr8 */
                {8'h31,8'h34,2'b10} : dec_pc_inc4 = 1'b1;  /* BF,saddr.3,$addr8 */
                {8'h31,8'h44,2'b10} : dec_pc_inc4 = 1'b1;  /* BF,saddr.4,$addr8 */
                {8'h31,8'h54,2'b10} : dec_pc_inc4 = 1'b1;  /* BF,saddr.5,$addr8 */
                {8'h31,8'h64,2'b10} : dec_pc_inc4 = 1'b1;  /* BF,saddr.6,$addr8 */
                {8'h31,8'h74,2'b10} : dec_pc_inc4 = 1'b1;  /* BF,saddr.7,$addr8 */
                {8'h31,8'h84,2'b10} : dec_pc_inc4 = 1'b1;  /* BF,sfr.0,$addr8 */
                {8'h31,8'h94,2'b10} : dec_pc_inc4 = 1'b1;  /* BF,sfr.1,$addr8 */
                {8'h31,8'ha4,2'b10} : dec_pc_inc4 = 1'b1;  /* BF,sfr.2,$addr8 */
                {8'h31,8'hb4,2'b10} : dec_pc_inc4 = 1'b1;  /* BF,sfr.3,$addr8 */
                {8'h31,8'hc4,2'b10} : dec_pc_inc4 = 1'b1;  /* BF,sfr.4,$addr8 */
                {8'h31,8'hd4,2'b10} : dec_pc_inc4 = 1'b1;  /* BF,sfr.5,$addr8 */
                {8'h31,8'he4,2'b10} : dec_pc_inc4 = 1'b1;  /* BF,sfr.6,$addr8 */
                {8'h31,8'hf4,2'b10} : dec_pc_inc4 = 1'b1;  /* BF,sfr.7,$addr8 */
                {8'h31,8'h00,2'b10} : dec_pc_inc4 = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                {8'h31,8'h10,2'b10} : dec_pc_inc4 = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                {8'h31,8'h20,2'b10} : dec_pc_inc4 = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                {8'h31,8'h30,2'b10} : dec_pc_inc4 = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                {8'h31,8'h40,2'b10} : dec_pc_inc4 = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                {8'h31,8'h50,2'b10} : dec_pc_inc4 = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                {8'h31,8'h60,2'b10} : dec_pc_inc4 = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                {8'h31,8'h70,2'b10} : dec_pc_inc4 = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                {8'h31,8'h80,2'b10} : dec_pc_inc4 = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                {8'h31,8'h90,2'b10} : dec_pc_inc4 = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                {8'h31,8'ha0,2'b10} : dec_pc_inc4 = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                {8'h31,8'hb0,2'b10} : dec_pc_inc4 = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                {8'h31,8'hc0,2'b10} : dec_pc_inc4 = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                {8'h31,8'hd0,2'b10} : dec_pc_inc4 = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                {8'h31,8'he0,2'b10} : dec_pc_inc4 = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                {8'h31,8'hf0,2'b10} : dec_pc_inc4 = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                {8'h61,8'hc1,2'bx0} : dec_pc_inc4 = 1'b1;  /* SOFT4,,BREAK */
                {8'h61,8'hba,2'bx1} : dec_pc_inc4 = 1'b1;  /* XCH,A,!addr16 */
                default : dec_pc_inc4 = 1'b0;
            endcase
        end
    end
    output dec_clear_stage;
    reg    dec_clear_stage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1) begin
            dec_clear_stage = 1'b1;  /* RESET */
        end else if(ivack == 1'b1) begin
            casex ({stage_adr})  
                {2'b00} : dec_clear_stage = 1'b0;  /* Interrupt */
                {2'b01} : dec_clear_stage = 1'b0;  /* Interrupt */
                {2'b10} : dec_clear_stage = 1'b0;  /* Interrupt */
                default : dec_clear_stage = 1'b1;
            endcase
        end else if(skpack == 1'b1) begin
            dec_clear_stage = 1'b1;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'ha8,2'bx0} : dec_clear_stage = 1'b0;  /* XCH,A,saddr */
                {8'h61,8'hab,2'bx0} : dec_clear_stage = 1'b0;  /* XCH,A,sfr */
                {8'h61,8'haa,2'bx0} : dec_clear_stage = 1'b0;  /* XCH,A,!addr16 */
                {8'h61,8'hae,2'bx0} : dec_clear_stage = 1'b0;  /* XCH,A,[DE] */
                {8'h61,8'haf,2'bx0} : dec_clear_stage = 1'b0;  /* XCH,A,[DE+byte] */
                {8'h61,8'hac,2'bx0} : dec_clear_stage = 1'b0;  /* XCH,A,[HL] */
                {8'h61,8'had,2'bx0} : dec_clear_stage = 1'b0;  /* XCH,A,[HL+byte] */
                {8'h61,8'hb9,2'bx0} : dec_clear_stage = 1'b0;  /* XCH,A,[HL+B] */
                {8'h61,8'ha9,2'bx0} : dec_clear_stage = 1'b0;  /* XCH,A,[HL+C] */
                {8'h0a,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* ADD,saddr,#byte */
                {8'h1a,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* ADDC,saddr,#byte */
                {8'h2a,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* SUB,saddr,#byte */
                {8'h3a,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* SUBC,saddr,#byte */
                {8'h5a,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* AND,saddr,#byte */
                {8'h6a,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* OR,saddr,#byte */
                {8'h7a,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* XOR,saddr,#byte */
                {8'ha4,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* INC,,saddr */
                {8'ha0,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* INC,,!addr16 */
                {8'h61,8'h59,2'bx0} : dec_clear_stage = 1'b0;  /* INC,,[HL+byte] */
                {8'hb4,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* DEC,,saddr */
                {8'hb0,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* DEC,,!addr16 */
                {8'h61,8'h69,2'bx0} : dec_clear_stage = 1'b0;  /* DEC,,[HL+byte] */
                {8'ha6,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* INCW,,saddrp */
                {8'ha2,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* INCW,,!addr16 */
                {8'h61,8'h79,2'bx0} : dec_clear_stage = 1'b0;  /* INCW,,[HL+byte] */
                {8'hb6,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* DECW,,saddrp */
                {8'hb2,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* DECW,,!addr16 */
                {8'h61,8'h89,2'bx0} : dec_clear_stage = 1'b0;  /* DECW,,[HL+byte] */
                {8'h71,8'h01,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,saddr.0,CY */
                {8'h71,8'h11,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,saddr.1,CY */
                {8'h71,8'h21,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,saddr.2,CY */
                {8'h71,8'h31,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,saddr.3,CY */
                {8'h71,8'h41,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,saddr.4,CY */
                {8'h71,8'h51,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,saddr.5,CY */
                {8'h71,8'h61,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,saddr.6,CY */
                {8'h71,8'h71,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,saddr.7,CY */
                {8'h71,8'h09,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,sfr.0,CY */
                {8'h71,8'h19,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,sfr.1,CY */
                {8'h71,8'h29,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,sfr.2,CY */
                {8'h71,8'h39,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,sfr.3,CY */
                {8'h71,8'h49,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,sfr.4,CY */
                {8'h71,8'h59,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,sfr.5,CY */
                {8'h71,8'h69,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,sfr.6,CY */
                {8'h71,8'h79,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,sfr.7,CY */
                {8'h71,8'h81,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,[HL].0,CY */
                {8'h71,8'h91,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,[HL].1,CY */
                {8'h71,8'ha1,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,[HL].2,CY */
                {8'h71,8'hb1,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,[HL].3,CY */
                {8'h71,8'hc1,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,[HL].4,CY */
                {8'h71,8'hd1,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,[HL].5,CY */
                {8'h71,8'he1,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,[HL].6,CY */
                {8'h71,8'hf1,2'bx0} : dec_clear_stage = 1'b0;  /* MOV1,[HL].7,CY */
                {8'h71,8'h02,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,saddr.0 */
                {8'h71,8'h12,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,saddr.1 */
                {8'h71,8'h22,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,saddr.2 */
                {8'h71,8'h32,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,saddr.3 */
                {8'h71,8'h42,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,saddr.4 */
                {8'h71,8'h52,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,saddr.5 */
                {8'h71,8'h62,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,saddr.6 */
                {8'h71,8'h72,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,saddr.7 */
                {8'h71,8'h0a,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,sfr.0 */
                {8'h71,8'h1a,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,sfr.1 */
                {8'h71,8'h2a,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,sfr.2 */
                {8'h71,8'h3a,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,sfr.3 */
                {8'h71,8'h4a,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,sfr.4 */
                {8'h71,8'h5a,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,sfr.5 */
                {8'h71,8'h6a,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,sfr.6 */
                {8'h71,8'h7a,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,sfr.7 */
                {8'h71,8'h00,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,!addr16.0 */
                {8'h71,8'h10,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,!addr16.1 */
                {8'h71,8'h20,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,!addr16.2 */
                {8'h71,8'h30,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,!addr16.3 */
                {8'h71,8'h40,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,!addr16.4 */
                {8'h71,8'h50,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,!addr16.5 */
                {8'h71,8'h60,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,!addr16.6 */
                {8'h71,8'h70,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,!addr16.7 */
                {8'h71,8'h82,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,[HL].0 */
                {8'h71,8'h92,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,[HL].1 */
                {8'h71,8'ha2,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,[HL].2 */
                {8'h71,8'hb2,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,[HL].3 */
                {8'h71,8'hc2,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,[HL].4 */
                {8'h71,8'hd2,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,[HL].5 */
                {8'h71,8'he2,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,[HL].6 */
                {8'h71,8'hf2,2'bx0} : dec_clear_stage = 1'b0;  /* SET1,,[HL].7 */
                {8'h71,8'h03,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,saddr.0 */
                {8'h71,8'h13,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,saddr.1 */
                {8'h71,8'h23,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,saddr.2 */
                {8'h71,8'h33,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,saddr.3 */
                {8'h71,8'h43,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,saddr.4 */
                {8'h71,8'h53,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,saddr.5 */
                {8'h71,8'h63,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,saddr.6 */
                {8'h71,8'h73,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,saddr.7 */
                {8'h71,8'h0b,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,sfr.0 */
                {8'h71,8'h1b,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,sfr.1 */
                {8'h71,8'h2b,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,sfr.2 */
                {8'h71,8'h3b,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,sfr.3 */
                {8'h71,8'h4b,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,sfr.4 */
                {8'h71,8'h5b,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,sfr.5 */
                {8'h71,8'h6b,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,sfr.6 */
                {8'h71,8'h7b,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,sfr.7 */
                {8'h71,8'h08,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,!addr16.0 */
                {8'h71,8'h18,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,!addr16.1 */
                {8'h71,8'h28,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,!addr16.2 */
                {8'h71,8'h38,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,!addr16.3 */
                {8'h71,8'h48,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,!addr16.4 */
                {8'h71,8'h58,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,!addr16.5 */
                {8'h71,8'h68,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,!addr16.6 */
                {8'h71,8'h78,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,!addr16.7 */
                {8'h71,8'h83,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,[HL].0 */
                {8'h71,8'h93,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,[HL].1 */
                {8'h71,8'ha3,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,[HL].2 */
                {8'h71,8'hb3,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,[HL].3 */
                {8'h71,8'hc3,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,[HL].4 */
                {8'h71,8'hd3,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,[HL].5 */
                {8'h71,8'he3,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,[HL].6 */
                {8'h71,8'hf3,2'bx0} : dec_clear_stage = 1'b0;  /* CLR1,,[HL].7 */
                {8'h61,8'hca,2'bx0} : dec_clear_stage = 1'b0;  /* CALL,,AX */
                {8'h61,8'hda,2'bx0} : dec_clear_stage = 1'b0;  /* CALL,,BC */
                {8'h61,8'hea,2'bx0} : dec_clear_stage = 1'b0;  /* CALL,,DE */
                {8'h61,8'hfa,2'bx0} : dec_clear_stage = 1'b0;  /* CALL,,HL */
                {8'hfe,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* CALL,,$!addr16 */
                {8'hfd,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* CALL,,!addr16 */
                {8'hfc,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* CALL,,!!addr20 */
                {8'h61,8'h84,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[0080h] */
                {8'h61,8'h94,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[0082h] */
                {8'h61,8'ha4,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[0084h] */
                {8'h61,8'hb4,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[0086h] */
                {8'h61,8'hc4,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[0088h] */
                {8'h61,8'hd4,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[008Ah] */
                {8'h61,8'he4,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[008Ch] */
                {8'h61,8'hf4,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[008Eh] */
                {8'h61,8'h85,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[0090h] */
                {8'h61,8'h95,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[0092h] */
                {8'h61,8'ha5,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[0094h] */
                {8'h61,8'hb5,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[0096h] */
                {8'h61,8'hc5,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[0098h] */
                {8'h61,8'hd5,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[009Ah] */
                {8'h61,8'he5,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[009Ch] */
                {8'h61,8'hf5,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[009Eh] */
                {8'h61,8'h86,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[00A0h] */
                {8'h61,8'h96,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[00A2h] */
                {8'h61,8'ha6,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[00A4h] */
                {8'h61,8'hb6,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[00A6h] */
                {8'h61,8'hc6,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[00A8h] */
                {8'h61,8'hd6,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[00AAh] */
                {8'h61,8'he6,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[00ACh] */
                {8'h61,8'hf6,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[00AEh] */
                {8'h61,8'h87,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[00B0h] */
                {8'h61,8'h97,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[00B2h] */
                {8'h61,8'ha7,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[00B4h] */
                {8'h61,8'hb7,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[00B6h] */
                {8'h61,8'hc7,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[00B8h] */
                {8'h61,8'hd7,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[00BAh] */
                {8'h61,8'he7,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[00BCh] */
                {8'h61,8'hf7,2'bx0} : dec_clear_stage = 1'b0;  /* CALLT,,[00BEh] */
                {8'h61,8'hcc,2'bx0} : dec_clear_stage = 1'b0;  /* BRK,, */
                {8'hd7,8'hxx,2'b00} : dec_clear_stage = 1'b0;  /* RET,, */
                {8'hd7,8'hxx,2'b01} : dec_clear_stage = 1'b0;  /* RET,, */
                {8'hd7,8'hxx,2'b10} : dec_clear_stage = 1'b0;  /* RET,, */
                {8'h61,8'hec,2'b00} : dec_clear_stage = 1'b0;  /* RETB,, */
                {8'h61,8'hec,2'b01} : dec_clear_stage = 1'b0;  /* RETB,, */
                {8'h61,8'hec,2'b10} : dec_clear_stage = 1'b0;  /* RETB,, */
                {8'h61,8'hfc,2'b00} : dec_clear_stage = 1'b0;  /* RETI,, */
                {8'h61,8'hfc,2'b01} : dec_clear_stage = 1'b0;  /* RETI,, */
                {8'h61,8'hfc,2'b10} : dec_clear_stage = 1'b0;  /* RETI,, */
                {8'hec,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* BR,,!!addr20 */
                {8'hed,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* BR,,!addr16 */
                {8'hee,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* BR,,$!addr16 */
                {8'hef,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* BR,,$addr8 */
                {8'h61,8'hcb,2'bx0} : dec_clear_stage = 1'b0;  /* BR,,AX */
                {8'hdc,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* BC,,$addr8 */
                {8'hde,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* BNC,,$addr8 */
                {8'hdd,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* BZ,,$addr8 */
                {8'hdf,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* BNZ,,$addr8 */
                {8'h61,8'hc3,2'bx0} : dec_clear_stage = 1'b0;  /* BH,,$addr8 */
                {8'h61,8'hd3,2'bx0} : dec_clear_stage = 1'b0;  /* BNH,,$addr8 */
                {8'h31,8'h02,2'b00} : dec_clear_stage = 1'b0;  /* BT,saddr.0,$addr8 */
                {8'h31,8'h02,2'b01} : dec_clear_stage = 1'b0;  /* BT,saddr.0,$addr8 */
                {8'h31,8'h12,2'b00} : dec_clear_stage = 1'b0;  /* BT,saddr.1,$addr8 */
                {8'h31,8'h12,2'b01} : dec_clear_stage = 1'b0;  /* BT,saddr.1,$addr8 */
                {8'h31,8'h22,2'b00} : dec_clear_stage = 1'b0;  /* BT,saddr.2,$addr8 */
                {8'h31,8'h22,2'b01} : dec_clear_stage = 1'b0;  /* BT,saddr.2,$addr8 */
                {8'h31,8'h32,2'b00} : dec_clear_stage = 1'b0;  /* BT,saddr.3,$addr8 */
                {8'h31,8'h32,2'b01} : dec_clear_stage = 1'b0;  /* BT,saddr.3,$addr8 */
                {8'h31,8'h42,2'b00} : dec_clear_stage = 1'b0;  /* BT,saddr.4,$addr8 */
                {8'h31,8'h42,2'b01} : dec_clear_stage = 1'b0;  /* BT,saddr.4,$addr8 */
                {8'h31,8'h52,2'b00} : dec_clear_stage = 1'b0;  /* BT,saddr.5,$addr8 */
                {8'h31,8'h52,2'b01} : dec_clear_stage = 1'b0;  /* BT,saddr.5,$addr8 */
                {8'h31,8'h62,2'b00} : dec_clear_stage = 1'b0;  /* BT,saddr.6,$addr8 */
                {8'h31,8'h62,2'b01} : dec_clear_stage = 1'b0;  /* BT,saddr.6,$addr8 */
                {8'h31,8'h72,2'b00} : dec_clear_stage = 1'b0;  /* BT,saddr.7,$addr8 */
                {8'h31,8'h72,2'b01} : dec_clear_stage = 1'b0;  /* BT,saddr.7,$addr8 */
                {8'h31,8'h82,2'b00} : dec_clear_stage = 1'b0;  /* BT,sfr.0,$addr8 */
                {8'h31,8'h82,2'b01} : dec_clear_stage = 1'b0;  /* BT,sfr.0,$addr8 */
                {8'h31,8'h92,2'b00} : dec_clear_stage = 1'b0;  /* BT,sfr.1,$addr8 */
                {8'h31,8'h92,2'b01} : dec_clear_stage = 1'b0;  /* BT,sfr.1,$addr8 */
                {8'h31,8'ha2,2'b00} : dec_clear_stage = 1'b0;  /* BT,sfr.2,$addr8 */
                {8'h31,8'ha2,2'b01} : dec_clear_stage = 1'b0;  /* BT,sfr.2,$addr8 */
                {8'h31,8'hb2,2'b00} : dec_clear_stage = 1'b0;  /* BT,sfr.3,$addr8 */
                {8'h31,8'hb2,2'b01} : dec_clear_stage = 1'b0;  /* BT,sfr.3,$addr8 */
                {8'h31,8'hc2,2'b00} : dec_clear_stage = 1'b0;  /* BT,sfr.4,$addr8 */
                {8'h31,8'hc2,2'b01} : dec_clear_stage = 1'b0;  /* BT,sfr.4,$addr8 */
                {8'h31,8'hd2,2'b00} : dec_clear_stage = 1'b0;  /* BT,sfr.5,$addr8 */
                {8'h31,8'hd2,2'b01} : dec_clear_stage = 1'b0;  /* BT,sfr.5,$addr8 */
                {8'h31,8'he2,2'b00} : dec_clear_stage = 1'b0;  /* BT,sfr.6,$addr8 */
                {8'h31,8'he2,2'b01} : dec_clear_stage = 1'b0;  /* BT,sfr.6,$addr8 */
                {8'h31,8'hf2,2'b00} : dec_clear_stage = 1'b0;  /* BT,sfr.7,$addr8 */
                {8'h31,8'hf2,2'b01} : dec_clear_stage = 1'b0;  /* BT,sfr.7,$addr8 */
                {8'h31,8'h03,2'b00} : dec_clear_stage = 1'b0;  /* BT,A.0,$addr8 */
                {8'h31,8'h03,2'b01} : dec_clear_stage = 1'b0;  /* BT,A.0,$addr8 */
                {8'h31,8'h13,2'b00} : dec_clear_stage = 1'b0;  /* BT,A.1,$addr8 */
                {8'h31,8'h13,2'b01} : dec_clear_stage = 1'b0;  /* BT,A.1,$addr8 */
                {8'h31,8'h23,2'b00} : dec_clear_stage = 1'b0;  /* BT,A.2,$addr8 */
                {8'h31,8'h23,2'b01} : dec_clear_stage = 1'b0;  /* BT,A.2,$addr8 */
                {8'h31,8'h33,2'b00} : dec_clear_stage = 1'b0;  /* BT,A.3,$addr8 */
                {8'h31,8'h33,2'b01} : dec_clear_stage = 1'b0;  /* BT,A.3,$addr8 */
                {8'h31,8'h43,2'b00} : dec_clear_stage = 1'b0;  /* BT,A.4,$addr8 */
                {8'h31,8'h43,2'b01} : dec_clear_stage = 1'b0;  /* BT,A.4,$addr8 */
                {8'h31,8'h53,2'b00} : dec_clear_stage = 1'b0;  /* BT,A.5,$addr8 */
                {8'h31,8'h53,2'b01} : dec_clear_stage = 1'b0;  /* BT,A.5,$addr8 */
                {8'h31,8'h63,2'b00} : dec_clear_stage = 1'b0;  /* BT,A.6,$addr8 */
                {8'h31,8'h63,2'b01} : dec_clear_stage = 1'b0;  /* BT,A.6,$addr8 */
                {8'h31,8'h73,2'b00} : dec_clear_stage = 1'b0;  /* BT,A.7,$addr8 */
                {8'h31,8'h73,2'b01} : dec_clear_stage = 1'b0;  /* BT,A.7,$addr8 */
                {8'h31,8'h83,2'b00} : dec_clear_stage = 1'b0;  /* BT,[HL].0,$addr8 */
                {8'h31,8'h83,2'b01} : dec_clear_stage = 1'b0;  /* BT,[HL].0,$addr8 */
                {8'h31,8'h93,2'b00} : dec_clear_stage = 1'b0;  /* BT,[HL].1,$addr8 */
                {8'h31,8'h93,2'b01} : dec_clear_stage = 1'b0;  /* BT,[HL].1,$addr8 */
                {8'h31,8'ha3,2'b00} : dec_clear_stage = 1'b0;  /* BT,[HL].2,$addr8 */
                {8'h31,8'ha3,2'b01} : dec_clear_stage = 1'b0;  /* BT,[HL].2,$addr8 */
                {8'h31,8'hb3,2'b00} : dec_clear_stage = 1'b0;  /* BT,[HL].3,$addr8 */
                {8'h31,8'hb3,2'b01} : dec_clear_stage = 1'b0;  /* BT,[HL].3,$addr8 */
                {8'h31,8'hc3,2'b00} : dec_clear_stage = 1'b0;  /* BT,[HL].4,$addr8 */
                {8'h31,8'hc3,2'b01} : dec_clear_stage = 1'b0;  /* BT,[HL].4,$addr8 */
                {8'h31,8'hd3,2'b00} : dec_clear_stage = 1'b0;  /* BT,[HL].5,$addr8 */
                {8'h31,8'hd3,2'b01} : dec_clear_stage = 1'b0;  /* BT,[HL].5,$addr8 */
                {8'h31,8'he3,2'b00} : dec_clear_stage = 1'b0;  /* BT,[HL].6,$addr8 */
                {8'h31,8'he3,2'b01} : dec_clear_stage = 1'b0;  /* BT,[HL].6,$addr8 */
                {8'h31,8'hf3,2'b00} : dec_clear_stage = 1'b0;  /* BT,[HL].7,$addr8 */
                {8'h31,8'hf3,2'b01} : dec_clear_stage = 1'b0;  /* BT,[HL].7,$addr8 */
                {8'h31,8'h04,2'b00} : dec_clear_stage = 1'b0;  /* BF,saddr.0,$addr8 */
                {8'h31,8'h04,2'b01} : dec_clear_stage = 1'b0;  /* BF,saddr.0,$addr8 */
                {8'h31,8'h14,2'b00} : dec_clear_stage = 1'b0;  /* BF,saddr.1,$addr8 */
                {8'h31,8'h14,2'b01} : dec_clear_stage = 1'b0;  /* BF,saddr.1,$addr8 */
                {8'h31,8'h24,2'b00} : dec_clear_stage = 1'b0;  /* BF,saddr.2,$addr8 */
                {8'h31,8'h24,2'b01} : dec_clear_stage = 1'b0;  /* BF,saddr.2,$addr8 */
                {8'h31,8'h34,2'b00} : dec_clear_stage = 1'b0;  /* BF,saddr.3,$addr8 */
                {8'h31,8'h34,2'b01} : dec_clear_stage = 1'b0;  /* BF,saddr.3,$addr8 */
                {8'h31,8'h44,2'b00} : dec_clear_stage = 1'b0;  /* BF,saddr.4,$addr8 */
                {8'h31,8'h44,2'b01} : dec_clear_stage = 1'b0;  /* BF,saddr.4,$addr8 */
                {8'h31,8'h54,2'b00} : dec_clear_stage = 1'b0;  /* BF,saddr.5,$addr8 */
                {8'h31,8'h54,2'b01} : dec_clear_stage = 1'b0;  /* BF,saddr.5,$addr8 */
                {8'h31,8'h64,2'b00} : dec_clear_stage = 1'b0;  /* BF,saddr.6,$addr8 */
                {8'h31,8'h64,2'b01} : dec_clear_stage = 1'b0;  /* BF,saddr.6,$addr8 */
                {8'h31,8'h74,2'b00} : dec_clear_stage = 1'b0;  /* BF,saddr.7,$addr8 */
                {8'h31,8'h74,2'b01} : dec_clear_stage = 1'b0;  /* BF,saddr.7,$addr8 */
                {8'h31,8'h84,2'b00} : dec_clear_stage = 1'b0;  /* BF,sfr.0,$addr8 */
                {8'h31,8'h84,2'b01} : dec_clear_stage = 1'b0;  /* BF,sfr.0,$addr8 */
                {8'h31,8'h94,2'b00} : dec_clear_stage = 1'b0;  /* BF,sfr.1,$addr8 */
                {8'h31,8'h94,2'b01} : dec_clear_stage = 1'b0;  /* BF,sfr.1,$addr8 */
                {8'h31,8'ha4,2'b00} : dec_clear_stage = 1'b0;  /* BF,sfr.2,$addr8 */
                {8'h31,8'ha4,2'b01} : dec_clear_stage = 1'b0;  /* BF,sfr.2,$addr8 */
                {8'h31,8'hb4,2'b00} : dec_clear_stage = 1'b0;  /* BF,sfr.3,$addr8 */
                {8'h31,8'hb4,2'b01} : dec_clear_stage = 1'b0;  /* BF,sfr.3,$addr8 */
                {8'h31,8'hc4,2'b00} : dec_clear_stage = 1'b0;  /* BF,sfr.4,$addr8 */
                {8'h31,8'hc4,2'b01} : dec_clear_stage = 1'b0;  /* BF,sfr.4,$addr8 */
                {8'h31,8'hd4,2'b00} : dec_clear_stage = 1'b0;  /* BF,sfr.5,$addr8 */
                {8'h31,8'hd4,2'b01} : dec_clear_stage = 1'b0;  /* BF,sfr.5,$addr8 */
                {8'h31,8'he4,2'b00} : dec_clear_stage = 1'b0;  /* BF,sfr.6,$addr8 */
                {8'h31,8'he4,2'b01} : dec_clear_stage = 1'b0;  /* BF,sfr.6,$addr8 */
                {8'h31,8'hf4,2'b00} : dec_clear_stage = 1'b0;  /* BF,sfr.7,$addr8 */
                {8'h31,8'hf4,2'b01} : dec_clear_stage = 1'b0;  /* BF,sfr.7,$addr8 */
                {8'h31,8'h05,2'b00} : dec_clear_stage = 1'b0;  /* BF,A.0,$addr8 */
                {8'h31,8'h05,2'b01} : dec_clear_stage = 1'b0;  /* BF,A.0,$addr8 */
                {8'h31,8'h15,2'b00} : dec_clear_stage = 1'b0;  /* BF,A.1,$addr8 */
                {8'h31,8'h15,2'b01} : dec_clear_stage = 1'b0;  /* BF,A.1,$addr8 */
                {8'h31,8'h25,2'b00} : dec_clear_stage = 1'b0;  /* BF,A.2,$addr8 */
                {8'h31,8'h25,2'b01} : dec_clear_stage = 1'b0;  /* BF,A.2,$addr8 */
                {8'h31,8'h35,2'b00} : dec_clear_stage = 1'b0;  /* BF,A.3,$addr8 */
                {8'h31,8'h35,2'b01} : dec_clear_stage = 1'b0;  /* BF,A.3,$addr8 */
                {8'h31,8'h45,2'b00} : dec_clear_stage = 1'b0;  /* BF,A.4,$addr8 */
                {8'h31,8'h45,2'b01} : dec_clear_stage = 1'b0;  /* BF,A.4,$addr8 */
                {8'h31,8'h55,2'b00} : dec_clear_stage = 1'b0;  /* BF,A.5,$addr8 */
                {8'h31,8'h55,2'b01} : dec_clear_stage = 1'b0;  /* BF,A.5,$addr8 */
                {8'h31,8'h65,2'b00} : dec_clear_stage = 1'b0;  /* BF,A.6,$addr8 */
                {8'h31,8'h65,2'b01} : dec_clear_stage = 1'b0;  /* BF,A.6,$addr8 */
                {8'h31,8'h75,2'b00} : dec_clear_stage = 1'b0;  /* BF,A.7,$addr8 */
                {8'h31,8'h75,2'b01} : dec_clear_stage = 1'b0;  /* BF,A.7,$addr8 */
                {8'h31,8'h85,2'b00} : dec_clear_stage = 1'b0;  /* BF,[HL].0,$addr8 */
                {8'h31,8'h85,2'b01} : dec_clear_stage = 1'b0;  /* BF,[HL].0,$addr8 */
                {8'h31,8'h95,2'b00} : dec_clear_stage = 1'b0;  /* BF,[HL].1,$addr8 */
                {8'h31,8'h95,2'b01} : dec_clear_stage = 1'b0;  /* BF,[HL].1,$addr8 */
                {8'h31,8'ha5,2'b00} : dec_clear_stage = 1'b0;  /* BF,[HL].2,$addr8 */
                {8'h31,8'ha5,2'b01} : dec_clear_stage = 1'b0;  /* BF,[HL].2,$addr8 */
                {8'h31,8'hb5,2'b00} : dec_clear_stage = 1'b0;  /* BF,[HL].3,$addr8 */
                {8'h31,8'hb5,2'b01} : dec_clear_stage = 1'b0;  /* BF,[HL].3,$addr8 */
                {8'h31,8'hc5,2'b00} : dec_clear_stage = 1'b0;  /* BF,[HL].4,$addr8 */
                {8'h31,8'hc5,2'b01} : dec_clear_stage = 1'b0;  /* BF,[HL].4,$addr8 */
                {8'h31,8'hd5,2'b00} : dec_clear_stage = 1'b0;  /* BF,[HL].5,$addr8 */
                {8'h31,8'hd5,2'b01} : dec_clear_stage = 1'b0;  /* BF,[HL].5,$addr8 */
                {8'h31,8'he5,2'b00} : dec_clear_stage = 1'b0;  /* BF,[HL].6,$addr8 */
                {8'h31,8'he5,2'b01} : dec_clear_stage = 1'b0;  /* BF,[HL].6,$addr8 */
                {8'h31,8'hf5,2'b00} : dec_clear_stage = 1'b0;  /* BF,[HL].7,$addr8 */
                {8'h31,8'hf5,2'b01} : dec_clear_stage = 1'b0;  /* BF,[HL].7,$addr8 */
                {8'h31,8'h00,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,saddr.0,$addr8 */
                {8'h31,8'h00,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,saddr.0,$addr8 */
                {8'h31,8'h10,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,saddr.1,$addr8 */
                {8'h31,8'h10,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,saddr.1,$addr8 */
                {8'h31,8'h20,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,saddr.2,$addr8 */
                {8'h31,8'h20,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,saddr.2,$addr8 */
                {8'h31,8'h30,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,saddr.3,$addr8 */
                {8'h31,8'h30,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,saddr.3,$addr8 */
                {8'h31,8'h40,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,saddr.4,$addr8 */
                {8'h31,8'h40,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,saddr.4,$addr8 */
                {8'h31,8'h50,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,saddr.5,$addr8 */
                {8'h31,8'h50,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,saddr.5,$addr8 */
                {8'h31,8'h60,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,saddr.6,$addr8 */
                {8'h31,8'h60,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,saddr.6,$addr8 */
                {8'h31,8'h70,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,saddr.7,$addr8 */
                {8'h31,8'h70,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,saddr.7,$addr8 */
                {8'h31,8'h80,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,sfr.0,$addr8 */
                {8'h31,8'h80,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,sfr.0,$addr8 */
                {8'h31,8'h90,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,sfr.1,$addr8 */
                {8'h31,8'h90,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,sfr.1,$addr8 */
                {8'h31,8'ha0,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,sfr.2,$addr8 */
                {8'h31,8'ha0,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,sfr.2,$addr8 */
                {8'h31,8'hb0,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,sfr.3,$addr8 */
                {8'h31,8'hb0,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,sfr.3,$addr8 */
                {8'h31,8'hc0,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,sfr.4,$addr8 */
                {8'h31,8'hc0,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,sfr.4,$addr8 */
                {8'h31,8'hd0,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,sfr.5,$addr8 */
                {8'h31,8'hd0,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,sfr.5,$addr8 */
                {8'h31,8'he0,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,sfr.6,$addr8 */
                {8'h31,8'he0,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,sfr.6,$addr8 */
                {8'h31,8'hf0,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,sfr.7,$addr8 */
                {8'h31,8'hf0,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,sfr.7,$addr8 */
                {8'h31,8'h01,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,A.0,$addr8 */
                {8'h31,8'h01,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,A.0,$addr8 */
                {8'h31,8'h11,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,A.1,$addr8 */
                {8'h31,8'h11,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,A.1,$addr8 */
                {8'h31,8'h21,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,A.2,$addr8 */
                {8'h31,8'h21,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,A.2,$addr8 */
                {8'h31,8'h31,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,A.3,$addr8 */
                {8'h31,8'h31,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,A.3,$addr8 */
                {8'h31,8'h41,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,A.4,$addr8 */
                {8'h31,8'h41,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,A.4,$addr8 */
                {8'h31,8'h51,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,A.5,$addr8 */
                {8'h31,8'h51,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,A.5,$addr8 */
                {8'h31,8'h61,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,A.6,$addr8 */
                {8'h31,8'h61,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,A.6,$addr8 */
                {8'h31,8'h71,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,A.7,$addr8 */
                {8'h31,8'h71,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,A.7,$addr8 */
                {8'h31,8'h81,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,[HL].0,$addr8 */
                {8'h31,8'h81,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,[HL].0,$addr8 */
                {8'h31,8'h91,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,[HL].1,$addr8 */
                {8'h31,8'h91,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,[HL].1,$addr8 */
                {8'h31,8'ha1,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,[HL].2,$addr8 */
                {8'h31,8'ha1,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,[HL].2,$addr8 */
                {8'h31,8'hb1,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,[HL].3,$addr8 */
                {8'h31,8'hb1,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,[HL].3,$addr8 */
                {8'h31,8'hc1,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,[HL].4,$addr8 */
                {8'h31,8'hc1,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,[HL].4,$addr8 */
                {8'h31,8'hd1,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,[HL].5,$addr8 */
                {8'h31,8'hd1,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,[HL].5,$addr8 */
                {8'h31,8'he1,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,[HL].6,$addr8 */
                {8'h31,8'he1,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,[HL].6,$addr8 */
                {8'h31,8'hf1,2'b00} : dec_clear_stage = 1'b0;  /* BTCLR,[HL].7,$addr8 */
                {8'h31,8'hf1,2'b01} : dec_clear_stage = 1'b0;  /* BTCLR,[HL].7,$addr8 */
                {8'h61,8'hed,2'b00} : dec_clear_stage = 1'b0;  /* HALT,, */
                {8'h61,8'hed,2'b01} : dec_clear_stage = 1'b0;  /* HALT,, */
                {8'h61,8'hfd,2'b00} : dec_clear_stage = 1'b0;  /* STOP,, */
                {8'h61,8'hfd,2'b01} : dec_clear_stage = 1'b0;  /* STOP,, */
                {8'hff,8'hxx,2'bx0} : dec_clear_stage = 1'b0;  /* SOFT,,BREAK */
                {8'h61,8'ha1,2'bx0} : dec_clear_stage = 1'b0;  /* SOFT2,,BREAK */
                {8'h61,8'hb1,2'bx0} : dec_clear_stage = 1'b0;  /* SOFT3,,BREAK */
                {8'h61,8'hc1,2'bx0} : dec_clear_stage = 1'b0;  /* SOFT4,,BREAK */
                {8'h61,8'hbb,2'bx0} : dec_clear_stage = 1'b0;  /* XCH,A,sfr */
                {8'h61,8'hba,2'bx0} : dec_clear_stage = 1'b0;  /* XCH,A,!addr16 */
                {8'h61,8'hbe,2'bx0} : dec_clear_stage = 1'b0;  /* XCH,A,[DE] */
                {8'h61,8'hbf,2'bx0} : dec_clear_stage = 1'b0;  /* XCH,A,[DE+byte] */
                {8'h61,8'hbc,2'bx0} : dec_clear_stage = 1'b0;  /* XCH,A,[HL] */
                {8'h61,8'hbd,2'bx0} : dec_clear_stage = 1'b0;  /* XCH,A,[HL+byte] */
                default : dec_clear_stage = 1'b1;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_enable;
    reg    dec_pc_set_enable;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1) begin
            dec_pc_set_enable = 1'b1;  /* RESET */
        end else if(ivack == 1'b1) begin
            casex ({stage_adr})  
                {2'b01} : dec_pc_set_enable = 1'b1;  /* Interrupt */
                {2'b10} : dec_pc_set_enable = 1'b1;  /* Interrupt */
                default : dec_pc_set_enable = 1'b0;
            endcase
//        end else if(skpack == 1'b1 || decout_mask == 1'b1) begin
        end else if(skpack == 1'b1) begin
            dec_pc_set_enable = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hca,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALL,,AX */
                {8'h61,8'hda,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALL,,BC */
                {8'h61,8'hea,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALL,,DE */
                {8'h61,8'hfa,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALL,,HL */
                {8'hfe,8'hxx,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALL,,$!addr16 */
                {8'hfd,8'hxx,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALL,,!addr16 */
                {8'hfc,8'hxx,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALL,,!!addr20 */
                {8'h61,8'h84,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0080h] */
                {8'h61,8'h84,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0080h] */
                {8'h61,8'h94,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0082h] */
                {8'h61,8'h94,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0082h] */
                {8'h61,8'ha4,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0084h] */
                {8'h61,8'ha4,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0084h] */
                {8'h61,8'hb4,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0086h] */
                {8'h61,8'hb4,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0086h] */
                {8'h61,8'hc4,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0088h] */
                {8'h61,8'hc4,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0088h] */
                {8'h61,8'hd4,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[008Ah] */
                {8'h61,8'hd4,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[008Ah] */
                {8'h61,8'he4,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[008Ch] */
                {8'h61,8'he4,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[008Ch] */
                {8'h61,8'hf4,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[008Eh] */
                {8'h61,8'hf4,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[008Eh] */
                {8'h61,8'h85,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0090h] */
                {8'h61,8'h85,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0090h] */
                {8'h61,8'h95,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0092h] */
                {8'h61,8'h95,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0092h] */
                {8'h61,8'ha5,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0094h] */
                {8'h61,8'ha5,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0094h] */
                {8'h61,8'hb5,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0096h] */
                {8'h61,8'hb5,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0096h] */
                {8'h61,8'hc5,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0098h] */
                {8'h61,8'hc5,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[0098h] */
                {8'h61,8'hd5,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[009Ah] */
                {8'h61,8'hd5,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[009Ah] */
                {8'h61,8'he5,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[009Ch] */
                {8'h61,8'he5,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[009Ch] */
                {8'h61,8'hf5,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[009Eh] */
                {8'h61,8'hf5,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[009Eh] */
                {8'h61,8'h86,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00A0h] */
                {8'h61,8'h86,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00A0h] */
                {8'h61,8'h96,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00A2h] */
                {8'h61,8'h96,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00A2h] */
                {8'h61,8'ha6,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00A4h] */
                {8'h61,8'ha6,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00A4h] */
                {8'h61,8'hb6,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00A6h] */
                {8'h61,8'hb6,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00A6h] */
                {8'h61,8'hc6,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00A8h] */
                {8'h61,8'hc6,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00A8h] */
                {8'h61,8'hd6,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00AAh] */
                {8'h61,8'hd6,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00AAh] */
                {8'h61,8'he6,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00ACh] */
                {8'h61,8'he6,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00ACh] */
                {8'h61,8'hf6,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00AEh] */
                {8'h61,8'hf6,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00AEh] */
                {8'h61,8'h87,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00B0h] */
                {8'h61,8'h87,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00B0h] */
                {8'h61,8'h97,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00B2h] */
                {8'h61,8'h97,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00B2h] */
                {8'h61,8'ha7,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00B4h] */
                {8'h61,8'ha7,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00B4h] */
                {8'h61,8'hb7,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00B6h] */
                {8'h61,8'hb7,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00B6h] */
                {8'h61,8'hc7,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00B8h] */
                {8'h61,8'hc7,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00B8h] */
                {8'h61,8'hd7,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00BAh] */
                {8'h61,8'hd7,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00BAh] */
                {8'h61,8'he7,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00BCh] */
                {8'h61,8'he7,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00BCh] */
                {8'h61,8'hf7,2'bx0} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00BEh] */
                {8'h61,8'hf7,2'bx1} : dec_pc_set_enable = 1'b1;  /* CALLT,,[00BEh] */
                {8'h61,8'hcc,2'bx0} : dec_pc_set_enable = 1'b1;  /* BRK,, */
                {8'h61,8'hcc,2'bx1} : dec_pc_set_enable = 1'b1;  /* BRK,, */
                {8'hd7,8'hxx,2'b11} : dec_pc_set_enable = 1'b1;  /* RET,, */
                {8'h61,8'hec,2'b11} : dec_pc_set_enable = 1'b1;  /* RETB,, */
                {8'h61,8'hfc,2'b11} : dec_pc_set_enable = 1'b1;  /* RETI,, */
                {8'hec,8'hxx,2'bx0} : dec_pc_set_enable = 1'b1;  /* BR,,!!addr20 */
                {8'hed,8'hxx,2'bx0} : dec_pc_set_enable = 1'b1;  /* BR,,!addr16 */
                {8'hee,8'hxx,2'bx0} : dec_pc_set_enable = 1'b1;  /* BR,,$!addr16 */
                {8'hef,8'hxx,2'bx0} : dec_pc_set_enable = 1'b1;  /* BR,,$addr8 */
                {8'h61,8'hcb,2'bx0} : dec_pc_set_enable = 1'b1;  /* BR,,AX */
                {8'hdc,8'hxx,2'bx1} : dec_pc_set_enable = 1'b1;  /* BC,,$addr8 */
                {8'hde,8'hxx,2'bx1} : dec_pc_set_enable = 1'b1;  /* BNC,,$addr8 */
                {8'hdd,8'hxx,2'bx1} : dec_pc_set_enable = 1'b1;  /* BZ,,$addr8 */
                {8'hdf,8'hxx,2'bx1} : dec_pc_set_enable = 1'b1;  /* BNZ,,$addr8 */
                {8'h61,8'hc3,2'bx1} : dec_pc_set_enable = 1'b1;  /* BH,,$addr8 */
                {8'h61,8'hd3,2'bx1} : dec_pc_set_enable = 1'b1;  /* BNH,,$addr8 */
                {8'h31,8'h02,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,saddr.0,$addr8 */
                {8'h31,8'h12,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,saddr.1,$addr8 */
                {8'h31,8'h22,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,saddr.2,$addr8 */
                {8'h31,8'h32,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,saddr.3,$addr8 */
                {8'h31,8'h42,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,saddr.4,$addr8 */
                {8'h31,8'h52,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,saddr.5,$addr8 */
                {8'h31,8'h62,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,saddr.6,$addr8 */
                {8'h31,8'h72,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,saddr.7,$addr8 */
                {8'h31,8'h82,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,sfr.0,$addr8 */
                {8'h31,8'h92,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,sfr.1,$addr8 */
                {8'h31,8'ha2,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,sfr.2,$addr8 */
                {8'h31,8'hb2,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,sfr.3,$addr8 */
                {8'h31,8'hc2,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,sfr.4,$addr8 */
                {8'h31,8'hd2,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,sfr.5,$addr8 */
                {8'h31,8'he2,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,sfr.6,$addr8 */
                {8'h31,8'hf2,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,sfr.7,$addr8 */
                {8'h31,8'h03,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,A.0,$addr8 */
                {8'h31,8'h13,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,A.1,$addr8 */
                {8'h31,8'h23,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,A.2,$addr8 */
                {8'h31,8'h33,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,A.3,$addr8 */
                {8'h31,8'h43,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,A.4,$addr8 */
                {8'h31,8'h53,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,A.5,$addr8 */
                {8'h31,8'h63,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,A.6,$addr8 */
                {8'h31,8'h73,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,A.7,$addr8 */
                {8'h31,8'h83,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,[HL].0,$addr8 */
                {8'h31,8'h93,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,[HL].1,$addr8 */
                {8'h31,8'ha3,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,[HL].2,$addr8 */
                {8'h31,8'hb3,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,[HL].3,$addr8 */
                {8'h31,8'hc3,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,[HL].4,$addr8 */
                {8'h31,8'hd3,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,[HL].5,$addr8 */
                {8'h31,8'he3,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,[HL].6,$addr8 */
                {8'h31,8'hf3,2'b10} : dec_pc_set_enable = 1'b1;  /* BT,[HL].7,$addr8 */
                {8'h31,8'h04,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,saddr.0,$addr8 */
                {8'h31,8'h14,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,saddr.1,$addr8 */
                {8'h31,8'h24,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,saddr.2,$addr8 */
                {8'h31,8'h34,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,saddr.3,$addr8 */
                {8'h31,8'h44,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,saddr.4,$addr8 */
                {8'h31,8'h54,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,saddr.5,$addr8 */
                {8'h31,8'h64,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,saddr.6,$addr8 */
                {8'h31,8'h74,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,saddr.7,$addr8 */
                {8'h31,8'h84,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,sfr.0,$addr8 */
                {8'h31,8'h94,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,sfr.1,$addr8 */
                {8'h31,8'ha4,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,sfr.2,$addr8 */
                {8'h31,8'hb4,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,sfr.3,$addr8 */
                {8'h31,8'hc4,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,sfr.4,$addr8 */
                {8'h31,8'hd4,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,sfr.5,$addr8 */
                {8'h31,8'he4,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,sfr.6,$addr8 */
                {8'h31,8'hf4,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,sfr.7,$addr8 */
                {8'h31,8'h05,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,A.0,$addr8 */
                {8'h31,8'h15,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,A.1,$addr8 */
                {8'h31,8'h25,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,A.2,$addr8 */
                {8'h31,8'h35,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,A.3,$addr8 */
                {8'h31,8'h45,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,A.4,$addr8 */
                {8'h31,8'h55,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,A.5,$addr8 */
                {8'h31,8'h65,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,A.6,$addr8 */
                {8'h31,8'h75,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,A.7,$addr8 */
                {8'h31,8'h85,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,[HL].0,$addr8 */
                {8'h31,8'h95,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,[HL].1,$addr8 */
                {8'h31,8'ha5,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,[HL].2,$addr8 */
                {8'h31,8'hb5,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,[HL].3,$addr8 */
                {8'h31,8'hc5,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,[HL].4,$addr8 */
                {8'h31,8'hd5,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,[HL].5,$addr8 */
                {8'h31,8'he5,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,[HL].6,$addr8 */
                {8'h31,8'hf5,2'b10} : dec_pc_set_enable = 1'b1;  /* BF,[HL].7,$addr8 */
                {8'h31,8'h00,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                {8'h31,8'h10,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                {8'h31,8'h20,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                {8'h31,8'h30,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                {8'h31,8'h40,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                {8'h31,8'h50,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                {8'h31,8'h60,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                {8'h31,8'h70,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                {8'h31,8'h80,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                {8'h31,8'h90,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                {8'h31,8'ha0,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                {8'h31,8'hb0,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                {8'h31,8'hc0,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                {8'h31,8'hd0,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                {8'h31,8'he0,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                {8'h31,8'hf0,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                {8'h31,8'h01,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,A.0,$addr8 */
                {8'h31,8'h11,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,A.1,$addr8 */
                {8'h31,8'h21,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,A.2,$addr8 */
                {8'h31,8'h31,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,A.3,$addr8 */
                {8'h31,8'h41,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,A.4,$addr8 */
                {8'h31,8'h51,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,A.5,$addr8 */
                {8'h31,8'h61,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,A.6,$addr8 */
                {8'h31,8'h71,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,A.7,$addr8 */
                {8'h31,8'h81,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                {8'h31,8'h91,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                {8'h31,8'ha1,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                {8'h31,8'hb1,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                {8'h31,8'hc1,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                {8'h31,8'hd1,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                {8'h31,8'he1,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                {8'h31,8'hf1,2'b10} : dec_pc_set_enable = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                {8'hff,8'hxx,2'bx0} : dec_pc_set_enable = 1'b1;  /* SOFT,,BREAK */
                {8'hff,8'hxx,2'bx1} : dec_pc_set_enable = 1'b1;  /* SOFT,,BREAK */
                {8'h61,8'ha1,2'bx0} : dec_pc_set_enable = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'ha1,2'bx1} : dec_pc_set_enable = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'hb1,2'bx0} : dec_pc_set_enable = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hb1,2'bx1} : dec_pc_set_enable = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hc1,2'bx0} : dec_pc_set_enable = 1'b1;  /* SOFT4,,BREAK */
                {8'h61,8'hc1,2'bx1} : dec_pc_set_enable = 1'b1;  /* SOFT4,,BREAK */
                default : dec_pc_set_enable = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_op01;
    reg    dec_pc_set_op01;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1) begin
            dec_pc_set_op01 = 1'b1;  /* RESET */
        end else if(ivack == 1'b1) begin
            casex ({stage_adr})  
                {2'b10} : dec_pc_set_op01 = 1'b1;  /* Interrupt */
                default : dec_pc_set_op01 = 1'b0;
            endcase
//        end else if(skpack == 1'b1 || decout_mask == 1'b1) begin
        end else if(skpack == 1'b1) begin
            dec_pc_set_op01 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'h84,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[0080h] */
                {8'h61,8'h94,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[0082h] */
                {8'h61,8'ha4,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[0084h] */
                {8'h61,8'hb4,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[0086h] */
                {8'h61,8'hc4,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[0088h] */
                {8'h61,8'hd4,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[008Ah] */
                {8'h61,8'he4,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[008Ch] */
                {8'h61,8'hf4,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[008Eh] */
                {8'h61,8'h85,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[0090h] */
                {8'h61,8'h95,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[0092h] */
                {8'h61,8'ha5,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[0094h] */
                {8'h61,8'hb5,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[0096h] */
                {8'h61,8'hc5,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[0098h] */
                {8'h61,8'hd5,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[009Ah] */
                {8'h61,8'he5,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[009Ch] */
                {8'h61,8'hf5,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[009Eh] */
                {8'h61,8'h86,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[00A0h] */
                {8'h61,8'h96,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[00A2h] */
                {8'h61,8'ha6,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[00A4h] */
                {8'h61,8'hb6,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[00A6h] */
                {8'h61,8'hc6,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[00A8h] */
                {8'h61,8'hd6,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[00AAh] */
                {8'h61,8'he6,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[00ACh] */
                {8'h61,8'hf6,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[00AEh] */
                {8'h61,8'h87,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[00B0h] */
                {8'h61,8'h97,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[00B2h] */
                {8'h61,8'ha7,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[00B4h] */
                {8'h61,8'hb7,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[00B6h] */
                {8'h61,8'hc7,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[00B8h] */
                {8'h61,8'hd7,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[00BAh] */
                {8'h61,8'he7,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[00BCh] */
                {8'h61,8'hf7,2'bx1} : dec_pc_set_op01 = 1'b1;  /* CALLT,,[00BEh] */
                {8'h61,8'hcc,2'bx1} : dec_pc_set_op01 = 1'b1;  /* BRK,, */
                {8'hff,8'hxx,2'bx1} : dec_pc_set_op01 = 1'b1;  /* SOFT,,BREAK */
                {8'h61,8'ha1,2'bx1} : dec_pc_set_op01 = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'hb1,2'bx1} : dec_pc_set_op01 = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hc1,2'bx1} : dec_pc_set_op01 = 1'b1;  /* SOFT4,,BREAK */
                default : dec_pc_set_op01 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_op12;
    reg    dec_pc_set_op12;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_pc_set_op12 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hfd,8'hxx,2'bx0} : dec_pc_set_op12 = 1'b1;  /* CALL,,!addr16 */
                {8'hed,8'hxx,2'bx0} : dec_pc_set_op12 = 1'b1;  /* BR,,!addr16 */
                default : dec_pc_set_op12 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_op123;
    reg    dec_pc_set_op123;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_pc_set_op123 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hfc,8'hxx,2'bx0} : dec_pc_set_op123 = 1'b1;  /* CALL,,!!addr20 */
                {8'hec,8'hxx,2'bx0} : dec_pc_set_op123 = 1'b1;  /* BR,,!!addr20 */
                default : dec_pc_set_op123 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_AX;
    reg    dec_pc_set_AX;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_pc_set_AX = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hca,2'bx0} : dec_pc_set_AX = 1'b1;  /* CALL,,AX */
                {8'h61,8'hcb,2'bx0} : dec_pc_set_AX = 1'b1;  /* BR,,AX */
                default : dec_pc_set_AX = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_BC;
    reg    dec_pc_set_BC;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_pc_set_BC = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hda,2'bx0} : dec_pc_set_BC = 1'b1;  /* CALL,,BC */
                default : dec_pc_set_BC = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_DE;
    reg    dec_pc_set_DE;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_pc_set_DE = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hea,2'bx0} : dec_pc_set_DE = 1'b1;  /* CALL,,DE */
                default : dec_pc_set_DE = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_HL;
    reg    dec_pc_set_HL;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_pc_set_HL = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hfa,2'bx0} : dec_pc_set_HL = 1'b1;  /* CALL,,HL */
                default : dec_pc_set_HL = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_pc1;
    reg    dec_pc_set_pc1;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_pc_set_pc1 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hef,8'hxx,2'bx0} : dec_pc_set_pc1 = 1'b1;  /* BR,,$addr8 */
                {8'hdc,8'hxx,2'bx1} : dec_pc_set_pc1 = 1'b1;  /* BC,,$addr8 */
                {8'hde,8'hxx,2'bx1} : dec_pc_set_pc1 = 1'b1;  /* BNC,,$addr8 */
                {8'hdd,8'hxx,2'bx1} : dec_pc_set_pc1 = 1'b1;  /* BZ,,$addr8 */
                {8'hdf,8'hxx,2'bx1} : dec_pc_set_pc1 = 1'b1;  /* BNZ,,$addr8 */
                default : dec_pc_set_pc1 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_pc2;
    reg    dec_pc_set_pc2;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_pc_set_pc2 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hc3,2'bx1} : dec_pc_set_pc2 = 1'b1;  /* BH,,$addr8 */
                {8'h61,8'hd3,2'bx1} : dec_pc_set_pc2 = 1'b1;  /* BNH,,$addr8 */
                {8'h31,8'h03,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BT,A.0,$addr8 */
                {8'h31,8'h13,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BT,A.1,$addr8 */
                {8'h31,8'h23,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BT,A.2,$addr8 */
                {8'h31,8'h33,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BT,A.3,$addr8 */
                {8'h31,8'h43,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BT,A.4,$addr8 */
                {8'h31,8'h53,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BT,A.5,$addr8 */
                {8'h31,8'h63,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BT,A.6,$addr8 */
                {8'h31,8'h73,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BT,A.7,$addr8 */
                {8'h31,8'h83,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BT,[HL].0,$addr8 */
                {8'h31,8'h93,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BT,[HL].1,$addr8 */
                {8'h31,8'ha3,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BT,[HL].2,$addr8 */
                {8'h31,8'hb3,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BT,[HL].3,$addr8 */
                {8'h31,8'hc3,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BT,[HL].4,$addr8 */
                {8'h31,8'hd3,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BT,[HL].5,$addr8 */
                {8'h31,8'he3,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BT,[HL].6,$addr8 */
                {8'h31,8'hf3,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BT,[HL].7,$addr8 */
                {8'h31,8'h05,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BF,A.0,$addr8 */
                {8'h31,8'h15,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BF,A.1,$addr8 */
                {8'h31,8'h25,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BF,A.2,$addr8 */
                {8'h31,8'h35,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BF,A.3,$addr8 */
                {8'h31,8'h45,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BF,A.4,$addr8 */
                {8'h31,8'h55,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BF,A.5,$addr8 */
                {8'h31,8'h65,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BF,A.6,$addr8 */
                {8'h31,8'h75,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BF,A.7,$addr8 */
                {8'h31,8'h85,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BF,[HL].0,$addr8 */
                {8'h31,8'h95,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BF,[HL].1,$addr8 */
                {8'h31,8'ha5,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BF,[HL].2,$addr8 */
                {8'h31,8'hb5,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BF,[HL].3,$addr8 */
                {8'h31,8'hc5,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BF,[HL].4,$addr8 */
                {8'h31,8'hd5,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BF,[HL].5,$addr8 */
                {8'h31,8'he5,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BF,[HL].6,$addr8 */
                {8'h31,8'hf5,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BF,[HL].7,$addr8 */
                {8'h31,8'h01,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BTCLR,A.0,$addr8 */
                {8'h31,8'h11,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BTCLR,A.1,$addr8 */
                {8'h31,8'h21,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BTCLR,A.2,$addr8 */
                {8'h31,8'h31,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BTCLR,A.3,$addr8 */
                {8'h31,8'h41,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BTCLR,A.4,$addr8 */
                {8'h31,8'h51,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BTCLR,A.5,$addr8 */
                {8'h31,8'h61,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BTCLR,A.6,$addr8 */
                {8'h31,8'h71,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BTCLR,A.7,$addr8 */
                {8'h31,8'h81,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                {8'h31,8'h91,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                {8'h31,8'ha1,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                {8'h31,8'hb1,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                {8'h31,8'hc1,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                {8'h31,8'hd1,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                {8'h31,8'he1,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                {8'h31,8'hf1,2'b10} : dec_pc_set_pc2 = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                default : dec_pc_set_pc2 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_pc3;
    reg    dec_pc_set_pc3;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_pc_set_pc3 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h31,8'h02,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BT,saddr.0,$addr8 */
                {8'h31,8'h12,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BT,saddr.1,$addr8 */
                {8'h31,8'h22,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BT,saddr.2,$addr8 */
                {8'h31,8'h32,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BT,saddr.3,$addr8 */
                {8'h31,8'h42,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BT,saddr.4,$addr8 */
                {8'h31,8'h52,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BT,saddr.5,$addr8 */
                {8'h31,8'h62,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BT,saddr.6,$addr8 */
                {8'h31,8'h72,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BT,saddr.7,$addr8 */
                {8'h31,8'h82,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BT,sfr.0,$addr8 */
                {8'h31,8'h92,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BT,sfr.1,$addr8 */
                {8'h31,8'ha2,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BT,sfr.2,$addr8 */
                {8'h31,8'hb2,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BT,sfr.3,$addr8 */
                {8'h31,8'hc2,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BT,sfr.4,$addr8 */
                {8'h31,8'hd2,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BT,sfr.5,$addr8 */
                {8'h31,8'he2,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BT,sfr.6,$addr8 */
                {8'h31,8'hf2,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BT,sfr.7,$addr8 */
                {8'h31,8'h04,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BF,saddr.0,$addr8 */
                {8'h31,8'h14,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BF,saddr.1,$addr8 */
                {8'h31,8'h24,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BF,saddr.2,$addr8 */
                {8'h31,8'h34,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BF,saddr.3,$addr8 */
                {8'h31,8'h44,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BF,saddr.4,$addr8 */
                {8'h31,8'h54,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BF,saddr.5,$addr8 */
                {8'h31,8'h64,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BF,saddr.6,$addr8 */
                {8'h31,8'h74,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BF,saddr.7,$addr8 */
                {8'h31,8'h84,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BF,sfr.0,$addr8 */
                {8'h31,8'h94,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BF,sfr.1,$addr8 */
                {8'h31,8'ha4,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BF,sfr.2,$addr8 */
                {8'h31,8'hb4,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BF,sfr.3,$addr8 */
                {8'h31,8'hc4,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BF,sfr.4,$addr8 */
                {8'h31,8'hd4,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BF,sfr.5,$addr8 */
                {8'h31,8'he4,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BF,sfr.6,$addr8 */
                {8'h31,8'hf4,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BF,sfr.7,$addr8 */
                {8'h31,8'h00,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                {8'h31,8'h10,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                {8'h31,8'h20,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                {8'h31,8'h30,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                {8'h31,8'h40,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                {8'h31,8'h50,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                {8'h31,8'h60,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                {8'h31,8'h70,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                {8'h31,8'h80,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                {8'h31,8'h90,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                {8'h31,8'ha0,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                {8'h31,8'hb0,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                {8'h31,8'hc0,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                {8'h31,8'hd0,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                {8'h31,8'he0,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                {8'h31,8'hf0,2'b10} : dec_pc_set_pc3 = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                default : dec_pc_set_pc3 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_pc12;
    reg    dec_pc_set_pc12;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_pc_set_pc12 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hfe,8'hxx,2'bx0} : dec_pc_set_pc12 = 1'b1;  /* CALL,,$!addr16 */
                {8'hee,8'hxx,2'bx0} : dec_pc_set_pc12 = 1'b1;  /* BR,,$!addr16 */
                default : dec_pc_set_pc12 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_calt;
    reg    dec_pc_set_calt;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_pc_set_calt = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'h84,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[0080h] */
                {8'h61,8'h94,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[0082h] */
                {8'h61,8'ha4,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[0084h] */
                {8'h61,8'hb4,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[0086h] */
                {8'h61,8'hc4,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[0088h] */
                {8'h61,8'hd4,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[008Ah] */
                {8'h61,8'he4,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[008Ch] */
                {8'h61,8'hf4,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[008Eh] */
                {8'h61,8'h85,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[0090h] */
                {8'h61,8'h95,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[0092h] */
                {8'h61,8'ha5,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[0094h] */
                {8'h61,8'hb5,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[0096h] */
                {8'h61,8'hc5,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[0098h] */
                {8'h61,8'hd5,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[009Ah] */
                {8'h61,8'he5,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[009Ch] */
                {8'h61,8'hf5,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[009Eh] */
                {8'h61,8'h86,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[00A0h] */
                {8'h61,8'h96,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[00A2h] */
                {8'h61,8'ha6,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[00A4h] */
                {8'h61,8'hb6,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[00A6h] */
                {8'h61,8'hc6,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[00A8h] */
                {8'h61,8'hd6,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[00AAh] */
                {8'h61,8'he6,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[00ACh] */
                {8'h61,8'hf6,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[00AEh] */
                {8'h61,8'h87,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[00B0h] */
                {8'h61,8'h97,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[00B2h] */
                {8'h61,8'ha7,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[00B4h] */
                {8'h61,8'hb7,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[00B6h] */
                {8'h61,8'hc7,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[00B8h] */
                {8'h61,8'hd7,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[00BAh] */
                {8'h61,8'he7,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[00BCh] */
                {8'h61,8'hf7,2'bx0} : dec_pc_set_calt = 1'b1;  /* CALLT,,[00BEh] */
                default : dec_pc_set_calt = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_vec;
    reg    dec_pc_set_vec;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(decout_mask == 1'b1) begin
//            dec_pc_set_vec = 1'b0;
//        end else if(rstvec == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1) begin
            dec_pc_set_vec = 1'b0;
        end else if(ivack == 1'b1) begin
            casex ({stage_adr})  
                {2'b01} : dec_pc_set_vec = 1'b1;  /* Interrupt */
                default : dec_pc_set_vec = 1'b0;
            endcase
        end else if(skpack == 1'b1) begin
            dec_pc_set_vec = 1'b0;
        end else begin
            dec_pc_set_vec = 1'b0;
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_brk;
    reg    dec_pc_set_brk;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_pc_set_brk = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hcc,2'bx0} : dec_pc_set_brk = 1'b1;  /* BRK,, */
                default : dec_pc_set_brk = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_ret;
    reg    dec_pc_set_ret;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_pc_set_ret = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hd7,8'hxx,2'b11} : dec_pc_set_ret = 1'b1;  /* RET,, */
                {8'h61,8'hec,2'b11} : dec_pc_set_ret = 1'b1;  /* RETB,, */
                {8'h61,8'hfc,2'b11} : dec_pc_set_ret = 1'b1;  /* RETI,, */
                default : dec_pc_set_ret = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_pc_set_dbg;
    reg    dec_pc_set_dbg;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_pc_set_dbg = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hff,8'hxx,2'bx0} : dec_pc_set_dbg = 1'b1;  /* SOFT,,BREAK */
                {8'h61,8'ha1,2'bx0} : dec_pc_set_dbg = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'hb1,2'bx0} : dec_pc_set_dbg = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hc1,2'bx0} : dec_pc_set_dbg = 1'b1;  /* SOFT4,,BREAK */
                default : dec_pc_set_dbg = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_stage_cut_brtf;
    reg    dec_stage_cut_brtf;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_stage_cut_brtf = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h31,8'h02,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,saddr.0,$addr8 */
                {8'h31,8'h12,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,saddr.1,$addr8 */
                {8'h31,8'h22,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,saddr.2,$addr8 */
                {8'h31,8'h32,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,saddr.3,$addr8 */
                {8'h31,8'h42,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,saddr.4,$addr8 */
                {8'h31,8'h52,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,saddr.5,$addr8 */
                {8'h31,8'h62,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,saddr.6,$addr8 */
                {8'h31,8'h72,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,saddr.7,$addr8 */
                {8'h31,8'h82,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,sfr.0,$addr8 */
                {8'h31,8'h92,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,sfr.1,$addr8 */
                {8'h31,8'ha2,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,sfr.2,$addr8 */
                {8'h31,8'hb2,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,sfr.3,$addr8 */
                {8'h31,8'hc2,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,sfr.4,$addr8 */
                {8'h31,8'hd2,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,sfr.5,$addr8 */
                {8'h31,8'he2,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,sfr.6,$addr8 */
                {8'h31,8'hf2,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,sfr.7,$addr8 */
                {8'h31,8'h03,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,A.0,$addr8 */
                {8'h31,8'h13,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,A.1,$addr8 */
                {8'h31,8'h23,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,A.2,$addr8 */
                {8'h31,8'h33,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,A.3,$addr8 */
                {8'h31,8'h43,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,A.4,$addr8 */
                {8'h31,8'h53,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,A.5,$addr8 */
                {8'h31,8'h63,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,A.6,$addr8 */
                {8'h31,8'h73,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,A.7,$addr8 */
                {8'h31,8'h83,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,[HL].0,$addr8 */
                {8'h31,8'h93,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,[HL].1,$addr8 */
                {8'h31,8'ha3,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,[HL].2,$addr8 */
                {8'h31,8'hb3,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,[HL].3,$addr8 */
                {8'h31,8'hc3,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,[HL].4,$addr8 */
                {8'h31,8'hd3,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,[HL].5,$addr8 */
                {8'h31,8'he3,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,[HL].6,$addr8 */
                {8'h31,8'hf3,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BT,[HL].7,$addr8 */
                {8'h31,8'h04,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,saddr.0,$addr8 */
                {8'h31,8'h14,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,saddr.1,$addr8 */
                {8'h31,8'h24,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,saddr.2,$addr8 */
                {8'h31,8'h34,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,saddr.3,$addr8 */
                {8'h31,8'h44,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,saddr.4,$addr8 */
                {8'h31,8'h54,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,saddr.5,$addr8 */
                {8'h31,8'h64,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,saddr.6,$addr8 */
                {8'h31,8'h74,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,saddr.7,$addr8 */
                {8'h31,8'h84,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,sfr.0,$addr8 */
                {8'h31,8'h94,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,sfr.1,$addr8 */
                {8'h31,8'ha4,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,sfr.2,$addr8 */
                {8'h31,8'hb4,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,sfr.3,$addr8 */
                {8'h31,8'hc4,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,sfr.4,$addr8 */
                {8'h31,8'hd4,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,sfr.5,$addr8 */
                {8'h31,8'he4,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,sfr.6,$addr8 */
                {8'h31,8'hf4,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,sfr.7,$addr8 */
                {8'h31,8'h05,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,A.0,$addr8 */
                {8'h31,8'h15,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,A.1,$addr8 */
                {8'h31,8'h25,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,A.2,$addr8 */
                {8'h31,8'h35,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,A.3,$addr8 */
                {8'h31,8'h45,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,A.4,$addr8 */
                {8'h31,8'h55,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,A.5,$addr8 */
                {8'h31,8'h65,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,A.6,$addr8 */
                {8'h31,8'h75,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,A.7,$addr8 */
                {8'h31,8'h85,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,[HL].0,$addr8 */
                {8'h31,8'h95,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,[HL].1,$addr8 */
                {8'h31,8'ha5,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,[HL].2,$addr8 */
                {8'h31,8'hb5,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,[HL].3,$addr8 */
                {8'h31,8'hc5,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,[HL].4,$addr8 */
                {8'h31,8'hd5,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,[HL].5,$addr8 */
                {8'h31,8'he5,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,[HL].6,$addr8 */
                {8'h31,8'hf5,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BF,[HL].7,$addr8 */
                {8'h31,8'h00,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,saddr.0,$addr8 */
                {8'h31,8'h10,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,saddr.1,$addr8 */
                {8'h31,8'h20,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,saddr.2,$addr8 */
                {8'h31,8'h30,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,saddr.3,$addr8 */
                {8'h31,8'h40,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,saddr.4,$addr8 */
                {8'h31,8'h50,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,saddr.5,$addr8 */
                {8'h31,8'h60,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,saddr.6,$addr8 */
                {8'h31,8'h70,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,saddr.7,$addr8 */
                {8'h31,8'h80,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,sfr.0,$addr8 */
                {8'h31,8'h90,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,sfr.1,$addr8 */
                {8'h31,8'ha0,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,sfr.2,$addr8 */
                {8'h31,8'hb0,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,sfr.3,$addr8 */
                {8'h31,8'hc0,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,sfr.4,$addr8 */
                {8'h31,8'hd0,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,sfr.5,$addr8 */
                {8'h31,8'he0,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,sfr.6,$addr8 */
                {8'h31,8'hf0,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,sfr.7,$addr8 */
                {8'h31,8'h01,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,A.0,$addr8 */
                {8'h31,8'h11,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,A.1,$addr8 */
                {8'h31,8'h21,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,A.2,$addr8 */
                {8'h31,8'h31,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,A.3,$addr8 */
                {8'h31,8'h41,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,A.4,$addr8 */
                {8'h31,8'h51,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,A.5,$addr8 */
                {8'h31,8'h61,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,A.6,$addr8 */
                {8'h31,8'h71,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,A.7,$addr8 */
                {8'h31,8'h81,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,[HL].0,$addr8 */
                {8'h31,8'h91,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,[HL].1,$addr8 */
                {8'h31,8'ha1,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,[HL].2,$addr8 */
                {8'h31,8'hb1,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,[HL].3,$addr8 */
                {8'h31,8'hc1,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,[HL].4,$addr8 */
                {8'h31,8'hd1,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,[HL].5,$addr8 */
                {8'h31,8'he1,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,[HL].6,$addr8 */
                {8'h31,8'hf1,2'b01} : dec_stage_cut_brtf = 1'b1;  /* BTCLR,[HL].7,$addr8 */
                default : dec_stage_cut_brtf = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_stage_cut_ifbr;
    reg    dec_stage_cut_ifbr;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_stage_cut_ifbr = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hdc,8'hxx,2'bx0} : dec_stage_cut_ifbr = 1'b1;  /* BC,,$addr8 */
                {8'hde,8'hxx,2'bx0} : dec_stage_cut_ifbr = 1'b1;  /* BNC,,$addr8 */
                {8'hdd,8'hxx,2'bx0} : dec_stage_cut_ifbr = 1'b1;  /* BZ,,$addr8 */
                {8'hdf,8'hxx,2'bx0} : dec_stage_cut_ifbr = 1'b1;  /* BNZ,,$addr8 */
                {8'h61,8'hc3,2'bx0} : dec_stage_cut_ifbr = 1'b1;  /* BH,,$addr8 */
                {8'h61,8'hd3,2'bx0} : dec_stage_cut_ifbr = 1'b1;  /* BNH,,$addr8 */
                default : dec_stage_cut_ifbr = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ifbr_not;
    reg    dec_ifbr_not;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ifbr_not = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hde,8'hxx,2'bx0} : dec_ifbr_not = 1'b1;  /* BNC,,$addr8 */
                {8'hdf,8'hxx,2'bx0} : dec_ifbr_not = 1'b1;  /* BNZ,,$addr8 */
                {8'h61,8'hd3,2'bx0} : dec_ifbr_not = 1'b1;  /* BNH,,$addr8 */
                default : dec_ifbr_not = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ifbr_zero;
    reg    dec_ifbr_zero;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ifbr_zero = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'hdd,8'hxx,2'bx0} : dec_ifbr_zero = 1'b1;  /* BZ,,$addr8 */
                {8'hdf,8'hxx,2'bx0} : dec_ifbr_zero = 1'b1;  /* BNZ,,$addr8 */
                default : dec_ifbr_zero = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_ifbr_ht;
    reg    dec_ifbr_ht;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_ifbr_ht = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hc3,2'bx0} : dec_ifbr_ht = 1'b1;  /* BH,,$addr8 */
                {8'h61,8'hd3,2'bx0} : dec_ifbr_ht = 1'b1;  /* BNH,,$addr8 */
                default : dec_ifbr_ht = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_mem_stage_op2;
    reg    dec_mem_stage_op2;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_mem_stage_op2 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1})  
                {8'hcd,8'hxx} : dec_mem_stage_op2 = 1'b1;  /* MOV,saddr,#byte */
                {8'hce,8'hxx} : dec_mem_stage_op2 = 1'b1;  /* MOV,sfr,#byte */
                {8'hca,8'hxx} : dec_mem_stage_op2 = 1'b1;  /* MOV,[DE+byte],#byte */
                {8'hcc,8'hxx} : dec_mem_stage_op2 = 1'b1;  /* MOV,[HL+byte],#byte */
                {8'hc8,8'hxx} : dec_mem_stage_op2 = 1'b1;  /* MOV,[SP+byte],#byte */
                {8'h0a,8'hxx} : dec_mem_stage_op2 = 1'b1;  /* ADD,saddr,#byte */
                {8'h1a,8'hxx} : dec_mem_stage_op2 = 1'b1;  /* ADDC,saddr,#byte */
                {8'h2a,8'hxx} : dec_mem_stage_op2 = 1'b1;  /* SUB,saddr,#byte */
                {8'h3a,8'hxx} : dec_mem_stage_op2 = 1'b1;  /* SUBC,saddr,#byte */
                {8'h5a,8'hxx} : dec_mem_stage_op2 = 1'b1;  /* AND,saddr,#byte */
                {8'h6a,8'hxx} : dec_mem_stage_op2 = 1'b1;  /* OR,saddr,#byte */
                {8'h7a,8'hxx} : dec_mem_stage_op2 = 1'b1;  /* XOR,saddr,#byte */
                {8'h4a,8'hxx} : dec_mem_stage_op2 = 1'b1;  /* CMP,saddr,#byte */
                default : dec_mem_stage_op2 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_mem_stage_op3;
    reg    dec_mem_stage_op3;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_mem_stage_op3 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1})  
                {8'hcf,8'hxx} : dec_mem_stage_op3 = 1'b1;  /* MOV,!addr16,#byte */
                {8'h19,8'hxx} : dec_mem_stage_op3 = 1'b1;  /* MOV,word[B],#byte */
                {8'h38,8'hxx} : dec_mem_stage_op3 = 1'b1;  /* MOV,word[C],#byte */
                {8'h39,8'hxx} : dec_mem_stage_op3 = 1'b1;  /* MOV,word[BC],#byte */
                {8'h40,8'hxx} : dec_mem_stage_op3 = 1'b1;  /* CMP,!addr16,#byte */
                default : dec_mem_stage_op3 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_mem_stage_op23;
    reg    dec_mem_stage_op23;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_mem_stage_op23 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1})  
                {8'hc9,8'hxx} : dec_mem_stage_op23 = 1'b1;  /* MOVW,saddrp,#word */
                {8'hcb,8'hxx} : dec_mem_stage_op23 = 1'b1;  /* MOVW,sfrp,#word */
                default : dec_mem_stage_op23 = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_set_buf_retadr;
    reg    dec_set_buf_retadr;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_set_buf_retadr = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hca,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALL,,AX */
                {8'h61,8'hda,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALL,,BC */
                {8'h61,8'hea,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALL,,DE */
                {8'h61,8'hfa,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALL,,HL */
                {8'hfe,8'hxx,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALL,,$!addr16 */
                {8'hfd,8'hxx,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALL,,!addr16 */
                {8'hfc,8'hxx,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALL,,!!addr20 */
                {8'h61,8'h84,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[0080h] */
                {8'h61,8'h94,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[0082h] */
                {8'h61,8'ha4,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[0084h] */
                {8'h61,8'hb4,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[0086h] */
                {8'h61,8'hc4,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[0088h] */
                {8'h61,8'hd4,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[008Ah] */
                {8'h61,8'he4,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[008Ch] */
                {8'h61,8'hf4,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[008Eh] */
                {8'h61,8'h85,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[0090h] */
                {8'h61,8'h95,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[0092h] */
                {8'h61,8'ha5,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[0094h] */
                {8'h61,8'hb5,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[0096h] */
                {8'h61,8'hc5,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[0098h] */
                {8'h61,8'hd5,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[009Ah] */
                {8'h61,8'he5,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[009Ch] */
                {8'h61,8'hf5,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[009Eh] */
                {8'h61,8'h86,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[00A0h] */
                {8'h61,8'h96,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[00A2h] */
                {8'h61,8'ha6,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[00A4h] */
                {8'h61,8'hb6,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[00A6h] */
                {8'h61,8'hc6,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[00A8h] */
                {8'h61,8'hd6,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[00AAh] */
                {8'h61,8'he6,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[00ACh] */
                {8'h61,8'hf6,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[00AEh] */
                {8'h61,8'h87,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[00B0h] */
                {8'h61,8'h97,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[00B2h] */
                {8'h61,8'ha7,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[00B4h] */
                {8'h61,8'hb7,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[00B6h] */
                {8'h61,8'hc7,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[00B8h] */
                {8'h61,8'hd7,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[00BAh] */
                {8'h61,8'he7,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[00BCh] */
                {8'h61,8'hf7,2'bx0} : dec_set_buf_retadr = 1'b1;  /* CALLT,,[00BEh] */
                {8'h61,8'hcc,2'bx0} : dec_set_buf_retadr = 1'b1;  /* BRK,, */
                {8'hff,8'hxx,2'bx0} : dec_set_buf_retadr = 1'b1;  /* SOFT,,BREAK */
                {8'h61,8'ha1,2'bx0} : dec_set_buf_retadr = 1'b1;  /* SOFT2,,BREAK */
                {8'h61,8'hb1,2'bx0} : dec_set_buf_retadr = 1'b1;  /* SOFT3,,BREAK */
                {8'h61,8'hc1,2'bx0} : dec_set_buf_retadr = 1'b1;  /* SOFT4,,BREAK */
                default : dec_set_buf_retadr = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_set_buf_intr;
    reg    dec_set_buf_intr;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(decout_mask == 1'b1) begin
//            dec_set_buf_intr = 1'b0;
//        end else if(rstvec == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1) begin
            dec_set_buf_intr = 1'b0;
        end else if(ivack == 1'b1) begin
            casex ({stage_adr}) 
                 {2'b00} : dec_set_buf_intr = 1'b1;  /* Interrupt */
                default : dec_set_buf_intr = 1'b0;
            endcase
        end else if(skpack == 1'b1) begin
            dec_set_buf_intr = 1'b0;
        end else begin
            dec_set_buf_intr = 1'b0;
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_skc;
    reg    dec_skc;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_skc = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr}) 
                 {8'h61,8'hc8,2'bxx} : dec_skc = 1'b1;  /* SKC,, */
                default : dec_skc = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_sknc;
    reg    dec_sknc;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_sknc = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr}) 
                 {8'h61,8'hd8,2'bxx} : dec_sknc = 1'b1;  /* SKNC,, */
                default : dec_sknc = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_skz;
    reg    dec_skz;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_skz = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr}) 
                 {8'h61,8'he8,2'bxx} : dec_skz = 1'b1;  /* SKZ,, */
                default : dec_skz = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_sknz;
    reg    dec_sknz;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_sknz = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr}) 
                 {8'h61,8'hf8,2'bxx} : dec_sknz = 1'b1;  /* SKNZ,, */
                default : dec_sknz = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_skh;
    reg    dec_skh;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_skh = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr}) 
                 {8'h61,8'he3,2'bxx} : dec_skh = 1'b1;  /* SKH,, */
                default : dec_skh = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_sknh;
    reg    dec_sknh;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_sknh = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr}) 
                 {8'h61,8'hf3,2'bxx} : dec_sknh = 1'b1;  /* SKNH,, */
                default : dec_sknh = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_prefix;
    reg    dec_prefix;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_prefix = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h11,8'hxx,2'bxx} : dec_prefix = 1'b1;  /* PREFIX,, */
                default : dec_prefix = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_halt;
    reg    dec_halt;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_halt = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hed,2'b01} : dec_halt = 1'b1;  /* HALT,, */
                default : dec_halt = 1'b0;
            endcase
        end
    end

/*------------------------------------------------------------------------------*/
/* Ver2.0  									*/
/*　　デコーダ出力をdecout_maskでマスクする。					*/
/*------------------------------------------------------------------------------*/

    output dec_stop;
    reg    dec_stop;
//    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack or decout_mask) begin
//        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1 || decout_mask == 1'b1) begin
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_stop = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hfd,2'b01} : dec_stop = 1'b1;  /* STOP,, */
                default : dec_stop = 1'b0;
            endcase
        end
    end
    output dec_movs;
    reg    dec_movs, dec_movs_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_movs_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hce,2'bxx} : dec_movs_adrstage = 1'b1;  /* MOVS,[HL+byte],X */
                default : dec_movs_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_movs <= 1'b0;
        else if(cpuen) dec_movs <= dec_movs_adrstage;
    end
    output dec_cmps;
    reg    dec_cmps, dec_cmps_adrstage;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_cmps_adrstage = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'hde,2'bxx} : dec_cmps_adrstage = 1'b1;  /* CMPS,X,[HL+byte] */
                default : dec_cmps_adrstage = 1'b0;
            endcase
        end
    end
    //synopsys async_set_reset "resb"
    always @(posedge baseck or negedge resb) begin
        if (!resb) dec_cmps <= 1'b0;
        else if(cpuen) dec_cmps <= dec_cmps_adrstage;
    end

// for EVA
    output dec_alt1;
    reg    dec_alt1;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alt1 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'h81,2'bxx} : dec_alt1 = 1'b1;  /* ALT1,, */
                default : dec_alt1 = 1'b0;
            endcase
        end
    end
    output dec_alt2;
    reg    dec_alt2;
    always @(ID_stage0 or ID_stage1 or stage_adr or ivack or rstvec or skpack) begin
        if(rstvec == 1'b1 || ivack == 1'b1 || skpack == 1'b1) begin
            dec_alt2 = 1'b0;
        end else begin
            casex ({ID_stage0,ID_stage1,stage_adr})  
                {8'h61,8'h91,2'bxx} : dec_alt2 = 1'b1;  /* ALT2,, */
                default : dec_alt2 = 1'b0;
            endcase
        end
    end
//

endmodule

/*--------------------------------------------------------------------------------------*/
/* Ver2.0  										*/
/*  デコーダの出力をマスクするディレイ素子。						*/
//　TBDLY2X2は↑1.8502ns, ↓1.5337ns。デコーダの遅延が約7nsであるため、５個を使用する。	*/
//　遅延値はデコーダの出力遅延＜ディレイ素子となる事が条件。				*/
//　ただし遅延をオーバーしても電流が増えるだけのため、9割程度のデコーダ出力をカバー	*/
//　すればよく、特殊な制約は付けないでDont tuchだけとする。				*/
//　この遅延はSLFLASHの経路でスピードネックパスとなるため、最高速を選択時(DECDYCUT=1)の	*/
//　時はこの回路は動かないようにする。							*/
//　プロセスが変わった際は上記条件を元に調整すること。					*/
/*--------------------------------------------------------------------------------------*/
/* Ver3.0 ディレイによるヒゲ防止回路の対策を見直す(CPUv1.5と等価に戻す)		*/
/*------------------------------------------------------------------------------*/
//module QLK0RCPUEVA0V3_DEC_DLY(out, in);
//	input in;
//	output out;
// // for EVA
// //	wire net1, net2, net3, net4;
// //	TBDLY2X2 dly1 ( .N01(net1), .H01(in)   );
// //	TBDLY2X2 dly2 ( .N01(net2), .H01(net1) );
// //	TBDLY2X2 dly3 ( .N01(net3), .H01(net2) );
// //	TBDLY2X2 dly4 ( .N01(net4), .H01(net3) );
// //	TBDLY2X2 dly5 ( .N01(out),  .H01(net4) );
//
// // for EVA
//        assign out = in ;
//
//
//endmodule

