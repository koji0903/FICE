/**********************************************************************/
/*                                                                    */
/* K0R series PORT bit macro                                          */
/*                                                                    */
/*   [ port bit : 入出力ポート ]                                      */
/*                                                                    */
/*    PL,PM,PU あり                                                   */
/*    兼用出力機能 あり                                               */
/*    兼用入力機能 あり                                               */
/*                                                                    */
/*    Module   : QPK0RBCBB010V1                                       */
/*    Date     : 2009/11/27                                           */
/*    Revision : 1.00                                                 */
/*    Designer : S.Nakata                                             */
/*    Note     :                                                      */
/*                                                                    */
/**********************************************************************/
/*                                                                    */
/* <<入力信号>>                                         <<接続先>>    */
/* PCLKRW      : 周辺マクロ用 BASECLK                   CG            */
/* PRESETZ     : 周辺マクロ用リセット信号               RESETCTL      */
/* PWDATA      : 入力データバス                         APB Bridge    */
/* RE_PORT     : PORTリードイネーブル信号               port control  */
/* WE_PL       : PLレジスタライトイネーブル信号         port control  */
/* WE_PM       : PMレジスタライトイネーブル信号         port control  */
/* WE_PU       : PUレジスタライトイネーブル信号         port control  */
/* SEL_PL      : PL Register select 信号                port control  */
/* SEL_PM      : PM Register select 信号                port control  */
/* SEL_PU      : PU Register select 信号                port control  */
/* OPEN_BUF    : 入力バッファイネーブル信号             port control  */
/* DIN         : ポートレベル入力信号                   buffer        */
/* EXOUTA      : 兼用機能出力信号                                     */
/*                                                                    */
/* SCANMODE    : SCANテストモード信号                   MODECTL       */
/* TESDBT      : BTモード信号                           MODECTL       */
/* OPTOPLRD    : OPTOPLRDモード信号                     MODECTL       */
/* TESENI      : テストモード ENI制御信号               MODECTL       */
/* TESENO      : テストモード ENO制御信号               MODECTL       */
/* TDSEL       : テストモード DOUT制御信号              MODECTL       */
/* TDOUT       : テストモード DOUT信号                  MODECTL       */
/* TDIN        : テストモード DIN信号                   MODECTL       */
/*                                                                    */
/* <<出力信号>>                                         <<接続先>>    */
/* PRDATA      : 出力データバス                         APB Bridge    */
/* PUON        : プルアップ抵抗制御信号                 buffer        */
/* ENO         : 出力イネーブル信号                     buffer        */
/* ENI         : 入力イネーブル信号                     buffer        */
/* DOUT        : 出力データ信号                         buffer        */
/* TOOL0       : 兼用機能入力信号                                     */
/*                                                                    */
/*                                                                    */
/**********************************************************************/

module QPK0RBCBB010V1 ( PCLKRW   , PRESETZ  , PWDATA   , RE_PORT  ,
                        WE_PL    , WE_PM    , WE_PU    , 
			SEL_PL   , SEL_PM   , SEL_PU   ,
                        OPEN_BUF , DIN      , EXOUTA   ,
			TSELOREG , TSELIRES , TTEMP    ,
			SCANMODE , TESDBT   , OPTOPLRD ,
			OCDMOD   , SPRGMOD  , GOFIRM   ,
                        TESENI   , TESENO   , TDSEL    , TDOUT    ,
                        PRDATA   , PUON     , ENO      , ENI      , DOUT     ,
			SLTRXTX  , TOOL0    , TDIN     , din_exor ) ;


	input		PCLKRW   , PRESETZ  , PWDATA   , RE_PORT  ;
	input		WE_PL    , WE_PM    , WE_PU    ;
	input		SEL_PL   , SEL_PM   , SEL_PU   ;
	input		OPEN_BUF , DIN      , EXOUTA   ;
	input		SCANMODE , TESDBT   , OPTOPLRD ;
	input		TSELOREG , TSELIRES , TTEMP    ;
        input           TESENI   , TESENO   , TDSEL    , TDOUT    ;
	input		OCDMOD   , SPRGMOD  , GOFIRM   ;
	input		SLTRXTX  ;

	output		PRDATA   , PUON     , ENO      , ENI      , DOUT     ;
	output		TOOL0    , TDIN     ;
        output          din_exor ;

	reg		PL       , PM       , PU       , READ_DATA ;
	reg		ENO      , ENO_pre  , PUON     , DIN_s    , RDPT     ;

	wire		PUON_pre , ENI      , DOUT_pre ;
        wire            ocd_en   ;
	wire		PRDATA   ;
	wire		DOUT     , TOOL0    , DIN      ;
        wire            TDIN     ;
        wire            din_exor ;
	wire		oregmode ;

//=====  port register write access  =====

        //      synopsys async_set_reset "PRESETZ"
	always @ ( posedge PCLKRW or negedge PRESETZ ) begin
	    if ( ! PRESETZ )
                PL <= 1'b0 ;
	    else if ( WE_PL )
                PL <= PWDATA ;
            else
                PL <= PL ;
        end

        //      synopsys async_set_reset "PRESETZ"
	always @ ( posedge PCLKRW or negedge PRESETZ ) begin
	    if ( ! PRESETZ ) 
                PM <= 1'b1 ;
	    else if ( WE_PM )
                PM <= PWDATA ;
            else
                PM <= PM ;
        end

        //      synopsys async_set_reset "PRESETZ"
	always @ ( posedge PCLKRW or negedge PRESETZ ) begin
	    if ( ! PRESETZ ) 
                PU <= 1'b1 ;    //--------------------------------
	    else if ( WE_PU )
                PU <= PWDATA ;
            else
                PU <= PU ;
        end

//=====  port register read access  =====

        always @ ( PM or OPTOPLRD or DIN_s or PL ) begin
            case ( { PM , OPTOPLRD } )  // synopsys parallel_case
                2'b00   : RDPT  =  PL ;         // port output mode
                2'b10   : RDPT  =  DIN_s ;      // port input mode
                2'b01   : RDPT  =  DIN_s ;      // optoplrd mode
                2'b11   : RDPT  =  DIN_s ;      // optoplrd mode
            endcase
        end

	always @ ( SEL_PL or SEL_PM or SEL_PU or RDPT or PM or PU ) begin
	    case ( { SEL_PL , SEL_PM , SEL_PU } )	// synopsys parallel_case
		3'b001    : READ_DATA = PU ;
		3'b010    : READ_DATA = PM ;
		3'b100    : READ_DATA = RDPT ;
		default   : READ_DATA = 1'b0 ;
	    endcase
	end

	assign PRDATA = READ_DATA & RE_PORT ;

//=====  port function  =====

        assign ocd_en   = OCDMOD | SPRGMOD | GOFIRM ;

	assign DOUT_pre = ( ocd_en )? EXOUTA : PL ;

	always @ ( ocd_en or SLTRXTX or EXOUTA or PM ) begin
	    casex ( { ocd_en , SLTRXTX } )       // synopsys parallel_case
		2'b0x : ENO_pre = ~PM ;
		2'b10 : ENO_pre = ~EXOUTA ;
		2'b11 : ENO_pre = 1'b0 ;
	    endcase
	end

	assign oregmode = TSELOREG | TSELIRES | TTEMP ;
	assign ENI      = ~((~(~SCANMODE | TESDBT) | oregmode) & ~TESENI) ;

	assign PUON_pre	= PU & PM ;
	assign TOOL0	= DIN_s ;
        assign TDIN     = DIN & TESENI ;
        assign DOUT     = ( TDSEL )? TDOUT : DOUT_pre ;

	assign din_exor = PUON_pre ^ ENO_pre ^ DOUT_pre ;


        always@ ( SCANMODE or TESDBT or TESENO or ENO_pre ) begin
            casex ( { SCANMODE, TESDBT, TESENO } )      // synopsys parallel_case
                3'b000  : ENO = ENO_pre ;       // user mode
                3'b100  : ENO = 1'b0 ;          // scan mode
                3'b110  : ENO = 1'b1 ;          // bt mode
                3'bxx1  : ENO = 1'b1 ;          // test mode
                default : ENO = ENO_pre ;
            endcase
        end

/*        always@ ( SCANMODE or TESDBT or TESENI or ENI_pre ) begin
            casex ( { SCANMODE, TESDBT, TESENI } )    // synopsys parallel_case
                3'b000  : ENI = ENI_pre ;       // user mode
                3'b100  : ENI = 1'b0 ;          // scan mode
                3'b110  : ENI = 1'b1 ;          // bt mode
                3'bxx1  : ENI = 1'b1 ;          // test mode
                default : ENI = ENI_pre ;
            endcase
        end
*/
        always@ ( SCANMODE or PUON_pre ) begin
            case ( SCANMODE )			// synopsys parallel_case
                1'b0    : PUON = PUON_pre ;     // user mode
                1'b1    : PUON = 1'b0 ;         // scan/bt mode
            endcase
        end

        always@ ( SCANMODE or TESDBT or DIN or din_exor ) begin
            case ( { SCANMODE, TESDBT } )       // synopsys parallel_case
                2'b00   : DIN_s = DIN ;         // user mode
                2'b10   : DIN_s = din_exor ;    // scan mode
                2'b11   : DIN_s = DIN ;         // bt mode
                default : DIN_s = DIN ;
            endcase
        end

endmodule
